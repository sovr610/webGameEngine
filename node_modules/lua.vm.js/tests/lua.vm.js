
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
var fileData0 = [];
fileData0.push.apply(fileData0, [45, 45, 32, 77, 97, 107, 101, 32, 119, 105, 110, 100, 111, 119, 32, 111, 98, 106, 101, 99, 116, 32, 97, 32, 103, 108, 111, 98, 97, 108, 10, 119, 105, 110, 100, 111, 119, 32, 61, 32, 106, 115, 46, 103, 108, 111, 98, 97, 108, 59, 10, 10, 100, 111, 32, 45, 45, 32, 67, 114, 101, 97, 116, 101, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 32, 97, 110, 100, 32, 106, 115, 46, 112, 97, 105, 114, 115, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 32, 97, 116, 116, 97, 99, 104, 32, 97, 115, 32, 95, 95, 112, 97, 105, 114, 115, 32, 97, 110, 100, 32, 95, 95, 105, 112, 97, 105, 114, 115, 32, 111, 110, 32, 74, 83, 32, 117, 115, 101, 114, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 115, 46, 10, 9, 108, 111, 99, 97, 108, 32, 95, 80, 82, 79, 88, 89, 95, 77, 84, 32, 61, 32, 100, 101, 98, 117, 103, 46, 103, 101, 116, 114, 101, 103, 105, 115, 116, 114, 121, 40, 41, 46, 95, 80, 82, 79, 88, 89, 95, 77, 84, 10, 10, 9, 45, 45, 32, 73, 116, 101, 114, 97, 116, 101, 115, 32, 102, 114, 111, 109, 32, 48, 32, 116, 111, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 46, 108, 101, 110, 103, 116, 104, 45, 49, 10, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 95, 105, 110, 101, 120, 116, 40, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 44, 32, 105, 41, 10, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 9, 9, 105, 102, 32, 105, 32, 62, 61, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 46, 108, 101, 110, 103, 116, 104, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 105, 44, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 91, 105, 93, 10, 9, 101, 110, 100, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 40, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 106, 115, 95, 105, 110, 101, 120, 116, 44, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 44, 32, 45, 49, 10, 9, 101, 110, 100, 10, 9, 95, 80, 82, 79, 88, 89, 95, 77, 84, 46, 95, 95, 105, 112, 97, 105, 114, 115, 32, 61, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 10, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 46, 112, 97, 105, 114, 115, 40, 111, 98, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 107, 101, 121, 115, 32, 61, 32, 106, 115, 46, 103, 108, 111, 98, 97, 108, 46, 79, 98, 106, 101, 99, 116, 58, 103, 101, 116, 79, 119, 110, 80, 114, 111, 112, 101, 114, 116, 121, 78, 97, 109, 101, 115, 40, 111, 98, 41, 32, 45, 45, 32, 83, 104, 111, 117, 108, 100, 32, 116, 104, 105, 115, 32, 98, 101, 32, 79, 98, 106, 101, 99, 116, 46, 107, 101, 121, 115, 63, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 48, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 44, 32, 108, 97, 115, 116, 41, 10, 9, 9, 9, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 107, 101, 121, 115, 91, 105, 93, 10, 9, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 9, 114, 101, 116, 117, 114, 110, 32, 107, 44, 32, 111, 98, 91, 107, 93, 10, 9, 9, 101, 110, 100, 44, 32, 111, 98, 44, 32, 110, 105, 108, 10, 9, 101, 110, 100, 10, 9, 95, 80, 82, 79, 88, 89, 95, 77, 84, 46, 95, 95, 112, 97, 105, 114, 115, 32, 61, 32, 106, 115, 46, 112, 97, 105, 114, 115, 10, 101, 110, 100, 10, 10, 45, 45, 32, 83, 101, 116, 32, 117, 112, 32, 114, 101, 113, 117, 105, 114, 101, 32, 112, 97, 116, 104, 115, 32, 116, 111, 32, 98, 101, 32, 115, 101, 110, 115, 105, 98, 108, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 98, 114, 111, 119, 115, 101, 114, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 117, 114, 108, 41, 10, 9, 108, 111, 99, 97, 108, 32, 120, 104, 114, 32, 61, 32, 106, 115, 46, 110, 101, 119, 40, 119, 105, 110, 100, 111, 119, 46, 88, 77, 76, 72, 116, 116, 112, 82, 101, 113, 117, 101, 115, 116, 41, 10, 9, 120, 104, 114, 58, 111, 112, 101, 110, 40, 34, 71, 69, 84, 34, 44, 32, 117, 114, 108, 44, 32, 102, 97, 108, 115, 101, 41, 32, 45, 45, 32, 83, 121, 110, 99, 104, 114, 111, 110, 111, 117, 115, 10, 9, 45, 45, 32, 78, 101, 101, 100, 32, 116, 111, 32, 112, 99, 97, 108, 108, 32, 120, 104, 114, 58, 115, 101, 110, 100, 40, 41, 44, 32, 97, 115, 32, 105, 116, 32, 99, 97, 110, 32, 116, 104, 114, 111, 119, 32, 97, 32, 78, 101, 116, 119, 111, 114, 107, 69, 114, 114, 111, 114, 32, 105, 102, 32, 67, 79, 82, 83, 32, 102, 97, 105, 108, 115, 10, 9, 108, 111, 99, 97, 108, 32, 111, 107, 44, 32, 101, 114, 114, 32, 61, 32, 112, 99, 97, 108, 108, 40, 120, 104, 114, 46, 115, 101, 110, 100, 44, 32, 120, 104, 114, 41, 10, 9, 105, 102, 32, 110, 111, 116, 32, 111, 107, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 44, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 101, 114, 114, 41, 10, 9, 101, 108, 115, 101, 105, 102, 32, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 32, 126, 61, 32, 50, 48, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 44, 32, 34, 72, 84, 84, 80, 32, 71, 69, 84, 32, 34, 32, 46, 46, 32, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 84, 101, 120, 116, 32, 46, 46, 32, 34, 58, 32, 34, 32, 46, 46, 32, 117, 114, 108, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 108, 111, 97, 100, 40, 120, 104, 114, 46, 114, 101, 115, 112, 111, 110, 115, 101, 84, 101, 120, 116, 44, 32, 117, 114, 108, 41, 10, 101, 110, 100, 10, 112, 97, 99, 107, 97, 103, 101, 46, 112, 97, 116, 104, 32, 61, 32, 34, 34, 10, 112, 97, 99, 107, 97, 103, 101, 46, 99, 112, 97, 116, 104, 32, 61, 32, 34, 34, 10, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 112, 97, 99, 107, 97, 103, 101, 46, 115, 101, 97, 114, 99, 104, 101, 114, 115, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 105, 102, 32, 110, 111, 116, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 109, 97, 116, 99, 104, 40, 34, 47, 34, 41, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 108, 108, 95, 117, 114, 108, 32, 61, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 103, 115, 117, 98, 40, 34, 37, 46, 34, 44, 32, 34, 47, 34, 41, 32, 46, 46, 32, 34, 46, 108, 117, 97, 34, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 102, 117, 108, 108, 95, 117, 114, 108, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 32, 101, 110, 100, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 108, 108, 95, 117, 114, 108, 32, 61, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 103, 115, 117, 98, 40, 34, 37, 46, 34, 44, 32, 34, 47, 34, 41, 32, 46, 46, 32, 34, 47, 105, 110, 105, 116, 46, 108, 117, 97, 34, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 50, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 102, 117, 108, 108, 95, 117, 114, 108, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 32, 101, 110, 100, 10, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 32, 46, 46, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 50, 10, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 112, 97, 99, 107, 97, 103, 101, 46, 115, 101, 97, 114, 99, 104, 101, 114, 115, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 105, 102, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 109, 97, 116, 99, 104, 40, 34, 94, 104, 116, 116, 112, 115, 63, 58, 47, 47, 34, 41, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 32, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 10, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'js.lua', fileData0, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage();

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB;
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module['getMemory'] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;
buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 12608;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,96,127,64,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,111,112,99,111,100,101,115,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,42,116,101,109,112,111,114,97,114,121,41,0,0,0,0,40,42,118,97,114,97,114,103,41,0,0,0,0,0,0,0,61,91,67,93,0,0,0,0,61,63,0,0,0,0,0,0,109,97,105,110,0,0,0,0,76,117,97,0,0,0,0,0,67,0,0,0,0,0,0,0,102,111,114,32,105,116,101,114,97,116,111,114,0,0,0,0,109,101,116,97,109,101,116,104,111,100,0,0,0,0,0,0,117,112,118,97,108,117,101,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,0,0,0,0,0,0,0,99,111,110,99,97,116,101,110,97,116,101,0,0,0,0,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,0,0,103,108,111,98,97,108,0,0,102,105,101,108,100,0,0,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,97,32,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,0,0,0,0,0,0,98,105,110,97,114,121,0,0,116,101,120,116,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,0,0,110,111,32,109,101,115,115,97,103,101,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,0,0,8,6,0,0,208,8,0,0,16,6,0,0,24,6,0,0,32,6,0,0,120,29,0,0,152,16,0,0,40,6,0,0,216,12,0,0,48,6,0,0,56,6,0,0,64,6,0,0,72,6,0,0,160,16,0,0,80,6,0,0,88,6,0,0,96,6,0,0,160,25,0,0,104,6,0,0,144,16,0,0,112,6,0,0,120,6,0,0,128,6,0,0,136,8,0,0,136,6,0,0,144,6,0,0,152,6,0,0,160,6,0,0,168,6,0,0,176,6,0,0,184,6,0,0,200,6,0,0,208,6,0,0,0,0,0,0,39,37,99,39,0,0,0,0,99,104,97,114,40,37,100,41,0,0,0,0,0,0,0,0,39,37,115,39,0,0,0,0,95,69,78,86,0,0,0,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,0,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,0,0,0,0,0,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,88,120,0,0,0,0,0,0,69,101,0,0,0,0,0,0,80,112,0,0,0,0,0,0,43,45,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,37,115,32,110,101,97,114,32,37,115,0,0,0,0,0,0,97,110,100,0,0,0,0,0,100,111,0,0,0,0,0,0,101,108,115,101,0,0,0,0,101,108,115,101,105,102,0,0,102,111,114,0,0,0,0,0,103,111,116,111,0,0,0,0,105,102,0,0,0,0,0,0,105,110,0,0,0,0,0,0,108,111,99,97,108,0,0,0,110,111,116,0,0,0,0,0,111,114,0,0,0,0,0,0,114,101,112,101,97,116,0,0,116,104,101,110,0,0,0,0,117,110,116,105,108,0,0,0,119,104,105,108,101,0,0,0,46,46,0,0,0,0,0,0,61,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,60,61,0,0,0,0,0,0,126,61,0,0,0,0,0,0,58,58,0,0,0,0,0,0,60,101,111,102,62,0,0,0,60,110,117,109,98,101,114,62,0,0,0,0,0,0,0,0,60,110,97,109,101,62,0,0,60,115,116,114,105,110,103,62,0,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,0,0,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,110,78,0,0,0,0,0,0,120,88,0,0,0,0,0,0,37,112,0,0,0,0,0,0,37,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,0,0,0,0,0,46,46,46,0,0,0,0,0,91,115,116,114,105,110,103,32,34,0,0,0,0,0,0,0,34,93,0,0,0,0,0,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,98,114,101,97,107,0,0,0,108,97,98,101,108,115,47,103,111,116,111,115,0,0,0,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,0,0,0,0,0,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,67,32,108,101,118,101,108,115,0,0,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,40,102,111,114,32,105,110,100,101,120,41,0,0,0,0,0,40,102,111,114,32,108,105,109,105,116,41,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,0,0,0,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,0,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,0,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,115,101,108,102,0,0,0,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,0,0,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,0,0,0,0,0,160,37,0,0,160,16,0,0,184,12,0,0,192,12,0,0,208,12,0,0,56,44,0,0,32,44,0,0,216,12,0,0,192,12,0,0,232,12,0,0,240,12,0,0,248,12,0,0,232,43,0,0,0,13,0,0,48,40,0,0,120,25,0,0,16,13,0,0,24,13,0,0,32,13,0,0,40,13,0,0,48,13,0,0,56,13,0,0,64,13,0,0,72,13,0,0,80,13,0,0,88,13,0,0,96,13,0,0,104,13,0,0,120,13,0,0,0,0,0,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97,0,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,116,104,114,101,97,100,0,0,112,114,111,116,111,0,0,0,117,112,118,97,108,0,0,0,95,95,110,101,119,105,110,100,101,120,0,0,0,0,0,0,95,95,108,101,110,0,0,0,95,95,101,113,0,0,0,0,95,95,97,100,100,0,0,0,95,95,115,117,98,0,0,0,95,95,109,117,108,0,0,0,95,95,100,105,118,0,0,0,95,95,109,111,100,0,0,0,95,95,112,111,119,0,0,0,95,95,117,110,109,0,0,0,95,95,108,116,0,0,0,0,95,95,108,101,0,0,0,0,95,95,99,111,110,99,97,116,0,0,0,0,0,0,0,0,95,95,99,97,108,108,0,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,0,0,25,147,13,10,26,10,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,110,111,116,32,97,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,0,0,0,0,99,111,114,114,117,112,116,101,100,0,0,0,0,0,0,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,0,0,0,0,0,0,0,105,110,100,101,120,0,0,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,0,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,0,0,0,0,0,0,0,10,9,46,46,46,0,0,0,83,108,110,116,0,0,0,0,10,9,37,115,58,0,0,0,37,100,58,0,0,0,0,0,32,105,110,32,0,0,0,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,109,97,105,110,32,99,104,117,110,107,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,0,0,0,0,0,0,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,0,0,109,101,116,104,111,100,0,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,0,0,83,108,0,0,0,0,0,0,37,115,58,37,100,58,32,0,37,115,58,32,37,115,0,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,0,0,0,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,61,115,116,100,105,110,0,0,64,37,115,0,0,0,0,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,101,111,112,101,110,0,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,0,0,116,114,117,101,0,0,0,0,102,97,108,115,101,0,0,0,110,105,108,0,0,0,0,0,37,115,58,32,37,112,0,0,110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0,0,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,0,0,98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0,0,0,0,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,0,0,0,0,0,0,152,18,0,0,18,0,0,0,160,18,0,0,19,0,0,0,176,18,0,0,20,0,0,0,184,18,0,0,21,0,0,0,160,24,0,0,22,0,0,0,192,18,0,0,23,0,0,0,200,18,0,0,24,0,0,0,216,18,0,0,25,0,0,0,224,18,0,0,25,0,0,0,240,18,0,0,26,0,0,0,248,18,0,0,27,0,0,0,0,19,0,0,28,0,0,0,8,19,0,0,29,0,0,0,16,19,0,0,30,0,0,0,32,19,0,0,31,0,0,0,40,19,0,0,32,0,0,0,48,19,0,0,33,0,0,0,56,19,0,0,34,0,0,0,8,25,0,0,35,0,0,0,64,19,0,0,36,0,0,0,80,19,0,0,37,0,0,0,32,30,0,0,38,0,0,0,96,19,0,0,39,0,0,0,0,0,0,0,0,0,0,0,76,117,97,32,53,46,50,0,95,86,69,82,83,73,79,78,0,0,0,0,0,0,0,0,97,115,115,101,114,116,0,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,0,100,111,102,105,108,101,0,0,101,114,114,111,114,0,0,0,105,112,97,105,114,115,0,0,108,111,97,100,102,105,108,101,0,0,0,0,0,0,0,0,108,111,97,100,0,0,0,0,108,111,97,100,115,116,114,105,110,103,0,0,0,0,0,0,110,101,120,116,0,0,0,0,112,97,105,114,115,0,0,0,112,99,97,108,108,0,0,0,112,114,105,110,116,0,0,0,114,97,119,101,113,117,97,108,0,0,0,0,0,0,0,0,114,97,119,108,101,110,0,0,114,97,119,103,101,116,0,0,114,97,119,115,101,116,0,0,115,101,108,101,99,116,0,0,116,111,110,117,109,98,101,114,0,0,0,0,0,0,0,0,116,111,115,116,114,105,110,103,0,0,0,0,0,0,0,0,120,112,99,97,108,108,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,32,12,10,13,9,11,0,0,95,95,109,101,116,97,116,97,98,108,101,0,0,0,0,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,0,0,0,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,0,0,0,0,0,95,95,112,97,105,114,115,0,98,116,0,0,0,0,0,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,0,0,0,95,95,105,112,97,105,114,115,0,0,0,0,0,0,0,0,99,111,108,108,101,99,116,0,32,21,0,0,40,21,0,0,184,20,0,0,168,25,0,0,48,21,0,0,56,21,0,0,72,21,0,0,88,21,0,0,104,21,0,0,120,21,0,0,136,21,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,115,116,111,112,0,0,0,0,114,101,115,116,97,114,116,0,115,116,101,112,0,0,0,0,115,101,116,112,97,117,115,101,0,0,0,0,0,0,0,0,115,101,116,115,116,101,112,109,117,108,0,0,0,0,0,0,115,101,116,109,97,106,111,114,105,110,99,0,0,0,0,0,105,115,114,117,110,110,105,110,103,0,0,0,0,0,0,0,103,101,110,101,114,97,116,105,111,110,97,108,0,0,0,0,105,110,99,114,101,109,101,110,116,97,108,0,0,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,0,0,0,0,0,0,24,22,0,0,40,0,0,0,32,22,0,0,41,0,0,0,40,22,0,0,42,0,0,0,48,22,0,0,43,0,0,0,56,22,0,0,44,0,0,0,64,22,0,0,45,0,0,0,72,22,0,0,46,0,0,0,80,22,0,0,47,0,0,0,88,22,0,0,48,0,0,0,96,22,0,0,49,0,0,0,104,22,0,0,50,0,0,0,112,22,0,0,51,0,0,0,0,0,0,0,0,0,0,0,97,114,115,104,105,102,116,0,98,97,110,100,0,0,0,0,98,110,111,116,0,0,0,0,98,111,114,0,0,0,0,0,98,120,111,114,0,0,0,0,98,116,101,115,116,0,0,0,101,120,116,114,97,99,116,0,108,114,111,116,97,116,101,0,108,115,104,105,102,116,0,0,114,101,112,108,97,99,101,0,114,114,111,116,97,116,101,0,114,115,104,105,102,116,0,0,102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0,0,0,0,0,0,0,119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,0,116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0,0,0,0,0,0,16,23,0,0,52,0,0,0,24,23,0,0,53,0,0,0,32,23,0,0,54,0,0,0,40,23,0,0,55,0,0,0,48,23,0,0,56,0,0,0,56,23,0,0,57,0,0,0,0,0,0,0,0,0,0,0,99,114,101,97,116,101,0,0,114,101,115,117,109,101,0,0,114,117,110,110,105,110,103,0,115,116,97,116,117,115,0,0,119,114,97,112,0,0,0,0,121,105,101,108,100,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,0,0,99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,115,117,115,112,101,110,100,101,100,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,100,101,97,100,0,0,0,0,80,44,0,0,58,0,0,0,96,24,0,0,59,0,0,0,112,24,0,0,60,0,0,0,120,24,0,0,61,0,0,0,128,24,0,0,62,0,0,0,144,24,0,0,63,0,0,0,160,24,0,0,64,0,0,0,176,24,0,0,65,0,0,0,192,24,0,0,66,0,0,0,208,24,0,0,67,0,0,0,224,24,0,0,68,0,0,0,240,24,0,0,69,0,0,0,248,24,0,0,70,0,0,0,8,25,0,0,71,0,0,0,24,25,0,0,72,0,0,0,40,25,0,0,73,0,0,0,0,0,0,0,0,0,0,0,103,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,103,101,116,104,111,111,107,0,103,101,116,105,110,102,111,0,103,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,103,101,116,114,101,103,105,115,116,114,121,0,0,0,0,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,103,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,117,112,118,97,108,117,101,106,111,105,110,0,0,0,0,0,117,112,118,97,108,117,101,105,100,0,0,0,0,0,0,0,115,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,115,101,116,104,111,111,107,0,115,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,115,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,116,114,97,99,101,98,97,99,107,0,0,0,0,0,0,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,95,72,75,69,89,0,0,0,107,0,0,0,0,0,0,0,95,95,109,111,100,101,0,0,152,25,0,0,160,25,0,0,32,29,0,0,168,25,0,0,176,25,0,0,0,0,0,0,99,97,108,108,0,0,0,0,114,101,116,117,114,110,0,0,99,111,117,110,116,0,0,0,116,97,105,108,32,99,97,108,108,0,0,0,0,0,0,0,102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,0,0,0,0,0,62,117,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,0,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,102,108,110,83,116,117,0,0,62,37,115,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,115,111,117,114,99,101,0,0,115,104,111,114,116,95,115,114,99,0,0,0,0,0,0,0,108,105,110,101,100,101,102,105,110,101,100,0,0,0,0,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,119,104,97,116,0,0,0,0,99,117,114,114,101,110,116,108,105,110,101,0,0,0,0,0,110,117,112,115,0,0,0,0,110,112,97,114,97,109,115,0,105,115,118,97,114,97,114,103,0,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,110,97,109,101,119,104,97,116,0,0,0,0,0,0,0,0,105,115,116,97,105,108,99,97,108,108,0,0,0,0,0,0,97,99,116,105,118,101,108,105,110,101,115,0,0,0,0,0,102,117,110,99,0,0,0,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,0,0,108,117,97,95,100,101,98,117,103,62,32,0,0,0,0,0,99,111,110,116,10,0,0,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,96,28,0,0,74,0,0,0,104,28,0,0,75,0,0,0,248,29,0,0,76,0,0,0,112,28,0,0,77,0,0,0,0,30,0,0,78,0,0,0,8,30,0,0,79,0,0,0,16,30,0,0,80,0,0,0,120,28,0,0,81,0,0,0,24,30,0,0,82,0,0,0,32,30,0,0,83,0,0,0,144,28,0,0,84,0,0,0,0,0,0,0,0,0,0,0,70,73,76,69,42,0,0,0,96,28,0,0,74,0,0,0,104,28,0,0,85,0,0,0,112,28,0,0,86,0,0,0,120,28,0,0,87,0,0,0,128,28,0,0,88,0,0,0,136,28,0,0,89,0,0,0,144,28,0,0,90,0,0,0,48,40,0,0,91,0,0,0,152,28,0,0,92,0,0,0,0,0,0,0,0,0,0,0,95,73,79,95,105,110,112,117,116,0,0,0,0,0,0,0,115,116,100,105,110,0,0,0,95,73,79,95,111,117,116,112,117,116,0,0,0,0,0,0,115,116,100,111,117,116,0,0,115,116,100,101,114,114,0,0,99,97,110,110,111,116,32,99,108,111,115,101,32,115,116,97,110,100,97,114,100,32,102,105,108,101,0,0,0,0,0,0,99,108,111,115,101,0,0,0,102,108,117,115,104,0,0,0,108,105,110,101,115,0,0,0,114,101,97,100,0,0,0,0,115,101,101,107,0,0,0,0,115,101,116,118,98,117,102,0,119,114,105,116,101,0,0,0,95,95,116,111,115,116,114,105,110,103,0,0,0,0,0,0,102,105,108,101,32,40,99,108,111,115,101,100,41,0,0,0,102,105,108,101,32,40,37,112,41,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,117,115,101,32,97,32,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,37,46,49,52,103,0,0,0,16,29,0,0,24,29,0,0,32,29,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,110,111,0,0,0,0,0,0,102,117,108,108,0,0,0,0,108,105,110,101,0,0,0,0,99,117,114,0,0,0,0,0,112,29,0,0,40,29,0,0,120,29,0,0,0,0,0,0,110,111,116,32,97,110,32,105,110,116,101,103,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,115,101,116,0,0,0,0,0,101,110,100,0,0,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,0,37,108,102,0,0,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,0,0,116,111,111,32,109,97,110,121,32,111,112,116,105,111,110,115,0,0,0,0,0,0,0,0,102,105,108,101,32,105,115,32,97,108,114,101,97,100,121,32,99,108,111,115,101,100,0,0,37,115,0,0,0,0,0,0,105,110,112,117,116,0,0,0,111,112,101,110,0,0,0,0,111,117,116,112,117,116,0,0,112,111,112,101,110,0,0,0,116,109,112,102,105,108,101,0,116,121,112,101,0,0,0,0,115,116,97,110,100,97,114,100,32,37,115,32,102,105,108,101,32,105,115,32,99,108,111,115,101,100,0,0,0,0,0,0,99,108,111,115,101,100,32,102,105,108,101,0,0,0,0,0,102,105,108,101,0,0,0,0,39,112,111,112,101,110,39,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,119,0,0,0,0,0,0,0,99,97,110,110,111,116,32,111,112,101,110,32,102,105,108,101,32,39,37,115,39,32,40,37,115,41,0,0,0,0,0,0,114,119,97,0,0,0,0,0,105,110,118,97,108,105,100,32,109,111,100,101,0,0,0,0,176,31,0,0,93,0,0,0,184,31,0,0,94,0,0,0,192,31,0,0,95,0,0,0,200,31,0,0,96,0,0,0,208,31,0,0,97,0,0,0,216,31,0,0,98,0,0,0,224,31,0,0,99,0,0,0,232,31,0,0,100,0,0,0,240,31,0,0,101,0,0,0,248,31,0,0,102,0,0,0,0,32,0,0,103,0,0,0,8,32,0,0,104,0,0,0,16,32,0,0,105,0,0,0,24,32,0,0,106,0,0,0,32,32,0,0,107,0,0,0,40,32,0,0,108,0,0,0,48,32,0,0,109,0,0,0,184,33,0,0,110,0,0,0,56,32,0,0,111,0,0,0,64,32,0,0,112,0,0,0,72,32,0,0,113,0,0,0,80,32,0,0,114,0,0,0,88,32,0,0,115,0,0,0,104,32,0,0,116,0,0,0,112,32,0,0,117,0,0,0,120,32,0,0,118,0,0,0,128,32,0,0,119,0,0,0,136,32,0,0,120,0,0,0,0,0,0,0,0,0,0,0,112,105,0,0,0,0,0,0,104,117,103,101,0,0,0,0,97,98,115,0,0,0,0,0,97,99,111,115,0,0,0,0,97,115,105,110,0,0,0,0,97,116,97,110,50,0,0,0,97,116,97,110,0,0,0,0,99,101,105,108,0,0,0,0,99,111,115,104,0,0,0,0,99,111,115,0,0,0,0,0,100,101,103,0,0,0,0,0,101,120,112,0,0,0,0,0,102,108,111,111,114,0,0,0,102,109,111,100,0,0,0,0,102,114,101,120,112,0,0,0,108,100,101,120,112,0,0,0,108,111,103,49,48,0,0,0,108,111,103,0,0,0,0,0,109,97,120,0,0,0,0,0,109,111,100,102,0,0,0,0,112,111,119,0,0,0,0,0,114,97,100,0,0,0,0,0,114,97,110,100,111,109,0,0,114,97,110,100,111,109,115,101,101,100,0,0,0,0,0,0,115,105,110,104,0,0,0,0,115,105,110,0,0,0,0,0,115,113,114,116,0,0,0,0,116,97,110,104,0,0,0,0,116,97,110,0,0,0,0,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,0,40,33,0,0,121,0,0,0,48,33,0,0,122,0,0,0,56,33,0,0,123,0,0,0,72,33,0,0,124,0,0,0,80,33,0,0,125,0,0,0,88,33,0,0,126,0,0,0,72,39,0,0,127,0,0,0,96,33,0,0,128,0,0,0,104,33,0,0,129,0,0,0,120,33,0,0,130,0,0,0,128,33,0,0,131,0,0,0,0,0,0,0,0,0,0,0,99,108,111,99,107,0,0,0,100,97,116,101,0,0,0,0,100,105,102,102,116,105,109,101,0,0,0,0,0,0,0,0,101,120,101,99,117,116,101,0,101,120,105,116,0,0,0,0,103,101,116,101,110,118,0,0,114,101,110,97,109,101,0,0,115,101,116,108,111,99,97,108,101,0,0,0,0,0,0,0,116,105,109,101,0,0,0,0,116,109,112,110,97,109,101,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,0,0,0,115,101,99,0,0,0,0,0,109,105,110,0,0,0,0,0,104,111,117,114,0,0,0,0,100,97,121,0,0,0,0,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,0,0,0,0,0,0,0,109,111,110,116,104,0,0,0,121,101,97,114,0,0,0,0,105,115,100,115,116,0,0,0,97,108,108,0,0,0,0,0,16,34,0,0,80,34,0,0,88,34,0,0,96,34,0,0,112,34,0,0,120,33,0,0,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,99,111,108,108,97,116,101,0,99,116,121,112,101,0,0,0,109,111,110,101,116,97,114,121,0,0,0,0,0,0,0,0,110,117,109,101,114,105,99,0,37,99,0,0,0,0,0,0,42,116,0,0,0,0,0,0,119,100,97,121,0,0,0,0,121,100,97,121,0,0,0,0,97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,0,0,0,0,80,35,0,0,132,0,0,0,88,35,0,0,133,0,0,0,96,35,0,0,134,0,0,0,104,35,0,0,135,0,0,0,112,35,0,0,136,0,0,0,120,35,0,0,137,0,0,0,128,35,0,0,138,0,0,0,136,35,0,0,139,0,0,0,144,35,0,0,140,0,0,0,152,35,0,0,141,0,0,0,160,35,0,0,142,0,0,0,168,35,0,0,143,0,0,0,176,35,0,0,144,0,0,0,184,35,0,0,145,0,0,0,0,0,0,0,0,0,0,0,98,121,116,101,0,0,0,0,99,104,97,114,0,0,0,0,100,117,109,112,0,0,0,0,102,105,110,100,0,0,0,0,102,111,114,109,97,116,0,0,103,109,97,116,99,104,0,0,103,115,117,98,0,0,0,0,108,101,110,0,0,0,0,0,108,111,119,101,114,0,0,0,109,97,116,99,104,0,0,0,114,101,112,0,0,0,0,0,114,101,118,101,114,115,101,0,115,117,98,0,0,0,0,0,117,112,112,101,114,0,0,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,94,36,42,43,63,46,40,91,37,45,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0,0,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,0,0,0,0,0,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,0,0,0,0,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,0,0,0,0,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,45,43,32,35,48,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,0,0,0,110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,0,0,0,92,37,100,0,0,0,0,0,92,37,48,51,100,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,0,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,0,0,40,39,0,0,146,0,0,0,48,39,0,0,147,0,0,0,56,39,0,0,148,0,0,0,64,39,0,0,149,0,0,0,32,39,0,0,150,0,0,0,72,39,0,0,151,0,0,0,80,39,0,0,152,0,0,0,0,0,0,0,0,0,0,0,117,110,112,97,99,107,0,0,99,111,110,99,97,116,0,0,109,97,120,110,0,0,0,0,105,110,115,101,114,116,0,0,112,97,99,107,0,0,0,0,114,101,109,111,118,101,0,0,115,111,114,116,0,0,0,0,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,0,0,0,0,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,0,0,0,0,0,110,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,0,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,0,0,0,95,67,76,73,66,83,0,0,95,95,103,99,0,0,0,0,200,43,0,0,153,0,0,0,208,43,0,0,154,0,0,0,224,43,0,0,155,0,0,0,0,0,0,0,0,0,0,0,108,111,97,100,101,114,115,0,115,101,97,114,99,104,101,114,115,0,0,0,0,0,0,0,112,97,116,104,0,0,0,0,76,85,65,95,80,65,84,72,95,53,95,50,0,0,0,0,76,85,65,95,80,65,84,72,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0,0,0,0,0,0,0,99,112,97,116,104,0,0,0,76,85,65,95,67,80,65,84,72,95,53,95,50,0,0,0,76,85,65,95,67,80,65,84,72,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,0,0,0,47,10,59,10,63,10,33,10,45,10,0,0,0,0,0,0,99,111,110,102,105,103,0,0,95,76,79,65,68,69,68,0,108,111,97,100,101,100,0,0,112,114,101,108,111,97,100,0,224,41,0,0,156,0,0,0,232,41,0,0,157,0,0,0,0,0,0,0,0,0,0,0,109,111,100,117,108,101,0,0,114,101,113,117,105,114,101,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,0,0,0,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,0,0,0,0,0,0,0,95,78,65,77,69,0,0,0,95,77,0,0,0,0,0,0,95,80,65,67,75,65,71,69,0,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0,76,85,65,95,78,79,69,78,86,0,0,0,0,0,0,0,59,59,0,0,0,0,0,0,59,1,59,0,0,0,0,0,1,0,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,0,0,47,0,0,0,0,0,0,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,0,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,0,0,95,0,0,0,0,0,0,0,108,117,97,111,112,101,110,95,37,115,0,0,0,0,0,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,0,0,0,0,0,63,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,0,0,0,0,0,0,0,108,111,97,100,108,105,98,0,115,101,97,114,99,104,112,97,116,104,0,0,0,0,0,0,115,101,101,97,108,108,0,0,95,95,105,110,100,101,120,0,97,98,115,101,110,116,0,0,105,110,105,116,0,0,0,0,95,71,0,0,0,0,0,0,112,97,99,107,97,103,101,0,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,116,97,98,108,101,0,0,0,105,111,0,0,0,0,0,0,111,115,0,0,0,0,0,0,115,116,114,105,110,103,0,0,98,105,116,51,50,0,0,0,109,97,116,104,0,0,0,0,100,101,98,117,103,0,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(lookup.node.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _setlocale(category, locale) {
      if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString('C'), 'i8', ALLOC_NORMAL);
        return _setlocale.ret;
      }
      return 0;
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      return _close(fd);
    }

  
  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      dir = dir || '/tmp';
      var folder = FS.findObject(dir);
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      assert(result.length <= 255);
      writeAsciiToMemory(result, s);
      return s;
    }
  
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }function _tmpfile() {
      // FILE *tmpfile(void);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpfile.html
      // TODO: Delete the created file on closing.
      if (!_tmpfile.mode) {
        _tmpfile.mode = allocate(intArrayFromString('w+'), 'i8', ALLOC_NORMAL);
      }
      return _fopen(_tmpnam(0), _tmpfile.mode);
    }



  var _emscripten_check_longjmp=true;

  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _emscripten_cleanup_setjmp=true;

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;function _realloc(ptr, size) {
      // Very simple, inefficient implementation - if you use a real malloc, best to use
      // a real realloc with it
      if (!size) {
        if (ptr) _free(ptr);
        return 0;
      }
      var ret = _malloc(size);
      if (ptr) {
        _memcpy(ret, ptr, size); // might be some invalid reads
        _free(ptr);
      }
      return ret;
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(winterOffset != guessedOffset);
      } else if ((dst > 0) != (winterOffset != guessedOffset)) {
        var summerOffset = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
        var trueOffset = dst > 0 ? summerOffset : winterOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _emscripten_prep_setjmp=true;

  var _BDtoIHigh=true;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  var _ceil=Math_ceil;


  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          argIndex = Runtime.prepVararg(argIndex, '*');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              argIndex = Runtime.prepVararg(argIndex, '*');
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)>>0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            argIndex = Runtime.prepVararg(argIndex, '*');
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)>>0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)>>0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var quarter = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
            if (format[formatIndex] == 'h') {
              quarter = true;
              formatIndex++;
            }
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return fields; // Stop here.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          argIndex = Runtime.prepVararg(argIndex, '*');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          var base = 10;
          switch (type) {
            case 'X': case 'x':
              base = 16;
            case 'd': case 'u': case 'i':
              if (quarter) {
                HEAP8[((argPtr)>>0)]=parseInt(text, base);
              } else if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, base);
              } else if (longLong) {
                (tempI64 = [parseInt(text, base)>>>0,(tempDouble=parseInt(text, base),(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, base);
              }
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))>>0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }
  
  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }function _fscanf(stream, format, varargs) {
      // int fscanf(FILE *restrict stream, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        return -1;
      }
      var buffer = [];
      function get() {
        var c = _fgetc(stream);
        buffer.push(c);
        return c;
      };
      function unget() {
        _ungetc(buffer.pop(), stream);
      };
      return __scanString(format, get, unget, varargs);
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }


  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      assert((varargs & 3) === 0);
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        argIndex = Runtime.prepVararg(argIndex, type);
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
          argIndex += 8;
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
          argIndex += 8;
        } else {
          assert((argIndex & 3) === 0);
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += 4;
        }
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _tan=Math_tan;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  var _asin=Math_asin;

  function _clearerr(stream) {
      // void clearerr(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/clearerr.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return;
      }
      stream.eof = false;
      stream.error = false;
    }

  var _fabs=Math_abs;

  var _floor=Math_floor;


  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }

  var _sqrt=Math_sqrt;

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  var _sin=Math_sin;


  var _atan=Math_atan;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = Date.UTC(date.getUTCFullYear(), 0, 1, 0, 0, 0, 0);
      var yday = ((date.getTime() - start) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  var _log=Math_log;

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  var _atan2=Math_atan2;

  function _setvbuf(stream, buf, type, size) {
      // int setvbuf(FILE *restrict stream, char *restrict buf, int type, size_t size);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/setvbuf.html
      // TODO: Implement custom buffering.
      return 0;
    }

  var _exp=Math_exp;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }



_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_ii(index,a1) {
    return Runtime.functionPointers[index](a1);
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiii(index,a1,a2,a3) {
    return Runtime.functionPointers[index](a1,a2,a3);
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_vii(index,a1,a2) {
    Runtime.functionPointers[index](a1,a2);
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iii(index,a1,a2) {
    return Runtime.functionPointers[index](a1,a2);
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function jsCall_iiiii(index,a1,a2,a3,a4) {
    return Runtime.functionPointers[index](a1,a2,a3,a4);
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_ii": invoke_ii, "jsCall_ii": jsCall_ii, "invoke_iiii": invoke_iiii, "jsCall_iiii": jsCall_iiii, "invoke_vii": invoke_vii, "jsCall_vii": jsCall_vii, "invoke_iii": invoke_iii, "jsCall_iii": jsCall_iii, "invoke_iiiii": invoke_iiiii, "jsCall_iiiii": jsCall_iiiii, "_fabs": _fabs, "_exp": _exp, "_fread": _fread, "_longjmp": _longjmp, "__addDays": __addDays, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_clock": _clock, "_cos": _cos, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "_gmtime_r": _gmtime_r, "_tmpnam": _tmpnam, "_tmpfile": _tmpfile, "_send": _send, "_setvbuf": _setvbuf, "_atan2": _atan2, "_setlocale": _setlocale, "_strerror_r": _strerror_r, "_gmtime": _gmtime, "_fscanf": _fscanf, "___setErrNo": ___setErrNo, "_unlink": _unlink, "_mktime": _mktime, "_floor": _floor, "_localeconv": _localeconv, "_fopen": _fopen, "_read": _read, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_exit": _exit, "_freopen": _freopen, "_llvm_pow_f64": _llvm_pow_f64, "_lseek": _lseek, "_rename": _rename, "_rmdir": _rmdir, "_asin": _asin, "___buildEnvironment": ___buildEnvironment, "_pwrite": _pwrite, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_remove": _remove, "__scanString": __scanString, "_strftime": _strftime, "_fseek": _fseek, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_recv": _recv, "_tan": _tan, "_fgetc": _fgetc, "__getFloat": __getFloat, "_abort": _abort, "_ceil": _ceil, "_localtime": _localtime, "_sin": _sin, "_acos": _acos, "_difftime": _difftime, "_ungetc": _ungetc, "_system": _system, "_fflush": _fflush, "__reallyNegative": __reallyNegative, "_fileno": _fileno, "__exit": __exit, "__arraySum": __arraySum, "__formatString": __formatString, "_atan": _atan, "_pread": _pread, "_mkport": _mkport, "_getc": _getc, "_feof": _feof, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_clearerr": _clearerr, "_fputc": _fputc, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_fgets": _fgets, "_sqrt": _sqrt, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_ii=env.invoke_ii;
  var jsCall_ii=env.jsCall_ii;
  var invoke_iiii=env.invoke_iiii;
  var jsCall_iiii=env.jsCall_iiii;
  var invoke_vii=env.invoke_vii;
  var jsCall_vii=env.jsCall_vii;
  var invoke_iii=env.invoke_iii;
  var jsCall_iii=env.jsCall_iii;
  var invoke_iiiii=env.invoke_iiiii;
  var jsCall_iiiii=env.jsCall_iiiii;
  var _fabs=env._fabs;
  var _exp=env._exp;
  var _fread=env._fread;
  var _longjmp=env._longjmp;
  var __addDays=env.__addDays;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _clock=env._clock;
  var _cos=env._cos;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var _gmtime_r=env._gmtime_r;
  var _tmpnam=env._tmpnam;
  var _tmpfile=env._tmpfile;
  var _send=env._send;
  var _setvbuf=env._setvbuf;
  var _atan2=env._atan2;
  var _setlocale=env._setlocale;
  var _strerror_r=env._strerror_r;
  var _gmtime=env._gmtime;
  var _fscanf=env._fscanf;
  var ___setErrNo=env.___setErrNo;
  var _unlink=env._unlink;
  var _mktime=env._mktime;
  var _floor=env._floor;
  var _localeconv=env._localeconv;
  var _fopen=env._fopen;
  var _read=env._read;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _exit=env._exit;
  var _freopen=env._freopen;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _lseek=env._lseek;
  var _rename=env._rename;
  var _rmdir=env._rmdir;
  var _asin=env._asin;
  var ___buildEnvironment=env.___buildEnvironment;
  var _pwrite=env._pwrite;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _remove=env._remove;
  var __scanString=env.__scanString;
  var _strftime=env._strftime;
  var _fseek=env._fseek;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _recv=env._recv;
  var _tan=env._tan;
  var _fgetc=env._fgetc;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _ceil=env._ceil;
  var _localtime=env._localtime;
  var _sin=env._sin;
  var _acos=env._acos;
  var _difftime=env._difftime;
  var _ungetc=env._ungetc;
  var _system=env._system;
  var _fflush=env._fflush;
  var __reallyNegative=env.__reallyNegative;
  var _fileno=env._fileno;
  var __exit=env.__exit;
  var __arraySum=env.__arraySum;
  var __formatString=env.__formatString;
  var _atan=env._atan;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _getc=env._getc;
  var _feof=env._feof;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _clearerr=env._clearerr;
  var _fputc=env._fputc;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _fgets=env._fgets;
  var _sqrt=env._sqrt;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i51 = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i61 = 0, $$0$lcssa$i63$i = 0, $$0$lcssa$i68 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i75 = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i85 = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i37$i = 0, $$01$i44 = 0, $$01$i44$i = 0, $$01$i54$i = 0, $$01$i59 = 0, $$01$i61$i = 0, $$01$i66 = 0, $$01$i67$i = 0, $$01$i73 = 0, $$01$i74$i = 0, $$01$i83 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i48 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0, $$12$i119$i = 0, $$12$i134$i = 0, $$12$i134$i$lcssa = 0, $$12$i87$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412184$i = 0, $$5196$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us304$i = 0, $$a$3306$i = 0, $$fl$4 = 0, $$lcssa106 = 0, $$lcssa275$i = 0, $$lcssa450 = 0, $$lcssa451 = 0, $$lcssa455 = 0, $$lcssa457 = 0, $$lcssa458 = 0, $$lcssa459 = 0, $$lcssa460 = 0, $$lcssa461 = 0, $$lcssa463 = 0, $$lcssa464 = 0, $$lcssa470 = 0, $$lcssa474 = 0, $$lcssa476 = 0, $$lcssa479 = 0, $$lcssa480 = 0, $$lcssa483 = 0.0, $$lcssa484 = 0, $$lcssa487 = 0, $$lcssa491 = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre$phi302$iZ2D = 0, $$pre300$i = 0, $$z$4$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1003 = 0, $1005 = 0, $1007 = 0, $1009 = 0, $1010 = 0, $1018 = 0, $1026 = 0, $1034 = 0, $1044 = 0, $1047 = 0, $105 = 0, $1054 = 0, $1055 = 0, $1061 = 0, $1062 = 0, $1065 = 0, $107 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $108 = 0, $1085 = 0, $1086 = 0, $1088 = 0, $1091 = 0, $1092 = 0, $11 = 0, $110 = 0, $1101 = 0, $1102 = 0, $1104 = 0, $1107 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1127 = 0, $1128 = 0, $1130 = 0, $1133 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1153 = 0, $1154 = 0.0, $1160 = 0, $1161 = 0.0, $1169 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1179 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1185 = 0, $1187 = 0, $12 = 0, $13 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $148 = 0, $15 = 0, $150 = 0, $151 = 0, $156 = 0, $158 = 0, $16 = 0, $168 = 0, $169 = 0, $176 = 0, $177 = 0, $185 = 0, $186 = 0, $192 = 0, $193 = 0, $195 = 0, $198 = 0, $2 = 0, $204 = 0, $205 = 0, $216 = 0, $217 = 0, $22 = 0, $223 = 0, $224 = 0, $23 = 0, $235 = 0, $236 = 0, $242 = 0, $243 = 0.0, $25 = 0, $251 = 0, $252 = 0.0, $256 = 0, $26 = 0, $263 = 0, $264 = 0, $270 = 0, $28 = 0, $282 = 0, $289 = 0, $291 = 0, $295 = 0, $3 = 0, $301 = 0, $302 = 0, $31 = 0, $314 = 0, $316 = 0, $319 = 0, $32 = 0, $320 = 0, $330 = 0, $334 = 0, $336 = 0, $338 = 0, $343 = 0, $344 = 0, $345 = 0, $349 = 0, $350 = 0, $361 = 0, $366 = 0, $368 = 0, $37 = 0, $370 = 0, $376 = 0, $385 = 0, $386 = 0, $39 = 0, $391 = 0, $393 = 0, $395 = 0, $4 = 0, $40 = 0, $400 = 0, $403 = 0, $405 = 0, $406 = 0, $414 = 0, $416 = 0, $422 = 0, $430 = 0.0, $435 = 0, $439 = 0, $44 = 0, $446 = 0, $448 = 0, $450 = 0, $453 = 0, $454 = 0, $46 = 0, $463 = 0, $47 = 0, $472 = 0.0, $473 = 0, $476 = 0, $478 = 0, $481 = 0, $483 = 0, $487 = 0.0, $497 = 0, $5 = 0, $500 = 0, $504 = 0, $505 = 0, $506 = 0, $51 = 0, $510 = 0, $511 = 0, $522 = 0, $534 = 0, $537 = 0, $543 = 0, $552 = 0, $558 = 0, $56 = 0, $567 = 0, $573 = 0, $59 = 0, $591 = 0, $592 = 0, $594 = 0, $595 = 0, $6 = 0, $60 = 0, $603 = 0, $61 = 0, $610 = 0, $612 = 0, $614 = 0, $623 = 0, $633 = 0, $634 = 0, $636 = 0, $637 = 0, $638 = 0, $644 = 0, $646 = 0, $649 = 0, $65 = 0, $651 = 0, $652 = 0, $653 = 0, $655 = 0, $659 = 0, $661 = 0, $665 = 0, $67 = 0, $670 = 0, $672 = 0, $673 = 0, $674 = 0, $676 = 0, $693 = 0, $695 = 0, $698 = 0, $699 = 0, $7 = 0, $703 = 0, $704 = 0, $706 = 0, $712 = 0, $713 = 0, $714 = 0, $718 = 0, $739 = 0, $740 = 0, $743 = 0, $748 = 0, $749 = 0, $751 = 0, $758 = 0, $759 = 0, $760 = 0, $763 = 0, $764 = 0, $765 = 0, $772 = 0, $782 = 0, $785 = 0, $787 = 0, $789 = 0, $791 = 0, $796 = 0, $797 = 0, $8 = 0, $800 = 0, $802 = 0, $804 = 0, $806 = 0, $817 = 0, $820 = 0, $825 = 0, $834 = 0, $835 = 0, $839 = 0, $842 = 0, $844 = 0, $846 = 0, $850 = 0, $854 = 0, $855 = 0, $856 = 0, $860 = 0, $861 = 0, $872 = 0, $878 = 0, $888 = 0, $893 = 0, $894 = 0, $896 = 0, $897 = 0, $9 = 0, $905 = 0, $91 = 0, $913 = 0, $918 = 0, $92 = 0, $923 = 0, $928 = 0, $934 = 0, $939 = 0, $943 = 0, $945 = 0, $948 = 0, $960 = 0, $961 = 0, $966 = 0, $972 = 0, $976 = 0, $979 = 0, $98 = 0, $99 = 0, $994 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1253$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3240$i = 0, $a$3240$us$i = 0, $a$5$lcssa$i = 0, $a$5215$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0246$i = 0, $carry3$0234$i = 0, $carry3$0234$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0245$i = 0, $d$0247$i = 0, $d$1233$i = 0, $d$1233$us$i = 0, $d$2$lcssa$i = 0, $d$2214$i = 0, $d$3$i = 0, $d$4191$i = 0, $d$5183$i = 0, $d$6195$i = 0, $e$0229$i = 0, $e$1$i = 0, $e$2210$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0228$i = 0, $i$03$i = 0, $i$03$i30 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1222$i = 0, $i$2162 = 0, $i$2162$lcssa = 0, $i$2209$i = 0, $i$3160 = 0, $i$3205$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i27 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i29 = 0, $isdigittmp9 = 0, $j$0221$i = 0, $j$0223$i = 0, $j$1206$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond19 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$1179$i = 0, $round$0178$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0188$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0180$i = 0, $s9$0$i = 0, $s9$1192$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa456 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1252$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3239$i = 0, $z$3239$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $big$i = sp + 16 | 0;
 $e2$i = sp + 8 | 0;
 $buf$i = sp + 836 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824 | 0;
 $pad$i = sp + 568 | 0;
 $buf = sp + 528 | 0;
 $wc = sp;
 $mb = sp + 520 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $wc;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $0 | 0;
 $11 = -2 - $0 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $1169 = 0;
 $1170 = 0;
 $23 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$23 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 344;
   break;
  } else {
   $1171 = $22;
   $26 = $23;
  }
  while (1) {
   if (!($1171 << 24 >> 24)) {
    $$lcssa106 = $26;
    $z$0$lcssa = $26;
    break;
   } else if ($1171 << 24 >> 24 == 37) {
    $28 = $26;
    $z$0163 = $26;
    label = 9;
    break;
   }
   $25 = $26 + 1 | 0;
   $1171 = HEAP8[$25 >> 0] | 0;
   $26 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$28 + 1 >> 0] | 0) != 37) {
    $$lcssa106 = $28;
    $z$0$lcssa = $z$0163;
    break L12;
   }
   $31 = $z$0163 + 1 | 0;
   $32 = $28 + 2 | 0;
   if ((HEAP8[$32 >> 0] | 0) == 37) {
    $28 = $32;
    $z$0163 = $31;
    label = 9;
   } else {
    $$lcssa106 = $32;
    $z$0$lcssa = $31;
    break;
   }
  } while (0);
  $37 = $z$0$lcssa - $23 | 0;
  if ($1) ___fwritex($23, $37, $f) | 0;
  if (($z$0$lcssa | 0) != ($23 | 0)) {
   $23 = $$lcssa106;
   $cnt$0 = $cnt$1;
   $l$0 = $37;
   continue;
  }
  $39 = $$lcssa106 + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $isdigittmp = ($40 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$$lcssa106 + 2 >> 0] | 0) == 36;
   $$92 = $44 ? $$lcssa106 + 3 | 0 : $39;
   $47 = HEAP8[$$92 >> 0] | 0;
   $argpos$0 = $44 ? $isdigittmp : -1;
   $l10n$1 = $44 ? 1 : $l10n$0;
   $storemerge = $$92;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  L24 : do if (($46 & -32 | 0) == 32) {
   $51 = $46;
   $56 = $47;
   $fl$0170 = 0;
   $storemerge8169 = $storemerge;
   while (1) {
    if (!(1 << $51 + -32 & 75913)) {
     $65 = $56;
     $fl$0110 = $fl$0170;
     $storemerge8108 = $storemerge8169;
     break L24;
    }
    $59 = 1 << ($56 << 24 >> 24) + -32 | $fl$0170;
    $60 = $storemerge8169 + 1 | 0;
    $61 = HEAP8[$60 >> 0] | 0;
    $51 = $61 << 24 >> 24;
    if (($51 & -32 | 0) != 32) {
     $65 = $61;
     $fl$0110 = $59;
     $storemerge8108 = $60;
     break;
    } else {
     $56 = $61;
     $fl$0170 = $59;
     $storemerge8169 = $60;
    }
   }
  } else {
   $65 = $47;
   $fl$0110 = 0;
   $storemerge8108 = $storemerge;
  } while (0);
  do if ($65 << 24 >> 24 == 42) {
   $67 = $storemerge8108 + 1 | 0;
   $isdigittmp11 = (HEAP8[$67 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge8108 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge8108 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$67 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     label = 363;
     break L1;
    }
    if (!$1) {
     $105 = $67;
     $fl$1 = $fl$0110;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $91 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $92 = HEAP32[$91 >> 2] | 0;
    HEAP32[$ap >> 2] = $91 + 4;
    $l10n$2 = 0;
    $storemerge13 = $67;
    $w$0 = $92;
   }
   if (($w$0 | 0) < 0) {
    $105 = $storemerge13;
    $fl$1 = $fl$0110 | 8192;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $105 = $storemerge13;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($65 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $100 = $storemerge8108;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $98 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $99 = $100 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$99 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa450 = $98;
      $$lcssa451 = $99;
      break;
     } else {
      $100 = $99;
      $i$03$i = $98;
     }
    }
    if (($$lcssa450 | 0) < 0) {
     $$0 = -1;
     label = 363;
     break L1;
    } else {
     $105 = $$lcssa451;
     $fl$1 = $fl$0110;
     $l10n$3 = $l10n$1;
     $w$1 = $$lcssa450;
    }
   } else {
    $105 = $storemerge8108;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L45 : do if ((HEAP8[$105 >> 0] | 0) == 46) {
   $107 = $105 + 1 | 0;
   $108 = HEAP8[$107 >> 0] | 0;
   if ($108 << 24 >> 24 != 42) {
    $isdigittmp1$i27 = ($108 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i27 >>> 0 < 10) {
     $140 = $107;
     $i$03$i30 = 0;
     $isdigittmp4$i29 = $isdigittmp1$i27;
    } else {
     $1172 = $107;
     $p$0 = 0;
     break;
    }
    while (1) {
     $138 = ($i$03$i30 * 10 | 0) + $isdigittmp4$i29 | 0;
     $139 = $140 + 1 | 0;
     $isdigittmp4$i29 = (HEAP8[$139 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i29 >>> 0 >= 10) {
      $1172 = $139;
      $p$0 = $138;
      break L45;
     } else {
      $140 = $139;
      $i$03$i30 = $138;
     }
    }
   }
   $110 = $105 + 2 | 0;
   $isdigittmp9 = (HEAP8[$110 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$105 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $1172 = $105 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$110 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   if ($1) {
    $134 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
    $135 = HEAP32[$134 >> 2] | 0;
    HEAP32[$ap >> 2] = $134 + 4;
    $1172 = $110;
    $p$0 = $135;
   } else {
    $1172 = $110;
    $p$0 = 0;
   }
  } else {
   $1172 = $105;
   $p$0 = -1;
  } while (0);
  $144 = $1172;
  $st$0 = 0;
  while (1) {
   $146 = (HEAP8[$144 >> 0] | 0) + -65 | 0;
   if ($146 >>> 0 > 57) {
    $$0 = -1;
    label = 363;
    break L1;
   }
   $148 = $144 + 1 | 0;
   $150 = HEAP8[11536 + ($st$0 * 58 | 0) + $146 >> 0] | 0;
   $151 = $150 & 255;
   if (($151 + -1 | 0) >>> 0 < 8) {
    $144 = $148;
    $st$0 = $151;
   } else {
    $$lcssa455 = $144;
    $$lcssa457 = $148;
    $$lcssa458 = $150;
    $$lcssa459 = $151;
    $st$0$lcssa456 = $st$0;
    break;
   }
  }
  if (!($$lcssa458 << 24 >> 24)) {
   $$0 = -1;
   label = 363;
   break;
  }
  $156 = ($argpos$0 | 0) > -1;
  L64 : do if ($$lcssa458 << 24 >> 24 == 19) if ($156) {
   $$0 = -1;
   label = 363;
   break L1;
  } else {
   $1173 = $1169;
   $1174 = $1170;
   label = 62;
  } else {
   if ($156) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa459;
    $158 = $nl_arg + ($argpos$0 << 3) | 0;
    $1173 = HEAP32[$158 + 4 >> 2] | 0;
    $1174 = HEAP32[$158 >> 2] | 0;
    label = 62;
    break;
   }
   if (!$1) {
    $$0 = 0;
    label = 363;
    break L1;
   }
   if (($$lcssa458 & 255) > 20) {
    $264 = $1170;
    $291 = $1169;
   } else do switch ($$lcssa459 | 0) {
   case 9:
    {
     $168 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $169 = HEAP32[$168 >> 2] | 0;
     HEAP32[$ap >> 2] = $168 + 4;
     $264 = $169;
     $291 = $1169;
     break L64;
     break;
    }
   case 10:
    {
     $176 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $177 = HEAP32[$176 >> 2] | 0;
     HEAP32[$ap >> 2] = $176 + 4;
     $264 = $177;
     $291 = (($177 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 16:
    {
     $235 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $236 = HEAP32[$235 >> 2] | 0;
     HEAP32[$ap >> 2] = $235 + 4;
     $264 = $236 & 255;
     $291 = 0;
     break L64;
     break;
    }
   case 15:
    {
     $223 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $224 = HEAP32[$223 >> 2] | 0;
     HEAP32[$ap >> 2] = $223 + 4;
     $264 = $224 << 24 >> 24;
     $291 = ((($224 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 14:
    {
     $216 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $217 = HEAP32[$216 >> 2] | 0;
     HEAP32[$ap >> 2] = $216 + 4;
     $264 = $217 & 65535;
     $291 = 0;
     break L64;
     break;
    }
   case 13:
    {
     $204 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $205 = HEAP32[$204 >> 2] | 0;
     HEAP32[$ap >> 2] = $204 + 4;
     $264 = $205 << 16 >> 16;
     $291 = ((($205 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
     break L64;
     break;
    }
   case 18:
    {
     $251 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $252 = +HEAPF64[$251 >> 3];
     HEAP32[$ap >> 2] = $251 + 8;
     HEAPF64[tempDoublePtr >> 3] = $252;
     $264 = HEAP32[tempDoublePtr >> 2] | 0;
     $291 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 11:
    {
     $185 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $186 = HEAP32[$185 >> 2] | 0;
     HEAP32[$ap >> 2] = $185 + 4;
     $264 = $186;
     $291 = 0;
     break L64;
     break;
    }
   case 17:
    {
     $242 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $243 = +HEAPF64[$242 >> 3];
     HEAP32[$ap >> 2] = $242 + 8;
     HEAPF64[tempDoublePtr >> 3] = $243;
     $264 = HEAP32[tempDoublePtr >> 2] | 0;
     $291 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     break L64;
     break;
    }
   case 12:
    {
     $192 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $193 = $192;
     $195 = HEAP32[$193 >> 2] | 0;
     $198 = HEAP32[$193 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $192 + 8;
     $264 = $195;
     $291 = $198;
     break L64;
     break;
    }
   default:
    {
     $264 = $1170;
     $291 = $1169;
     break L64;
    }
   } while (0);
  } while (0);
  if ((label | 0) == 62) {
   label = 0;
   if ($1) {
    $264 = $1174;
    $291 = $1173;
   } else {
    $1169 = $1173;
    $1170 = $1174;
    $23 = $$lcssa457;
    $cnt$0 = $cnt$1;
    $l$0 = $37;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  $256 = HEAP8[$$lcssa455 >> 0] | 0;
  $t$0 = ($st$0$lcssa456 | 0) != 0 & ($256 & 15 | 0) == 3 ? $256 & -33 : $256;
  $263 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $263;
  L86 : do switch ($t$0 | 0) {
  case 67:
   {
    HEAP32[$wc >> 2] = $264;
    HEAP32[$5 >> 2] = 0;
    $1179 = $wc;
    $1180 = $6;
    $p$4272 = -1;
    label = 97;
    break;
   }
  case 83:
   {
    $391 = $264;
    if (!$p$0) {
     $1181 = $264;
     $1182 = $391;
     $i$0$lcssa273 = 0;
     label = 102;
    } else {
     $1179 = $391;
     $1180 = $264;
     $p$4272 = $p$0;
     label = 97;
    }
    break;
   }
  case 99:
   {
    HEAP8[$4 >> 0] = $264;
    $1175 = $291;
    $1176 = $264;
    $a$2 = $4;
    $fl$6 = $263;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 12016;
    $z$2 = $2;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 94;
    break;
   }
  case 115:
   {
    $a$1 = ($264 | 0) != 0 ? $264 : 12032;
    label = 94;
    break;
   }
  case 105:
  case 100:
   {
    if (($291 | 0) < 0) {
     $330 = _i64Subtract(0, 0, $264 | 0, $291 | 0) | 0;
     $336 = tempRet0;
     $338 = $330;
     $pl$0 = 1;
     $prefix$0 = 12016;
     label = 84;
     break L86;
    }
    if (!($fl$1$ & 2048)) {
     $334 = $fl$1$ & 1;
     $336 = $291;
     $338 = $264;
     $pl$0 = $334;
     $prefix$0 = ($334 | 0) == 0 ? 12016 : 12018;
     label = 84;
    } else {
     $336 = $291;
     $338 = $264;
     $pl$0 = 1;
     $prefix$0 = 12017;
     label = 84;
    }
    break;
   }
  case 117:
   {
    $336 = $291;
    $338 = $264;
    $pl$0 = 0;
    $prefix$0 = 12016;
    label = 84;
    break;
   }
  case 111:
   {
    $314 = ($264 | 0) == 0 & ($291 | 0) == 0;
    if ($314) $$0$lcssa$i51 = $2; else {
     $$03$i48 = $2;
     $316 = $264;
     $320 = $291;
     while (1) {
      $319 = $$03$i48 + -1 | 0;
      HEAP8[$319 >> 0] = $316 & 7 | 48;
      $316 = _bitshift64Lshr($316 | 0, $320 | 0, 3) | 0;
      $320 = tempRet0;
      if (($316 | 0) == 0 & ($320 | 0) == 0) {
       $$0$lcssa$i51 = $319;
       break;
      } else $$03$i48 = $319;
     }
    }
    $or$cond19 = ($fl$1$ & 8 | 0) == 0 | $314;
    $366 = $264;
    $368 = $291;
    $a$0 = $$0$lcssa$i51;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $or$cond19 & 1 ^ 1;
    $prefix$1 = $or$cond19 ? 12016 : 12021;
    label = 89;
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 73;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 73;
    break;
   }
  case 110:
   {
    switch ($st$0$lcssa456 | 0) {
    case 0:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $270 = $264;
      HEAP32[$270 >> 2] = $cnt$1;
      HEAP32[$270 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[$264 >> 1] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[$264 >> 0] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[$264 >> 2] = $cnt$1;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 7:
     {
      $282 = $264;
      HEAP32[$282 >> 2] = $cnt$1;
      HEAP32[$282 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $1169 = $291;
      $1170 = $264;
      $23 = $$lcssa457;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    HEAP32[tempDoublePtr >> 2] = $264;
    HEAP32[tempDoublePtr + 4 >> 2] = $291;
    $430 = +HEAPF64[tempDoublePtr >> 3];
    HEAP32[$e2$i >> 2] = 0;
    if (($291 | 0) < 0) {
     $$07$i = -$430;
     $pl$0$i = 1;
     $prefix$0$i = 12040;
    } else if (!($fl$1$ & 2048)) {
     $435 = $fl$1$ & 1;
     $$07$i = $430;
     $pl$0$i = $435;
     $prefix$0$i = ($435 | 0) == 0 ? 12041 : 12046;
    } else {
     $$07$i = $430;
     $pl$0$i = 1;
     $prefix$0$i = 12043;
    }
    HEAPF64[tempDoublePtr >> 3] = $$07$i;
    $439 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    do if ($439 >>> 0 < 2146435072 | ($439 | 0) == 2146435072 & 0 < 0) {
     $472 = +_frexpl($$07$i, $e2$i) * 2.0;
     $473 = $472 != 0.0;
     if ($473) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
     $476 = $t$0 | 32;
     if (($476 | 0) == 97) {
      $478 = $t$0 & 32;
      $prefix$0$$i = ($478 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
      $481 = $pl$0$i | 2;
      $483 = 12 - $p$0 | 0;
      do if ($p$0 >>> 0 > 11 | ($483 | 0) == 0) $$1$i = $472; else {
       $re$1179$i = $483;
       $round$0178$i = 8.0;
       while (1) {
        $re$1179$i = $re$1179$i + -1 | 0;
        $487 = $round$0178$i * 16.0;
        if (!$re$1179$i) {
         $$lcssa483 = $487;
         break;
        } else $round$0178$i = $487;
       }
       if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
        $$1$i = -($$lcssa483 + (-$472 - $$lcssa483));
        break;
       } else {
        $$1$i = $472 + $$lcssa483 - $$lcssa483;
        break;
       }
      } while (0);
      $497 = HEAP32[$e2$i >> 2] | 0;
      $500 = ($497 | 0) < 0 ? 0 - $497 | 0 : $497;
      if (($500 | 0) < 0) {
       $$05$i$i = $7;
       $504 = $500;
       $505 = (($500 | 0) < 0) << 31 >> 31;
       while (1) {
        $506 = ___uremdi3($504 | 0, $505 | 0, 10, 0) | 0;
        $510 = $$05$i$i + -1 | 0;
        HEAP8[$510 >> 0] = $506 | 48;
        $511 = ___udivdi3($504 | 0, $505 | 0, 10, 0) | 0;
        if ($505 >>> 0 > 9 | ($505 | 0) == 9 & $504 >>> 0 > 4294967295) {
         $$05$i$i = $510;
         $504 = $511;
         $505 = tempRet0;
        } else {
         $$lcssa484 = $510;
         $1183 = $511;
         break;
        }
       }
       $$0$lcssa$i48$i = $$lcssa484;
       $$01$lcssa$off0$i$i = $1183;
      } else {
       $$0$lcssa$i48$i = $7;
       $$01$lcssa$off0$i$i = $500;
      }
      if (!$$01$lcssa$off0$i$i) $$1$lcssa$i$i = $$0$lcssa$i48$i; else {
       $$12$i$i = $$0$lcssa$i48$i;
       $y$03$i$i = $$01$lcssa$off0$i$i;
       while (1) {
        $522 = $$12$i$i + -1 | 0;
        HEAP8[$522 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i$i >>> 0 < 10) {
         $$1$lcssa$i$i = $522;
         break;
        } else {
         $$12$i$i = $522;
         $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($$1$lcssa$i$i | 0) == ($7 | 0)) {
       HEAP8[$8 >> 0] = 48;
       $estr$0$i = $8;
      } else $estr$0$i = $$1$lcssa$i$i;
      HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
      $534 = $estr$0$i + -2 | 0;
      HEAP8[$534 >> 0] = $t$0 + 15;
      if (!($fl$1$ & 8)) if (($p$0 | 0) < 1) {
       $$2$us$us$i = $$1$i;
       $s$0$us$us$i = $buf$i;
       while (1) {
        $537 = ~~$$2$us$us$i;
        $543 = $s$0$us$us$i + 1 | 0;
        HEAP8[$s$0$us$us$i >> 0] = HEAPU8[12e3 + $537 >> 0] | $478;
        $$2$us$us$i = ($$2$us$us$i - +($537 | 0)) * 16.0;
        if (($543 - $0 | 0) != 1 | $$2$us$us$i == 0.0) $s$1$us$us$i = $543; else {
         HEAP8[$543 >> 0] = 46;
         $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
        }
        if (!($$2$us$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        } else $s$0$us$us$i = $s$1$us$us$i;
       }
      } else {
       $$2$us$i = $$1$i;
       $s$0$us$i = $buf$i;
       while (1) {
        $552 = ~~$$2$us$i;
        $558 = $s$0$us$i + 1 | 0;
        HEAP8[$s$0$us$i >> 0] = HEAPU8[12e3 + $552 >> 0] | $478;
        $$2$us$i = ($$2$us$i - +($552 | 0)) * 16.0;
        if (($558 - $0 | 0) == 1) {
         HEAP8[$558 >> 0] = 46;
         $s$1$us$i = $s$0$us$i + 2 | 0;
        } else $s$1$us$i = $558;
        if (!($$2$us$i != 0.0)) {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        } else $s$0$us$i = $s$1$us$i;
       }
      } else {
       $$2$i = $$1$i;
       $s$0$i = $buf$i;
       while (1) {
        $567 = ~~$$2$i;
        $573 = $s$0$i + 1 | 0;
        HEAP8[$s$0$i >> 0] = HEAPU8[12e3 + $567 >> 0] | $478;
        $$2$i = ($$2$i - +($567 | 0)) * 16.0;
        if (($573 - $0 | 0) == 1) {
         HEAP8[$573 >> 0] = 46;
         $s$1$i = $s$0$i + 2 | 0;
        } else $s$1$i = $573;
        if (!($$2$i != 0.0)) {
         $s$1$lcssa$i = $s$1$i;
         break;
        } else $s$0$i = $s$1$i;
       }
      }
      $$pre300$i = $s$1$lcssa$i;
      $l$0$i = ($p$0 | 0) != 0 & ($11 + $$pre300$i | 0) < ($p$0 | 0) ? $12 + $p$0 - $534 | 0 : $10 - $534 + $$pre300$i | 0;
      $591 = $l$0$i + $481 | 0;
      $592 = $fl$1$ & 73728;
      $594 = ($w$1 | 0) > ($591 | 0);
      if (($592 | 0) == 0 & $594) {
       $595 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 32, ($595 >>> 0 > 256 ? 256 : $595) | 0) | 0;
       if ($595 >>> 0 > 255) {
        $$01$i54$i = $595;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i54$i = $$01$i54$i + -256 | 0;
        } while ($$01$i54$i >>> 0 > 255);
        $$0$lcssa$i56$i = $595 & 255;
       } else $$0$lcssa$i56$i = $595;
       ___fwritex($pad$i, $$0$lcssa$i56$i, $f) | 0;
      }
      ___fwritex($prefix$0$$i, $481, $f) | 0;
      if (($592 | 0) == 65536 & $594) {
       $603 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 48, ($603 >>> 0 > 256 ? 256 : $603) | 0) | 0;
       if ($603 >>> 0 > 255) {
        $$01$i61$i = $603;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i61$i = $$01$i61$i + -256 | 0;
        } while ($$01$i61$i >>> 0 > 255);
        $$0$lcssa$i63$i = $603 & 255;
       } else $$0$lcssa$i63$i = $603;
       ___fwritex($pad$i, $$0$lcssa$i63$i, $f) | 0;
      }
      $610 = $$pre300$i - $0 | 0;
      ___fwritex($buf$i, $610, $f) | 0;
      $612 = $9 - $534 | 0;
      $614 = $l$0$i - $612 - $610 | 0;
      if (($614 | 0) > 0) {
       _memset($pad$i | 0, 48, ($614 >>> 0 > 256 ? 256 : $614) | 0) | 0;
       if ($614 >>> 0 > 255) {
        $$01$i67$i = $614;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i67$i = $$01$i67$i + -256 | 0;
        } while ($$01$i67$i >>> 0 > 255);
        $$0$lcssa$i69$i = $614 & 255;
       } else $$0$lcssa$i69$i = $614;
       ___fwritex($pad$i, $$0$lcssa$i69$i, $f) | 0;
      }
      ___fwritex($534, $612, $f) | 0;
      if (($592 | 0) == 8192 & $594) {
       $623 = $w$1 - $591 | 0;
       _memset($pad$i | 0, 32, ($623 >>> 0 > 256 ? 256 : $623) | 0) | 0;
       if ($623 >>> 0 > 255) {
        $$01$i74$i = $623;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i74$i = $$01$i74$i + -256 | 0;
        } while ($$01$i74$i >>> 0 > 255);
        $$0$lcssa$i76$i = $623 & 255;
       } else $$0$lcssa$i76$i = $623;
       ___fwritex($pad$i, $$0$lcssa$i76$i, $f) | 0;
      }
      $$0$i = $594 ? $w$1 : $591;
      break;
     }
     $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
     if ($473) {
      $633 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
      HEAP32[$e2$i >> 2] = $633;
      $$3$i = $472 * 268435456.0;
      $634 = $633;
     } else {
      $$3$i = $472;
      $634 = HEAP32[$e2$i >> 2] | 0;
     }
     $$31$i = ($634 | 0) < 0 ? $big$i : $13;
     $636 = $$31$i;
     $$4$i = $$3$i;
     $z$0$i = $$31$i;
     while (1) {
      $637 = ~~$$4$i >>> 0;
      HEAP32[$z$0$i >> 2] = $637;
      $638 = $z$0$i + 4 | 0;
      $$4$i = ($$4$i - +($637 >>> 0)) * 1.0e9;
      if (!($$4$i != 0.0)) {
       $$lcssa460 = $638;
       break;
      } else $z$0$i = $638;
     }
     $$pr$i = HEAP32[$e2$i >> 2] | 0;
     if (($$pr$i | 0) > 0) {
      $644 = $$pr$i;
      $a$1253$i = $$31$i;
      $z$1252$i = $$lcssa460;
      while (1) {
       $646 = ($644 | 0) > 29 ? 29 : $644;
       $d$0245$i = $z$1252$i + -4 | 0;
       do if ($d$0245$i >>> 0 < $a$1253$i >>> 0) $a$2$ph$i = $a$1253$i; else {
        $carry$0246$i = 0;
        $d$0247$i = $d$0245$i;
        while (1) {
         $649 = _bitshift64Shl(HEAP32[$d$0247$i >> 2] | 0, 0, $646 | 0) | 0;
         $651 = _i64Add($649 | 0, tempRet0 | 0, $carry$0246$i | 0, 0) | 0;
         $652 = tempRet0;
         $653 = ___uremdi3($651 | 0, $652 | 0, 1e9, 0) | 0;
         HEAP32[$d$0247$i >> 2] = $653;
         $655 = ___udivdi3($651 | 0, $652 | 0, 1e9, 0) | 0;
         $d$0247$i = $d$0247$i + -4 | 0;
         if ($d$0247$i >>> 0 < $a$1253$i >>> 0) {
          $$lcssa461 = $655;
          break;
         } else $carry$0246$i = $655;
        }
        if (!$$lcssa461) {
         $a$2$ph$i = $a$1253$i;
         break;
        }
        $659 = $a$1253$i + -4 | 0;
        HEAP32[$659 >> 2] = $$lcssa461;
        $a$2$ph$i = $659;
       } while (0);
       $z$2$i = $z$1252$i;
       while (1) {
        if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
        $661 = $z$2$i + -4 | 0;
        if (!(HEAP32[$661 >> 2] | 0)) $z$2$i = $661; else {
         $z$2$i$lcssa = $z$2$i;
         break;
        }
       }
       $665 = (HEAP32[$e2$i >> 2] | 0) - $646 | 0;
       HEAP32[$e2$i >> 2] = $665;
       if (($665 | 0) > 0) {
        $644 = $665;
        $a$1253$i = $a$2$ph$i;
        $z$1252$i = $z$2$i$lcssa;
       } else {
        $$pr146$i = $665;
        $a$1$lcssa$i = $a$2$ph$i;
        $z$1$lcssa$i = $z$2$i$lcssa;
        break;
       }
      }
     } else {
      $$pr146$i = $$pr$i;
      $a$1$lcssa$i = $$31$i;
      $z$1$lcssa$i = $$lcssa460;
     }
     L237 : do if (($$pr146$i | 0) < 0) {
      $670 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
      if (($476 | 0) != 102) {
       $704 = $$pr146$i;
       $a$3240$i = $a$1$lcssa$i;
       $z$3239$i = $z$1$lcssa$i;
       while (1) {
        $703 = 0 - $704 | 0;
        $706 = ($703 | 0) > 9 ? 9 : $703;
        do if ($a$3240$i >>> 0 < $z$3239$i >>> 0) {
         $712 = (1 << $706) + -1 | 0;
         $713 = 1e9 >>> $706;
         $carry3$0234$i = 0;
         $d$1233$i = $a$3240$i;
         while (1) {
          $714 = HEAP32[$d$1233$i >> 2] | 0;
          HEAP32[$d$1233$i >> 2] = ($714 >>> $706) + $carry3$0234$i;
          $718 = Math_imul($714 & $712, $713) | 0;
          $d$1233$i = $d$1233$i + 4 | 0;
          if ($d$1233$i >>> 0 >= $z$3239$i >>> 0) {
           $$lcssa463 = $718;
           break;
          } else $carry3$0234$i = $718;
         }
         $$a$3$i = (HEAP32[$a$3240$i >> 2] | 0) == 0 ? $a$3240$i + 4 | 0 : $a$3240$i;
         if (!$$lcssa463) {
          $$a$3306$i = $$a$3$i;
          $z$4$i = $z$3239$i;
          break;
         }
         HEAP32[$z$3239$i >> 2] = $$lcssa463;
         $$a$3306$i = $$a$3$i;
         $z$4$i = $z$3239$i + 4 | 0;
        } else {
         $$a$3306$i = (HEAP32[$a$3240$i >> 2] | 0) == 0 ? $a$3240$i + 4 | 0 : $a$3240$i;
         $z$4$i = $z$3239$i;
        } while (0);
        $$z$4$i = ($z$4$i - $$a$3306$i >> 2 | 0) > ($670 | 0) ? $$a$3306$i + ($670 << 2) | 0 : $z$4$i;
        $704 = (HEAP32[$e2$i >> 2] | 0) + $706 | 0;
        HEAP32[$e2$i >> 2] = $704;
        if (($704 | 0) >= 0) {
         $a$3$lcssa$i = $$a$3306$i;
         $z$3$lcssa$i = $$z$4$i;
         break L237;
        } else {
         $a$3240$i = $$a$3306$i;
         $z$3239$i = $$z$4$i;
        }
       }
      }
      $672 = $$31$i + ($670 << 2) | 0;
      $674 = $$pr146$i;
      $a$3240$us$i = $a$1$lcssa$i;
      $z$3239$us$i = $z$1$lcssa$i;
      while (1) {
       $673 = 0 - $674 | 0;
       $676 = ($673 | 0) > 9 ? 9 : $673;
       do if ($a$3240$us$i >>> 0 < $z$3239$us$i >>> 0) {
        $695 = (1 << $676) + -1 | 0;
        $699 = 1e9 >>> $676;
        $carry3$0234$us$i = 0;
        $d$1233$us$i = $a$3240$us$i;
        while (1) {
         $693 = HEAP32[$d$1233$us$i >> 2] | 0;
         HEAP32[$d$1233$us$i >> 2] = ($693 >>> $676) + $carry3$0234$us$i;
         $698 = Math_imul($693 & $695, $699) | 0;
         $d$1233$us$i = $d$1233$us$i + 4 | 0;
         if ($d$1233$us$i >>> 0 >= $z$3239$us$i >>> 0) {
          $$lcssa464 = $698;
          break;
         } else $carry3$0234$us$i = $698;
        }
        $$a$3$us$i = (HEAP32[$a$3240$us$i >> 2] | 0) == 0 ? $a$3240$us$i + 4 | 0 : $a$3240$us$i;
        if (!$$lcssa464) {
         $$a$3$us304$i = $$a$3$us$i;
         $z$4$us$i = $z$3239$us$i;
         break;
        }
        HEAP32[$z$3239$us$i >> 2] = $$lcssa464;
        $$a$3$us304$i = $$a$3$us$i;
        $z$4$us$i = $z$3239$us$i + 4 | 0;
       } else {
        $$a$3$us304$i = (HEAP32[$a$3240$us$i >> 2] | 0) == 0 ? $a$3240$us$i + 4 | 0 : $a$3240$us$i;
        $z$4$us$i = $z$3239$us$i;
       } while (0);
       $$z$4$us$i = ($z$4$us$i - $636 >> 2 | 0) > ($670 | 0) ? $672 : $z$4$us$i;
       $674 = (HEAP32[$e2$i >> 2] | 0) + $676 | 0;
       HEAP32[$e2$i >> 2] = $674;
       if (($674 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3$us304$i;
        $z$3$lcssa$i = $$z$4$us$i;
        break;
       } else {
        $a$3240$us$i = $$a$3$us304$i;
        $z$3239$us$i = $$z$4$us$i;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;
      $z$3$lcssa$i = $z$1$lcssa$i;
     } while (0);
     do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
      $739 = ($636 - $a$3$lcssa$i >> 2) * 9 | 0;
      $740 = HEAP32[$a$3$lcssa$i >> 2] | 0;
      if ($740 >>> 0 < 10) {
       $e$1$i = $739;
       break;
      } else {
       $e$0229$i = $739;
       $i$0228$i = 10;
      }
      while (1) {
       $i$0228$i = $i$0228$i * 10 | 0;
       $743 = $e$0229$i + 1 | 0;
       if ($740 >>> 0 < $i$0228$i >>> 0) {
        $e$1$i = $743;
        break;
       } else $e$0229$i = $743;
      }
     } else $e$1$i = 0; while (0);
     $748 = ($476 | 0) == 103;
     $749 = ($$p$i | 0) != 0;
     $751 = $$p$i - (($476 | 0) != 102 ? $e$1$i : 0) + (($749 & $748) << 31 >> 31) | 0;
     if (($751 | 0) < ((($z$3$lcssa$i - $636 >> 2) * 9 | 0) + -9 | 0)) {
      $758 = $751 + 9216 | 0;
      $759 = ($758 | 0) / 9 | 0;
      $760 = $$31$i + ($759 + -1023 << 2) | 0;
      $j$0221$i = (($758 | 0) % 9 | 0) + 1 | 0;
      if (($j$0221$i | 0) < 9) {
       $i$1222$i = 10;
       $j$0223$i = $j$0221$i;
       while (1) {
        $763 = $i$1222$i * 10 | 0;
        $j$0223$i = $j$0223$i + 1 | 0;
        if (($j$0223$i | 0) == 9) {
         $i$1$lcssa$i = $763;
         break;
        } else $i$1222$i = $763;
       }
      } else $i$1$lcssa$i = 10;
      $764 = HEAP32[$760 >> 2] | 0;
      $765 = ($764 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
      if (!$765) if (($$31$i + ($759 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
       $a$7$i = $a$3$lcssa$i;
       $d$3$i = $760;
       $e$3$i = $e$1$i;
      } else label = 221; else label = 221;
      do if ((label | 0) == 221) {
       label = 0;
       $$20$i = ((($764 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
       $772 = ($i$1$lcssa$i | 0) / 2 | 0;
       do if ($765 >>> 0 < $772 >>> 0) $small$0$i = .5; else {
        if (($765 | 0) == ($772 | 0)) if (($$31$i + ($759 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
         $small$0$i = 1.0;
         break;
        }
        $small$0$i = 1.5;
       } while (0);
       do if (!$pl$0$i) {
        $round6$1$i = $$20$i;
        $small$1$i = $small$0$i;
       } else {
        if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
         $round6$1$i = $$20$i;
         $small$1$i = $small$0$i;
         break;
        }
        $round6$1$i = -$$20$i;
        $small$1$i = -$small$0$i;
       } while (0);
       $782 = $764 - $765 | 0;
       HEAP32[$760 >> 2] = $782;
       if (!($round6$1$i + $small$1$i != $round6$1$i)) {
        $a$7$i = $a$3$lcssa$i;
        $d$3$i = $760;
        $e$3$i = $e$1$i;
        break;
       }
       $785 = $782 + $i$1$lcssa$i | 0;
       HEAP32[$760 >> 2] = $785;
       if ($785 >>> 0 > 999999999) {
        $a$5215$i = $a$3$lcssa$i;
        $d$2214$i = $760;
        while (1) {
         $787 = $d$2214$i + -4 | 0;
         HEAP32[$d$2214$i >> 2] = 0;
         if ($787 >>> 0 < $a$5215$i >>> 0) {
          $789 = $a$5215$i + -4 | 0;
          HEAP32[$789 >> 2] = 0;
          $a$6$i = $789;
         } else $a$6$i = $a$5215$i;
         $791 = (HEAP32[$787 >> 2] | 0) + 1 | 0;
         HEAP32[$787 >> 2] = $791;
         if ($791 >>> 0 > 999999999) {
          $a$5215$i = $a$6$i;
          $d$2214$i = $787;
         } else {
          $a$5$lcssa$i = $a$6$i;
          $d$2$lcssa$i = $787;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;
        $d$2$lcssa$i = $760;
       }
       $796 = ($636 - $a$5$lcssa$i >> 2) * 9 | 0;
       $797 = HEAP32[$a$5$lcssa$i >> 2] | 0;
       if ($797 >>> 0 < 10) {
        $a$7$i = $a$5$lcssa$i;
        $d$3$i = $d$2$lcssa$i;
        $e$3$i = $796;
        break;
       } else {
        $e$2210$i = $796;
        $i$2209$i = 10;
       }
       while (1) {
        $i$2209$i = $i$2209$i * 10 | 0;
        $800 = $e$2210$i + 1 | 0;
        if ($797 >>> 0 < $i$2209$i >>> 0) {
         $a$7$i = $a$5$lcssa$i;
         $d$3$i = $d$2$lcssa$i;
         $e$3$i = $800;
         break;
        } else $e$2210$i = $800;
       }
      } while (0);
      $802 = $d$3$i + 4 | 0;
      $a$8$ph$i = $a$7$i;
      $e$4$ph$i = $e$3$i;
      $z$6$ph$i = $z$3$lcssa$i >>> 0 > $802 >>> 0 ? $802 : $z$3$lcssa$i;
     } else {
      $a$8$ph$i = $a$3$lcssa$i;
      $e$4$ph$i = $e$1$i;
      $z$6$ph$i = $z$3$lcssa$i;
     }
     $804 = 0 - $e$4$ph$i | 0;
     $z$6$i = $z$6$ph$i;
     while (1) {
      if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
       $$lcssa275$i = 0;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
      $806 = $z$6$i + -4 | 0;
      if (!(HEAP32[$806 >> 2] | 0)) $z$6$i = $806; else {
       $$lcssa275$i = 1;
       $z$6$i$lcssa = $z$6$i;
       break;
      }
     }
     do if ($748) {
      $$p$$i = ($749 & 1 ^ 1) + $$p$i | 0;
      if (($$p$$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
       $$013$i = $t$0 + -1 | 0;
       $$210$i = $$p$$i + -1 - $e$4$ph$i | 0;
      } else {
       $$013$i = $t$0 + -2 | 0;
       $$210$i = $$p$$i + -1 | 0;
      }
      $817 = $fl$1$ & 8;
      if ($817) {
       $$114$i = $$013$i;
       $$311$i = $$210$i;
       $$pre$phi302$iZ2D = $817;
       break;
      }
      do if ($$lcssa275$i) {
       $820 = HEAP32[$z$6$i$lcssa + -4 >> 2] | 0;
       if (!$820) {
        $j$2$i = 9;
        break;
       }
       if (!(($820 >>> 0) % 10 | 0)) {
        $i$3205$i = 10;
        $j$1206$i = 0;
       } else {
        $j$2$i = 0;
        break;
       }
       while (1) {
        $i$3205$i = $i$3205$i * 10 | 0;
        $825 = $j$1206$i + 1 | 0;
        if (($820 >>> 0) % ($i$3205$i >>> 0) | 0) {
         $j$2$i = $825;
         break;
        } else $j$1206$i = $825;
       }
      } else $j$2$i = 9; while (0);
      $834 = (($z$6$i$lcssa - $636 >> 2) * 9 | 0) + -9 | 0;
      if (($$013$i | 32 | 0) == 102) {
       $835 = $834 - $j$2$i | 0;
       $$21$i = ($835 | 0) < 0 ? 0 : $835;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$21$i | 0) ? $$210$i : $$21$i;
       $$pre$phi302$iZ2D = 0;
       break;
      } else {
       $839 = $834 + $e$4$ph$i - $j$2$i | 0;
       $$23$i = ($839 | 0) < 0 ? 0 : $839;
       $$114$i = $$013$i;
       $$311$i = ($$210$i | 0) < ($$23$i | 0) ? $$210$i : $$23$i;
       $$pre$phi302$iZ2D = 0;
       break;
      }
     } else {
      $$114$i = $t$0;
      $$311$i = $$p$i;
      $$pre$phi302$iZ2D = $fl$1$ & 8;
     } while (0);
     $842 = $$311$i | $$pre$phi302$iZ2D;
     $844 = ($842 | 0) != 0 & 1;
     $846 = ($$114$i | 32 | 0) == 102;
     if ($846) {
      $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
      $estr$2$i = 0;
     } else {
      $850 = ($e$4$ph$i | 0) < 0 ? $804 : $e$4$ph$i;
      if (($850 | 0) < 0) {
       $$05$i79$i = $7;
       $854 = $850;
       $855 = (($850 | 0) < 0) << 31 >> 31;
       while (1) {
        $856 = ___uremdi3($854 | 0, $855 | 0, 10, 0) | 0;
        $860 = $$05$i79$i + -1 | 0;
        HEAP8[$860 >> 0] = $856 | 48;
        $861 = ___udivdi3($854 | 0, $855 | 0, 10, 0) | 0;
        if ($855 >>> 0 > 9 | ($855 | 0) == 9 & $854 >>> 0 > 4294967295) {
         $$05$i79$i = $860;
         $854 = $861;
         $855 = tempRet0;
        } else {
         $$lcssa470 = $860;
         $1185 = $861;
         break;
        }
       }
       $$0$lcssa$i84$i = $$lcssa470;
       $$01$lcssa$off0$i85$i = $1185;
      } else {
       $$0$lcssa$i84$i = $7;
       $$01$lcssa$off0$i85$i = $850;
      }
      if (!$$01$lcssa$off0$i85$i) $estr$1$ph$i = $$0$lcssa$i84$i; else {
       $$12$i87$i = $$0$lcssa$i84$i;
       $y$03$i86$i = $$01$lcssa$off0$i85$i;
       while (1) {
        $872 = $$12$i87$i + -1 | 0;
        HEAP8[$872 >> 0] = ($y$03$i86$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i86$i >>> 0 < 10) {
         $estr$1$ph$i = $872;
         break;
        } else {
         $$12$i87$i = $872;
         $y$03$i86$i = ($y$03$i86$i >>> 0) / 10 | 0;
        }
       }
      }
      if (($9 - $estr$1$ph$i | 0) < 2) {
       $estr$1201$i = $estr$1$ph$i;
       while (1) {
        $878 = $estr$1201$i + -1 | 0;
        HEAP8[$878 >> 0] = 48;
        if (($9 - $878 | 0) < 2) $estr$1201$i = $878; else {
         $estr$1$lcssa$i = $878;
         break;
        }
       }
      } else $estr$1$lcssa$i = $estr$1$ph$i;
      HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
      $888 = $estr$1$lcssa$i + -2 | 0;
      HEAP8[$888 >> 0] = $$114$i;
      $$pn$i = $9 - $888 | 0;
      $estr$2$i = $888;
     }
     $893 = $pl$0$i + 1 + $$311$i + $844 + $$pn$i | 0;
     $894 = $fl$1$ & 73728;
     $896 = ($w$1 | 0) > ($893 | 0);
     if (($894 | 0) == 0 & $896) {
      $897 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 32, ($897 >>> 0 > 256 ? 256 : $897) | 0) | 0;
      if ($897 >>> 0 > 255) {
       $$01$i95$i = $897;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i95$i = $$01$i95$i + -256 | 0;
       } while ($$01$i95$i >>> 0 > 255);
       $$0$lcssa$i97$i = $897 & 255;
      } else $$0$lcssa$i97$i = $897;
      ___fwritex($pad$i, $$0$lcssa$i97$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
     if (($894 | 0) == 65536 & $896) {
      $905 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 48, ($905 >>> 0 > 256 ? 256 : $905) | 0) | 0;
      if ($905 >>> 0 > 255) {
       $$01$i102$i = $905;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i102$i = $$01$i102$i + -256 | 0;
       } while ($$01$i102$i >>> 0 > 255);
       $$0$lcssa$i104$i = $905 & 255;
      } else $$0$lcssa$i104$i = $905;
      ___fwritex($pad$i, $$0$lcssa$i104$i, $f) | 0;
     }
     if ($846) {
      $r$0$a$8$i = $a$8$ph$i >>> 0 > $$31$i >>> 0 ? $$31$i : $a$8$ph$i;
      $d$4191$i = $r$0$a$8$i;
      while (1) {
       $913 = HEAP32[$d$4191$i >> 2] | 0;
       if (!$913) $$1$lcssa$i112$i = $14; else {
        $$12$i110$i = $14;
        $y$03$i109$i = $913;
        while (1) {
         $918 = $$12$i110$i + -1 | 0;
         HEAP8[$918 >> 0] = ($y$03$i109$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i109$i >>> 0 < 10) {
          $$1$lcssa$i112$i = $918;
          break;
         } else {
          $$12$i110$i = $918;
          $y$03$i109$i = ($y$03$i109$i >>> 0) / 10 | 0;
         }
        }
       }
       do if (($d$4191$i | 0) == ($r$0$a$8$i | 0)) {
        if (($$1$lcssa$i112$i | 0) != ($14 | 0)) {
         $s7$1$i = $$1$lcssa$i112$i;
         break;
        }
        HEAP8[$16 >> 0] = 48;
        $s7$1$i = $16;
       } else {
        if ($$1$lcssa$i112$i >>> 0 > $buf$i >>> 0) $s7$0188$i = $$1$lcssa$i112$i; else {
         $s7$1$i = $$1$lcssa$i112$i;
         break;
        }
        while (1) {
         $923 = $s7$0188$i + -1 | 0;
         HEAP8[$923 >> 0] = 48;
         if ($923 >>> 0 > $buf$i >>> 0) $s7$0188$i = $923; else {
          $s7$1$i = $923;
          break;
         }
        }
       } while (0);
       ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
       $928 = $d$4191$i + 4 | 0;
       if ($928 >>> 0 > $$31$i >>> 0) {
        $$lcssa479 = $928;
        break;
       } else $d$4191$i = $928;
      }
      if ($842) ___fwritex(12096, 1, $f) | 0;
      if (($$311$i | 0) > 0 & $$lcssa479 >>> 0 < $z$6$i$lcssa >>> 0) {
       $$412184$i = $$311$i;
       $d$5183$i = $$lcssa479;
       while (1) {
        $934 = HEAP32[$d$5183$i >> 2] | 0;
        if (!$934) {
         $s8$0180$i = $14;
         label = 289;
        } else {
         $$12$i119$i = $14;
         $y$03$i118$i = $934;
         while (1) {
          $939 = $$12$i119$i + -1 | 0;
          HEAP8[$939 >> 0] = ($y$03$i118$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i118$i >>> 0 < 10) {
           $$lcssa480 = $939;
           break;
          } else {
           $$12$i119$i = $939;
           $y$03$i118$i = ($y$03$i118$i >>> 0) / 10 | 0;
          }
         }
         if ($$lcssa480 >>> 0 > $buf$i >>> 0) {
          $s8$0180$i = $$lcssa480;
          label = 289;
         } else $s8$0$lcssa$i = $$lcssa480;
        }
        if ((label | 0) == 289) while (1) {
         label = 0;
         $943 = $s8$0180$i + -1 | 0;
         HEAP8[$943 >> 0] = 48;
         if ($943 >>> 0 > $buf$i >>> 0) {
          $s8$0180$i = $943;
          label = 289;
         } else {
          $s8$0$lcssa$i = $943;
          break;
         }
        }
        $945 = ($$412184$i | 0) > 9;
        ___fwritex($s8$0$lcssa$i, $945 ? 9 : $$412184$i, $f) | 0;
        $d$5183$i = $d$5183$i + 4 | 0;
        $948 = $$412184$i + -9 | 0;
        if (!($945 & $d$5183$i >>> 0 < $z$6$i$lcssa >>> 0)) {
         $$412$lcssa$i = $948;
         break;
        } else $$412184$i = $948;
       }
      } else $$412$lcssa$i = $$311$i;
      if (($$412$lcssa$i | 0) > 0) {
       _memset($pad$i | 0, 48, ($$412$lcssa$i >>> 0 > 256 ? 256 : $$412$lcssa$i) | 0) | 0;
       if ($$412$lcssa$i >>> 0 > 255) {
        $$01$i126$i = $$412$lcssa$i;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i126$i = $$01$i126$i + -256 | 0;
        } while ($$01$i126$i >>> 0 > 255);
        $$0$lcssa$i128$i = $$412$lcssa$i & 255;
       } else $$0$lcssa$i128$i = $$412$lcssa$i;
       ___fwritex($pad$i, $$0$lcssa$i128$i, $f) | 0;
      }
     } else {
      $z$6$$i = $$lcssa275$i ? $z$6$i$lcssa : $a$8$ph$i + 4 | 0;
      do if (($$311$i | 0) > -1) {
       $960 = ($$pre$phi302$iZ2D | 0) == 0;
       $$5196$i = $$311$i;
       $d$6195$i = $a$8$ph$i;
       while (1) {
        $961 = HEAP32[$d$6195$i >> 2] | 0;
        if (!$961) label = 303; else {
         $$12$i134$i = $14;
         $y$03$i133$i = $961;
         while (1) {
          $966 = $$12$i134$i + -1 | 0;
          HEAP8[$966 >> 0] = ($y$03$i133$i >>> 0) % 10 | 0 | 48;
          if ($y$03$i133$i >>> 0 < 10) {
           $$12$i134$i$lcssa = $$12$i134$i;
           $$lcssa474 = $966;
           break;
          } else {
           $$12$i134$i = $966;
           $y$03$i133$i = ($y$03$i133$i >>> 0) / 10 | 0;
          }
         }
         if (($$lcssa474 | 0) == ($14 | 0)) label = 303; else {
          $1187 = $$12$i134$i$lcssa;
          $s9$0$i = $$lcssa474;
         }
        }
        if ((label | 0) == 303) {
         label = 0;
         HEAP8[$16 >> 0] = 48;
         $1187 = $14;
         $s9$0$i = $16;
        }
        do if (($d$6195$i | 0) == ($a$8$ph$i | 0)) {
         ___fwritex($s9$0$i, 1, $f) | 0;
         if ($960 & ($$5196$i | 0) < 1) {
          $s9$2$i = $1187;
          break;
         }
         ___fwritex(12096, 1, $f) | 0;
         $s9$2$i = $1187;
        } else {
         if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$1192$i = $s9$0$i; else {
          $s9$2$i = $s9$0$i;
          break;
         }
         while (1) {
          $972 = $s9$1192$i + -1 | 0;
          HEAP8[$972 >> 0] = 48;
          if ($972 >>> 0 > $buf$i >>> 0) $s9$1192$i = $972; else {
           $s9$2$i = $972;
           break;
          }
         }
        } while (0);
        $976 = $15 - $s9$2$i | 0;
        ___fwritex($s9$2$i, ($$5196$i | 0) > ($976 | 0) ? $976 : $$5196$i, $f) | 0;
        $979 = $$5196$i - $976 | 0;
        $d$6195$i = $d$6195$i + 4 | 0;
        if (!($d$6195$i >>> 0 < $z$6$$i >>> 0 & ($979 | 0) > -1)) {
         $$lcssa476 = $979;
         break;
        } else $$5196$i = $979;
       }
       if (($$lcssa476 | 0) <= 0) break;
       _memset($pad$i | 0, 48, ($$lcssa476 >>> 0 > 256 ? 256 : $$lcssa476) | 0) | 0;
       if ($$lcssa476 >>> 0 > 255) {
        $$01$i141$i = $$lcssa476;
        do {
         ___fwritex($pad$i, 256, $f) | 0;
         $$01$i141$i = $$01$i141$i + -256 | 0;
        } while ($$01$i141$i >>> 0 > 255);
        $$0$lcssa$i143$i = $$lcssa476 & 255;
       } else $$0$lcssa$i143$i = $$lcssa476;
       ___fwritex($pad$i, $$0$lcssa$i143$i, $f) | 0;
      } else {} while (0);
      ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
     }
     if (($894 | 0) == 8192 & $896) {
      $994 = $w$1 - $893 | 0;
      _memset($pad$i | 0, 32, ($994 >>> 0 > 256 ? 256 : $994) | 0) | 0;
      if ($994 >>> 0 > 255) {
       $$01$i$i = $994;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i$i = $$01$i$i + -256 | 0;
       } while ($$01$i$i >>> 0 > 255);
       $$0$lcssa$i$i = $994 & 255;
      } else $$0$lcssa$i$i = $994;
      ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0;
     }
     $$0$i = $896 ? $w$1 : $893;
    } else {
     $446 = ($t$0 & 32 | 0) != 0;
     $448 = $$07$i != $$07$i | 0.0 != 0.0;
     $pl$1$i = $448 ? 0 : $pl$0$i;
     $s1$0$i = $448 ? ($446 ? 12080 : 12088) : $446 ? 12064 : 12072;
     $450 = $pl$1$i + 3 | 0;
     $453 = ($w$1 | 0) > ($450 | 0);
     if (($fl$1$ & 8192 | 0) == 0 & $453) {
      $454 = $w$1 - $450 | 0;
      _memset($pad$i | 0, 32, ($454 >>> 0 > 256 ? 256 : $454) | 0) | 0;
      if ($454 >>> 0 > 255) {
       $$01$i37$i = $454;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i37$i = $$01$i37$i + -256 | 0;
       } while ($$01$i37$i >>> 0 > 255);
       $$0$lcssa$i39$i = $454 & 255;
      } else $$0$lcssa$i39$i = $454;
      ___fwritex($pad$i, $$0$lcssa$i39$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
     ___fwritex($s1$0$i, 3, $f) | 0;
     if (($fl$1$ & 73728 | 0) == 8192 & $453) {
      $463 = $w$1 - $450 | 0;
      _memset($pad$i | 0, 32, ($463 >>> 0 > 256 ? 256 : $463) | 0) | 0;
      if ($463 >>> 0 > 255) {
       $$01$i44$i = $463;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i44$i = $$01$i44$i + -256 | 0;
       } while ($$01$i44$i >>> 0 > 255);
       $$0$lcssa$i46$i = $463 & 255;
      } else $$0$lcssa$i46$i = $463;
      ___fwritex($pad$i, $$0$lcssa$i46$i, $f) | 0;
     }
     $$0$i = $453 ? $w$1 : $450;
    } while (0);
    $1169 = $291;
    $1170 = $264;
    $23 = $$lcssa457;
    $cnt$0 = $cnt$1;
    $l$0 = $$0$i;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  default:
   {
    $1175 = $291;
    $1176 = $264;
    $a$2 = $23;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 12016;
    $z$2 = $2;
   }
  } while (0);
  if ((label | 0) == 73) {
   label = 0;
   $289 = $t$1 & 32;
   if (($264 | 0) == 0 & ($291 | 0) == 0) {
    $366 = $264;
    $368 = $291;
    $a$0 = $2;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 12016;
    label = 89;
   } else {
    $$012$i = $2;
    $295 = $264;
    $302 = $291;
    while (1) {
     $301 = $$012$i + -1 | 0;
     HEAP8[$301 >> 0] = HEAPU8[12e3 + ($295 & 15) >> 0] | $289;
     $295 = _bitshift64Lshr($295 | 0, $302 | 0, 4) | 0;
     $302 = tempRet0;
     if (($295 | 0) == 0 & ($302 | 0) == 0) {
      $$lcssa491 = $301;
      break;
     } else $$012$i = $301;
    }
    if (!($fl$3 & 8)) {
     $366 = $264;
     $368 = $291;
     $a$0 = $$lcssa491;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 12016;
     label = 89;
    } else {
     $366 = $264;
     $368 = $291;
     $a$0 = $$lcssa491;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 12016 + ($t$1 >> 4) | 0;
     label = 89;
    }
   }
  } else if ((label | 0) == 84) {
   label = 0;
   if ($336 >>> 0 > 0 | ($336 | 0) == 0 & $338 >>> 0 > 4294967295) {
    $$05$i = $2;
    $343 = $338;
    $344 = $336;
    while (1) {
     $345 = ___uremdi3($343 | 0, $344 | 0, 10, 0) | 0;
     $349 = $$05$i + -1 | 0;
     HEAP8[$349 >> 0] = $345 | 48;
     $350 = ___udivdi3($343 | 0, $344 | 0, 10, 0) | 0;
     if ($344 >>> 0 > 9 | ($344 | 0) == 9 & $343 >>> 0 > 4294967295) {
      $$05$i = $349;
      $343 = $350;
      $344 = tempRet0;
     } else {
      $$lcssa487 = $349;
      $1177 = $350;
      break;
     }
    }
    $$0$lcssa$i53 = $$lcssa487;
    $$01$lcssa$off0$i = $1177;
   } else {
    $$0$lcssa$i53 = $2;
    $$01$lcssa$off0$i = $338;
   }
   if (!$$01$lcssa$off0$i) {
    $366 = $338;
    $368 = $336;
    $a$0 = $$0$lcssa$i53;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 89;
   } else {
    $$12$i = $$0$lcssa$i53;
    $y$03$i = $$01$lcssa$off0$i;
    while (1) {
     $361 = $$12$i + -1 | 0;
     HEAP8[$361 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
     if ($y$03$i >>> 0 < 10) {
      $366 = $338;
      $368 = $336;
      $a$0 = $361;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 89;
      break;
     } else {
      $$12$i = $361;
      $y$03$i = ($y$03$i >>> 0) / 10 | 0;
     }
    }
   }
  } else if ((label | 0) == 94) {
   label = 0;
   $385 = _memchr($a$1, 0, $p$0) | 0;
   $386 = ($385 | 0) == 0;
   $1175 = $291;
   $1176 = $264;
   $a$2 = $a$1;
   $fl$6 = $263;
   $p$5 = $386 ? $p$0 : $385 - $a$1 | 0;
   $pl$2 = 0;
   $prefix$2 = 12016;
   $z$2 = $386 ? $a$1 + $p$0 | 0 : $385;
  } else if ((label | 0) == 97) {
   label = 0;
   $i$0175 = 0;
   $l$1174 = 0;
   $ws$0176 = $1179;
   while (1) {
    $393 = HEAP32[$ws$0176 >> 2] | 0;
    if (!$393) {
     $i$0$lcssa = $i$0175;
     $l$2 = $l$1174;
     break;
    }
    $395 = _wctomb($mb, $393) | 0;
    if (($395 | 0) < 0 | $395 >>> 0 > ($p$4272 - $i$0175 | 0) >>> 0) {
     $i$0$lcssa = $i$0175;
     $l$2 = $395;
     break;
    }
    $400 = $395 + $i$0175 | 0;
    if ($p$4272 >>> 0 > $400 >>> 0) {
     $i$0175 = $400;
     $l$1174 = $395;
     $ws$0176 = $ws$0176 + 4 | 0;
    } else {
     $i$0$lcssa = $400;
     $l$2 = $395;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    label = 363;
    break;
   } else {
    $1181 = $1180;
    $1182 = $1179;
    $i$0$lcssa273 = $i$0$lcssa;
    label = 102;
   }
  }
  if ((label | 0) == 89) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $370 = ($366 | 0) != 0 | ($368 | 0) != 0;
   if ($370 | ($p$2 | 0) != 0) {
    $376 = ($370 & 1 ^ 1) + ($3 - $a$0) | 0;
    $1175 = $368;
    $1176 = $366;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($376 | 0) ? $p$2 : $376;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $1175 = $368;
    $1176 = $366;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 102) {
   label = 0;
   $403 = $fl$1$ & 73728;
   $405 = ($w$1 | 0) > ($i$0$lcssa273 | 0);
   if (($403 | 0) == 0 & $405) {
    $406 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($406 >>> 0 > 256 ? 256 : $406) | 0) | 0;
    if ($406 >>> 0 > 255) {
     $$01$i66 = $406;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i66 = $$01$i66 + -256 | 0;
     } while ($$01$i66 >>> 0 > 255);
     $$0$lcssa$i68 = $406 & 255;
    } else $$0$lcssa$i68 = $406;
    ___fwritex($pad$i, $$0$lcssa$i68, $f) | 0;
   }
   L465 : do if ($i$0$lcssa273) {
    $i$1186 = 0;
    $ws$1187 = $1182;
    while (1) {
     $414 = HEAP32[$ws$1187 >> 2] | 0;
     if (!$414) break L465;
     $416 = _wctomb($mb, $414) | 0;
     $i$1186 = $416 + $i$1186 | 0;
     if (($i$1186 | 0) > ($i$0$lcssa273 | 0)) break L465;
     ___fwritex($mb, $416, $f) | 0;
     if ($i$1186 >>> 0 >= $i$0$lcssa273 >>> 0) break; else $ws$1187 = $ws$1187 + 4 | 0;
    }
   } while (0);
   if (($403 | 0) == 8192 & $405) {
    $422 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($422 >>> 0 > 256 ? 256 : $422) | 0) | 0;
    if ($422 >>> 0 > 255) {
     $$01$i73 = $422;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i73 = $$01$i73 + -256 | 0;
     } while ($$01$i73 >>> 0 > 255);
     $$0$lcssa$i75 = $422 & 255;
    } else $$0$lcssa$i75 = $422;
    ___fwritex($pad$i, $$0$lcssa$i75, $f) | 0;
   }
   $1169 = $291;
   $1170 = $1181;
   $23 = $$lcssa457;
   $cnt$0 = $cnt$1;
   $l$0 = $405 ? $w$1 : $i$0$lcssa273;
   $l10n$0 = $l10n$3;
   continue;
  }
  $1003 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($1003 | 0) ? $1003 : $p$5;
  $1005 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($1005 | 0) ? $1005 : $w$1;
  $1007 = $fl$6 & 73728;
  $1009 = ($w$2 | 0) > ($1005 | 0);
  if (($1007 | 0) == 0 & $1009) {
   $1010 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 32, ($1010 >>> 0 > 256 ? 256 : $1010) | 0) | 0;
   if ($1010 >>> 0 > 255) {
    $$01$i83 = $1010;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i83 = $$01$i83 + -256 | 0;
    } while ($$01$i83 >>> 0 > 255);
    $$0$lcssa$i85 = $1010 & 255;
   } else $$0$lcssa$i85 = $1010;
   ___fwritex($pad$i, $$0$lcssa$i85, $f) | 0;
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0;
  if (($1007 | 0) == 65536 & $1009) {
   $1018 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 48, ($1018 >>> 0 > 256 ? 256 : $1018) | 0) | 0;
   if ($1018 >>> 0 > 255) {
    $$01$i59 = $1018;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i59 = $$01$i59 + -256 | 0;
    } while ($$01$i59 >>> 0 > 255);
    $$0$lcssa$i61 = $1018 & 255;
   } else $$0$lcssa$i61 = $1018;
   ___fwritex($pad$i, $$0$lcssa$i61, $f) | 0;
  }
  if (($$p$5 | 0) > ($1003 | 0)) {
   $1026 = $$p$5 - $1003 | 0;
   _memset($pad$i | 0, 48, ($1026 >>> 0 > 256 ? 256 : $1026) | 0) | 0;
   if ($1026 >>> 0 > 255) {
    $$01$i44 = $1026;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i44 = $$01$i44 + -256 | 0;
    } while ($$01$i44 >>> 0 > 255);
    $$0$lcssa$i46 = $1026 & 255;
   } else $$0$lcssa$i46 = $1026;
   ___fwritex($pad$i, $$0$lcssa$i46, $f) | 0;
  }
  ___fwritex($a$2, $1003, $f) | 0;
  if (($1007 | 0) == 8192 & $1009) {
   $1034 = $w$2 - $1005 | 0;
   _memset($pad$i | 0, 32, ($1034 >>> 0 > 256 ? 256 : $1034) | 0) | 0;
   if ($1034 >>> 0 > 255) {
    $$01$i = $1034;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i = $$01$i + -256 | 0;
    } while ($$01$i >>> 0 > 255);
    $$0$lcssa$i = $1034 & 255;
   } else $$0$lcssa$i = $1034;
   ___fwritex($pad$i, $$0$lcssa$i, $f) | 0;
  }
  $1169 = $1175;
  $1170 = $1176;
  $23 = $$lcssa457;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 344) {
  if ($f) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$l10n$0$lcssa) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $i$2162 = 1;
  while (1) {
   $1044 = HEAP32[$nl_type + ($i$2162 << 2) >> 2] | 0;
   if (!$1044) {
    $i$2162$lcssa = $i$2162;
    break;
   }
   $1047 = $nl_arg + ($i$2162 << 3) | 0;
   L522 : do if ($1044 >>> 0 <= 20) do switch ($1044 | 0) {
   case 9:
    {
     $1054 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1055 = HEAP32[$1054 >> 2] | 0;
     HEAP32[$ap >> 2] = $1054 + 4;
     HEAP32[$1047 >> 2] = $1055;
     break L522;
     break;
    }
   case 10:
    {
     $1061 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1062 = HEAP32[$1061 >> 2] | 0;
     HEAP32[$ap >> 2] = $1061 + 4;
     $1065 = $1047;
     HEAP32[$1065 >> 2] = $1062;
     HEAP32[$1065 + 4 >> 2] = (($1062 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 11:
    {
     $1074 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1075 = HEAP32[$1074 >> 2] | 0;
     HEAP32[$ap >> 2] = $1074 + 4;
     $1076 = $1047;
     HEAP32[$1076 >> 2] = $1075;
     HEAP32[$1076 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 12:
    {
     $1085 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1086 = $1085;
     $1088 = HEAP32[$1086 >> 2] | 0;
     $1091 = HEAP32[$1086 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $1085 + 8;
     $1092 = $1047;
     HEAP32[$1092 >> 2] = $1088;
     HEAP32[$1092 + 4 >> 2] = $1091;
     break L522;
     break;
    }
   case 13:
    {
     $1101 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1102 = HEAP32[$1101 >> 2] | 0;
     HEAP32[$ap >> 2] = $1101 + 4;
     $1104 = ($1102 & 65535) << 16 >> 16;
     $1107 = $1047;
     HEAP32[$1107 >> 2] = $1104;
     HEAP32[$1107 + 4 >> 2] = (($1104 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 14:
    {
     $1116 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1117 = HEAP32[$1116 >> 2] | 0;
     HEAP32[$ap >> 2] = $1116 + 4;
     $1118 = $1047;
     HEAP32[$1118 >> 2] = $1117 & 65535;
     HEAP32[$1118 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 15:
    {
     $1127 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1128 = HEAP32[$1127 >> 2] | 0;
     HEAP32[$ap >> 2] = $1127 + 4;
     $1130 = ($1128 & 255) << 24 >> 24;
     $1133 = $1047;
     HEAP32[$1133 >> 2] = $1130;
     HEAP32[$1133 + 4 >> 2] = (($1130 | 0) < 0) << 31 >> 31;
     break L522;
     break;
    }
   case 16:
    {
     $1142 = (HEAP32[$ap >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $1143 = HEAP32[$1142 >> 2] | 0;
     HEAP32[$ap >> 2] = $1142 + 4;
     $1144 = $1047;
     HEAP32[$1144 >> 2] = $1143 & 255;
     HEAP32[$1144 + 4 >> 2] = 0;
     break L522;
     break;
    }
   case 17:
    {
     $1153 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1154 = +HEAPF64[$1153 >> 3];
     HEAP32[$ap >> 2] = $1153 + 8;
     HEAPF64[$1047 >> 3] = $1154;
     break L522;
     break;
    }
   case 18:
    {
     $1160 = (HEAP32[$ap >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $1161 = +HEAPF64[$1160 >> 3];
     HEAP32[$ap >> 2] = $1160 + 8;
     HEAPF64[$1047 >> 3] = $1161;
     break L522;
     break;
    }
   default:
    break L522;
   } while (0); while (0);
   $i$2162 = $i$2162 + 1 | 0;
   if (($i$2162 | 0) >= 10) {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label | 0) == 363) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (($i$2162$lcssa | 0) < 10) $i$3160 = $i$2162$lcssa; else {
   $$0 = 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   if (HEAP32[$nl_type + ($i$3160 << 2) >> 2] | 0) {
    $$0 = -1;
    label = 363;
    break;
   }
   $i$3160 = $i$3160 + 1 | 0;
   if (($i$3160 | 0) >= 10) {
    $$0 = 1;
    label = 363;
    break;
   }
  }
  if ((label | 0) == 363) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 363) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}
function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1002 = 0, $1005 = 0, $1010 = 0, $1016 = 0, $1019 = 0, $1020 = 0, $1027 = 0, $1039 = 0, $1044 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $106 = 0, $1060 = 0, $1062 = 0, $1063 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $584 = 0, $585 = 0, $588 = 0, $59 = 0, $592 = 0, $593 = 0, $596 = 0, $598 = 0, $6 = 0, $602 = 0, $604 = 0, $608 = 0, $61 = 0, $612 = 0, $621 = 0, $622 = 0, $628 = 0, $630 = 0, $632 = 0, $635 = 0, $637 = 0, $64 = 0, $641 = 0, $642 = 0, $648 = 0, $65 = 0, $653 = 0, $655 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $67 = 0, $676 = 0, $678 = 0, $68 = 0, $683 = 0, $685 = 0, $69 = 0, $690 = 0, $692 = 0, $7 = 0, $70 = 0, $702 = 0, $706 = 0, $711 = 0, $714 = 0, $719 = 0, $720 = 0, $724 = 0, $725 = 0, $730 = 0, $736 = 0, $741 = 0, $744 = 0, $745 = 0, $748 = 0, $750 = 0, $752 = 0, $755 = 0, $766 = 0, $77 = 0, $771 = 0, $773 = 0, $776 = 0, $778 = 0, $781 = 0, $784 = 0, $785 = 0, $787 = 0, $788 = 0, $790 = 0, $791 = 0, $793 = 0, $794 = 0, $799 = 0, $80 = 0, $800 = 0, $809 = 0, $81 = 0, $814 = 0, $818 = 0, $824 = 0, $832 = 0, $838 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $847 = 0, $848 = 0, $854 = 0, $859 = 0, $860 = 0, $863 = 0, $865 = 0, $868 = 0, $873 = 0, $879 = 0, $88 = 0, $883 = 0, $884 = 0, $891 = 0, $90 = 0, $903 = 0, $908 = 0, $91 = 0, $915 = 0, $916 = 0, $917 = 0, $92 = 0, $925 = 0, $928 = 0, $929 = 0, $93 = 0, $934 = 0, $94 = 0, $940 = 0, $941 = 0, $943 = 0, $944 = 0, $947 = 0, $95 = 0, $952 = 0, $954 = 0, $959 = 0, $960 = 0, $964 = 0, $970 = 0, $975 = 0, $977 = 0, $978 = 0, $979 = 0, $980 = 0, $984 = 0, $985 = 0, $99 = 0, $991 = 0, $996 = 0, $997 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, $964$looptemp = 0;
 do if ($bytes >>> 0 < 245) {
  $4 = $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8;
  $5 = $4 >>> 3;
  $6 = HEAP32[3026] | 0;
  $7 = $6 >>> $5;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $5 | 0;
   $13 = $12 << 1;
   $14 = 12144 + ($13 << 2) | 0;
   $15 = 12144 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[3026] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   return $mem$0 | 0;
  }
  $34 = HEAP32[3028] | 0;
  if ($4 >>> 0 > $34 >>> 0) {
   if ($7) {
    $38 = 2 << $5;
    $41 = $7 << $5 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 12144 + ($65 << 2) | 0;
    $67 = 12144 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) {
     HEAP32[3026] = $6 & ~(1 << $64);
     $88 = $34;
    } else {
     if ($70 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      $88 = HEAP32[3028] | 0;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $4 | 0;
    HEAP32[$68 + 4 >> 2] = $4 | 3;
    $84 = $68 + $4 | 0;
    HEAP32[$68 + ($4 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    if ($88) {
     $90 = HEAP32[3031] | 0;
     $91 = $88 >>> 3;
     $92 = $91 << 1;
     $93 = 12144 + ($92 << 2) | 0;
     $94 = HEAP32[3026] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[3026] = $94 | $95;
      $$pre$phiZ2D = 12144 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 12144 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[3028] = $81;
    HEAP32[3031] = $84;
    $mem$0 = $69;
    return $mem$0 | 0;
   }
   $106 = HEAP32[3027] | 0;
   if (!$106) $nb$0 = $4; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[12408 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $4 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $4 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[3030] | 0;
    if ($v$0$i$lcssa >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i$lcssa + $4 | 0;
    if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i$lcssa | 0)) {
     $167 = $v$0$i$lcssa + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i$lcssa + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) {
       $R$0$i$lcssa = $R$0$i;
       $RP$0$i$lcssa = $RP$0$i;
       break;
      } else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i$lcssa >> 2] = 0;
      $R$1$i = $R$0$i$lcssa;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $183 = 12408 + ($182 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[3027] = HEAP32[3027] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     $197 = HEAP32[3030] | 0;
     if ($R$1$i >>> 0 < $197 >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($207) if ($207 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $207;
      HEAP32[$207 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $214 = $rsize$0$i$lcssa + $4 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3;
     $217 = $v$0$i$lcssa + ($214 + 4) | 0;
     HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $4 | 3;
     HEAP32[$v$0$i$lcssa + ($4 | 4) >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $4) >> 2] = $rsize$0$i$lcssa;
     $225 = HEAP32[3028] | 0;
     if ($225) {
      $227 = HEAP32[3031] | 0;
      $228 = $225 >>> 3;
      $229 = $228 << 1;
      $230 = 12144 + ($229 << 2) | 0;
      $231 = HEAP32[3026] | 0;
      $232 = 1 << $228;
      if (!($231 & $232)) {
       HEAP32[3026] = $231 | $232;
       $$pre$phi$iZ2D = 12144 + ($229 + 2 << 2) | 0;
       $F1$0$i = $230;
      } else {
       $236 = 12144 + ($229 + 2 << 2) | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ($237 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $236;
        $F1$0$i = $237;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $227;
      HEAP32[$F1$0$i + 12 >> 2] = $227;
      HEAP32[$227 + 8 >> 2] = $F1$0$i;
      HEAP32[$227 + 12 >> 2] = $230;
     }
     HEAP32[3028] = $rsize$0$i$lcssa;
     HEAP32[3031] = $151;
    }
    $mem$0 = $v$0$i$lcssa + 8 | 0;
    return $mem$0 | 0;
   }
  } else $nb$0 = $4;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $245 = $bytes + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[3027] | 0;
  if (!$247) $nb$0 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $idx$0$i = 0; else if ($246 >>> 0 > 16777215) $idx$0$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[12408 + ($idx$0$i << 2) >> 2] | 0;
   L123 : do if (!$276) {
    $rsize$2$i = $249;
    $t$1$i = 0;
    $v$2$i = 0;
    label = 86;
   } else {
    $rsize$0$i15 = $249;
    $rst$0$i = 0;
    $sizebits$0$i = $246 << (($idx$0$i | 0) == 31 ? 0 : 25 - ($idx$0$i >>> 1) | 0);
    $t$0$i14 = $276;
    $v$0$i16 = 0;
    while (1) {
     $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $286 = $285 - $246 | 0;
     if ($286 >>> 0 < $rsize$0$i15 >>> 0) if (($285 | 0) == ($246 | 0)) {
      $rsize$331$i = $286;
      $t$230$i = $t$0$i14;
      $v$332$i = $t$0$i14;
      label = 90;
      break L123;
     } else {
      $rsize$1$i = $286;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + 16 + ($sizebits$0$i >>> 31 << 2) >> 2] | 0;
     $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      label = 86;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if ((label | 0) == 86) {
    if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
     $300 = 2 << $idx$0$i;
     $303 = $247 & ($300 | 0 - $300);
     if (!$303) {
      $nb$0 = $246;
      break;
     }
     $307 = ($303 & 0 - $303) + -1 | 0;
     $309 = $307 >>> 12 & 16;
     $310 = $307 >>> $309;
     $312 = $310 >>> 5 & 8;
     $314 = $310 >>> $312;
     $316 = $314 >>> 2 & 4;
     $318 = $314 >>> $316;
     $320 = $318 >>> 1 & 2;
     $322 = $318 >>> $320;
     $324 = $322 >>> 1 & 1;
     $t$2$ph$i = HEAP32[12408 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0;
     $v$3$ph$i = 0;
    } else {
     $t$2$ph$i = $t$1$i;
     $v$3$ph$i = $v$2$i;
    }
    if (!$t$2$ph$i) {
     $rsize$3$lcssa$i = $rsize$2$i;
     $v$3$lcssa$i = $v$3$ph$i;
    } else {
     $rsize$331$i = $rsize$2$i;
     $t$230$i = $t$2$ph$i;
     $v$332$i = $v$3$ph$i;
     label = 90;
    }
   }
   if ((label | 0) == 90) while (1) {
    label = 0;
    $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0;
    $335 = $334 >>> 0 < $rsize$331$i >>> 0;
    $$rsize$3$i = $335 ? $334 : $rsize$331$i;
    $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
    $337 = HEAP32[$t$230$i + 16 >> 2] | 0;
    if ($337) {
     $rsize$331$i = $$rsize$3$i;
     $t$230$i = $337;
     $v$332$i = $t$2$v$3$i;
     label = 90;
     continue;
    }
    $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0;
    if (!$t$230$i) {
     $rsize$3$lcssa$i = $$rsize$3$i;
     $v$3$lcssa$i = $t$2$v$3$i;
     break;
    } else {
     $rsize$331$i = $$rsize$3$i;
     $v$332$i = $t$2$v$3$i;
     label = 90;
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $246; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[3028] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[3030] | 0;
    if ($v$3$lcssa$i >>> 0 < $346 >>> 0) _abort();
    $348 = $v$3$lcssa$i + $246 | 0;
    if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) _abort();
    $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($v$3$lcssa$i | 0)) {
     $364 = $v$3$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $v$3$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $368;
       $RP$0$i17 = $367;
      }
     } else {
      $R$0$i18 = $365;
      $RP$0$i17 = $364;
     }
     while (1) {
      $370 = $R$0$i18 + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371) {
       $R$0$i18 = $371;
       $RP$0$i17 = $370;
       continue;
      }
      $373 = $R$0$i18 + 16 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if (!$374) {
       $R$0$i18$lcssa = $R$0$i18;
       $RP$0$i17$lcssa = $RP$0$i17;
       break;
      } else {
       $R$0$i18 = $374;
       $RP$0$i17 = $373;
      }
     }
     if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17$lcssa >> 2] = 0;
      $R$1$i20 = $R$0$i18$lcssa;
      break;
     }
    } else {
     $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($356 >>> 0 < $346 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $R$1$i20 = $353;
      break;
     } else _abort();
    } while (0);
    do if ($351) {
     $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $380 = 12408 + ($379 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[3027] = HEAP32[3027] & ~(1 << $379);
       break;
      }
     } else {
      if ($351 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
      $389 = $351 + 16 | 0;
      if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$389 >> 2] = $R$1$i20; else HEAP32[$351 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     $394 = HEAP32[3030] | 0;
     if ($R$1$i20 >>> 0 < $394 >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $351;
     $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($398) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($404) if ($404 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L199 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $411 = $rsize$3$lcssa$i + $246 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3;
     $414 = $v$3$lcssa$i + ($411 + 4) | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i;
     $422 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $424 = $422 << 1;
      $425 = 12144 + ($424 << 2) | 0;
      $426 = HEAP32[3026] | 0;
      $427 = 1 << $422;
      if (!($426 & $427)) {
       HEAP32[3026] = $426 | $427;
       $$pre$phi$i26Z2D = 12144 + ($424 + 2 << 2) | 0;
       $F5$0$i = $425;
      } else {
       $431 = 12144 + ($424 + 2 << 2) | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ($432 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
        $$pre$phi$i26Z2D = $431;
        $F5$0$i = $432;
       }
      }
      HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
      HEAP32[$F5$0$i + 12 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425;
      break;
     }
     $438 = $rsize$3$lcssa$i >>> 8;
     if (!$438) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 12408 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0;
     $467 = HEAP32[3027] | 0;
     $468 = 1 << $I7$0$i;
     if (!($467 & $468)) {
      HEAP32[3027] = $467 | $468;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     L216 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $475; else {
      $K12$029$i = $rsize$3$lcssa$i << (($I7$0$i | 0) == 31 ? 0 : 25 - ($I7$0$i >>> 1) | 0);
      $T$028$i = $475;
      while (1) {
       $492 = $T$028$i + 16 + ($K12$029$i >>> 31 << 2) | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) {
        $$lcssa232 = $492;
        $T$028$i$lcssa = $T$028$i;
        break;
       }
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $487;
        break L216;
       } else {
        $K12$029$i = $K12$029$i << 1;
        $T$028$i = $487;
       }
      }
      if ($$lcssa232 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa232 >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa;
       HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
       break L199;
      }
     } while (0);
     $499 = $T$0$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[3030] | 0;
     if ($500 >>> 0 >= $501 >>> 0 & $T$0$lcssa$i >>> 0 >= $501 >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    return $mem$0 | 0;
   } else $nb$0 = $246;
  }
 } while (0);
 $509 = HEAP32[3028] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[3031] | 0;
  if ($511 >>> 0 > 15) {
   HEAP32[3031] = $512 + $nb$0;
   HEAP32[3028] = $511;
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1;
   HEAP32[$512 + $509 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[3028] = 0;
   HEAP32[3031] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $522 = $512 + ($509 + 4) | 0;
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1;
  }
  $mem$0 = $512 + 8 | 0;
  return $mem$0 | 0;
 }
 $526 = HEAP32[3029] | 0;
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[3029] = $528;
  $529 = HEAP32[3032] | 0;
  HEAP32[3032] = $529 + $nb$0;
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1;
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $529 + 8 | 0;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[3144] | 0)) {
  $538 = _sysconf(30) | 0;
  if (!($538 + -1 & $538)) {
   HEAP32[3146] = $538;
   HEAP32[3145] = $538;
   HEAP32[3147] = -1;
   HEAP32[3148] = -1;
   HEAP32[3149] = 0;
   HEAP32[3137] = 0;
   HEAP32[3144] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[3146] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[3136] | 0;
 if ($552) {
  $554 = HEAP32[3134] | 0;
  $555 = $554 + $550 | 0;
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 L258 : do if (!(HEAP32[3137] & 4)) {
  $561 = HEAP32[3032] | 0;
  L260 : do if (!$561) label = 174; else {
   $sp$0$i$i = 12552;
   while (1) {
    $563 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($563 >>> 0 <= $561 >>> 0) {
     $565 = $sp$0$i$i + 4 | 0;
     if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
      $$lcssa228 = $sp$0$i$i;
      $$lcssa230 = $565;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 174;
     break L260;
    }
   }
   $596 = $548 - (HEAP32[3029] | 0) & $549;
   if ($596 >>> 0 < 2147483647) {
    $598 = _sbrk($596 | 0) | 0;
    $602 = ($598 | 0) == ((HEAP32[$$lcssa228 >> 2] | 0) + (HEAP32[$$lcssa230 >> 2] | 0) | 0);
    $$3$i = $602 ? $596 : 0;
    if ($602) if (($598 | 0) == (-1 | 0)) $tsize$0323944$i = $$3$i; else {
     $tbase$255$i = $598;
     $tsize$254$i = $$3$i;
     label = 194;
     break L258;
    } else {
     $br$0$ph$i = $598;
     $ssize$1$ph$i = $596;
     $tsize$0$ph$i = $$3$i;
     label = 184;
    }
   } else $tsize$0323944$i = 0;
  } while (0);
  do if ((label | 0) == 174) {
   $572 = _sbrk(0) | 0;
   if (($572 | 0) == (-1 | 0)) $tsize$0323944$i = 0; else {
    $574 = $572;
    $575 = HEAP32[3145] | 0;
    $576 = $575 + -1 | 0;
    if (!($576 & $574)) $ssize$0$i = $550; else $ssize$0$i = $550 - $574 + ($576 + $574 & 0 - $575) | 0;
    $584 = HEAP32[3134] | 0;
    $585 = $584 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $588 = HEAP32[3136] | 0;
     if ($588) if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
      $tsize$0323944$i = 0;
      break;
     }
     $592 = _sbrk($ssize$0$i | 0) | 0;
     $593 = ($592 | 0) == ($572 | 0);
     $ssize$0$$i = $593 ? $ssize$0$i : 0;
     if ($593) {
      $tbase$255$i = $572;
      $tsize$254$i = $ssize$0$$i;
      label = 194;
      break L258;
     } else {
      $br$0$ph$i = $592;
      $ssize$1$ph$i = $ssize$0$i;
      $tsize$0$ph$i = $ssize$0$$i;
      label = 184;
     }
    } else $tsize$0323944$i = 0;
   }
  } while (0);
  L280 : do if ((label | 0) == 184) {
   $604 = 0 - $ssize$1$ph$i | 0;
   do if ($545 >>> 0 > $ssize$1$ph$i >>> 0 & ($ssize$1$ph$i >>> 0 < 2147483647 & ($br$0$ph$i | 0) != (-1 | 0))) {
    $608 = HEAP32[3146] | 0;
    $612 = $547 - $ssize$1$ph$i + $608 & 0 - $608;
    if ($612 >>> 0 < 2147483647) if ((_sbrk($612 | 0) | 0) == (-1 | 0)) {
     _sbrk($604 | 0) | 0;
     $tsize$0323944$i = $tsize$0$ph$i;
     break L280;
    } else {
     $ssize$2$i = $612 + $ssize$1$ph$i | 0;
     break;
    } else $ssize$2$i = $ssize$1$ph$i;
   } else $ssize$2$i = $ssize$1$ph$i; while (0);
   if (($br$0$ph$i | 0) == (-1 | 0)) $tsize$0323944$i = $tsize$0$ph$i; else {
    $tbase$255$i = $br$0$ph$i;
    $tsize$254$i = $ssize$2$i;
    label = 194;
    break L258;
   }
  } while (0);
  HEAP32[3137] = HEAP32[3137] | 4;
  $tsize$1$i = $tsize$0323944$i;
  label = 191;
 } else {
  $tsize$1$i = 0;
  label = 191;
 } while (0);
 if ((label | 0) == 191) if ($550 >>> 0 < 2147483647) {
  $621 = _sbrk($550 | 0) | 0;
  $622 = _sbrk(0) | 0;
  if ($621 >>> 0 < $622 >>> 0 & (($621 | 0) != (-1 | 0) & ($622 | 0) != (-1 | 0))) {
   $628 = $622 - $621 | 0;
   $630 = $628 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($630) {
    $tbase$255$i = $621;
    $tsize$254$i = $630 ? $628 : $tsize$1$i;
    label = 194;
   }
  }
 }
 if ((label | 0) == 194) {
  $632 = (HEAP32[3134] | 0) + $tsize$254$i | 0;
  HEAP32[3134] = $632;
  if ($632 >>> 0 > (HEAP32[3135] | 0) >>> 0) HEAP32[3135] = $632;
  $635 = HEAP32[3032] | 0;
  L299 : do if (!$635) {
   $637 = HEAP32[3030] | 0;
   if (($637 | 0) == 0 | $tbase$255$i >>> 0 < $637 >>> 0) HEAP32[3030] = $tbase$255$i;
   HEAP32[3138] = $tbase$255$i;
   HEAP32[3139] = $tsize$254$i;
   HEAP32[3141] = 0;
   HEAP32[3035] = HEAP32[3144];
   HEAP32[3034] = -1;
   $i$02$i$i = 0;
   do {
    $641 = $i$02$i$i << 1;
    $642 = 12144 + ($641 << 2) | 0;
    HEAP32[12144 + ($641 + 3 << 2) >> 2] = $642;
    HEAP32[12144 + ($641 + 2 << 2) >> 2] = $642;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $648 = $tbase$255$i + 8 | 0;
   $653 = ($648 & 7 | 0) == 0 ? 0 : 0 - $648 & 7;
   $655 = $tsize$254$i + -40 - $653 | 0;
   HEAP32[3032] = $tbase$255$i + $653;
   HEAP32[3029] = $655;
   HEAP32[$tbase$255$i + ($653 + 4) >> 2] = $655 | 1;
   HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40;
   HEAP32[3033] = HEAP32[3148];
  } else {
   $sp$084$i = 12552;
   do {
    $660 = HEAP32[$sp$084$i >> 2] | 0;
    $661 = $sp$084$i + 4 | 0;
    $662 = HEAP32[$661 >> 2] | 0;
    if (($tbase$255$i | 0) == ($660 + $662 | 0)) {
     $$lcssa222 = $660;
     $$lcssa224 = $661;
     $$lcssa226 = $662;
     $sp$084$i$lcssa = $sp$084$i;
     label = 204;
     break;
    }
    $sp$084$i = HEAP32[$sp$084$i + 8 >> 2] | 0;
   } while (($sp$084$i | 0) != 0);
   if ((label | 0) == 204) if (!(HEAP32[$sp$084$i$lcssa + 12 >> 2] & 8)) if ($635 >>> 0 < $tbase$255$i >>> 0 & $635 >>> 0 >= $$lcssa222 >>> 0) {
    HEAP32[$$lcssa224 >> 2] = $$lcssa226 + $tsize$254$i;
    $676 = (HEAP32[3029] | 0) + $tsize$254$i | 0;
    $678 = $635 + 8 | 0;
    $683 = ($678 & 7 | 0) == 0 ? 0 : 0 - $678 & 7;
    $685 = $676 - $683 | 0;
    HEAP32[3032] = $635 + $683;
    HEAP32[3029] = $685;
    HEAP32[$635 + ($683 + 4) >> 2] = $685 | 1;
    HEAP32[$635 + ($676 + 4) >> 2] = 40;
    HEAP32[3033] = HEAP32[3148];
    break;
   }
   $690 = HEAP32[3030] | 0;
   if ($tbase$255$i >>> 0 < $690 >>> 0) {
    HEAP32[3030] = $tbase$255$i;
    $755 = $tbase$255$i;
   } else $755 = $690;
   $692 = $tbase$255$i + $tsize$254$i | 0;
   $sp$183$i = 12552;
   while (1) {
    if ((HEAP32[$sp$183$i >> 2] | 0) == ($692 | 0)) {
     $$lcssa219 = $sp$183$i;
     $sp$183$i$lcssa = $sp$183$i;
     label = 212;
     break;
    }
    $sp$183$i = HEAP32[$sp$183$i + 8 >> 2] | 0;
    if (!$sp$183$i) {
     $sp$0$i$i$i = 12552;
     break;
    }
   }
   if ((label | 0) == 212) if (!(HEAP32[$sp$183$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa219 >> 2] = $tbase$255$i;
    $702 = $sp$183$i$lcssa + 4 | 0;
    HEAP32[$702 >> 2] = (HEAP32[$702 >> 2] | 0) + $tsize$254$i;
    $706 = $tbase$255$i + 8 | 0;
    $711 = ($706 & 7 | 0) == 0 ? 0 : 0 - $706 & 7;
    $714 = $tbase$255$i + ($tsize$254$i + 8) | 0;
    $719 = ($714 & 7 | 0) == 0 ? 0 : 0 - $714 & 7;
    $720 = $tbase$255$i + ($719 + $tsize$254$i) | 0;
    $$sum$i19$i = $711 + $nb$0 | 0;
    $724 = $tbase$255$i + $$sum$i19$i | 0;
    $725 = $720 - ($tbase$255$i + $711) - $nb$0 | 0;
    HEAP32[$tbase$255$i + ($711 + 4) >> 2] = $nb$0 | 3;
    L317 : do if (($720 | 0) == ($635 | 0)) {
     $730 = (HEAP32[3029] | 0) + $725 | 0;
     HEAP32[3029] = $730;
     HEAP32[3032] = $724;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $730 | 1;
    } else {
     if (($720 | 0) == (HEAP32[3031] | 0)) {
      $736 = (HEAP32[3028] | 0) + $725 | 0;
      HEAP32[3028] = $736;
      HEAP32[3031] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $736 | 1;
      HEAP32[$tbase$255$i + ($736 + $$sum$i19$i) >> 2] = $736;
      break;
     }
     $$sum2$i21$i = $tsize$254$i + 4 | 0;
     $741 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $719) >> 2] | 0;
     if (($741 & 3 | 0) == 1) {
      $744 = $741 & -8;
      $745 = $741 >>> 3;
      L325 : do if ($741 >>> 0 < 256) {
       $748 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0;
       $750 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0;
       $752 = 12144 + ($745 << 1 << 2) | 0;
       do if (($748 | 0) != ($752 | 0)) {
        if ($748 >>> 0 < $755 >>> 0) _abort();
        if ((HEAP32[$748 + 12 >> 2] | 0) == ($720 | 0)) break;
        _abort();
       } while (0);
       if (($750 | 0) == ($748 | 0)) {
        HEAP32[3026] = HEAP32[3026] & ~(1 << $745);
        break;
       }
       do if (($750 | 0) == ($752 | 0)) $$pre$phi58$i$iZ2D = $750 + 8 | 0; else {
        if ($750 >>> 0 < $755 >>> 0) _abort();
        $766 = $750 + 8 | 0;
        if ((HEAP32[$766 >> 2] | 0) == ($720 | 0)) {
         $$pre$phi58$i$iZ2D = $766;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$748 + 12 >> 2] = $750;
       HEAP32[$$pre$phi58$i$iZ2D >> 2] = $748;
      } else {
       $771 = HEAP32[$tbase$255$i + (($719 | 24) + $tsize$254$i) >> 2] | 0;
       $773 = HEAP32[$tbase$255$i + ($tsize$254$i + 12 + $719) >> 2] | 0;
       do if (($773 | 0) == ($720 | 0)) {
        $$sum67$i$i = $719 | 16;
        $784 = $tbase$255$i + ($$sum2$i21$i + $$sum67$i$i) | 0;
        $785 = HEAP32[$784 >> 2] | 0;
        if (!$785) {
         $787 = $tbase$255$i + ($$sum67$i$i + $tsize$254$i) | 0;
         $788 = HEAP32[$787 >> 2] | 0;
         if (!$788) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $788;
          $RP$0$i$i = $787;
         }
        } else {
         $R$0$i$i = $785;
         $RP$0$i$i = $784;
        }
        while (1) {
         $790 = $R$0$i$i + 20 | 0;
         $791 = HEAP32[$790 >> 2] | 0;
         if ($791) {
          $R$0$i$i = $791;
          $RP$0$i$i = $790;
          continue;
         }
         $793 = $R$0$i$i + 16 | 0;
         $794 = HEAP32[$793 >> 2] | 0;
         if (!$794) {
          $R$0$i$i$lcssa = $R$0$i$i;
          $RP$0$i$i$lcssa = $RP$0$i$i;
          break;
         } else {
          $R$0$i$i = $794;
          $RP$0$i$i = $793;
         }
        }
        if ($RP$0$i$i$lcssa >>> 0 < $755 >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
         $R$1$i$i = $R$0$i$i$lcssa;
         break;
        }
       } else {
        $776 = HEAP32[$tbase$255$i + (($719 | 8) + $tsize$254$i) >> 2] | 0;
        if ($776 >>> 0 < $755 >>> 0) _abort();
        $778 = $776 + 12 | 0;
        if ((HEAP32[$778 >> 2] | 0) != ($720 | 0)) _abort();
        $781 = $773 + 8 | 0;
        if ((HEAP32[$781 >> 2] | 0) == ($720 | 0)) {
         HEAP32[$778 >> 2] = $773;
         HEAP32[$781 >> 2] = $776;
         $R$1$i$i = $773;
         break;
        } else _abort();
       } while (0);
       if (!$771) break;
       $799 = HEAP32[$tbase$255$i + ($tsize$254$i + 28 + $719) >> 2] | 0;
       $800 = 12408 + ($799 << 2) | 0;
       do if (($720 | 0) == (HEAP32[$800 >> 2] | 0)) {
        HEAP32[$800 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[3027] = HEAP32[3027] & ~(1 << $799);
        break L325;
       } else {
        if ($771 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
        $809 = $771 + 16 | 0;
        if ((HEAP32[$809 >> 2] | 0) == ($720 | 0)) HEAP32[$809 >> 2] = $R$1$i$i; else HEAP32[$771 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L325;
       } while (0);
       $814 = HEAP32[3030] | 0;
       if ($R$1$i$i >>> 0 < $814 >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $771;
       $$sum3132$i$i = $719 | 16;
       $818 = HEAP32[$tbase$255$i + ($$sum3132$i$i + $tsize$254$i) >> 2] | 0;
       do if ($818) if ($818 >>> 0 < $814 >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $818;
        HEAP32[$818 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $824 = HEAP32[$tbase$255$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0;
       if (!$824) break;
       if ($824 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $824;
        HEAP32[$824 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$255$i + (($744 | $719) + $tsize$254$i) | 0;
      $qsize$0$i$i = $744 + $725 | 0;
     } else {
      $oldfirst$0$i$i = $720;
      $qsize$0$i$i = $725;
     }
     $832 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$832 >> 2] = HEAP32[$832 >> 2] & -2;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$255$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i;
     $838 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $840 = $838 << 1;
      $841 = 12144 + ($840 << 2) | 0;
      $842 = HEAP32[3026] | 0;
      $843 = 1 << $838;
      do if (!($842 & $843)) {
       HEAP32[3026] = $842 | $843;
       $$pre$phi$i23$iZ2D = 12144 + ($840 + 2 << 2) | 0;
       $F4$0$i$i = $841;
      } else {
       $847 = 12144 + ($840 + 2 << 2) | 0;
       $848 = HEAP32[$847 >> 2] | 0;
       if ($848 >>> 0 >= (HEAP32[3030] | 0) >>> 0) {
        $$pre$phi$i23$iZ2D = $847;
        $F4$0$i$i = $848;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i23$iZ2D >> 2] = $724;
      HEAP32[$F4$0$i$i + 12 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $841;
      break;
     }
     $854 = $qsize$0$i$i >>> 8;
     do if (!$854) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $859 = ($854 + 1048320 | 0) >>> 16 & 8;
      $860 = $854 << $859;
      $863 = ($860 + 520192 | 0) >>> 16 & 4;
      $865 = $860 << $863;
      $868 = ($865 + 245760 | 0) >>> 16 & 2;
      $873 = 14 - ($863 | $859 | $868) + ($865 << $868 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($873 + 7 | 0) & 1 | $873 << 1;
     } while (0);
     $879 = 12408 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 20) >> 2] = 0;
     HEAP32[$tbase$255$i + ($$sum$i19$i + 16) >> 2] = 0;
     $883 = HEAP32[3027] | 0;
     $884 = 1 << $I7$0$i$i;
     if (!($883 & $884)) {
      HEAP32[3027] = $883 | $884;
      HEAP32[$879 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $879;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724;
      break;
     }
     $891 = HEAP32[$879 >> 2] | 0;
     L411 : do if ((HEAP32[$891 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i25$i = $891; else {
      $K8$051$i$i = $qsize$0$i$i << (($I7$0$i$i | 0) == 31 ? 0 : 25 - ($I7$0$i$i >>> 1) | 0);
      $T$050$i$i = $891;
      while (1) {
       $908 = $T$050$i$i + 16 + ($K8$051$i$i >>> 31 << 2) | 0;
       $903 = HEAP32[$908 >> 2] | 0;
       if (!$903) {
        $$lcssa = $908;
        $T$050$i$i$lcssa = $T$050$i$i;
        break;
       }
       if ((HEAP32[$903 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i25$i = $903;
        break L411;
       } else {
        $K8$051$i$i = $K8$051$i$i << 1;
        $T$050$i$i = $903;
       }
      }
      if ($$lcssa >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa >> 2] = $724;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = $T$050$i$i$lcssa;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $724;
       HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $724;
       break L317;
      }
     } while (0);
     $915 = $T$0$lcssa$i25$i + 8 | 0;
     $916 = HEAP32[$915 >> 2] | 0;
     $917 = HEAP32[3030] | 0;
     if ($916 >>> 0 >= $917 >>> 0 & $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0) {
      HEAP32[$916 + 12 >> 2] = $724;
      HEAP32[$915 >> 2] = $724;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 8) >> 2] = $916;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i25$i;
      HEAP32[$tbase$255$i + ($$sum$i19$i + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $tbase$255$i + ($711 | 8) | 0;
    return $mem$0 | 0;
   } else $sp$0$i$i$i = 12552;
   while (1) {
    $925 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($925 >>> 0 <= $635 >>> 0) {
     $928 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $929 = $925 + $928 | 0;
     if ($929 >>> 0 > $635 >>> 0) {
      $$lcssa215 = $925;
      $$lcssa216 = $928;
      $$lcssa217 = $929;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $934 = $$lcssa215 + ($$lcssa216 + -39) | 0;
   $940 = $$lcssa215 + ($$lcssa216 + -47 + (($934 & 7 | 0) == 0 ? 0 : 0 - $934 & 7)) | 0;
   $941 = $635 + 16 | 0;
   $943 = $940 >>> 0 < $941 >>> 0 ? $635 : $940;
   $944 = $943 + 8 | 0;
   $947 = $tbase$255$i + 8 | 0;
   $952 = ($947 & 7 | 0) == 0 ? 0 : 0 - $947 & 7;
   $954 = $tsize$254$i + -40 - $952 | 0;
   HEAP32[3032] = $tbase$255$i + $952;
   HEAP32[3029] = $954;
   HEAP32[$tbase$255$i + ($952 + 4) >> 2] = $954 | 1;
   HEAP32[$tbase$255$i + ($tsize$254$i + -36) >> 2] = 40;
   HEAP32[3033] = HEAP32[3148];
   $959 = $943 + 4 | 0;
   HEAP32[$959 >> 2] = 27;
   HEAP32[$944 >> 2] = HEAP32[3138];
   HEAP32[$944 + 4 >> 2] = HEAP32[3139];
   HEAP32[$944 + 8 >> 2] = HEAP32[3140];
   HEAP32[$944 + 12 >> 2] = HEAP32[3141];
   HEAP32[3138] = $tbase$255$i;
   HEAP32[3139] = $tsize$254$i;
   HEAP32[3141] = 0;
   HEAP32[3140] = $944;
   $960 = $943 + 28 | 0;
   HEAP32[$960 >> 2] = 7;
   if (($943 + 32 | 0) >>> 0 < $$lcssa217 >>> 0) {
    $964 = $960;
    do {
     $964$looptemp = $964;
     $964 = $964 + 4 | 0;
     HEAP32[$964 >> 2] = 7;
    } while (($964$looptemp + 8 | 0) >>> 0 < $$lcssa217 >>> 0);
   }
   if (($943 | 0) != ($635 | 0)) {
    $970 = $943 - $635 | 0;
    HEAP32[$959 >> 2] = HEAP32[$959 >> 2] & -2;
    HEAP32[$635 + 4 >> 2] = $970 | 1;
    HEAP32[$943 >> 2] = $970;
    $975 = $970 >>> 3;
    if ($970 >>> 0 < 256) {
     $977 = $975 << 1;
     $978 = 12144 + ($977 << 2) | 0;
     $979 = HEAP32[3026] | 0;
     $980 = 1 << $975;
     if (!($979 & $980)) {
      HEAP32[3026] = $979 | $980;
      $$pre$phi$i$iZ2D = 12144 + ($977 + 2 << 2) | 0;
      $F$0$i$i = $978;
     } else {
      $984 = 12144 + ($977 + 2 << 2) | 0;
      $985 = HEAP32[$984 >> 2] | 0;
      if ($985 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
       $$pre$phi$i$iZ2D = $984;
       $F$0$i$i = $985;
      }
     }
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $635;
     HEAP32[$F$0$i$i + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $F$0$i$i;
     HEAP32[$635 + 12 >> 2] = $978;
     break;
    }
    $991 = $970 >>> 8;
    if (!$991) $I1$0$i$i = 0; else if ($970 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $996 = ($991 + 1048320 | 0) >>> 16 & 8;
     $997 = $991 << $996;
     $1000 = ($997 + 520192 | 0) >>> 16 & 4;
     $1002 = $997 << $1000;
     $1005 = ($1002 + 245760 | 0) >>> 16 & 2;
     $1010 = 14 - ($1000 | $996 | $1005) + ($1002 << $1005 >>> 15) | 0;
     $I1$0$i$i = $970 >>> ($1010 + 7 | 0) & 1 | $1010 << 1;
    }
    $1016 = 12408 + ($I1$0$i$i << 2) | 0;
    HEAP32[$635 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$635 + 20 >> 2] = 0;
    HEAP32[$941 >> 2] = 0;
    $1019 = HEAP32[3027] | 0;
    $1020 = 1 << $I1$0$i$i;
    if (!($1019 & $1020)) {
     HEAP32[3027] = $1019 | $1020;
     HEAP32[$1016 >> 2] = $635;
     HEAP32[$635 + 24 >> 2] = $1016;
     HEAP32[$635 + 12 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $635;
     break;
    }
    $1027 = HEAP32[$1016 >> 2] | 0;
    L452 : do if ((HEAP32[$1027 + 4 >> 2] & -8 | 0) == ($970 | 0)) $T$0$lcssa$i$i = $1027; else {
     $K2$07$i$i = $970 << (($I1$0$i$i | 0) == 31 ? 0 : 25 - ($I1$0$i$i >>> 1) | 0);
     $T$06$i$i = $1027;
     while (1) {
      $1044 = $T$06$i$i + 16 + ($K2$07$i$i >>> 31 << 2) | 0;
      $1039 = HEAP32[$1044 >> 2] | 0;
      if (!$1039) {
       $$lcssa211 = $1044;
       $T$06$i$i$lcssa = $T$06$i$i;
       break;
      }
      if ((HEAP32[$1039 + 4 >> 2] & -8 | 0) == ($970 | 0)) {
       $T$0$lcssa$i$i = $1039;
       break L452;
      } else {
       $K2$07$i$i = $K2$07$i$i << 1;
       $T$06$i$i = $1039;
      }
     }
     if ($$lcssa211 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa211 >> 2] = $635;
      HEAP32[$635 + 24 >> 2] = $T$06$i$i$lcssa;
      HEAP32[$635 + 12 >> 2] = $635;
      HEAP32[$635 + 8 >> 2] = $635;
      break L299;
     }
    } while (0);
    $1051 = $T$0$lcssa$i$i + 8 | 0;
    $1052 = HEAP32[$1051 >> 2] | 0;
    $1053 = HEAP32[3030] | 0;
    if ($1052 >>> 0 >= $1053 >>> 0 & $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0) {
     HEAP32[$1052 + 12 >> 2] = $635;
     HEAP32[$1051 >> 2] = $635;
     HEAP32[$635 + 8 >> 2] = $1052;
     HEAP32[$635 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$635 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1060 = HEAP32[3029] | 0;
  if ($1060 >>> 0 > $nb$0 >>> 0) {
   $1062 = $1060 - $nb$0 | 0;
   HEAP32[3029] = $1062;
   $1063 = HEAP32[3032] | 0;
   HEAP32[3032] = $1063 + $nb$0;
   HEAP32[$1063 + ($nb$0 + 4) >> 2] = $1062 | 1;
   HEAP32[$1063 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1063 + 8 | 0;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}
function _llex($ls, $seminfo) {
 $ls = $ls | 0;
 $seminfo = $seminfo | 0;
 var $$0 = 0, $$be$i = 0, $$be20$i = 0, $$in$i$i = 0, $$in$i$i$i = 0, $$in$i4$i$i = 0, $$lcssa = 0, $$lcssa225 = 0, $$lcssa226 = 0, $$lcssa227 = 0, $$lcssa228 = 0, $$lcssa247 = 0, $$lcssa248 = 0, $$lcssa249 = 0, $$lcssa257 = 0, $$ph$i = 0, $$pr18$i = 0, $$pr28 = 0, $$pre$i10 = 0, $$pre$i17$i = 0, $0 = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $114 = 0, $115 = 0, $120 = 0, $122 = 0, $123 = 0, $126 = 0, $127 = 0, $132 = 0, $133 = 0, $134 = 0, $137 = 0, $138 = 0, $143 = 0, $145 = 0, $146 = 0, $149 = 0, $150 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $166 = 0, $168 = 0, $169 = 0, $172 = 0, $173 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $183 = 0, $184 = 0, $189 = 0, $19 = 0, $191 = 0, $192 = 0, $195 = 0, $196 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $206 = 0, $207 = 0, $210 = 0, $213 = 0, $215 = 0, $216 = 0, $218 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $225 = 0, $226 = 0, $23 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $240 = 0, $241 = 0, $246 = 0, $248 = 0, $249 = 0, $252 = 0, $253 = 0, $258 = 0, $264 = 0, $265 = 0, $266 = 0, $269 = 0, $270 = 0, $275 = 0, $28 = 0, $284 = 0, $285 = 0, $288 = 0, $289 = 0, $29 = 0, $294 = 0, $296 = 0, $297 = 0, $3 = 0, $300 = 0, $301 = 0, $306 = 0, $307 = 0, $310 = 0, $311 = 0, $314 = 0, $315 = 0, $32 = 0, $320 = 0, $326 = 0, $327 = 0, $33 = 0, $330 = 0, $331 = 0, $336 = 0, $338 = 0, $339 = 0, $340 = 0, $343 = 0, $344 = 0, $349 = 0, $350 = 0, $353 = 0, $354 = 0, $357 = 0, $358 = 0, $36 = 0, $363 = 0, $37 = 0, $374 = 0, $375 = 0, $376 = 0, $379 = 0, $380 = 0, $385 = 0, $394 = 0, $395 = 0, $396 = 0, $399 = 0, $4 = 0, $400 = 0, $405 = 0, $414 = 0, $415 = 0, $418 = 0, $419 = 0, $42 = 0, $424 = 0, $425 = 0, $426 = 0, $429 = 0, $43 = 0, $430 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $44 = 0, $440 = 0, $441 = 0, $444 = 0, $446 = 0, $448 = 0, $451 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $458 = 0, $459 = 0, $462 = 0, $464 = 0, $466 = 0, $468 = 0, $47 = 0, $470 = 0, $472 = 0, $473 = 0, $474 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $488 = 0, $489 = 0, $492 = 0, $495 = 0, $497 = 0, $499 = 0, $5 = 0, $501 = 0, $502 = 0, $503 = 0, $506 = 0, $507 = 0, $512 = 0, $513 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $53 = 0, $536 = 0, $537 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $553 = 0, $554 = 0, $557 = 0, $56 = 0, $560 = 0, $562 = 0, $564 = 0, $566 = 0, $567 = 0, $568 = 0, $571 = 0, $572 = 0, $579 = 0, $580 = 0, $581 = 0, $583 = 0, $584 = 0, $587 = 0, $59 = 0, $590 = 0, $592 = 0, $595 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $602 = 0, $603 = 0, $608 = 0, $611 = 0, $612 = 0, $613 = 0, $615 = 0, $616 = 0, $619 = 0, $622 = 0, $624 = 0, $627 = 0, $629 = 0, $630 = 0, $631 = 0, $634 = 0, $635 = 0, $640 = 0, $646 = 0, $647 = 0, $648 = 0, $65 = 0, $650 = 0, $651 = 0, $654 = 0, $657 = 0, $659 = 0, $661 = 0, $663 = 0, $665 = 0, $666 = 0, $667 = 0, $67 = 0, $670 = 0, $671 = 0, $676 = 0, $680 = 0, $681 = 0, $682 = 0, $684 = 0, $685 = 0, $688 = 0, $691 = 0, $693 = 0, $696 = 0, $698 = 0, $699 = 0, $7 = 0, $700 = 0, $703 = 0, $704 = 0, $709 = 0, $710 = 0, $711 = 0, $714 = 0, $715 = 0, $716 = 0, $718 = 0, $719 = 0, $722 = 0, $724 = 0, $726 = 0, $729 = 0, $73 = 0, $731 = 0, $732 = 0, $733 = 0, $736 = 0, $737 = 0, $74 = 0, $742 = 0, $745 = 0, $746 = 0, $747 = 0, $749 = 0, $750 = 0, $753 = 0, $755 = 0, $757 = 0, $760 = 0, $762 = 0, $763 = 0, $764 = 0, $767 = 0, $768 = 0, $77 = 0, $773 = 0, $775 = 0, $78 = 0, $781 = 0, $782 = 0, $783 = 0, $785 = 0, $786 = 0, $787 = 0, $789 = 0, $791 = 0, $793 = 0, $796 = 0, $798 = 0, $799 = 0, $800 = 0, $803 = 0, $804 = 0, $809 = 0, $811 = 0, $813 = 0, $815 = 0, $817 = 0, $819 = 0, $820 = 0, $821 = 0, $824 = 0, $828 = 0, $829 = 0, $83 = 0, $832 = 0, $835 = 0, $838 = 0, $84 = 0, $842 = 0, $843 = 0, $846 = 0, $849 = 0, $858 = 0, $859 = 0, $860 = 0, $861 = 0, $863 = 0, $864 = 0, $867 = 0, $869 = 0, $87 = 0, $871 = 0, $873 = 0, $875 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $882 = 0, $883 = 0, $888 = 0, $894 = 0, $898 = 0, $899 = 0, $900 = 0, $901 = 0, $91 = 0, $914 = 0, $915 = 0, $92 = 0, $931 = 0, $935 = 0, $936 = 0, $939 = 0, $940 = 0, $945 = 0, $946 = 0, $97 = 0, $99 = 0, $c$0$i = 0, $c$1$i = 0, $c$i$i = 0, $expo$0$ph$i = 0, $i$0$lcssa$i$i = 0, $i$0$lcssa$i$i$lcssa = 0, $i$03$lcssa$i$i = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$idx$val$i = 0, $ls$idx$val$idx$val$i$i = 0, $ls$idx$val$idx1$val$i = 0, $ls$idx$val$idx3$val$i$i = 0, $ls$idx1$val$i$i = 0, $ls$idx1$val$idx$val$i$i = 0, $ls$idx1$val$idx2$val$i$i = 0, $r$0$lcssa$i$i = 0, $ts$0$i = 0, $ts$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c$i$i = sp;
 $0 = $ls + 60 | 0;
 HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
 $3 = $ls + 56 | 0;
 $4 = $ls + 4 | 0;
 L1 : while (1) {
  $5 = HEAP32[$ls >> 2] | 0;
  L3 : while (1) {
   switch ($5 | 0) {
   case 60:
    {
     label = 47;
     break L1;
     break;
    }
   case 11:
   case 9:
   case 12:
   case 32:
    break;
   case 13:
   case 10:
    {
     $$lcssa249 = $5;
     label = 4;
     break L3;
     break;
    }
   case 126:
    {
     label = 63;
     break L1;
     break;
    }
   case 58:
    {
     label = 71;
     break L1;
     break;
    }
   case 91:
    {
     label = 35;
     break L1;
     break;
    }
   case 62:
    {
     label = 55;
     break L1;
     break;
    }
   case 61:
    {
     label = 39;
     break L1;
     break;
    }
   case 45:
    {
     break L3;
     break;
    }
   case 39:
   case 34:
    {
     $$lcssa257 = $5;
     label = 79;
     break L1;
     break;
    }
   case 46:
    {
     label = 203;
     break L1;
     break;
    }
   case 57:
   case 56:
   case 55:
   case 54:
   case 53:
   case 52:
   case 51:
   case 50:
   case 49:
   case 48:
    {
     $661 = $5;
     break L1;
     break;
    }
   case -1:
    {
     $$0 = 286;
     label = 349;
     break L1;
     break;
    }
   default:
    {
     $$lcssa248 = $5;
     label = 325;
     break L1;
    }
   }
   $32 = HEAP32[$3 >> 2] | 0;
   $33 = HEAP32[$32 >> 2] | 0;
   HEAP32[$32 >> 2] = $33 + -1;
   if (!$33) $42 = _luaZ_fill($32) | 0; else {
    $36 = $32 + 4 | 0;
    $37 = HEAP32[$36 >> 2] | 0;
    HEAP32[$36 >> 2] = $37 + 1;
    $42 = HEAPU8[$37 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $42;
   $5 = $42;
  }
  if ((label | 0) == 4) {
   label = 0;
   $6 = HEAP32[$3 >> 2] | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   HEAP32[$6 >> 2] = $7 + -1;
   if (!$7) $16 = _luaZ_fill($6) | 0; else {
    $10 = $6 + 4 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    HEAP32[$10 >> 2] = $11 + 1;
    $16 = HEAPU8[$11 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $16;
   if (($16 | 0) == 13 | ($16 | 0) == 10) if (($16 | 0) != ($$lcssa249 | 0)) {
    $18 = HEAP32[$3 >> 2] | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    HEAP32[$18 >> 2] = $19 + -1;
    if (!$19) $28 = _luaZ_fill($18) | 0; else {
     $22 = $18 + 4 | 0;
     $23 = HEAP32[$22 >> 2] | 0;
     HEAP32[$22 >> 2] = $23 + 1;
     $28 = HEAPU8[$23 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $28;
   }
   $29 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $29 + 1;
   if (($29 | 0) > 2147483643) {
    label = 14;
    break;
   } else continue;
  }
  $43 = HEAP32[$3 >> 2] | 0;
  $44 = HEAP32[$43 >> 2] | 0;
  HEAP32[$43 >> 2] = $44 + -1;
  if (!$44) $53 = _luaZ_fill($43) | 0; else {
   $47 = $43 + 4 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   HEAP32[$47 >> 2] = $48 + 1;
   $53 = HEAPU8[$48 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $53;
  if (($53 | 0) != 45) {
   $$0 = 45;
   label = 349;
   break;
  }
  $55 = HEAP32[$3 >> 2] | 0;
  $56 = HEAP32[$55 >> 2] | 0;
  HEAP32[$55 >> 2] = $56 + -1;
  if (!$56) $65 = _luaZ_fill($55) | 0; else {
   $59 = $55 + 4 | 0;
   $60 = HEAP32[$59 >> 2] | 0;
   HEAP32[$59 >> 2] = $60 + 1;
   $65 = HEAPU8[$60 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $65;
  do if (($65 | 0) == 91) {
   $67 = _skip_sep($ls) | 0;
   HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
   if (($67 | 0) > -1) {
    _read_long_string($ls, 0, $67);
    HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] = 0;
    continue L1;
   } else {
    $946 = HEAP32[$ls >> 2] | 0;
    break;
   }
  } else $946 = $65; while (0);
  while (1) {
   if (($946 | 0) == -1 | ($946 | 0) == 13 | ($946 | 0) == 10) continue L1;
   $73 = HEAP32[$3 >> 2] | 0;
   $74 = HEAP32[$73 >> 2] | 0;
   HEAP32[$73 >> 2] = $74 + -1;
   if (!$74) $83 = _luaZ_fill($73) | 0; else {
    $77 = $73 + 4 | 0;
    $78 = HEAP32[$77 >> 2] | 0;
    HEAP32[$77 >> 2] = $78 + 1;
    $83 = HEAPU8[$78 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $83;
   $946 = $83;
  }
 }
 switch (label | 0) {
 case 14:
  {
   _luaX_syntaxerror($ls, 1200);
   break;
  }
 case 35:
  {
   $84 = _skip_sep($ls) | 0;
   if (($84 | 0) > -1) {
    _read_long_string($ls, $seminfo, $84);
    $$0 = 289;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (($84 | 0) == -1) {
    $$0 = 91;
    STACKTOP = sp;
    return $$0 | 0;
   } else _lexerror($ls, 1232, 289);
   break;
  }
 case 39:
  {
   $87 = HEAP32[$3 >> 2] | 0;
   $88 = HEAP32[$87 >> 2] | 0;
   HEAP32[$87 >> 2] = $88 + -1;
   if (!$88) $97 = _luaZ_fill($87) | 0; else {
    $91 = $87 + 4 | 0;
    $92 = HEAP32[$91 >> 2] | 0;
    HEAP32[$91 >> 2] = $92 + 1;
    $97 = HEAPU8[$92 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $97;
   if (($97 | 0) != 61) {
    $$0 = 61;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $99 = HEAP32[$3 >> 2] | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   HEAP32[$99 >> 2] = $100 + -1;
   if (!$100) $109 = _luaZ_fill($99) | 0; else {
    $103 = $99 + 4 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    HEAP32[$103 >> 2] = $104 + 1;
    $109 = HEAPU8[$104 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $109;
   $$0 = 281;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 47:
  {
   $110 = HEAP32[$3 >> 2] | 0;
   $111 = HEAP32[$110 >> 2] | 0;
   HEAP32[$110 >> 2] = $111 + -1;
   if (!$111) $120 = _luaZ_fill($110) | 0; else {
    $114 = $110 + 4 | 0;
    $115 = HEAP32[$114 >> 2] | 0;
    HEAP32[$114 >> 2] = $115 + 1;
    $120 = HEAPU8[$115 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $120;
   if (($120 | 0) != 61) {
    $$0 = 60;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $122 = HEAP32[$3 >> 2] | 0;
   $123 = HEAP32[$122 >> 2] | 0;
   HEAP32[$122 >> 2] = $123 + -1;
   if (!$123) $132 = _luaZ_fill($122) | 0; else {
    $126 = $122 + 4 | 0;
    $127 = HEAP32[$126 >> 2] | 0;
    HEAP32[$126 >> 2] = $127 + 1;
    $132 = HEAPU8[$127 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $132;
   $$0 = 283;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 55:
  {
   $133 = HEAP32[$3 >> 2] | 0;
   $134 = HEAP32[$133 >> 2] | 0;
   HEAP32[$133 >> 2] = $134 + -1;
   if (!$134) $143 = _luaZ_fill($133) | 0; else {
    $137 = $133 + 4 | 0;
    $138 = HEAP32[$137 >> 2] | 0;
    HEAP32[$137 >> 2] = $138 + 1;
    $143 = HEAPU8[$138 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $143;
   if (($143 | 0) != 61) {
    $$0 = 62;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $145 = HEAP32[$3 >> 2] | 0;
   $146 = HEAP32[$145 >> 2] | 0;
   HEAP32[$145 >> 2] = $146 + -1;
   if (!$146) $155 = _luaZ_fill($145) | 0; else {
    $149 = $145 + 4 | 0;
    $150 = HEAP32[$149 >> 2] | 0;
    HEAP32[$149 >> 2] = $150 + 1;
    $155 = HEAPU8[$150 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $155;
   $$0 = 282;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 63:
  {
   $156 = HEAP32[$3 >> 2] | 0;
   $157 = HEAP32[$156 >> 2] | 0;
   HEAP32[$156 >> 2] = $157 + -1;
   if (!$157) $166 = _luaZ_fill($156) | 0; else {
    $160 = $156 + 4 | 0;
    $161 = HEAP32[$160 >> 2] | 0;
    HEAP32[$160 >> 2] = $161 + 1;
    $166 = HEAPU8[$161 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $166;
   if (($166 | 0) != 61) {
    $$0 = 126;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $168 = HEAP32[$3 >> 2] | 0;
   $169 = HEAP32[$168 >> 2] | 0;
   HEAP32[$168 >> 2] = $169 + -1;
   if (!$169) $178 = _luaZ_fill($168) | 0; else {
    $172 = $168 + 4 | 0;
    $173 = HEAP32[$172 >> 2] | 0;
    HEAP32[$172 >> 2] = $173 + 1;
    $178 = HEAPU8[$173 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $178;
   $$0 = 284;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 71:
  {
   $179 = HEAP32[$3 >> 2] | 0;
   $180 = HEAP32[$179 >> 2] | 0;
   HEAP32[$179 >> 2] = $180 + -1;
   if (!$180) $189 = _luaZ_fill($179) | 0; else {
    $183 = $179 + 4 | 0;
    $184 = HEAP32[$183 >> 2] | 0;
    HEAP32[$183 >> 2] = $184 + 1;
    $189 = HEAPU8[$184 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $189;
   if (($189 | 0) != 58) {
    $$0 = 58;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $191 = HEAP32[$3 >> 2] | 0;
   $192 = HEAP32[$191 >> 2] | 0;
   HEAP32[$191 >> 2] = $192 + -1;
   if (!$192) $201 = _luaZ_fill($191) | 0; else {
    $195 = $191 + 4 | 0;
    $196 = HEAP32[$195 >> 2] | 0;
    HEAP32[$195 >> 2] = $196 + 1;
    $201 = HEAPU8[$196 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $201;
   $$0 = 285;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 79:
  {
   $202 = HEAP32[$0 >> 2] | 0;
   $203 = $202 + 4 | 0;
   $204 = HEAP32[$203 >> 2] | 0;
   $206 = $202 + 8 | 0;
   $207 = HEAP32[$206 >> 2] | 0;
   do if (($204 + 1 | 0) >>> 0 > $207 >>> 0) {
    if ($207 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
    $210 = $207 << 1;
    $213 = HEAP32[$ls + 52 >> 2] | 0;
    if (($210 | 0) == -2) _luaM_toobig($213); else {
     $215 = _luaM_realloc_($213, HEAP32[$202 >> 2] | 0, $207, $210) | 0;
     HEAP32[$202 >> 2] = $215;
     HEAP32[$206 >> 2] = $210;
     $218 = HEAP32[$203 >> 2] | 0;
     $220 = $215;
     break;
    }
   } else {
    $218 = $204;
    $220 = HEAP32[$202 >> 2] | 0;
   } while (0);
   $216 = $$lcssa257 & 255;
   HEAP32[$203 >> 2] = $218 + 1;
   HEAP8[$220 + $218 >> 0] = $216;
   $221 = HEAP32[$3 >> 2] | 0;
   $222 = HEAP32[$221 >> 2] | 0;
   HEAP32[$221 >> 2] = $222 + -1;
   if (!$222) $231 = _luaZ_fill($221) | 0; else {
    $225 = $221 + 4 | 0;
    $226 = HEAP32[$225 >> 2] | 0;
    HEAP32[$225 >> 2] = $226 + 1;
    $231 = HEAPU8[$226 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $231;
   L136 : do if (($231 | 0) != ($$lcssa257 | 0)) {
    $233 = $ls + 52 | 0;
    $234 = $c$i$i + 4 | 0;
    $235 = $c$i$i + 8 | 0;
    $468 = $231;
    L138 : while (1) {
     L140 : do if (($468 | 0) == -1) {
      label = 92;
      break L138;
     } else if (($468 | 0) == 13 | ($468 | 0) == 10) {
      label = 93;
      break L138;
     } else if (($468 | 0) == 92) {
      $236 = HEAP32[$3 >> 2] | 0;
      $237 = HEAP32[$236 >> 2] | 0;
      HEAP32[$236 >> 2] = $237 + -1;
      if (!$237) $246 = _luaZ_fill($236) | 0; else {
       $240 = $236 + 4 | 0;
       $241 = HEAP32[$240 >> 2] | 0;
       HEAP32[$240 >> 2] = $241 + 1;
       $246 = HEAPU8[$241 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $246;
      do switch ($246 | 0) {
      case 13:
      case 10:
       {
        $284 = HEAP32[$3 >> 2] | 0;
        $285 = HEAP32[$284 >> 2] | 0;
        HEAP32[$284 >> 2] = $285 + -1;
        if (!$285) $294 = _luaZ_fill($284) | 0; else {
         $288 = $284 + 4 | 0;
         $289 = HEAP32[$288 >> 2] | 0;
         HEAP32[$288 >> 2] = $289 + 1;
         $294 = HEAPU8[$289 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $294;
        if (($294 | 0) == 13 | ($294 | 0) == 10) if (($294 | 0) != ($246 | 0)) {
         $296 = HEAP32[$3 >> 2] | 0;
         $297 = HEAP32[$296 >> 2] | 0;
         HEAP32[$296 >> 2] = $297 + -1;
         if (!$297) $306 = _luaZ_fill($296) | 0; else {
          $300 = $296 + 4 | 0;
          $301 = HEAP32[$300 >> 2] | 0;
          HEAP32[$300 >> 2] = $301 + 1;
          $306 = HEAPU8[$301 >> 0] | 0;
         }
         HEAP32[$ls >> 2] = $306;
        }
        $307 = HEAP32[$4 >> 2] | 0;
        HEAP32[$4 >> 2] = $307 + 1;
        if (($307 | 0) > 2147483643) {
         label = 125;
         break L138;
        } else $c$1$i = 10;
        break;
       }
      case 39:
      case 34:
      case 92:
       {
        $c$0$i = $246;
        label = 165;
        break;
       }
      case 122:
       {
        $310 = HEAP32[$3 >> 2] | 0;
        $311 = HEAP32[$310 >> 2] | 0;
        HEAP32[$310 >> 2] = $311 + -1;
        if (!$311) $320 = _luaZ_fill($310) | 0; else {
         $314 = $310 + 4 | 0;
         $315 = HEAP32[$314 >> 2] | 0;
         HEAP32[$314 >> 2] = $315 + 1;
         $320 = HEAPU8[$315 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $320;
        if (!(HEAP8[136 + ($320 + 1) >> 0] & 8)) {
         $$be20$i = $320;
         break L140;
        } else $338 = $320;
        while (1) {
         if (($338 | 0) == 13 | ($338 | 0) == 10) {
          $326 = HEAP32[$3 >> 2] | 0;
          $327 = HEAP32[$326 >> 2] | 0;
          HEAP32[$326 >> 2] = $327 + -1;
          if (!$327) $336 = _luaZ_fill($326) | 0; else {
           $330 = $326 + 4 | 0;
           $331 = HEAP32[$330 >> 2] | 0;
           HEAP32[$330 >> 2] = $331 + 1;
           $336 = HEAPU8[$331 >> 0] | 0;
          }
          HEAP32[$ls >> 2] = $336;
          if (($336 | 0) == 13 | ($336 | 0) == 10) if (($336 | 0) == ($338 | 0)) $$pr18$i = $338; else {
           $339 = HEAP32[$3 >> 2] | 0;
           $340 = HEAP32[$339 >> 2] | 0;
           HEAP32[$339 >> 2] = $340 + -1;
           if (!$340) $349 = _luaZ_fill($339) | 0; else {
            $343 = $339 + 4 | 0;
            $344 = HEAP32[$343 >> 2] | 0;
            HEAP32[$343 >> 2] = $344 + 1;
            $349 = HEAPU8[$344 >> 0] | 0;
           }
           HEAP32[$ls >> 2] = $349;
           $$pr18$i = $349;
          } else $$pr18$i = $336;
          $350 = HEAP32[$4 >> 2] | 0;
          HEAP32[$4 >> 2] = $350 + 1;
          if (($350 | 0) > 2147483643) {
           label = 142;
           break L138;
          } else $$be$i = $$pr18$i;
         } else {
          $353 = HEAP32[$3 >> 2] | 0;
          $354 = HEAP32[$353 >> 2] | 0;
          HEAP32[$353 >> 2] = $354 + -1;
          if (!$354) $363 = _luaZ_fill($353) | 0; else {
           $357 = $353 + 4 | 0;
           $358 = HEAP32[$357 >> 2] | 0;
           HEAP32[$357 >> 2] = $358 + 1;
           $363 = HEAPU8[$358 >> 0] | 0;
          }
          HEAP32[$ls >> 2] = $363;
          $$be$i = $363;
         }
         if (!(HEAP8[136 + ($$be$i + 1) >> 0] & 8)) {
          $$be20$i = $$be$i;
          break L140;
         } else $338 = $$be$i;
        }
        break;
       }
      case 120:
       {
        HEAP32[$c$i$i >> 2] = 120;
        $248 = HEAP32[$3 >> 2] | 0;
        $249 = HEAP32[$248 >> 2] | 0;
        HEAP32[$248 >> 2] = $249 + -1;
        if (!$249) $258 = _luaZ_fill($248) | 0; else {
         $252 = $248 + 4 | 0;
         $253 = HEAP32[$252 >> 2] | 0;
         HEAP32[$252 >> 2] = $253 + 1;
         $258 = HEAPU8[$253 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $258;
        HEAP32[$234 >> 2] = $258;
        if (!(HEAP8[136 + ($258 + 1) >> 0] & 16)) {
         $i$03$lcssa$i$i = 2;
         label = 109;
         break L138;
        }
        $264 = _luaO_hexavalue($258) | 0;
        $265 = HEAP32[$3 >> 2] | 0;
        $266 = HEAP32[$265 >> 2] | 0;
        HEAP32[$265 >> 2] = $266 + -1;
        if (!$266) $275 = _luaZ_fill($265) | 0; else {
         $269 = $265 + 4 | 0;
         $270 = HEAP32[$269 >> 2] | 0;
         HEAP32[$269 >> 2] = $270 + 1;
         $275 = HEAPU8[$270 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $275;
        HEAP32[$235 >> 2] = $275;
        if (!(HEAP8[136 + ($275 + 1) >> 0] & 16)) {
         $i$03$lcssa$i$i = 3;
         label = 109;
         break L138;
        }
        $c$0$i = (_luaO_hexavalue($275) | 0) + ($264 << 4) | 0;
        label = 165;
        break;
       }
      case 97:
       {
        $c$0$i = 7;
        label = 165;
        break;
       }
      case -1:
       {
        $$be20$i = -1;
        break L140;
        break;
       }
      case 98:
       {
        $c$0$i = 8;
        label = 165;
        break;
       }
      case 102:
       {
        $c$0$i = 12;
        label = 165;
        break;
       }
      case 110:
       {
        $c$0$i = 10;
        label = 165;
        break;
       }
      case 114:
       {
        $c$0$i = 13;
        label = 165;
        break;
       }
      case 116:
       {
        $c$0$i = 9;
        label = 165;
        break;
       }
      case 118:
       {
        $c$0$i = 11;
        label = 165;
        break;
       }
      default:
       {
        if (!(HEAP8[136 + ($246 + 1) >> 0] & 2)) {
         label = 149;
         break L138;
        }
        HEAP32[$c$i$i >> 2] = $246;
        $374 = $246 + -48 | 0;
        $375 = HEAP32[$3 >> 2] | 0;
        $376 = HEAP32[$375 >> 2] | 0;
        HEAP32[$375 >> 2] = $376 + -1;
        if (!$376) $385 = _luaZ_fill($375) | 0; else {
         $379 = $375 + 4 | 0;
         $380 = HEAP32[$379 >> 2] | 0;
         HEAP32[$379 >> 2] = $380 + 1;
         $385 = HEAPU8[$380 >> 0] | 0;
        }
        HEAP32[$ls >> 2] = $385;
        if (!(HEAP8[136 + ($385 + 1) >> 0] & 2)) {
         $i$0$lcssa$i$i = 1;
         $r$0$lcssa$i$i = $374;
        } else {
         HEAP32[$234 >> 2] = $385;
         $394 = ($374 * 10 | 0) + -48 + $385 | 0;
         $395 = HEAP32[$3 >> 2] | 0;
         $396 = HEAP32[$395 >> 2] | 0;
         HEAP32[$395 >> 2] = $396 + -1;
         if (!$396) $405 = _luaZ_fill($395) | 0; else {
          $399 = $395 + 4 | 0;
          $400 = HEAP32[$399 >> 2] | 0;
          HEAP32[$399 >> 2] = $400 + 1;
          $405 = HEAPU8[$400 >> 0] | 0;
         }
         HEAP32[$ls >> 2] = $405;
         if (!(HEAP8[136 + ($405 + 1) >> 0] & 2)) {
          $i$0$lcssa$i$i = 2;
          $r$0$lcssa$i$i = $394;
         } else {
          HEAP32[$235 >> 2] = $405;
          $414 = HEAP32[$3 >> 2] | 0;
          $415 = HEAP32[$414 >> 2] | 0;
          HEAP32[$414 >> 2] = $415 + -1;
          if (!$415) $424 = _luaZ_fill($414) | 0; else {
           $418 = $414 + 4 | 0;
           $419 = HEAP32[$418 >> 2] | 0;
           HEAP32[$418 >> 2] = $419 + 1;
           $424 = HEAPU8[$419 >> 0] | 0;
          }
          HEAP32[$ls >> 2] = $424;
          $i$0$lcssa$i$i = 3;
          $r$0$lcssa$i$i = ($394 * 10 | 0) + -48 + $405 | 0;
         }
        }
        if (($r$0$lcssa$i$i | 0) > 255) {
         $i$0$lcssa$i$i$lcssa = $i$0$lcssa$i$i;
         label = 155;
         break L138;
        }
        $c$1$i = $r$0$lcssa$i$i;
       }
      } while (0);
      if ((label | 0) == 165) {
       label = 0;
       $425 = HEAP32[$3 >> 2] | 0;
       $426 = HEAP32[$425 >> 2] | 0;
       HEAP32[$425 >> 2] = $426 + -1;
       if (!$426) $435 = _luaZ_fill($425) | 0; else {
        $429 = $425 + 4 | 0;
        $430 = HEAP32[$429 >> 2] | 0;
        HEAP32[$429 >> 2] = $430 + 1;
        $435 = HEAPU8[$430 >> 0] | 0;
       }
       HEAP32[$ls >> 2] = $435;
       $c$1$i = $c$0$i;
      }
      $436 = HEAP32[$0 >> 2] | 0;
      $437 = $436 + 4 | 0;
      $438 = HEAP32[$437 >> 2] | 0;
      $440 = $436 + 8 | 0;
      $441 = HEAP32[$440 >> 2] | 0;
      if (($438 + 1 | 0) >>> 0 > $441 >>> 0) {
       if ($441 >>> 0 > 2147483645) {
        label = 172;
        break L138;
       }
       $444 = $441 << 1;
       $446 = HEAP32[$233 >> 2] | 0;
       if (($444 | 0) == -2) {
        $$lcssa225 = $446;
        label = 174;
        break L138;
       }
       $448 = _luaM_realloc_($446, HEAP32[$436 >> 2] | 0, $441, $444) | 0;
       HEAP32[$436 >> 2] = $448;
       HEAP32[$440 >> 2] = $444;
       $451 = HEAP32[$437 >> 2] | 0;
       $453 = $448;
      } else {
       $451 = $438;
       $453 = HEAP32[$436 >> 2] | 0;
      }
      HEAP32[$437 >> 2] = $451 + 1;
      HEAP8[$453 + $451 >> 0] = $c$1$i;
      $$be20$i = HEAP32[$ls >> 2] | 0;
     } else {
      $454 = HEAP32[$0 >> 2] | 0;
      $455 = $454 + 4 | 0;
      $456 = HEAP32[$455 >> 2] | 0;
      $458 = $454 + 8 | 0;
      $459 = HEAP32[$458 >> 2] | 0;
      if (($456 + 1 | 0) >>> 0 > $459 >>> 0) {
       if ($459 >>> 0 > 2147483645) {
        label = 180;
        break L138;
       }
       $462 = $459 << 1;
       $464 = HEAP32[$233 >> 2] | 0;
       if (($462 | 0) == -2) {
        $$lcssa226 = $464;
        label = 182;
        break L138;
       }
       $466 = _luaM_realloc_($464, HEAP32[$454 >> 2] | 0, $459, $462) | 0;
       HEAP32[$454 >> 2] = $466;
       HEAP32[$458 >> 2] = $462;
       $470 = HEAP32[$455 >> 2] | 0;
       $472 = $466;
      } else {
       $470 = $456;
       $472 = HEAP32[$454 >> 2] | 0;
      }
      HEAP32[$455 >> 2] = $470 + 1;
      HEAP8[$472 + $470 >> 0] = $468;
      $473 = HEAP32[$3 >> 2] | 0;
      $474 = HEAP32[$473 >> 2] | 0;
      HEAP32[$473 >> 2] = $474 + -1;
      if (!$474) $483 = _luaZ_fill($473) | 0; else {
       $477 = $473 + 4 | 0;
       $478 = HEAP32[$477 >> 2] | 0;
       HEAP32[$477 >> 2] = $478 + 1;
       $483 = HEAPU8[$478 >> 0] | 0;
      }
      HEAP32[$ls >> 2] = $483;
      $$be20$i = $483;
     } while (0);
     if (($$be20$i | 0) == ($$lcssa257 | 0)) break L136; else $468 = $$be20$i;
    }
    switch (label | 0) {
    case 92:
     {
      _lexerror($ls, 1296, 286);
      break;
     }
    case 93:
     {
      _lexerror($ls, 1296, 289);
      break;
     }
    case 109:
     {
      _escerror($ls, $c$i$i, $i$03$lcssa$i$i, 1320);
      break;
     }
    case 125:
     {
      _luaX_syntaxerror($ls, 1200);
      break;
     }
    case 142:
     {
      _luaX_syntaxerror($ls, 1200);
      break;
     }
    case 149:
     {
      _escerror($ls, $ls, 1, 1352);
      break;
     }
    case 155:
     {
      _escerror($ls, $c$i$i, $i$0$lcssa$i$i$lcssa, 1376);
      break;
     }
    case 172:
     {
      _lexerror($ls, 1264, 0);
      break;
     }
    case 174:
     {
      _luaM_toobig($$lcssa225);
      break;
     }
    case 180:
     {
      _lexerror($ls, 1264, 0);
      break;
     }
    case 182:
     {
      _luaM_toobig($$lcssa226);
      break;
     }
    }
   } while (0);
   $484 = HEAP32[$0 >> 2] | 0;
   $485 = $484 + 4 | 0;
   $486 = HEAP32[$485 >> 2] | 0;
   $488 = $484 + 8 | 0;
   $489 = HEAP32[$488 >> 2] | 0;
   do if (($486 + 1 | 0) >>> 0 > $489 >>> 0) {
    if ($489 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
    $492 = $489 << 1;
    $495 = HEAP32[$ls + 52 >> 2] | 0;
    if (($492 | 0) == -2) _luaM_toobig($495); else {
     $497 = _luaM_realloc_($495, HEAP32[$484 >> 2] | 0, $489, $492) | 0;
     HEAP32[$484 >> 2] = $497;
     HEAP32[$488 >> 2] = $492;
     $499 = HEAP32[$485 >> 2] | 0;
     $501 = $497;
     break;
    }
   } else {
    $499 = $486;
    $501 = HEAP32[$484 >> 2] | 0;
   } while (0);
   HEAP32[$485 >> 2] = $499 + 1;
   HEAP8[$501 + $499 >> 0] = $216;
   $502 = HEAP32[$3 >> 2] | 0;
   $503 = HEAP32[$502 >> 2] | 0;
   HEAP32[$502 >> 2] = $503 + -1;
   if (!$503) $512 = _luaZ_fill($502) | 0; else {
    $506 = $502 + 4 | 0;
    $507 = HEAP32[$506 >> 2] | 0;
    HEAP32[$506 >> 2] = $507 + 1;
    $512 = HEAPU8[$507 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $512;
   $513 = HEAP32[$0 >> 2] | 0;
   $520 = HEAP32[$ls + 52 >> 2] | 0;
   $521 = _luaS_newlstr($520, (HEAP32[$513 >> 2] | 0) + 1 | 0, (HEAP32[$513 + 4 >> 2] | 0) + -2 | 0) | 0;
   $522 = $520 + 8 | 0;
   $523 = HEAP32[$522 >> 2] | 0;
   HEAP32[$522 >> 2] = $523 + 16;
   HEAP32[$523 >> 2] = $521;
   HEAP32[$523 + 8 >> 2] = HEAPU8[$521 + 4 >> 0] | 64;
   $536 = _luaH_set($520, HEAP32[(HEAP32[$ls + 48 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[$522 >> 2] | 0) + -16 | 0) | 0;
   $537 = $536 + 8 | 0;
   if (!(HEAP32[$537 >> 2] | 0)) {
    HEAP32[$536 >> 2] = 1;
    HEAP32[$537 >> 2] = 1;
    if ((HEAP32[(HEAP32[$520 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
     _luaC_step($520);
     $ts$0$i$i = $521;
    } else $ts$0$i$i = $521;
   } else $ts$0$i$i = HEAP32[$536 + 16 >> 2] | 0;
   HEAP32[$522 >> 2] = (HEAP32[$522 >> 2] | 0) + -16;
   HEAP32[$seminfo >> 2] = $ts$0$i$i;
   $$0 = 289;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 203:
  {
   $549 = HEAP32[$0 >> 2] | 0;
   $550 = $549 + 4 | 0;
   $551 = HEAP32[$550 >> 2] | 0;
   $553 = $549 + 8 | 0;
   $554 = HEAP32[$553 >> 2] | 0;
   do if (($551 + 1 | 0) >>> 0 > $554 >>> 0) {
    if ($554 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
    $557 = $554 << 1;
    $560 = HEAP32[$ls + 52 >> 2] | 0;
    if (($557 | 0) == -2) _luaM_toobig($560); else {
     $562 = _luaM_realloc_($560, HEAP32[$549 >> 2] | 0, $554, $557) | 0;
     HEAP32[$549 >> 2] = $562;
     HEAP32[$553 >> 2] = $557;
     $564 = HEAP32[$550 >> 2] | 0;
     $566 = $562;
     break;
    }
   } else {
    $564 = $551;
    $566 = HEAP32[$549 >> 2] | 0;
   } while (0);
   HEAP32[$550 >> 2] = $564 + 1;
   HEAP8[$566 + $564 >> 0] = 46;
   $567 = HEAP32[$3 >> 2] | 0;
   $568 = HEAP32[$567 >> 2] | 0;
   HEAP32[$567 >> 2] = $568 + -1;
   if (!$568) $$pr28 = _luaZ_fill($567) | 0; else {
    $571 = $567 + 4 | 0;
    $572 = HEAP32[$571 >> 2] | 0;
    HEAP32[$571 >> 2] = $572 + 1;
    $$pr28 = HEAPU8[$572 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $$pr28;
   if ($$pr28) if (_memchr(12096, $$pr28, 2) | 0) {
    $579 = HEAP32[$0 >> 2] | 0;
    $580 = $579 + 4 | 0;
    $581 = HEAP32[$580 >> 2] | 0;
    $583 = $579 + 8 | 0;
    $584 = HEAP32[$583 >> 2] | 0;
    do if (($581 + 1 | 0) >>> 0 > $584 >>> 0) {
     if ($584 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
     $587 = $584 << 1;
     $590 = HEAP32[$ls + 52 >> 2] | 0;
     if (($587 | 0) == -2) _luaM_toobig($590); else {
      $592 = _luaM_realloc_($590, HEAP32[$579 >> 2] | 0, $584, $587) | 0;
      HEAP32[$579 >> 2] = $592;
      HEAP32[$583 >> 2] = $587;
      $595 = HEAP32[$580 >> 2] | 0;
      $597 = $592;
      break;
     }
    } else {
     $595 = $581;
     $597 = HEAP32[$579 >> 2] | 0;
    } while (0);
    HEAP32[$580 >> 2] = $595 + 1;
    HEAP8[$597 + $595 >> 0] = $$pr28;
    $598 = HEAP32[$3 >> 2] | 0;
    $599 = HEAP32[$598 >> 2] | 0;
    HEAP32[$598 >> 2] = $599 + -1;
    if (!$599) $608 = _luaZ_fill($598) | 0; else {
     $602 = $598 + 4 | 0;
     $603 = HEAP32[$602 >> 2] | 0;
     HEAP32[$602 >> 2] = $603 + 1;
     $608 = HEAPU8[$603 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $608;
    if (!$608) {
     $$0 = 279;
     STACKTOP = sp;
     return $$0 | 0;
    }
    if (!(_memchr(12096, $608, 2) | 0)) {
     $$0 = 279;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $611 = HEAP32[$0 >> 2] | 0;
    $612 = $611 + 4 | 0;
    $613 = HEAP32[$612 >> 2] | 0;
    $615 = $611 + 8 | 0;
    $616 = HEAP32[$615 >> 2] | 0;
    do if (($613 + 1 | 0) >>> 0 > $616 >>> 0) {
     if ($616 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
     $619 = $616 << 1;
     $622 = HEAP32[$ls + 52 >> 2] | 0;
     if (($619 | 0) == -2) _luaM_toobig($622); else {
      $624 = _luaM_realloc_($622, HEAP32[$611 >> 2] | 0, $616, $619) | 0;
      HEAP32[$611 >> 2] = $624;
      HEAP32[$615 >> 2] = $619;
      $627 = HEAP32[$612 >> 2] | 0;
      $629 = $624;
      break;
     }
    } else {
     $627 = $613;
     $629 = HEAP32[$611 >> 2] | 0;
    } while (0);
    HEAP32[$612 >> 2] = $627 + 1;
    HEAP8[$629 + $627 >> 0] = $608;
    $630 = HEAP32[$3 >> 2] | 0;
    $631 = HEAP32[$630 >> 2] | 0;
    HEAP32[$630 >> 2] = $631 + -1;
    if (!$631) $640 = _luaZ_fill($630) | 0; else {
     $634 = $630 + 4 | 0;
     $635 = HEAP32[$634 >> 2] | 0;
     HEAP32[$634 >> 2] = $635 + 1;
     $640 = HEAPU8[$635 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $640;
    $$0 = 280;
    STACKTOP = sp;
    return $$0 | 0;
   }
   if (!(HEAP8[136 + ($$pr28 + 1) >> 0] & 2)) {
    $$0 = 46;
    STACKTOP = sp;
    return $$0 | 0;
   } else $661 = $$pr28;
   break;
  }
 case 325:
  {
   if (!(HEAP8[136 + ($$lcssa248 + 1) >> 0] & 1)) {
    $935 = HEAP32[$3 >> 2] | 0;
    $936 = HEAP32[$935 >> 2] | 0;
    HEAP32[$935 >> 2] = $936 + -1;
    if (!$936) $945 = _luaZ_fill($935) | 0; else {
     $939 = $935 + 4 | 0;
     $940 = HEAP32[$939 >> 2] | 0;
     HEAP32[$939 >> 2] = $940 + 1;
     $945 = HEAPU8[$940 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $945;
    $$0 = $$lcssa248;
    STACKTOP = sp;
    return $$0 | 0;
   }
   $858 = $ls + 52 | 0;
   $873 = $$lcssa248;
   while (1) {
    $859 = HEAP32[$0 >> 2] | 0;
    $860 = $859 + 4 | 0;
    $861 = HEAP32[$860 >> 2] | 0;
    $863 = $859 + 8 | 0;
    $864 = HEAP32[$863 >> 2] | 0;
    if (($861 + 1 | 0) >>> 0 > $864 >>> 0) {
     if ($864 >>> 0 > 2147483645) {
      label = 330;
      break;
     }
     $867 = $864 << 1;
     $869 = HEAP32[$858 >> 2] | 0;
     if (($867 | 0) == -2) {
      $$lcssa = $869;
      label = 332;
      break;
     }
     $871 = _luaM_realloc_($869, HEAP32[$859 >> 2] | 0, $864, $867) | 0;
     HEAP32[$859 >> 2] = $871;
     HEAP32[$863 >> 2] = $867;
     $875 = HEAP32[$860 >> 2] | 0;
     $877 = $871;
    } else {
     $875 = $861;
     $877 = HEAP32[$859 >> 2] | 0;
    }
    HEAP32[$860 >> 2] = $875 + 1;
    HEAP8[$877 + $875 >> 0] = $873;
    $878 = HEAP32[$3 >> 2] | 0;
    $879 = HEAP32[$878 >> 2] | 0;
    HEAP32[$878 >> 2] = $879 + -1;
    if (!$879) $888 = _luaZ_fill($878) | 0; else {
     $882 = $878 + 4 | 0;
     $883 = HEAP32[$882 >> 2] | 0;
     HEAP32[$882 >> 2] = $883 + 1;
     $888 = HEAPU8[$883 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $888;
    if (!(HEAP8[136 + ($888 + 1) >> 0] & 3)) {
     label = 338;
     break;
    } else $873 = $888;
   }
   if ((label | 0) == 330) _lexerror($ls, 1264, 0); else if ((label | 0) == 332) _luaM_toobig($$lcssa); else if ((label | 0) == 338) {
    $894 = HEAP32[$0 >> 2] | 0;
    $898 = HEAP32[$858 >> 2] | 0;
    $899 = _luaS_newlstr($898, HEAP32[$894 >> 2] | 0, HEAP32[$894 + 4 >> 2] | 0) | 0;
    $900 = $898 + 8 | 0;
    $901 = HEAP32[$900 >> 2] | 0;
    HEAP32[$900 >> 2] = $901 + 16;
    HEAP32[$901 >> 2] = $899;
    HEAP32[$901 + 8 >> 2] = HEAPU8[$899 + 4 >> 0] | 64;
    $914 = _luaH_set($898, HEAP32[(HEAP32[$ls + 48 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[$900 >> 2] | 0) + -16 | 0) | 0;
    $915 = $914 + 8 | 0;
    if (!(HEAP32[$915 >> 2] | 0)) {
     HEAP32[$914 >> 2] = 1;
     HEAP32[$915 >> 2] = 1;
     if ((HEAP32[(HEAP32[$898 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      _luaC_step($898);
      $ts$0$i = $899;
     } else $ts$0$i = $899;
    } else $ts$0$i = HEAP32[$914 + 16 >> 2] | 0;
    HEAP32[$900 >> 2] = (HEAP32[$900 >> 2] | 0) + -16;
    HEAP32[$seminfo >> 2] = $ts$0$i;
    if ((HEAP8[$ts$0$i + 4 >> 0] | 0) != 4) {
     $$0 = 288;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $931 = HEAP8[$ts$0$i + 6 >> 0] | 0;
    if (!($931 << 24 >> 24)) {
     $$0 = 288;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $$0 = $931 & 255 | 256;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 349:
  {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $646 = HEAP32[$0 >> 2] | 0;
 $647 = $646 + 4 | 0;
 $648 = HEAP32[$647 >> 2] | 0;
 $650 = $646 + 8 | 0;
 $651 = HEAP32[$650 >> 2] | 0;
 do if (($648 + 1 | 0) >>> 0 > $651 >>> 0) {
  if ($651 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
  $654 = $651 << 1;
  $657 = HEAP32[$ls + 52 >> 2] | 0;
  if (($654 | 0) == -2) _luaM_toobig($657); else {
   $659 = _luaM_realloc_($657, HEAP32[$646 >> 2] | 0, $651, $654) | 0;
   HEAP32[$646 >> 2] = $659;
   HEAP32[$650 >> 2] = $654;
   $663 = HEAP32[$647 >> 2] | 0;
   $665 = $659;
   break;
  }
 } else {
  $663 = $648;
  $665 = HEAP32[$646 >> 2] | 0;
 } while (0);
 HEAP32[$647 >> 2] = $663 + 1;
 HEAP8[$665 + $663 >> 0] = $661;
 $666 = HEAP32[$3 >> 2] | 0;
 $667 = HEAP32[$666 >> 2] | 0;
 HEAP32[$666 >> 2] = $667 + -1;
 if (!$667) $676 = _luaZ_fill($666) | 0; else {
  $670 = $666 + 4 | 0;
  $671 = HEAP32[$670 >> 2] | 0;
  HEAP32[$670 >> 2] = $671 + 1;
  $676 = HEAPU8[$671 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $676;
 if (($661 | 0) == 48) if (!$676) {
  $$ph$i = 0;
  $expo$0$ph$i = 1416;
 } else if (!(_memchr(1408, $676, 3) | 0)) {
  $$ph$i = $676;
  $expo$0$ph$i = 1416;
 } else {
  $680 = HEAP32[$0 >> 2] | 0;
  $681 = $680 + 4 | 0;
  $682 = HEAP32[$681 >> 2] | 0;
  $684 = $680 + 8 | 0;
  $685 = HEAP32[$684 >> 2] | 0;
  do if (($682 + 1 | 0) >>> 0 > $685 >>> 0) {
   if ($685 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
   $688 = $685 << 1;
   $691 = HEAP32[$ls + 52 >> 2] | 0;
   if (($688 | 0) == -2) _luaM_toobig($691); else {
    $693 = _luaM_realloc_($691, HEAP32[$680 >> 2] | 0, $685, $688) | 0;
    HEAP32[$680 >> 2] = $693;
    HEAP32[$684 >> 2] = $688;
    $696 = HEAP32[$681 >> 2] | 0;
    $698 = $693;
    break;
   }
  } else {
   $696 = $682;
   $698 = HEAP32[$680 >> 2] | 0;
  } while (0);
  HEAP32[$681 >> 2] = $696 + 1;
  HEAP8[$698 + $696 >> 0] = $676;
  $699 = HEAP32[$3 >> 2] | 0;
  $700 = HEAP32[$699 >> 2] | 0;
  HEAP32[$699 >> 2] = $700 + -1;
  if (!$700) $709 = _luaZ_fill($699) | 0; else {
   $703 = $699 + 4 | 0;
   $704 = HEAP32[$703 >> 2] | 0;
   HEAP32[$703 >> 2] = $704 + 1;
   $709 = HEAPU8[$704 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $709;
  $$ph$i = $709;
  $expo$0$ph$i = 1424;
 } else {
  $$ph$i = $676;
  $expo$0$ph$i = 1416;
 }
 $710 = $ls + 52 | 0;
 $711 = $$ph$i;
 while (1) {
  if (!$711) $775 = 0; else if (!(_memchr($expo$0$ph$i, $711, 3) | 0)) $775 = $711; else {
   $714 = HEAP32[$0 >> 2] | 0;
   $715 = $714 + 4 | 0;
   $716 = HEAP32[$715 >> 2] | 0;
   $718 = $714 + 8 | 0;
   $719 = HEAP32[$718 >> 2] | 0;
   if (($716 + 1 | 0) >>> 0 > $719 >>> 0) {
    if ($719 >>> 0 > 2147483645) {
     label = 269;
     break;
    }
    $722 = $719 << 1;
    $724 = HEAP32[$710 >> 2] | 0;
    if (($722 | 0) == -2) {
     $$lcssa227 = $724;
     label = 271;
     break;
    }
    $726 = _luaM_realloc_($724, HEAP32[$714 >> 2] | 0, $719, $722) | 0;
    HEAP32[$714 >> 2] = $726;
    HEAP32[$718 >> 2] = $722;
    $729 = HEAP32[$715 >> 2] | 0;
    $731 = $726;
   } else {
    $729 = $716;
    $731 = HEAP32[$714 >> 2] | 0;
   }
   HEAP32[$715 >> 2] = $729 + 1;
   HEAP8[$731 + $729 >> 0] = $711;
   $732 = HEAP32[$3 >> 2] | 0;
   $733 = HEAP32[$732 >> 2] | 0;
   HEAP32[$732 >> 2] = $733 + -1;
   if (!$733) $742 = _luaZ_fill($732) | 0; else {
    $736 = $732 + 4 | 0;
    $737 = HEAP32[$736 >> 2] | 0;
    HEAP32[$736 >> 2] = $737 + 1;
    $742 = HEAPU8[$737 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $742;
   if (!$742) $775 = 0; else if (!(_memchr(1432, $742, 3) | 0)) $775 = $742; else {
    $745 = HEAP32[$0 >> 2] | 0;
    $746 = $745 + 4 | 0;
    $747 = HEAP32[$746 >> 2] | 0;
    $749 = $745 + 8 | 0;
    $750 = HEAP32[$749 >> 2] | 0;
    if (($747 + 1 | 0) >>> 0 > $750 >>> 0) {
     if ($750 >>> 0 > 2147483645) {
      label = 281;
      break;
     }
     $753 = $750 << 1;
     $755 = HEAP32[$710 >> 2] | 0;
     if (($753 | 0) == -2) {
      $$lcssa228 = $755;
      label = 283;
      break;
     }
     $757 = _luaM_realloc_($755, HEAP32[$745 >> 2] | 0, $750, $753) | 0;
     HEAP32[$745 >> 2] = $757;
     HEAP32[$749 >> 2] = $753;
     $760 = HEAP32[$746 >> 2] | 0;
     $762 = $757;
    } else {
     $760 = $747;
     $762 = HEAP32[$745 >> 2] | 0;
    }
    HEAP32[$746 >> 2] = $760 + 1;
    HEAP8[$762 + $760 >> 0] = $742;
    $763 = HEAP32[$3 >> 2] | 0;
    $764 = HEAP32[$763 >> 2] | 0;
    HEAP32[$763 >> 2] = $764 + -1;
    if (!$764) $773 = _luaZ_fill($763) | 0; else {
     $767 = $763 + 4 | 0;
     $768 = HEAP32[$767 >> 2] | 0;
     HEAP32[$767 >> 2] = $768 + 1;
     $773 = HEAPU8[$768 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $773;
    $775 = $773;
   }
  }
  $781 = HEAP32[$0 >> 2] | 0;
  $782 = $781 + 4 | 0;
  $783 = HEAP32[$782 >> 2] | 0;
  $785 = $781 + 8 | 0;
  $786 = HEAP32[$785 >> 2] | 0;
  $787 = ($783 + 1 | 0) >>> 0 > $786 >>> 0;
  if (!(($775 | 0) == 46 ? 1 : (HEAP8[136 + ($775 + 1) >> 0] & 16) != 0)) {
   label = 301;
   break;
  }
  if ($787) {
   if ($786 >>> 0 > 2147483645) {
    label = 293;
    break;
   }
   $789 = $786 << 1;
   $791 = HEAP32[$710 >> 2] | 0;
   if (($789 | 0) == -2) {
    $$lcssa247 = $791;
    label = 295;
    break;
   }
   $793 = _luaM_realloc_($791, HEAP32[$781 >> 2] | 0, $786, $789) | 0;
   HEAP32[$781 >> 2] = $793;
   HEAP32[$785 >> 2] = $789;
   $796 = HEAP32[$782 >> 2] | 0;
   $798 = $793;
  } else {
   $796 = $783;
   $798 = HEAP32[$781 >> 2] | 0;
  }
  HEAP32[$782 >> 2] = $796 + 1;
  HEAP8[$798 + $796 >> 0] = $775;
  $799 = HEAP32[$3 >> 2] | 0;
  $800 = HEAP32[$799 >> 2] | 0;
  HEAP32[$799 >> 2] = $800 + -1;
  if (!$800) $809 = _luaZ_fill($799) | 0; else {
   $803 = $799 + 4 | 0;
   $804 = HEAP32[$803 >> 2] | 0;
   HEAP32[$803 >> 2] = $804 + 1;
   $809 = HEAPU8[$804 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $809;
  $711 = $809;
 }
 if ((label | 0) == 269) _lexerror($ls, 1264, 0); else if ((label | 0) == 271) _luaM_toobig($$lcssa227); else if ((label | 0) == 281) _lexerror($ls, 1264, 0); else if ((label | 0) == 283) _luaM_toobig($$lcssa228); else if ((label | 0) == 293) _lexerror($ls, 1264, 0); else if ((label | 0) == 295) _luaM_toobig($$lcssa247); else if ((label | 0) == 301) {
  do if ($787) {
   if ($786 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
   $811 = $786 << 1;
   $813 = HEAP32[$710 >> 2] | 0;
   if (($811 | 0) == -2) _luaM_toobig($813); else {
    $815 = _luaM_realloc_($813, HEAP32[$781 >> 2] | 0, $786, $811) | 0;
    HEAP32[$781 >> 2] = $815;
    HEAP32[$785 >> 2] = $811;
    $817 = HEAP32[$782 >> 2] | 0;
    $819 = $815;
    break;
   }
  } else {
   $817 = $783;
   $819 = HEAP32[$781 >> 2] | 0;
  } while (0);
  HEAP32[$782 >> 2] = $817 + 1;
  HEAP8[$819 + $817 >> 0] = 0;
  $820 = $ls + 76 | 0;
  $821 = HEAP8[$820 >> 0] | 0;
  $ls$idx$val$i = HEAP32[$0 >> 2] | 0;
  $ls$idx$val$idx$val$i = HEAP32[$ls$idx$val$i >> 2] | 0;
  $ls$idx$val$idx1$val$i = HEAP32[$ls$idx$val$i + 4 >> 2] | 0;
  if (!$ls$idx$val$idx1$val$i) {
   $828 = $ls$idx$val$idx$val$i;
   $829 = -1;
  } else {
   $$in$i$i = $ls$idx$val$idx1$val$i;
   do {
    $$in$i$i = $$in$i$i + -1 | 0;
    $824 = $ls$idx$val$idx$val$i + $$in$i$i | 0;
    if ((HEAP8[$824 >> 0] | 0) == 46) HEAP8[$824 >> 0] = $821;
   } while (($$in$i$i | 0) != 0);
   $$pre$i10 = HEAP32[$0 >> 2] | 0;
   $828 = HEAP32[$$pre$i10 >> 2] | 0;
   $829 = (HEAP32[$$pre$i10 + 4 >> 2] | 0) + -1 | 0;
  }
  if (_luaO_str2d($828, $829, $seminfo) | 0) {
   $$0 = 287;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $832 = HEAP8[$820 >> 0] | 0;
  $835 = HEAP8[HEAP32[(_localeconv() | 0) >> 2] >> 0] | 0;
  HEAP8[$820 >> 0] = $835;
  $ls$idx1$val$i$i = HEAP32[$0 >> 2] | 0;
  $ls$idx1$val$idx$val$i$i = HEAP32[$ls$idx1$val$i$i >> 2] | 0;
  $ls$idx1$val$idx2$val$i$i = HEAP32[$ls$idx1$val$i$i + 4 >> 2] | 0;
  if (!$ls$idx1$val$idx2$val$i$i) {
   $842 = $ls$idx1$val$idx$val$i$i;
   $843 = -1;
  } else {
   $$in$i$i$i = $ls$idx1$val$idx2$val$i$i;
   do {
    $$in$i$i$i = $$in$i$i$i + -1 | 0;
    $838 = $ls$idx1$val$idx$val$i$i + $$in$i$i$i | 0;
    if ((HEAP8[$838 >> 0] | 0) == $832 << 24 >> 24) HEAP8[$838 >> 0] = $835;
   } while (($$in$i$i$i | 0) != 0);
   $$pre$i17$i = HEAP32[$0 >> 2] | 0;
   $842 = HEAP32[$$pre$i17$i >> 2] | 0;
   $843 = (HEAP32[$$pre$i17$i + 4 >> 2] | 0) + -1 | 0;
  }
  if (_luaO_str2d($842, $843, $seminfo) | 0) {
   $$0 = 287;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $846 = HEAP8[$820 >> 0] | 0;
  $ls$idx$val$i$i = HEAP32[$0 >> 2] | 0;
  $ls$idx$val$idx$val$i$i = HEAP32[$ls$idx$val$i$i >> 2] | 0;
  $ls$idx$val$idx3$val$i$i = HEAP32[$ls$idx$val$i$i + 4 >> 2] | 0;
  if (!$ls$idx$val$idx3$val$i$i) _lexerror($ls, 1440, 287); else $$in$i4$i$i = $ls$idx$val$idx3$val$i$i;
  do {
   $$in$i4$i$i = $$in$i4$i$i + -1 | 0;
   $849 = $ls$idx$val$idx$val$i$i + $$in$i4$i$i | 0;
   if ((HEAP8[$849 >> 0] | 0) == $846 << 24 >> 24) HEAP8[$849 >> 0] = 46;
  } while (($$in$i4$i$i | 0) != 0);
  _lexerror($ls, 1440, 287);
 }
 return 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$0$i25 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3121$i = 0, $$in = 0, $$lcssa = 0, $$lcssa288 = 0, $$lcssa289 = 0, $$lcssa308 = 0, $$lcssa308$lcssa = 0, $$lcssa309 = 0, $$lcssa309$lcssa = 0, $$lcssa322 = 0, $$lcssa323 = 0, $$lcssa333 = 0, $$lcssa50$i = 0, $$not$i = 0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us93$i = 0, $0 = 0, $1 = 0, $100 = 0, $109 = 0, $117 = 0, $119 = 0, $126 = 0, $133 = 0, $141 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $177 = 0.0, $184 = 0, $186 = 0, $195 = 0, $199 = 0, $2 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $217 = 0, $218 = 0, $219 = 0, $229 = 0, $230 = 0, $243 = 0, $245 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $264 = 0, $266 = 0, $277 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $289 = 0, $29 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $304 = 0.0, $316 = 0.0, $324 = 0, $325 = 0, $332 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $352 = 0, $354 = 0, $356 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $365 = 0, $370 = 0, $371 = 0, $375 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $396 = 0, $397 = 0, $406 = 0, $407 = 0, $408 = 0, $416 = 0, $42 = 0, $420 = 0, $422 = 0, $423 = 0, $425 = 0, $438 = 0, $440 = 0, $45 = 0, $450 = 0, $452 = 0, $46 = 0, $464 = 0, $465 = 0, $466 = 0, $488 = 0, $500 = 0, $504 = 0, $507 = 0, $509 = 0, $510 = 0, $511 = 0, $514 = 0, $515 = 0, $528 = 0, $531 = 0, $533 = 0, $535 = 0, $536 = 0, $54 = 0, $542 = 0, $544 = 0, $549 = 0, $552 = 0, $557 = 0, $559 = 0, $561 = 0, $562 = 0, $568 = 0, $570 = 0, $575 = 0, $578 = 0, $582 = 0, $585 = 0, $590 = 0, $594 = 0, $595 = 0, $597 = 0, $601 = 0, $603 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $612 = 0, $613 = 0, $621 = 0, $627 = 0, $628 = 0, $63 = 0, $635 = 0, $637 = 0.0, $639 = 0, $643 = 0.0, $644 = 0.0, $647 = 0.0, $651 = 0, $654 = 0, $661 = 0.0, $679 = 0.0, $681 = 0, $687 = 0, $688 = 0, $698 = 0, $70 = 0, $709 = 0, $712 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $750 = 0, $76 = 0, $84 = 0, $9 = 0, $93 = 0, $99 = 0, $a$0$lcssa177$i = 0, $a$0101$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa300 = 0, $a$3$i301 = 0, $a$3$ph$i = 0, $a$3$ph183$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i23 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$185 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$4 = 0, $c$4$1 = 0, $c$6 = 0, $carry$0103$i = 0, $carry1$0$us$i = 0, $carry1$0$us89$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us94$i = 0, $carry1$1$us94$i$lcssa = 0, $carry3$081$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us84$i = 0, $e2$1$i = 0, $e2$1$i298 = 0, $e2$1$ph$i = 0, $e2$1$ph182$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa294 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa331 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3117$i = 0, $gotdig$3117$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1118$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$084 = 0, $i$1 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0120$i = 0, $j$0120$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$3110$i = 0, $k$0$lcssa$i = 0, $k$0119$i = 0, $k$0119$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4102$i = 0, $k$5$in$us$i = 0, $k$5$in$us88$i = 0, $k$5$us$i = 0, $k$5$us90$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0116$i = 0, $lnz$0116$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond16$i = 0, $or$cond19$i = 0, $or$cond9$i = 0, $rp$0$lcssa178$i = 0, $rp$0100$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i22 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$ph37$i = 0, $z$1$us$i = 0, $z$1$us85$i = 0, $z$2$us$i = 0, $z$2$us87$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us97$i = 0, $z$3$us97$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 if (!$prec) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 do {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $2 + 1;
   $9 = HEAPU8[$2 >> 0] | 0;
  } else $9 = ___shgetc($f) | 0;
 } while ((_isspace($9) | 0) != 0);
 $$lcssa333 = $9;
 do if (($$lcssa333 | 0) == 43 | ($$lcssa333 | 0) == 45) {
  $15 = 1 - ((($$lcssa333 | 0) == 45 & 1) << 1) | 0;
  $16 = HEAP32[$0 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $16 + 1;
   $c$0 = HEAPU8[$16 >> 0] | 0;
   $sign$0 = $15;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $sign$0 = $15;
   break;
  }
 } else {
  $c$0 = $$lcssa333;
  $sign$0 = 1;
 } while (0);
 $c$185 = $c$0;
 $i$084 = 0;
 while (1) {
  if (($c$185 | 32 | 0) != (HEAP8[11368 + $i$084 >> 0] | 0)) {
   $c$1$lcssa = $c$185;
   $i$0$lcssa = $i$084;
   break;
  }
  do if ($i$084 >>> 0 < 7) {
   $29 = HEAP32[$0 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $29 + 1;
    $c$2 = HEAPU8[$29 >> 0] | 0;
    break;
   } else {
    $c$2 = ___shgetc($f) | 0;
    break;
   }
  } else $c$2 = $c$185; while (0);
  $36 = $i$084 + 1 | 0;
  if ($36 >>> 0 < 8) {
   $c$185 = $c$2;
   $i$084 = $36;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $36;
   break;
  }
 }
 do if (($i$0$lcssa | 0) == 3) label = 23; else if (($i$0$lcssa | 0) != 8) {
  $39 = ($pok | 0) != 0;
  if ($39 & $i$0$lcssa >>> 0 > 3) if (($i$0$lcssa | 0) == 8) break; else {
   label = 23;
   break;
  }
  do if (!$i$0$lcssa) {
   if (($c$1$lcssa | 32 | 0) == 110) {
    $54 = HEAP32[$0 >> 2] | 0;
    if ($54 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $54 + 1;
     $c$4 = HEAPU8[$54 >> 0] | 0;
    } else $c$4 = ___shgetc($f) | 0;
    if (($c$4 | 32 | 0) != 97) break;
    $712 = HEAP32[$0 >> 2] | 0;
    if ($712 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $712 + 1;
     $c$4$1 = HEAPU8[$712 >> 0] | 0;
    } else $c$4$1 = ___shgetc($f) | 0;
    if (($c$4$1 | 32 | 0) != 110) break;
    $63 = HEAP32[$0 >> 2] | 0;
    if ($63 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $63 + 1;
     $70 = HEAPU8[$63 >> 0] | 0;
    } else $70 = ___shgetc($f) | 0;
    if (($70 | 0) == 40) $i$4 = 1; else {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $$0 = nan;
      STACKTOP = sp;
      return +$$0;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    while (1) {
     $76 = HEAP32[$0 >> 2] | 0;
     if ($76 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $76 + 1;
      $84 = HEAPU8[$76 >> 0] | 0;
     } else $84 = ___shgetc($f) | 0;
     if (!(($84 + -48 | 0) >>> 0 < 10 | ($84 + -65 | 0) >>> 0 < 26)) if (!(($84 | 0) == 95 | ($84 + -97 | 0) >>> 0 < 26)) {
      $$lcssa289 = $84;
      $i$4$lcssa = $i$4;
      break;
     }
     $i$4 = $i$4 + 1 | 0;
    }
    if (($$lcssa289 | 0) == 41) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $93 = (HEAP32[$1 >> 2] | 0) == 0;
    if (!$93) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if (!$39) {
     HEAP32[(___errno_location() | 0) >> 2] = 22;
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($i$4$lcssa | 0) == 0 | $93) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    $$in = $i$4$lcssa;
    $100 = HEAP32[$0 >> 2] | 0;
    while (1) {
     $$in = $$in + -1 | 0;
     $99 = $100 + -1 | 0;
     if (!$$in) {
      $$lcssa288 = $99;
      break;
     } else $100 = $99;
    }
    HEAP32[$0 >> 2] = $$lcssa288;
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   do if (($c$1$lcssa | 0) == 48) {
    $109 = HEAP32[$0 >> 2] | 0;
    if ($109 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $109 + 1;
     $117 = HEAPU8[$109 >> 0] | 0;
    } else $117 = ___shgetc($f) | 0;
    if (($117 | 32 | 0) != 120) {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $c$6 = 48;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $c$6 = 48;
     break;
    }
    $119 = HEAP32[$0 >> 2] | 0;
    if ($119 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $119 + 1;
     $c$0$i = HEAPU8[$119 >> 0] | 0;
     $gotdig$0$i = 0;
    } else {
     $c$0$i = ___shgetc($f) | 0;
     $gotdig$0$i = 0;
    }
    while (1) {
     if (($c$0$i | 0) == 46) {
      $gotdig$0$i$lcssa294 = $gotdig$0$i;
      label = 71;
      break;
     } else if (($c$0$i | 0) != 48) {
      $162 = 0;
      $164 = 0;
      $721 = 0;
      $722 = 0;
      $c$2$i = $c$0$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 0;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break;
     }
     $126 = HEAP32[$0 >> 2] | 0;
     if ($126 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $126 + 1;
      $c$0$i = HEAPU8[$126 >> 0] | 0;
      $gotdig$0$i = 1;
      continue;
     } else {
      $c$0$i = ___shgetc($f) | 0;
      $gotdig$0$i = 1;
      continue;
     }
    }
    if ((label | 0) == 71) {
     $133 = HEAP32[$0 >> 2] | 0;
     if ($133 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $133 + 1;
      $c$1$ph$i = HEAPU8[$133 >> 0] | 0;
     } else $c$1$ph$i = ___shgetc($f) | 0;
     if (($c$1$ph$i | 0) == 48) {
      $148 = 0;
      $149 = 0;
      while (1) {
       $141 = HEAP32[$0 >> 2] | 0;
       if ($141 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $141 + 1;
        $152 = HEAPU8[$141 >> 0] | 0;
       } else $152 = ___shgetc($f) | 0;
       $150 = _i64Add($148 | 0, $149 | 0, -1, -1) | 0;
       $151 = tempRet0;
       if (($152 | 0) == 48) {
        $148 = $150;
        $149 = $151;
       } else {
        $162 = 0;
        $164 = 0;
        $721 = $150;
        $722 = $151;
        $c$2$i = $152;
        $gotdig$2$i = 1;
        $gotrad$0$i = 1;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break;
       }
      }
     } else {
      $162 = 0;
      $164 = 0;
      $721 = 0;
      $722 = 0;
      $c$2$i = $c$1$ph$i;
      $gotdig$2$i = $gotdig$0$i$lcssa294;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     }
    }
    while (1) {
     $154 = $c$2$i + -48 | 0;
     $$pre$i = $c$2$i | 32;
     if ($154 >>> 0 < 10) label = 83; else {
      $158 = ($c$2$i | 0) == 46;
      if (!($158 | ($$pre$i + -97 | 0) >>> 0 < 6)) {
       $206 = $721;
       $207 = $164;
       $209 = $722;
       $210 = $162;
       $c$2$lcssa$i = $c$2$i;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break;
      }
      if ($158) if (!$gotrad$0$i) {
       $723 = $164;
       $724 = $162;
       $725 = $164;
       $726 = $162;
       $gotdig$3$i = $gotdig$2$i;
       $gotrad$1$i = 1;
       $gottail$2$i = $gottail$0$i;
       $scale$2$i = $scale$0$i;
       $x$2$i = $x$0$i;
       $y$2$i = $y$0$i;
      } else {
       $206 = $721;
       $207 = $164;
       $209 = $722;
       $210 = $162;
       $c$2$lcssa$i = 46;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break;
      } else label = 83;
     }
     if ((label | 0) == 83) {
      label = 0;
      $d$0$i = ($c$2$i | 0) > 57 ? $$pre$i + -87 | 0 : $154;
      do if (($162 | 0) < 0 | ($162 | 0) == 0 & $164 >>> 0 < 8) {
       $gottail$1$i = $gottail$0$i;
       $scale$1$i = $scale$0$i;
       $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
       $y$1$i = $y$0$i;
      } else {
       if (($162 | 0) < 0 | ($162 | 0) == 0 & $164 >>> 0 < 14) {
        $177 = $scale$0$i * .0625;
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $177;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $177 * +($d$0$i | 0);
        break;
       }
       if (($gottail$0$i | 0) != 0 | ($d$0$i | 0) == 0) {
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i;
       } else {
        $gottail$1$i = 1;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $scale$0$i * .5;
       }
      } while (0);
      $184 = _i64Add($164 | 0, $162 | 0, 1, 0) | 0;
      $723 = $721;
      $724 = $722;
      $725 = $184;
      $726 = tempRet0;
      $gotdig$3$i = 1;
      $gotrad$1$i = $gotrad$0$i;
      $gottail$2$i = $gottail$1$i;
      $scale$2$i = $scale$1$i;
      $x$2$i = $x$1$i;
      $y$2$i = $y$1$i;
     }
     $186 = HEAP32[$0 >> 2] | 0;
     if ($186 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $186 + 1;
      $162 = $726;
      $164 = $725;
      $721 = $723;
      $722 = $724;
      $c$2$i = HEAPU8[$186 >> 0] | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     } else {
      $162 = $726;
      $164 = $725;
      $721 = $723;
      $722 = $724;
      $c$2$i = ___shgetc($f) | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     }
    }
    if (!$gotdig$2$i$lcssa) {
     $195 = (HEAP32[$1 >> 2] | 0) == 0;
     if (!$195) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     if (!$pok) ___shlim($f, 0); else if (!$195) {
      $199 = HEAP32[$0 >> 2] | 0;
      HEAP32[$0 >> 2] = $199 + -1;
      if ($gotrad$0$i$lcssa) HEAP32[$0 >> 2] = $199 + -2;
     }
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $205 = ($gotrad$0$i$lcssa | 0) == 0;
    $208 = $205 ? $207 : $206;
    $211 = $205 ? $210 : $209;
    if (($210 | 0) < 0 | ($210 | 0) == 0 & $207 >>> 0 < 8) {
     $218 = $207;
     $219 = $210;
     $x$324$i = $x$0$i$lcssa;
     while (1) {
      $217 = $x$324$i << 4;
      $218 = _i64Add($218 | 0, $219 | 0, 1, 0) | 0;
      $219 = tempRet0;
      if (!(($219 | 0) < 0 | ($219 | 0) == 0 & $218 >>> 0 < 8)) {
       $x$3$lcssa$i = $217;
       break;
      } else $x$324$i = $217;
     }
    } else $x$3$lcssa$i = $x$0$i$lcssa;
    do if (($c$2$lcssa$i | 32 | 0) == 112) {
     $229 = _scanexp($f, $pok) | 0;
     $230 = tempRet0;
     if (($229 | 0) == 0 & ($230 | 0) == -2147483648) if (!$pok) {
      ___shlim($f, 0);
      $$0 = 0.0;
      STACKTOP = sp;
      return +$$0;
     } else {
      if (!(HEAP32[$1 >> 2] | 0)) {
       $247 = 0;
       $248 = 0;
       break;
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $247 = 0;
      $248 = 0;
      break;
     } else {
      $247 = $229;
      $248 = $230;
     }
    } else if (!(HEAP32[$1 >> 2] | 0)) {
     $247 = 0;
     $248 = 0;
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $247 = 0;
     $248 = 0;
    } while (0);
    $243 = _bitshift64Shl($208 | 0, $211 | 0, 2) | 0;
    $245 = _i64Add($243 | 0, tempRet0 | 0, -32, -1) | 0;
    $249 = _i64Add($245 | 0, tempRet0 | 0, $247 | 0, $248 | 0) | 0;
    $250 = tempRet0;
    if (!$x$3$lcssa$i) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($250 | 0) > 0 | ($250 | 0) == 0 & $249 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     STACKTOP = sp;
     return +$$0;
    }
    $264 = $emin$0$ph + -106 | 0;
    $266 = (($264 | 0) < 0) << 31 >> 31;
    if (($250 | 0) < ($266 | 0) | ($250 | 0) == ($266 | 0) & $249 >>> 0 < $264 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($x$3$lcssa$i | 0) > -1) {
     $282 = $249;
     $283 = $250;
     $x$419$i = $x$3$lcssa$i;
     $y$320$i = $y$0$i$lcssa;
     while (1) {
      $277 = !($y$320$i >= .5);
      $281 = $277 & 1 | $x$419$i << 1;
      $x$5$i = $281 ^ 1;
      $y$4$i = $y$320$i + ($277 ? $y$320$i : $y$320$i + -1.0);
      $284 = _i64Add($282 | 0, $283 | 0, -1, -1) | 0;
      $285 = tempRet0;
      if (($281 | 0) > -1) {
       $282 = $284;
       $283 = $285;
       $x$419$i = $x$5$i;
       $y$320$i = $y$4$i;
      } else {
       $291 = $284;
       $292 = $285;
       $x$4$lcssa$i = $x$5$i;
       $y$3$lcssa$i = $y$4$i;
       break;
      }
     }
    } else {
     $291 = $249;
     $292 = $250;
     $x$4$lcssa$i = $x$3$lcssa$i;
     $y$3$lcssa$i = $y$0$i$lcssa;
    }
    $289 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
    $293 = _i64Add($291 | 0, $292 | 0, $289 | 0, tempRet0 | 0) | 0;
    $294 = tempRet0;
    if (0 > ($294 | 0) | 0 == ($294 | 0) & $bits$0$ph >>> 0 > $293 >>> 0) if (($293 | 0) < 0) {
     $$0710$i = 0;
     label = 124;
    } else {
     $$07$i = $293;
     label = 122;
    } else {
     $$07$i = $bits$0$ph;
     label = 122;
    }
    do if ((label | 0) == 122) {
     if (($$07$i | 0) < 53) {
      $$0710$i = $$07$i;
      label = 124;
      break;
     }
     $$0711$i = $$07$i;
     $$pre$phi42$iZ2D = +($sign$0 | 0);
     $bias$0$i = 0.0;
    } while (0);
    if ((label | 0) == 124) {
     $304 = +($sign$0 | 0);
     $$0711$i = $$0710$i;
     $$pre$phi42$iZ2D = $304;
     $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0710$i | 0), $304);
    }
    $or$cond9$i = ($x$4$lcssa$i & 1 | 0) == 0 & ($y$3$lcssa$i != 0.0 & ($$0711$i | 0) < 32);
    $316 = $$pre$phi42$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi42$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
    if (!($316 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +_scalbnl($316, $291);
    STACKTOP = sp;
    return +$$0;
   } else $c$6 = $c$1$lcssa; while (0);
   $sum$i = $emin$0$ph + $bits$0$ph | 0;
   $324 = 0 - $sum$i | 0;
   $$09$i = $c$6;
   $gotdig$0$i12 = 0;
   while (1) {
    if (($$09$i | 0) == 46) {
     $gotdig$0$i12$lcssa331 = $gotdig$0$i12;
     label = 135;
     break;
    } else if (($$09$i | 0) != 48) {
     $$2$i = $$09$i;
     $727 = 0;
     $728 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 0;
     break;
    }
    $325 = HEAP32[$0 >> 2] | 0;
    if ($325 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $325 + 1;
     $$09$i = HEAPU8[$325 >> 0] | 0;
     $gotdig$0$i12 = 1;
     continue;
    } else {
     $$09$i = ___shgetc($f) | 0;
     $gotdig$0$i12 = 1;
     continue;
    }
   }
   if ((label | 0) == 135) {
    $332 = HEAP32[$0 >> 2] | 0;
    if ($332 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $332 + 1;
     $$1$ph$i = HEAPU8[$332 >> 0] | 0;
    } else $$1$ph$i = ___shgetc($f) | 0;
    if (($$1$ph$i | 0) == 48) {
     $340 = 0;
     $341 = 0;
     while (1) {
      $342 = _i64Add($340 | 0, $341 | 0, -1, -1) | 0;
      $343 = tempRet0;
      $344 = HEAP32[$0 >> 2] | 0;
      if ($344 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $344 + 1;
       $$1$be$i = HEAPU8[$344 >> 0] | 0;
      } else $$1$be$i = ___shgetc($f) | 0;
      if (($$1$be$i | 0) == 48) {
       $340 = $342;
       $341 = $343;
      } else {
       $$2$i = $$1$be$i;
       $727 = $342;
       $728 = $343;
       $gotdig$2$i13 = 1;
       $gotrad$0$i14 = 1;
       break;
      }
     }
    } else {
     $$2$i = $$1$ph$i;
     $727 = 0;
     $728 = 0;
     $gotdig$2$i13 = $gotdig$0$i12$lcssa331;
     $gotrad$0$i14 = 1;
    }
   }
   HEAP32[$x$i >> 2] = 0;
   $352 = $$2$i + -48 | 0;
   $354 = ($$2$i | 0) == 46;
   L214 : do if ($354 | $352 >>> 0 < 10) {
    $356 = $x$i + 496 | 0;
    $$3121$i = $$2$i;
    $359 = 0;
    $360 = 0;
    $729 = $354;
    $730 = $352;
    $731 = $727;
    $732 = $728;
    $gotdig$3117$i = $gotdig$2$i13;
    $gotrad$1118$i = $gotrad$0$i14;
    $j$0120$i = 0;
    $k$0119$i = 0;
    $lnz$0116$i = 0;
    L216 : while (1) {
     do if ($729) if (!$gotrad$1118$i) {
      $733 = $359;
      $734 = $360;
      $735 = $359;
      $736 = $360;
      $gotdig$4$i = $gotdig$3117$i;
      $gotrad$2$i = 1;
      $j$2$i = $j$0120$i;
      $k$2$i = $k$0119$i;
      $lnz$2$i = $lnz$0116$i;
     } else {
      $737 = $731;
      $738 = $732;
      $739 = $359;
      $740 = $360;
      $gotdig$3117$i$lcssa = $gotdig$3117$i;
      $j$0120$i$lcssa = $j$0120$i;
      $k$0119$i$lcssa = $k$0119$i;
      $lnz$0116$i$lcssa = $lnz$0116$i;
      break L216;
     } else {
      $361 = _i64Add($359 | 0, $360 | 0, 1, 0) | 0;
      $362 = tempRet0;
      $363 = ($$3121$i | 0) != 48;
      if (($k$0119$i | 0) >= 125) {
       if (!$363) {
        $733 = $731;
        $734 = $732;
        $735 = $361;
        $736 = $362;
        $gotdig$4$i = $gotdig$3117$i;
        $gotrad$2$i = $gotrad$1118$i;
        $j$2$i = $j$0120$i;
        $k$2$i = $k$0119$i;
        $lnz$2$i = $lnz$0116$i;
        break;
       }
       HEAP32[$356 >> 2] = HEAP32[$356 >> 2] | 1;
       $733 = $731;
       $734 = $732;
       $735 = $361;
       $736 = $362;
       $gotdig$4$i = $gotdig$3117$i;
       $gotrad$2$i = $gotrad$1118$i;
       $j$2$i = $j$0120$i;
       $k$2$i = $k$0119$i;
       $lnz$2$i = $lnz$0116$i;
       break;
      }
      $365 = $x$i + ($k$0119$i << 2) | 0;
      if (!$j$0120$i) $storemerge$i = $730; else $storemerge$i = $$3121$i + -48 + ((HEAP32[$365 >> 2] | 0) * 10 | 0) | 0;
      HEAP32[$365 >> 2] = $storemerge$i;
      $370 = $j$0120$i + 1 | 0;
      $371 = ($370 | 0) == 9;
      $733 = $731;
      $734 = $732;
      $735 = $361;
      $736 = $362;
      $gotdig$4$i = 1;
      $gotrad$2$i = $gotrad$1118$i;
      $j$2$i = $371 ? 0 : $370;
      $k$2$i = ($371 & 1) + $k$0119$i | 0;
      $lnz$2$i = $363 ? $361 : $lnz$0116$i;
     } while (0);
     $375 = HEAP32[$0 >> 2] | 0;
     if ($375 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $375 + 1;
      $$3$be$i = HEAPU8[$375 >> 0] | 0;
     } else $$3$be$i = ___shgetc($f) | 0;
     $730 = $$3$be$i + -48 | 0;
     $729 = ($$3$be$i | 0) == 46;
     if (!($729 | $730 >>> 0 < 10)) {
      $$3$lcssa$i = $$3$be$i;
      $387 = $733;
      $388 = $735;
      $390 = $734;
      $391 = $736;
      $gotdig$3$lcssa$i = $gotdig$4$i;
      $gotrad$1$lcssa$i = $gotrad$2$i;
      $j$0$lcssa$i = $j$2$i;
      $k$0$lcssa$i = $k$2$i;
      $lnz$0$lcssa$i = $lnz$2$i;
      label = 158;
      break L214;
     } else {
      $$3121$i = $$3$be$i;
      $359 = $735;
      $360 = $736;
      $731 = $733;
      $732 = $734;
      $gotdig$3117$i = $gotdig$4$i;
      $gotrad$1118$i = $gotrad$2$i;
      $j$0120$i = $j$2$i;
      $k$0119$i = $k$2$i;
      $lnz$0116$i = $lnz$2$i;
     }
    }
    $741 = $739;
    $742 = $740;
    $743 = $737;
    $744 = $738;
    $745 = ($gotdig$3117$i$lcssa | 0) != 0;
    $j$069$i = $j$0120$i$lcssa;
    $k$065$i = $k$0119$i$lcssa;
    $lnz$059$i = $lnz$0116$i$lcssa;
    label = 166;
   } else {
    $$3$lcssa$i = $$2$i;
    $387 = $727;
    $388 = 0;
    $390 = $728;
    $391 = 0;
    $gotdig$3$lcssa$i = $gotdig$2$i13;
    $gotrad$1$lcssa$i = $gotrad$0$i14;
    $j$0$lcssa$i = 0;
    $k$0$lcssa$i = 0;
    $lnz$0$lcssa$i = 0;
    label = 158;
   } while (0);
   do if ((label | 0) == 158) {
    $386 = ($gotrad$1$lcssa$i | 0) == 0;
    $389 = $386 ? $388 : $387;
    $392 = $386 ? $391 : $390;
    $393 = ($gotdig$3$lcssa$i | 0) != 0;
    if (!(($$3$lcssa$i | 32 | 0) == 101 & $393)) if (($$3$lcssa$i | 0) > -1) {
     $741 = $388;
     $742 = $391;
     $743 = $389;
     $744 = $392;
     $745 = $393;
     $j$069$i = $j$0$lcssa$i;
     $k$065$i = $k$0$lcssa$i;
     $lnz$059$i = $lnz$0$lcssa$i;
     label = 166;
     break;
    } else {
     $746 = $388;
     $747 = $391;
     $748 = $393;
     $749 = $389;
     $750 = $392;
     $j$068$i = $j$0$lcssa$i;
     $k$064$i = $k$0$lcssa$i;
     $lnz$058$i = $lnz$0$lcssa$i;
     label = 168;
     break;
    }
    $396 = _scanexp($f, $pok) | 0;
    $397 = tempRet0;
    if (($396 | 0) == 0 & ($397 | 0) == -2147483648) {
     if (!$pok) {
      ___shlim($f, 0);
      $$0$i25 = 0.0;
      break;
     }
     if (!(HEAP32[$1 >> 2] | 0)) {
      $406 = 0;
      $407 = 0;
     } else {
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $406 = 0;
      $407 = 0;
     }
    } else {
     $406 = $396;
     $407 = $397;
    }
    $408 = _i64Add($406 | 0, $407 | 0, $389 | 0, $392 | 0) | 0;
    $420 = $408;
    $422 = $388;
    $423 = tempRet0;
    $425 = $391;
    $j$067$i = $j$0$lcssa$i;
    $k$063$i = $k$0$lcssa$i;
    $lnz$057$i = $lnz$0$lcssa$i;
    label = 170;
   } while (0);
   if ((label | 0) == 166) if (!(HEAP32[$1 >> 2] | 0)) {
    $746 = $741;
    $747 = $742;
    $748 = $745;
    $749 = $743;
    $750 = $744;
    $j$068$i = $j$069$i;
    $k$064$i = $k$065$i;
    $lnz$058$i = $lnz$059$i;
    label = 168;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if ($745) {
     $420 = $743;
     $422 = $741;
     $423 = $744;
     $425 = $742;
     $j$067$i = $j$069$i;
     $k$063$i = $k$065$i;
     $lnz$057$i = $lnz$059$i;
     label = 170;
    } else label = 169;
   }
   if ((label | 0) == 168) if ($748) {
    $420 = $749;
    $422 = $746;
    $423 = $750;
    $425 = $747;
    $j$067$i = $j$068$i;
    $k$063$i = $k$064$i;
    $lnz$057$i = $lnz$058$i;
    label = 170;
   } else label = 169;
   do if ((label | 0) == 169) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $$0$i25 = 0.0;
   } else if ((label | 0) == 170) {
    $416 = HEAP32[$x$i >> 2] | 0;
    if (!$416) {
     $$0$i25 = +($sign$0 | 0) * 0.0;
     break;
    }
    if ((($425 | 0) < 0 | ($425 | 0) == 0 & $422 >>> 0 < 10) & (($420 | 0) == ($422 | 0) & ($423 | 0) == ($425 | 0))) if ($bits$0$ph >>> 0 > 30 | ($416 >>> $bits$0$ph | 0) == 0) {
     $$0$i25 = +($sign$0 | 0) * +($416 >>> 0);
     break;
    }
    $438 = ($emin$0$ph | 0) / -2 | 0;
    $440 = (($438 | 0) < 0) << 31 >> 31;
    if (($423 | 0) > ($440 | 0) | ($423 | 0) == ($440 | 0) & $420 >>> 0 > $438 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i25 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     break;
    }
    $450 = $emin$0$ph + -106 | 0;
    $452 = (($450 | 0) < 0) << 31 >> 31;
    if (($423 | 0) < ($452 | 0) | ($423 | 0) == ($452 | 0) & $420 >>> 0 < $450 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0$i25 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     break;
    }
    if (!$j$067$i) $k$3$i = $k$063$i; else {
     if (($j$067$i | 0) < 9) {
      $464 = $x$i + ($k$063$i << 2) | 0;
      $466 = HEAP32[$464 >> 2] | 0;
      $j$3110$i = $j$067$i;
      while (1) {
       $465 = $466 * 10 | 0;
       $j$3110$i = $j$3110$i + 1 | 0;
       if (($j$3110$i | 0) == 9) {
        $$lcssa323 = $465;
        break;
       } else $466 = $465;
      }
      HEAP32[$464 >> 2] = $$lcssa323;
     }
     $k$3$i = $k$063$i + 1 | 0;
    }
    if (($lnz$057$i | 0) < 9) if (($lnz$057$i | 0) <= ($420 | 0) & ($420 | 0) < 18) {
     if (($420 | 0) == 9) {
      $$0$i25 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
      break;
     }
     if (($420 | 0) < 9) {
      $$0$i25 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[11384 + (8 - $420 << 2) >> 2] | 0);
      break;
     }
     $488 = $bits$0$ph + 27 + (Math_imul($420, -3) | 0) | 0;
     $$pre$i17 = HEAP32[$x$i >> 2] | 0;
     if (($488 | 0) > 30 | ($$pre$i17 >>> $488 | 0) == 0) {
      $$0$i25 = +($sign$0 | 0) * +($$pre$i17 >>> 0) * +(HEAP32[11384 + ($420 + -10 << 2) >> 2] | 0);
      break;
     }
    }
    $500 = ($420 | 0) % 9 | 0;
    if (!$500) {
     $a$2$ph38$i = 0;
     $e2$0$ph$i = 0;
     $rp$2$ph36$i = $420;
     $z$1$ph37$i = $k$3$i;
    } else {
     $504 = ($420 | 0) > -1 ? $500 : $500 + 9 | 0;
     $507 = HEAP32[11384 + (8 - $504 << 2) >> 2] | 0;
     if (!$k$3$i) {
      $a$0$lcssa177$i = 0;
      $rp$0$lcssa178$i = $420;
      $z$0$i = 0;
     } else {
      $509 = 1e9 / ($507 | 0) | 0;
      $a$0101$i = 0;
      $carry$0103$i = 0;
      $k$4102$i = 0;
      $rp$0100$i = $420;
      while (1) {
       $510 = $x$i + ($k$4102$i << 2) | 0;
       $511 = HEAP32[$510 >> 2] | 0;
       $514 = (($511 >>> 0) / ($507 >>> 0) | 0) + $carry$0103$i | 0;
       HEAP32[$510 >> 2] = $514;
       $515 = Math_imul(($511 >>> 0) % ($507 >>> 0) | 0, $509) | 0;
       $or$cond16$i = ($k$4102$i | 0) == ($a$0101$i | 0) & ($514 | 0) == 0;
       $k$4102$i = $k$4102$i + 1 | 0;
       $rp$1$i18 = $or$cond16$i ? $rp$0100$i + -9 | 0 : $rp$0100$i;
       $a$1$i = $or$cond16$i ? $k$4102$i & 127 : $a$0101$i;
       if (($k$4102$i | 0) == ($k$3$i | 0)) {
        $$lcssa322 = $515;
        $a$1$i$lcssa = $a$1$i;
        $rp$1$i18$lcssa = $rp$1$i18;
        break;
       } else {
        $a$0101$i = $a$1$i;
        $carry$0103$i = $515;
        $rp$0100$i = $rp$1$i18;
       }
      }
      if (!$$lcssa322) {
       $a$0$lcssa177$i = $a$1$i$lcssa;
       $rp$0$lcssa178$i = $rp$1$i18$lcssa;
       $z$0$i = $k$3$i;
      } else {
       HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa322;
       $a$0$lcssa177$i = $a$1$i$lcssa;
       $rp$0$lcssa178$i = $rp$1$i18$lcssa;
       $z$0$i = $k$3$i + 1 | 0;
      }
     }
     $a$2$ph38$i = $a$0$lcssa177$i;
     $e2$0$ph$i = 0;
     $rp$2$ph36$i = 9 - $504 + $rp$0$lcssa178$i | 0;
     $z$1$ph37$i = $z$0$i;
    }
    L296 : while (1) {
     $528 = $x$i + ($a$2$ph38$i << 2) | 0;
     if (($rp$2$ph36$i | 0) < 18) {
      $e2$0$us$i = $e2$0$ph$i;
      $z$1$us$i = $z$1$ph37$i;
      while (1) {
       $carry1$0$us$i = 0;
       $k$5$in$us$i = $z$1$us$i + 127 | 0;
       $z$2$us$i = $z$1$us$i;
       while (1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = $x$i + ($k$5$us$i << 2) | 0;
        $533 = _bitshift64Shl(HEAP32[$531 >> 2] | 0, 0, 29) | 0;
        $535 = _i64Add($533 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
        $536 = tempRet0;
        if ($536 >>> 0 > 0 | ($536 | 0) == 0 & $535 >>> 0 > 1e9) {
         $542 = ___udivdi3($535 | 0, $536 | 0, 1e9, 0) | 0;
         $544 = ___uremdi3($535 | 0, $536 | 0, 1e9, 0) | 0;
         $$sink$off0$us$i = $544;
         $carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;
         $carry1$1$us$i = 0;
        }
        HEAP32[$531 >> 2] = $$sink$off0$us$i;
        $549 = ($k$5$us$i | 0) == ($a$2$ph38$i | 0);
        $z$3$us$i = ($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $549 ? $z$2$us$i : ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
        if ($549) {
         $carry1$1$us$i$lcssa = $carry1$1$us$i;
         $z$3$us$i$lcssa = $z$3$us$i;
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;
         $k$5$in$us$i = $k$5$us$i + -1 | 0;
         $z$2$us$i = $z$3$us$i;
        }
       }
       $552 = $e2$0$us$i + -29 | 0;
       if (!$carry1$1$us$i$lcssa) {
        $e2$0$us$i = $552;
        $z$1$us$i = $z$3$us$i$lcssa;
       } else {
        $$lcssa50$i = $552;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
        break;
       }
      }
     } else {
      if (($rp$2$ph36$i | 0) == 18) {
       $e2$0$us84$i = $e2$0$ph$i;
       $z$1$us85$i = $z$1$ph37$i;
      } else {
       $a$3$ph$i = $a$2$ph38$i;
       $e2$1$ph$i = $e2$0$ph$i;
       $rp$3$ph34$i = $rp$2$ph36$i;
       $z$5$ph$i = $z$1$ph37$i;
       break;
      }
      while (1) {
       if ((HEAP32[$528 >> 2] | 0) >>> 0 >= 9007199) {
        $a$3$ph$i = $a$2$ph38$i;
        $e2$1$ph$i = $e2$0$us84$i;
        $rp$3$ph34$i = 18;
        $z$5$ph$i = $z$1$us85$i;
        break L296;
       }
       $carry1$0$us89$i = 0;
       $k$5$in$us88$i = $z$1$us85$i + 127 | 0;
       $z$2$us87$i = $z$1$us85$i;
       while (1) {
        $k$5$us90$i = $k$5$in$us88$i & 127;
        $557 = $x$i + ($k$5$us90$i << 2) | 0;
        $559 = _bitshift64Shl(HEAP32[$557 >> 2] | 0, 0, 29) | 0;
        $561 = _i64Add($559 | 0, tempRet0 | 0, $carry1$0$us89$i | 0, 0) | 0;
        $562 = tempRet0;
        if ($562 >>> 0 > 0 | ($562 | 0) == 0 & $561 >>> 0 > 1e9) {
         $568 = ___udivdi3($561 | 0, $562 | 0, 1e9, 0) | 0;
         $570 = ___uremdi3($561 | 0, $562 | 0, 1e9, 0) | 0;
         $$sink$off0$us93$i = $570;
         $carry1$1$us94$i = $568;
        } else {
         $$sink$off0$us93$i = $561;
         $carry1$1$us94$i = 0;
        }
        HEAP32[$557 >> 2] = $$sink$off0$us93$i;
        $575 = ($k$5$us90$i | 0) == ($a$2$ph38$i | 0);
        $z$3$us97$i = ($k$5$us90$i | 0) != ($z$2$us87$i + 127 & 127 | 0) | $575 ? $z$2$us87$i : ($$sink$off0$us93$i | 0) == 0 ? $k$5$us90$i : $z$2$us87$i;
        if ($575) {
         $carry1$1$us94$i$lcssa = $carry1$1$us94$i;
         $z$3$us97$i$lcssa = $z$3$us97$i;
         break;
        } else {
         $carry1$0$us89$i = $carry1$1$us94$i;
         $k$5$in$us88$i = $k$5$us90$i + -1 | 0;
         $z$2$us87$i = $z$3$us97$i;
        }
       }
       $578 = $e2$0$us84$i + -29 | 0;
       if (!$carry1$1$us94$i$lcssa) {
        $e2$0$us84$i = $578;
        $z$1$us85$i = $z$3$us97$i$lcssa;
       } else {
        $$lcssa50$i = $578;
        $carry1$1$lcssa$lcssa$i = $carry1$1$us94$i$lcssa;
        $z$3$lcssa$lcssa$i = $z$3$us97$i$lcssa;
        break;
       }
      }
     }
     $582 = $a$2$ph38$i + 127 & 127;
     if (($582 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
      $585 = $z$3$lcssa$lcssa$i + 127 & 127;
      $590 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
      HEAP32[$590 >> 2] = HEAP32[$590 >> 2] | HEAP32[$x$i + ($585 << 2) >> 2];
      $z$4$i = $585;
     } else $z$4$i = $z$3$lcssa$lcssa$i;
     HEAP32[$x$i + ($582 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph38$i = $582;
     $e2$0$ph$i = $$lcssa50$i;
     $rp$2$ph36$i = $rp$2$ph36$i + 9 | 0;
     $z$1$ph37$i = $z$4$i;
    }
    L321 : while (1) {
     $621 = $z$5$ph$i + 1 & 127;
     $627 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
     $a$3$ph183$i = $a$3$ph$i;
     $e2$1$ph182$i = $e2$1$ph$i;
     $rp$3$ph$i = $rp$3$ph34$i;
     while (1) {
      $628 = ($rp$3$ph$i | 0) == 18;
      $$18$i = ($rp$3$ph$i | 0) > 27 ? 9 : 1;
      $$not$i = $628 ^ 1;
      $a$3$i = $a$3$ph183$i;
      $e2$1$i = $e2$1$ph182$i;
      while (1) {
       $594 = $a$3$i & 127;
       $595 = ($594 | 0) == ($z$5$ph$i | 0);
       do if ($595) label = 220; else {
        $597 = HEAP32[$x$i + ($594 << 2) >> 2] | 0;
        if ($597 >>> 0 < 9007199) {
         label = 220;
         break;
        }
        if ($597 >>> 0 > 9007199) break;
        $601 = $a$3$i + 1 & 127;
        if (($601 | 0) == ($z$5$ph$i | 0)) {
         label = 220;
         break;
        }
        $709 = HEAP32[$x$i + ($601 << 2) >> 2] | 0;
        if ($709 >>> 0 < 254740991) {
         label = 220;
         break;
        }
        if (!($709 >>> 0 > 254740991 | $$not$i)) {
         $635 = $594;
         $a$3$i301 = $a$3$i;
         $e2$1$i298 = $e2$1$i;
         $z$7$i = $z$5$ph$i;
         break L321;
        }
       } while (0);
       if ((label | 0) == 220) {
        label = 0;
        if ($628) {
         label = 221;
         break L321;
        }
       }
       $603 = $e2$1$i + $$18$i | 0;
       if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
        $a$3$i = $z$5$ph$i;
        $e2$1$i = $603;
       } else {
        $$lcssa308 = $603;
        $a$3$i$lcssa300 = $a$3$i;
        break;
       }
      }
      $606 = (1 << $$18$i) + -1 | 0;
      $607 = 1e9 >>> $$18$i;
      $a$478$i = $a$3$i$lcssa300;
      $carry3$081$i = 0;
      $k$679$i = $a$3$i$lcssa300;
      $rp$477$i = $rp$3$ph$i;
      while (1) {
       $608 = $x$i + ($k$679$i << 2) | 0;
       $609 = HEAP32[$608 >> 2] | 0;
       $612 = ($609 >>> $$18$i) + $carry3$081$i | 0;
       HEAP32[$608 >> 2] = $612;
       $613 = Math_imul($609 & $606, $607) | 0;
       $or$cond19$i = ($k$679$i | 0) == ($a$478$i | 0) & ($612 | 0) == 0;
       $k$679$i = $k$679$i + 1 & 127;
       $rp$5$i = $or$cond19$i ? $rp$477$i + -9 | 0 : $rp$477$i;
       $a$5$i = $or$cond19$i ? $k$679$i : $a$478$i;
       if (($k$679$i | 0) == ($z$5$ph$i | 0)) {
        $$lcssa309 = $613;
        $a$5$i$lcssa = $a$5$i;
        $rp$5$i$lcssa = $rp$5$i;
        break;
       } else {
        $a$478$i = $a$5$i;
        $carry3$081$i = $613;
        $rp$477$i = $rp$5$i;
       }
      }
      if (!$$lcssa309) {
       $a$3$ph183$i = $a$5$i$lcssa;
       $e2$1$ph182$i = $$lcssa308;
       $rp$3$ph$i = $rp$5$i$lcssa;
       continue;
      }
      if (($621 | 0) != ($a$5$i$lcssa | 0)) {
       $$lcssa308$lcssa = $$lcssa308;
       $$lcssa309$lcssa = $$lcssa309;
       $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
       $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
       break;
      }
      HEAP32[$627 >> 2] = HEAP32[$627 >> 2] | 1;
      $a$3$ph183$i = $a$5$i$lcssa;
      $e2$1$ph182$i = $$lcssa308;
      $rp$3$ph$i = $rp$5$i$lcssa;
     }
     HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $$lcssa309$lcssa;
     $a$3$ph$i = $a$5$i$lcssa$lcssa;
     $e2$1$ph$i = $$lcssa308$lcssa;
     $rp$3$ph34$i = $rp$5$i$lcssa$lcssa;
     $z$5$ph$i = $621;
    }
    if ((label | 0) == 221) if ($595) {
     HEAP32[$x$i + ($621 + -1 << 2) >> 2] = 0;
     $635 = $z$5$ph$i;
     $a$3$i301 = $a$3$i;
     $e2$1$i298 = $e2$1$i;
     $z$7$i = $621;
    } else {
     $635 = $594;
     $a$3$i301 = $a$3$i;
     $e2$1$i298 = $e2$1$i;
     $z$7$i = $z$5$ph$i;
    }
    $637 = +((HEAP32[$x$i + ($635 << 2) >> 2] | 0) >>> 0);
    $639 = $a$3$i301 + 1 & 127;
    if (($639 | 0) == ($z$7$i | 0)) {
     $698 = $a$3$i301 + 2 & 127;
     HEAP32[$x$i + ($698 + -1 << 2) >> 2] = 0;
     $z$7$1$i = $698;
    } else $z$7$1$i = $z$7$i;
    $661 = +($sign$0 | 0);
    $643 = $661 * ($637 * 1.0e9 + +((HEAP32[$x$i + ($639 << 2) >> 2] | 0) >>> 0));
    $681 = $e2$1$i298 + 53 | 0;
    $687 = $681 - $emin$0$ph | 0;
    $688 = ($687 | 0) < ($bits$0$ph | 0);
    $denormal$0$i = $688 & 1;
    $$010$i = $688 ? (($687 | 0) < 0 ? 0 : $687) : $bits$0$ph;
    if (($$010$i | 0) < 53) {
     $644 = +_copysignl(+_scalbn(1.0, 105 - $$010$i | 0), $643);
     $647 = +_fmodl($643, +_scalbn(1.0, 53 - $$010$i | 0));
     $bias$0$i23 = $644;
     $frac$0$i = $647;
     $y$1$i22 = $644 + ($643 - $647);
    } else {
     $bias$0$i23 = 0.0;
     $frac$0$i = 0.0;
     $y$1$i22 = $643;
    }
    $651 = $a$3$i301 + 2 & 127;
    do if (($651 | 0) == ($z$7$1$i | 0)) $frac$2$i = $frac$0$i; else {
     $654 = HEAP32[$x$i + ($651 << 2) >> 2] | 0;
     do if ($654 >>> 0 < 5e8) {
      if (!$654) if (($a$3$i301 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $frac$0$i;
       break;
      }
      $frac$1$i = $661 * .25 + $frac$0$i;
     } else {
      if ($654 >>> 0 > 5e8) {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
      if (($a$3$i301 + 3 & 127 | 0) == ($z$7$1$i | 0)) {
       $frac$1$i = $661 * .5 + $frac$0$i;
       break;
      } else {
       $frac$1$i = $661 * .75 + $frac$0$i;
       break;
      }
     } while (0);
     if ((53 - $$010$i | 0) <= 1) {
      $frac$2$i = $frac$1$i;
      break;
     }
     if (+_fmodl($frac$1$i, 1.0) != 0.0) {
      $frac$2$i = $frac$1$i;
      break;
     }
     $frac$2$i = $frac$1$i + 1.0;
    } while (0);
    $679 = $y$1$i22 + $frac$2$i - $bias$0$i23;
    do if (($681 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
     if (!(+Math_abs(+$679) >= 9007199254740992.0)) {
      $denormal$2$i = $denormal$0$i;
      $e2$2$i = $e2$1$i298;
      $y$2$i24 = $679;
     } else {
      $denormal$2$i = $688 & ($$010$i | 0) == ($687 | 0) ? 0 : $denormal$0$i;
      $e2$2$i = $e2$1$i298 + 1 | 0;
      $y$2$i24 = $679 * .5;
     }
     if (($e2$2$i + 50 | 0) <= ($324 | 0)) if (!($frac$2$i != 0.0 & ($denormal$2$i | 0) != 0)) {
      $e2$3$i = $e2$2$i;
      $y$3$i = $y$2$i24;
      break;
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $e2$3$i = $e2$2$i;
     $y$3$i = $y$2$i24;
    } else {
     $e2$3$i = $e2$1$i298;
     $y$3$i = $679;
    } while (0);
    $$0$i25 = +_scalbnl($y$3$i, $e2$3$i);
   } while (0);
   $$0 = $$0$i25;
   STACKTOP = sp;
   return +$$0;
  } while (0);
  if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  ___shlim($f, 0);
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 } while (0);
 if ((label | 0) == 23) {
  $42 = (HEAP32[$1 >> 2] | 0) == 0;
  if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $42)) {
   $46 = HEAP32[$0 >> 2] | 0;
   $i$1 = $i$0$lcssa;
   while (1) {
    $45 = $46 + -1 | 0;
    $i$1 = $i$1 + -1 | 0;
    if ($i$1 >>> 0 <= 3) {
     $$lcssa = $45;
     break;
    } else $46 = $45;
   }
   HEAP32[$0 >> 2] = $$lcssa;
  }
 }
 $$0 = +($sign$0 | 0) * inf;
 STACKTOP = sp;
 return +$$0;
}

function _luaV_execute($L) {
 $L = $L | 0;
 var $$lcssa216 = 0, $$lcssa230 = 0, $$lcssa236 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $$pre$phi2$iZ2D = 0, $$pre124 = 0, $$sum10 = 0, $$sum11 = 0, $$sum13 = 0, $$sum14 = 0, $$sum17 = 0, $$sum2 = 0, $$sum3 = 0, $$sum32 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1015 = 0, $1016 = 0, $1026 = 0, $1027 = 0, $1036 = 0, $1039 = 0, $1042 = 0, $1044 = 0, $1049 = 0, $1050 = 0, $1058 = 0, $1059 = 0, $106 = 0, $108 = 0, $11 = 0, $113 = 0, $114 = 0, $12 = 0, $121 = 0, $124 = 0, $126 = 0, $131 = 0, $132 = 0, $15 = 0, $154 = 0, $155 = 0, $16 = 0, $160 = 0, $161 = 0, $173 = 0, $18 = 0, $184 = 0, $19 = 0, $197 = 0, $2 = 0, $20 = 0, $204 = 0, $215 = 0, $217 = 0, $218 = 0, $22 = 0, $223 = 0, $224 = 0, $228 = 0, $23 = 0, $234 = 0, $243 = 0, $250 = 0, $259 = 0, $261 = 0, $262 = 0, $266 = 0, $27 = 0, $275 = 0, $276 = 0, $278 = 0, $28 = 0, $283 = 0, $284 = 0, $291 = 0, $3 = 0, $300 = 0, $306 = 0, $307 = 0, $31 = 0, $314 = 0, $32 = 0, $326 = 0, $332 = 0, $333 = 0, $340 = 0, $352 = 0, $358 = 0, $359 = 0, $36 = 0, $366 = 0, $378 = 0, $38 = 0, $384 = 0, $385 = 0, $392 = 0, $4 = 0, $404 = 0, $410 = 0, $411 = 0, $418 = 0, $425 = 0.0, $426 = 0.0, $433 = 0, $439 = 0, $440 = 0, $447 = 0, $459 = 0, $460 = 0, $468 = 0, $470 = 0, $477 = 0, $48 = 0, $482 = 0, $484 = 0, $488 = 0, $49 = 0, $490 = 0, $491 = 0, $496 = 0, $497 = 0, $5 = 0, $50 = 0, $511 = 0, $512 = 0, $513 = 0, $521 = 0, $527 = 0, $528 = 0, $535 = 0, $54 = 0, $544 = 0, $546 = 0, $548 = 0, $550 = 0, $557 = 0, $559 = 0, $566 = 0, $57 = 0, $575 = 0, $576 = 0, $578 = 0, $580 = 0, $587 = 0, $589 = 0, $59 = 0, $596 = 0, $6 = 0, $60 = 0, $605 = 0, $606 = 0, $608 = 0, $610 = 0, $617 = 0, $622 = 0, $623 = 0, $632 = 0, $633 = 0, $635 = 0, $64 = 0, $642 = 0, $643 = 0, $644 = 0, $648 = 0, $649 = 0, $658 = 0, $663 = 0, $664 = 0, $669 = 0, $670 = 0, $672 = 0, $679 = 0, $680 = 0, $682 = 0, $691 = 0, $692 = 0, $697 = 0, $7 = 0, $703 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $716 = 0, $72 = 0, $725 = 0, $726 = 0, $731 = 0, $732 = 0, $74 = 0, $744 = 0, $75 = 0, $753 = 0, $758 = 0, $763 = 0, $770 = 0, $775 = 0, $78 = 0, $780 = 0.0, $782 = 0.0, $784 = 0.0, $79 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $802 = 0, $809 = 0, $81 = 0, $810 = 0, $814 = 0, $82 = 0, $821 = 0, $822 = 0, $826 = 0, $83 = 0, $84 = 0, $840 = 0, $843 = 0, $848 = 0, $849 = 0, $85 = 0, $858 = 0, $863 = 0, $864 = 0, $871 = 0, $876 = 0, $877 = 0, $88 = 0, $887 = 0, $889 = 0, $89 = 0, $891 = 0, $896 = 0, $899 = 0, $9 = 0, $904 = 0, $905 = 0, $91 = 0, $914 = 0, $916 = 0, $925 = 0, $929 = 0, $93 = 0, $932 = 0, $937 = 0, $938 = 0, $960 = 0, $961 = 0, $962 = 0, $965 = 0, $973 = 0, $98 = 0, $984 = 0, $985 = 0, $989 = 0, $99 = 0, $995 = 0, $aux$093 = 0, $b$0 = 0, $b85$0 = 0, $base$0 = 0, $base$1 = 0, $base$1$lcssa = 0, $base$2 = 0, $c83$0 = 0, $ci$0 = 0, $i$0 = 0, $i$01$i = 0, $i$01$i42 = 0, $j$088 = 0, $last$090 = 0, $n$0 = 0, $n$189 = 0, $num$i37 = 0, $ra$0 = 0, $ra$1 = 0, $storemerge = 0, $storemerge25 = 0, $storemerge27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer3 = sp + 24 | 0;
 $vararg_buffer1 = sp + 16 | 0;
 $vararg_buffer = sp + 8 | 0;
 $num$i37 = sp;
 $0 = $L + 16 | 0;
 $2 = $L + 40 | 0;
 $3 = $L + 12 | 0;
 $4 = $L + 8 | 0;
 $5 = $L + 24 | 0;
 $6 = $L + 48 | 0;
 $7 = $L + 20 | 0;
 $8 = $L + 6 | 0;
 $9 = $L + 44 | 0;
 $ci$0 = HEAP32[$0 >> 2] | 0;
 L1 : while (1) {
  $11 = HEAP32[HEAP32[$ci$0 >> 2] >> 2] | 0;
  $12 = $11 + 12 | 0;
  $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0;
  $16 = $ci$0 + 24 | 0;
  $18 = $ci$0 + 28 | 0;
  $19 = $ci$0 + 4 | 0;
  $base$0 = HEAP32[$16 >> 2] | 0;
  L3 : while (1) {
   $20 = HEAP32[$18 >> 2] | 0;
   HEAP32[$18 >> 2] = $20 + 4;
   $22 = HEAP32[$20 >> 2] | 0;
   $23 = HEAP8[$2 >> 0] | 0;
   if (!($23 & 12)) $base$1 = $base$0; else {
    $27 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
    HEAP32[$6 >> 2] = $27;
    $28 = ($27 | 0) == 0;
    if (($23 & 4) == 0 & ($28 ^ 1)) $base$1 = $base$0; else {
     $31 = HEAP32[$0 >> 2] | 0;
     $32 = $23 & 255;
     if (($32 & 8 | 0) == 0 | $28 ^ 1) $1059 = 0; else {
      HEAP32[$6 >> 2] = HEAP32[$9 >> 2];
      $1059 = 1;
     }
     $36 = $31 + 18 | 0;
     $38 = HEAPU8[$36 >> 0] | 0;
     if (!($38 & 128)) {
      if ($1059) _luaD_hook($L, 3, -1);
      do if (!($32 & 4)) {
       $$pre$i = $31 + 28 | 0;
       $$pre$phi$iZ2D = $$pre$i;
       $$pre$phi2$iZ2D = $$pre$i;
      } else {
       $48 = HEAP32[(HEAP32[HEAP32[$31 >> 2] >> 2] | 0) + 12 >> 2] | 0;
       $49 = $31 + 28 | 0;
       $50 = HEAP32[$49 >> 2] | 0;
       $54 = HEAP32[$48 + 12 >> 2] | 0;
       $57 = ($50 - $54 >> 2) + -1 | 0;
       $59 = HEAP32[$48 + 20 >> 2] | 0;
       $60 = ($59 | 0) == 0;
       if ($60) $72 = 0; else $72 = HEAP32[$59 + ($57 << 2) >> 2] | 0;
       if ($57) {
        $64 = HEAP32[$7 >> 2] | 0;
        if ($50 >>> 0 > $64 >>> 0) {
         if ($60) $74 = 0; else $74 = HEAP32[$59 + (($64 - $54 >> 2) + -1 << 2) >> 2] | 0;
         if (($72 | 0) == ($74 | 0)) {
          $$pre$phi$iZ2D = $49;
          $$pre$phi2$iZ2D = $49;
          break;
         }
        }
       }
       _luaD_hook($L, 2, $72);
       $$pre$phi$iZ2D = $49;
       $$pre$phi2$iZ2D = $49;
      } while (0);
      $75 = HEAP32[$$pre$phi$iZ2D >> 2] | 0;
      HEAP32[$7 >> 2] = $75;
      if ((HEAP8[$8 >> 0] | 0) == 1) {
       label = 22;
       break L1;
      }
     } else HEAP8[$36 >> 0] = $38 & 127;
     $base$1 = HEAP32[$16 >> 2] | 0;
    }
   }
   $88 = $22 >>> 6 & 255;
   $89 = $base$1 + ($88 << 4) | 0;
   do switch ($22 & 63 | 0) {
   case 7:
    {
     $184 = $22 >>> 14;
     _luaV_gettable($L, $base$1 + ($22 >>> 23 << 4) | 0, ($184 & 256 | 0) == 0 ? $base$1 + (($184 & 511) << 4) | 0 : $15 + (($184 & 255) << 4) | 0, $89);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 5:
    {
     $154 = HEAP32[(HEAP32[$11 + 16 + ($22 >>> 23 << 2) >> 2] | 0) + 8 >> 2] | 0;
     $155 = $154;
     $160 = HEAP32[$155 + 4 >> 2] | 0;
     $161 = $89;
     HEAP32[$161 >> 2] = HEAP32[$155 >> 2];
     HEAP32[$161 + 4 >> 2] = $160;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = HEAP32[$154 + 8 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 17:
    {
     $404 = $22 >>> 23;
     $410 = ($404 & 256 | 0) == 0 ? $base$1 + ($404 << 4) | 0 : $15 + (($404 & 255) << 4) | 0;
     $411 = $22 >>> 14;
     $418 = ($411 & 256 | 0) == 0 ? $base$1 + (($411 & 511) << 4) | 0 : $15 + (($411 & 255) << 4) | 0;
     if ((HEAP32[$410 + 8 >> 2] | 0) == 3) if ((HEAP32[$418 + 8 >> 2] | 0) == 3) {
      $425 = +HEAPF64[$410 >> 3];
      $426 = +HEAPF64[$418 >> 3];
      HEAPF64[$89 >> 3] = $425 - $426 * +Math_floor(+($425 / $426));
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $410, $418, 10);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 4:
    {
     $b$0 = $22 >>> 23;
     $ra$0 = $89;
     while (1) {
      HEAP32[$ra$0 + 8 >> 2] = 0;
      if (!$b$0) {
       $base$0 = $base$1;
       continue L3;
      } else {
       $b$0 = $b$0 + -1 | 0;
       $ra$0 = $ra$0 + 16 | 0;
      }
     }
     break;
    }
   case 12:
    {
     $275 = $22 >>> 23;
     $276 = $base$1 + ($275 << 4) | 0;
     $$sum32 = $88 + 1 | 0;
     $278 = $276;
     $283 = HEAP32[$278 + 4 >> 2] | 0;
     $284 = $base$1 + ($$sum32 << 4) | 0;
     HEAP32[$284 >> 2] = HEAP32[$278 >> 2];
     HEAP32[$284 + 4 >> 2] = $283;
     HEAP32[$base$1 + ($$sum32 << 4) + 8 >> 2] = HEAP32[$base$1 + ($275 << 4) + 8 >> 2];
     $291 = $22 >>> 14;
     _luaV_gettable($L, $276, ($291 & 256 | 0) == 0 ? $base$1 + (($291 & 511) << 4) | 0 : $15 + (($291 & 255) << 4) | 0, $89);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 26:
    {
     $589 = $22 >>> 23;
     $596 = $22 >>> 14;
     $605 = (_luaV_lessequal($L, ($589 & 256 | 0) == 0 ? $base$1 + ($589 << 4) | 0 : $15 + (($589 & 255) << 4) | 0, ($596 & 256 | 0) == 0 ? $base$1 + (($596 & 511) << 4) | 0 : $15 + (($596 & 255) << 4) | 0) | 0) == ($88 | 0);
     $606 = HEAP32[$18 >> 2] | 0;
     if ($605) {
      $608 = HEAP32[$606 >> 2] | 0;
      $610 = $608 >>> 6 & 255;
      if (!$610) $617 = $606; else {
       _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($610 + -1 << 4) | 0);
       $617 = HEAP32[$18 >> 2] | 0;
      }
      $storemerge = $617 + (($608 >>> 14) + -131070 << 2) | 0;
     } else $storemerge = $606 + 4 | 0;
     HEAP32[$18 >> 2] = $storemerge;
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 18:
    {
     $433 = $22 >>> 23;
     $439 = ($433 & 256 | 0) == 0 ? $base$1 + ($433 << 4) | 0 : $15 + (($433 & 255) << 4) | 0;
     $440 = $22 >>> 14;
     $447 = ($440 & 256 | 0) == 0 ? $base$1 + (($440 & 511) << 4) | 0 : $15 + (($440 & 255) << 4) | 0;
     if ((HEAP32[$439 + 8 >> 2] | 0) == 3) if ((HEAP32[$447 + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = +Math_pow(+(+HEAPF64[$439 >> 3]), +(+HEAPF64[$447 >> 3]));
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $439, $447, 11);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 0:
    {
     $91 = $22 >>> 23;
     $93 = $base$1 + ($91 << 4) | 0;
     $98 = HEAP32[$93 + 4 >> 2] | 0;
     $99 = $89;
     HEAP32[$99 >> 2] = HEAP32[$93 >> 2];
     HEAP32[$99 + 4 >> 2] = $98;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = HEAP32[$base$1 + ($91 << 4) + 8 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 21:
    {
     _luaV_objlen($L, $89, $base$1 + ($22 >>> 23 << 4) | 0);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 11:
    {
     $259 = $22 >>> 23;
     $261 = $22 >>> 14 & 511;
     $262 = _luaH_new($L) | 0;
     HEAP32[$89 >> 2] = $262;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 69;
     if ($261 | $259) {
      $266 = _luaO_fb2int($259) | 0;
      _luaH_resize($L, $262, $266, _luaO_fb2int($261) | 0);
     }
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      HEAP32[$4 >> 2] = $base$1 + ($88 + 1 << 4);
      _luaC_step($L);
      HEAP32[$4 >> 2] = HEAP32[$19 >> 2];
     }
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 3:
    {
     HEAP32[$89 >> 2] = $22 >>> 23;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 1;
     if (!($22 & 8372224)) {
      $base$0 = $base$1;
      continue L3;
     }
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 4;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 8:
    {
     $197 = $22 >>> 23;
     $204 = $22 >>> 14;
     _luaV_settable($L, HEAP32[(HEAP32[$11 + 16 + ($88 << 2) >> 2] | 0) + 8 >> 2] | 0, ($197 & 256 | 0) == 0 ? $base$1 + ($197 << 4) | 0 : $15 + (($197 & 255) << 4) | 0, ($204 & 256 | 0) == 0 ? $base$1 + (($204 & 511) << 4) | 0 : $15 + (($204 & 255) << 4) | 0);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 6:
    {
     $173 = $22 >>> 14;
     _luaV_gettable($L, HEAP32[(HEAP32[$11 + 16 + ($22 >>> 23 << 2) >> 2] | 0) + 8 >> 2] | 0, ($173 & 256 | 0) == 0 ? $base$1 + (($173 & 511) << 4) | 0 : $15 + (($173 & 255) << 4) | 0, $89);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 24:
    {
     $521 = $22 >>> 23;
     $527 = ($521 & 256 | 0) == 0 ? $base$1 + ($521 << 4) | 0 : $15 + (($521 & 255) << 4) | 0;
     $528 = $22 >>> 14;
     $535 = ($528 & 256 | 0) == 0 ? $base$1 + (($528 & 511) << 4) | 0 : $15 + (($528 & 255) << 4) | 0;
     if ((HEAP32[$527 + 8 >> 2] | 0) == (HEAP32[$535 + 8 >> 2] | 0)) $544 = (_luaV_equalobj_($L, $527, $535) | 0) != 0; else $544 = 0;
     $546 = HEAP32[$18 >> 2] | 0;
     if (($544 & 1 | 0) == ($88 | 0)) {
      $548 = HEAP32[$546 >> 2] | 0;
      $550 = $548 >>> 6 & 255;
      if (!$550) $557 = $546; else {
       _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($550 + -1 << 4) | 0);
       $557 = HEAP32[$18 >> 2] | 0;
      }
      $storemerge27 = $557 + (($548 >>> 14) + -131070 << 2) | 0;
     } else $storemerge27 = $546 + 4 | 0;
     HEAP32[$18 >> 2] = $storemerge27;
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 23:
    {
     if ($88) _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($88 + -1 << 4) | 0);
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + (($22 >>> 14) + -131071 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 19:
    {
     $459 = $22 >>> 23;
     $460 = $base$1 + ($459 << 4) | 0;
     if ((HEAP32[$base$1 + ($459 << 4) + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = -+HEAPF64[$460 >> 3];
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     } else {
      _luaV_arith($L, $89, $460, $460, 12);
      $base$0 = HEAP32[$16 >> 2] | 0;
      continue L3;
     }
     break;
    }
   case 20:
    {
     $468 = $22 >>> 23;
     $470 = HEAP32[$base$1 + ($468 << 4) + 8 >> 2] | 0;
     if (!$470) $477 = 1; else if (($470 | 0) == 1) $477 = (HEAP32[$base$1 + ($468 << 4) >> 2] | 0) == 0; else $477 = 0;
     HEAP32[$89 >> 2] = $477 & 1;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 1;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 10:
    {
     $243 = $22 >>> 23;
     $250 = $22 >>> 14;
     _luaV_settable($L, $89, ($243 & 256 | 0) == 0 ? $base$1 + ($243 << 4) | 0 : $15 + (($243 & 255) << 4) | 0, ($250 & 256 | 0) == 0 ? $base$1 + (($250 & 511) << 4) | 0 : $15 + (($250 & 255) << 4) | 0);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 25:
    {
     $559 = $22 >>> 23;
     $566 = $22 >>> 14;
     $575 = (_luaV_lessthan($L, ($559 & 256 | 0) == 0 ? $base$1 + ($559 << 4) | 0 : $15 + (($559 & 255) << 4) | 0, ($566 & 256 | 0) == 0 ? $base$1 + (($566 & 511) << 4) | 0 : $15 + (($566 & 255) << 4) | 0) | 0) == ($88 | 0);
     $576 = HEAP32[$18 >> 2] | 0;
     if ($575) {
      $578 = HEAP32[$576 >> 2] | 0;
      $580 = $578 >>> 6 & 255;
      if (!$580) $587 = $576; else {
       _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($580 + -1 << 4) | 0);
       $587 = HEAP32[$18 >> 2] | 0;
      }
      $storemerge25 = $587 + (($578 >>> 14) + -131070 << 2) | 0;
     } else $storemerge25 = $576 + 4 | 0;
     HEAP32[$18 >> 2] = $storemerge25;
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 13:
    {
     $300 = $22 >>> 23;
     $306 = ($300 & 256 | 0) == 0 ? $base$1 + ($300 << 4) | 0 : $15 + (($300 & 255) << 4) | 0;
     $307 = $22 >>> 14;
     $314 = ($307 & 256 | 0) == 0 ? $base$1 + (($307 & 511) << 4) | 0 : $15 + (($307 & 255) << 4) | 0;
     if ((HEAP32[$306 + 8 >> 2] | 0) == 3) if ((HEAP32[$314 + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = +HEAPF64[$306 >> 3] + +HEAPF64[$314 >> 3];
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $306, $314, 6);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 31:
    {
     $$lcssa216 = $22;
     $$lcssa230 = $88;
     $$lcssa236 = $89;
     $base$1$lcssa = $base$1;
     label = 146;
     break L3;
     break;
    }
   case 33:
    {
     $$sum13 = $88 + 1 | 0;
     $795 = $base$1 + ($$sum13 << 4) | 0;
     $$sum14 = $88 + 2 | 0;
     $796 = $base$1 + ($$sum14 << 4) | 0;
     $797 = $base$1 + ($88 << 4) + 8 | 0;
     $798 = HEAP32[$797 >> 2] | 0;
     if (($798 | 0) != 3) {
      if (($798 & 15 | 0) != 4) {
       label = 162;
       break L1;
      }
      $802 = HEAP32[$89 >> 2] | 0;
      if (!(_luaO_str2d($802 + 16 | 0, HEAP32[$802 + 12 >> 2] | 0, $num$i37) | 0)) {
       label = 162;
       break L1;
      }
      HEAPF64[$89 >> 3] = +HEAPF64[$num$i37 >> 3];
      HEAP32[$797 >> 2] = 3;
     }
     $809 = $base$1 + ($$sum13 << 4) + 8 | 0;
     $810 = HEAP32[$809 >> 2] | 0;
     if (($810 | 0) != 3) {
      if (($810 & 15 | 0) != 4) {
       label = 167;
       break L1;
      }
      $814 = HEAP32[$795 >> 2] | 0;
      if (!(_luaO_str2d($814 + 16 | 0, HEAP32[$814 + 12 >> 2] | 0, $num$i37) | 0)) {
       label = 167;
       break L1;
      }
      HEAPF64[$795 >> 3] = +HEAPF64[$num$i37 >> 3];
      HEAP32[$809 >> 2] = 3;
     }
     $821 = $base$1 + ($$sum14 << 4) + 8 | 0;
     $822 = HEAP32[$821 >> 2] | 0;
     if (($822 | 0) != 3) {
      if (($822 & 15 | 0) != 4) {
       label = 172;
       break L1;
      }
      $826 = HEAP32[$796 >> 2] | 0;
      if (!(_luaO_str2d($826 + 16 | 0, HEAP32[$826 + 12 >> 2] | 0, $num$i37) | 0)) {
       label = 172;
       break L1;
      }
      HEAPF64[$796 >> 3] = +HEAPF64[$num$i37 >> 3];
      HEAP32[$821 >> 2] = 3;
     }
     HEAPF64[$89 >> 3] = +HEAPF64[$89 >> 3] - +HEAPF64[$796 >> 3];
     HEAP32[$797 >> 2] = 3;
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + (($22 >>> 14) + -131071 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 32:
    {
     $780 = +HEAPF64[$base$1 + ($88 + 2 << 4) >> 3];
     $782 = $780 + +HEAPF64[$89 >> 3];
     $784 = +HEAPF64[$base$1 + ($88 + 1 << 4) >> 3];
     if ($780 > 0.0) {
      if (!($782 <= $784)) {
       $base$0 = $base$1;
       continue L3;
      }
     } else if (!($784 <= $782)) {
      $base$0 = $base$1;
      continue L3;
     }
     HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + (($22 >>> 14) + -131071 << 2);
     HEAPF64[$89 >> 3] = $782;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
     $$sum17 = $88 + 3 | 0;
     HEAPF64[$base$1 + ($$sum17 << 4) >> 3] = $782;
     HEAP32[$base$1 + ($$sum17 << 4) + 8 >> 2] = 3;
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 9:
    {
     $215 = HEAP32[$11 + 16 + ($22 >>> 23 << 2) >> 2] | 0;
     $217 = HEAP32[$215 + 8 >> 2] | 0;
     $218 = $89;
     $223 = HEAP32[$218 + 4 >> 2] | 0;
     $224 = $217;
     HEAP32[$224 >> 2] = HEAP32[$218 >> 2];
     HEAP32[$224 + 4 >> 2] = $223;
     $228 = $base$1 + ($88 << 4) + 8 | 0;
     HEAP32[$217 + 8 >> 2] = HEAP32[$228 >> 2];
     if (!(HEAP32[$228 >> 2] & 64)) {
      $base$0 = $base$1;
      continue L3;
     }
     $234 = HEAP32[$89 >> 2] | 0;
     if (!(HEAP8[$234 + 5 >> 0] & 3)) {
      $base$0 = $base$1;
      continue L3;
     }
     if (!(HEAP8[$215 + 5 >> 0] & 4)) {
      $base$0 = $base$1;
      continue L3;
     }
     _luaC_barrier_($L, $215, $234);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 22:
    {
     $482 = $22 >>> 23;
     $484 = $22 >>> 14 & 511;
     HEAP32[$4 >> 2] = $base$1 + ($484 + 1 << 4);
     _luaV_concat($L, 1 - $482 + $484 | 0);
     $488 = HEAP32[$16 >> 2] | 0;
     $490 = $488 + ($482 << 4) | 0;
     $491 = $490;
     $496 = HEAP32[$491 + 4 >> 2] | 0;
     $497 = $488 + ($88 << 4) | 0;
     HEAP32[$497 >> 2] = HEAP32[$491 >> 2];
     HEAP32[$497 + 4 >> 2] = $496;
     HEAP32[$488 + ($88 << 4) + 8 >> 2] = HEAP32[$488 + ($482 << 4) + 8 >> 2];
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      HEAP32[$4 >> 2] = $88 >>> 0 >= $482 >>> 0 ? $488 + ($88 + 1 << 4) | 0 : $490;
      _luaC_step($L);
      $511 = HEAP32[$19 >> 2] | 0;
      HEAP32[$4 >> 2] = $511;
      $513 = $511;
     } else $513 = HEAP32[$19 >> 2] | 0;
     $512 = HEAP32[$16 >> 2] | 0;
     HEAP32[$4 >> 2] = $513;
     $base$0 = $512;
     continue L3;
     break;
    }
   case 35:
    {
     $base$2 = $base$1;
     $i$0 = $22;
     $ra$1 = $89;
     break;
    }
   case 34:
    {
     $$sum7 = $88 + 3 | 0;
     $840 = $base$1 + ($$sum7 << 4) | 0;
     $$sum8 = $88 + 2 | 0;
     $$sum9 = $88 + 5 | 0;
     $843 = $base$1 + ($$sum8 << 4) | 0;
     $848 = HEAP32[$843 + 4 >> 2] | 0;
     $849 = $base$1 + ($$sum9 << 4) | 0;
     HEAP32[$849 >> 2] = HEAP32[$843 >> 2];
     HEAP32[$849 + 4 >> 2] = $848;
     HEAP32[$base$1 + ($$sum9 << 4) + 8 >> 2] = HEAP32[$base$1 + ($$sum8 << 4) + 8 >> 2];
     $$sum10 = $88 + 1 | 0;
     $$sum11 = $88 + 4 | 0;
     $858 = $base$1 + ($$sum10 << 4) | 0;
     $863 = HEAP32[$858 + 4 >> 2] | 0;
     $864 = $base$1 + ($$sum11 << 4) | 0;
     HEAP32[$864 >> 2] = HEAP32[$858 >> 2];
     HEAP32[$864 + 4 >> 2] = $863;
     HEAP32[$base$1 + ($$sum11 << 4) + 8 >> 2] = HEAP32[$base$1 + ($$sum10 << 4) + 8 >> 2];
     $871 = $89;
     $876 = HEAP32[$871 + 4 >> 2] | 0;
     $877 = $840;
     HEAP32[$877 >> 2] = HEAP32[$871 >> 2];
     HEAP32[$877 + 4 >> 2] = $876;
     HEAP32[$base$1 + ($$sum7 << 4) + 8 >> 2] = HEAP32[$base$1 + ($88 << 4) + 8 >> 2];
     HEAP32[$4 >> 2] = $base$1 + ($88 + 6 << 4);
     _luaD_call($L, $840, $22 >>> 14 & 511, 1);
     $887 = HEAP32[$16 >> 2] | 0;
     HEAP32[$4 >> 2] = HEAP32[$19 >> 2];
     $889 = HEAP32[$18 >> 2] | 0;
     HEAP32[$18 >> 2] = $889 + 4;
     $891 = HEAP32[$889 >> 2] | 0;
     $base$2 = $887;
     $i$0 = $891;
     $ra$1 = $887 + (($891 >>> 6 & 255) << 4) | 0;
     break;
    }
   case 36:
    {
     $914 = $22 >>> 23;
     $916 = $22 >>> 14 & 511;
     if (!$914) $n$0 = ((HEAP32[$4 >> 2] | 0) - $89 >> 4) + -1 | 0; else $n$0 = $914;
     if (!$916) {
      $925 = HEAP32[$18 >> 2] | 0;
      HEAP32[$18 >> 2] = $925 + 4;
      $c83$0 = (HEAP32[$925 >> 2] | 0) >>> 6;
     } else $c83$0 = $916;
     $929 = HEAP32[$89 >> 2] | 0;
     $932 = $n$0 + -50 + ($c83$0 * 50 | 0) | 0;
     if (($932 | 0) > (HEAP32[$929 + 28 >> 2] | 0)) _luaH_resizearray($L, $929, $932);
     if (($n$0 | 0) > 0) {
      $937 = $929 + 5 | 0;
      $last$090 = $932;
      $n$189 = $n$0;
      while (1) {
       $$sum6 = $n$189 + $88 | 0;
       $938 = $base$1 + ($$sum6 << 4) | 0;
       _luaH_setint($L, $929, $last$090, $938);
       $last$090 = $last$090 + -1 | 0;
       if (HEAP32[$base$1 + ($$sum6 << 4) + 8 >> 2] & 64) if (HEAP8[(HEAP32[$938 >> 2] | 0) + 5 >> 0] & 3) if (HEAP8[$937 >> 0] & 4) _luaC_barrierback_($L, $929);
       if (($n$189 | 0) <= 1) break; else $n$189 = $n$189 + -1 | 0;
      }
     }
     HEAP32[$4 >> 2] = HEAP32[$19 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 37:
    {
     $960 = HEAP32[(HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] | 0) + ($22 >>> 14 << 2) >> 2] | 0;
     $961 = $960 + 32 | 0;
     $962 = HEAP32[$961 >> 2] | 0;
     $$pre = HEAP32[$960 + 40 >> 2] | 0;
     $$pre124 = HEAP32[$960 + 28 >> 2] | 0;
     L161 : do if (!$962) label = 199; else {
      if (($$pre | 0) > 0) {
       $965 = $962 + 16 | 0;
       $i$01$i = 0;
       do {
        $973 = HEAPU8[$$pre124 + ($i$01$i << 3) + 5 >> 0] | 0;
        if (!(HEAP8[$$pre124 + ($i$01$i << 3) + 4 >> 0] | 0)) $984 = HEAP32[(HEAP32[$11 + 16 + ($973 << 2) >> 2] | 0) + 8 >> 2] | 0; else $984 = $base$1 + ($973 << 4) | 0;
        if ((HEAP32[(HEAP32[$965 + ($i$01$i << 2) >> 2] | 0) + 8 >> 2] | 0) != ($984 | 0)) {
         label = 199;
         break L161;
        }
        $i$01$i = $i$01$i + 1 | 0;
       } while (($i$01$i | 0) < ($$pre | 0));
      }
      HEAP32[$89 >> 2] = $962;
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 70;
     } while (0);
     if ((label | 0) == 199) {
      label = 0;
      $985 = _luaF_newLclosure($L, $$pre) | 0;
      HEAP32[$985 + 12 >> 2] = $960;
      HEAP32[$89 >> 2] = $985;
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 70;
      if (($$pre | 0) > 0) {
       $989 = $985 + 16 | 0;
       $i$01$i42 = 0;
       do {
        $995 = HEAPU8[$$pre124 + ($i$01$i42 << 3) + 5 >> 0] | 0;
        if (!(HEAP8[$$pre124 + ($i$01$i42 << 3) + 4 >> 0] | 0)) HEAP32[$989 + ($i$01$i42 << 2) >> 2] = HEAP32[$11 + 16 + ($995 << 2) >> 2]; else HEAP32[$989 + ($i$01$i42 << 2) >> 2] = _luaF_findupval($L, $base$1 + ($995 << 4) | 0) | 0;
        $i$01$i42 = $i$01$i42 + 1 | 0;
       } while (($i$01$i42 | 0) != ($$pre | 0));
      }
      if (HEAP8[$960 + 5 >> 0] & 4) _luaC_barrierproto_($L, $960, $985);
      HEAP32[$961 >> 2] = $985;
     }
     if ((HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0) > 0) {
      HEAP32[$4 >> 2] = $base$1 + ($88 + 1 << 4);
      _luaC_step($L);
      HEAP32[$4 >> 2] = HEAP32[$19 >> 2];
     }
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 38:
    {
     $1015 = $22 >>> 23;
     $1016 = $1015 + -1 | 0;
     $1026 = ($base$1 - (HEAP32[$ci$0 >> 2] | 0) >> 4) - (HEAPU8[(HEAP32[$12 >> 2] | 0) + 76 >> 0] | 0) | 0;
     $1027 = $1026 + -1 | 0;
     if (!$1015) {
      if (((HEAP32[$5 >> 2] | 0) - (HEAP32[$4 >> 2] | 0) >> 4 | 0) <= ($1027 | 0)) _luaD_growstack($L, $1027);
      $1036 = HEAP32[$16 >> 2] | 0;
      HEAP32[$4 >> 2] = $1036 + ($1027 + $88 << 4);
      $1042 = $1036;
      $b85$0 = $1027;
     } else {
      $1042 = $base$1;
      $b85$0 = $1016;
     }
     if (($b85$0 | 0) <= 0) {
      $base$0 = $1042;
      continue L3;
     }
     $1039 = 1 - $1026 | 0;
     $j$088 = 0;
     while (1) {
      if (($j$088 | 0) < ($1027 | 0)) {
       $$sum2 = $j$088 + $1039 | 0;
       $$sum3 = $j$088 + $88 | 0;
       $1044 = $1042 + ($$sum2 << 4) | 0;
       $1049 = HEAP32[$1044 + 4 >> 2] | 0;
       $1050 = $1042 + ($$sum3 << 4) | 0;
       HEAP32[$1050 >> 2] = HEAP32[$1044 >> 2];
       HEAP32[$1050 + 4 >> 2] = $1049;
       HEAP32[$1042 + ($$sum3 << 4) + 8 >> 2] = HEAP32[$1042 + ($$sum2 << 4) + 8 >> 2];
      } else HEAP32[$1042 + ($j$088 + $88 << 4) + 8 >> 2] = 0;
      $1058 = $j$088 + 1 | 0;
      if (($1058 | 0) == ($b85$0 | 0)) {
       $base$0 = $1042;
       continue L3;
      } else $j$088 = $1058;
     }
     break;
    }
   case 14:
    {
     $326 = $22 >>> 23;
     $332 = ($326 & 256 | 0) == 0 ? $base$1 + ($326 << 4) | 0 : $15 + (($326 & 255) << 4) | 0;
     $333 = $22 >>> 14;
     $340 = ($333 & 256 | 0) == 0 ? $base$1 + (($333 & 511) << 4) | 0 : $15 + (($333 & 255) << 4) | 0;
     if ((HEAP32[$332 + 8 >> 2] | 0) == 3) if ((HEAP32[$340 + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = +HEAPF64[$332 >> 3] - +HEAPF64[$340 >> 3];
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $332, $340, 7);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 28:
    {
     $643 = $22 >>> 23;
     $644 = $base$1 + ($643 << 4) | 0;
     $648 = HEAP32[$base$1 + ($643 << 4) + 8 >> 2] | 0;
     $649 = ($648 | 0) == 0;
     if (!($22 & 8372224)) {
      if (!$649) if (($648 | 0) == 1) {
       if (HEAP32[$644 >> 2] | 0) label = 126;
      } else label = 126;
     } else if ($649) label = 126; else if (($648 | 0) == 1) if (!(HEAP32[$644 >> 2] | 0)) label = 126;
     if ((label | 0) == 126) {
      label = 0;
      HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 4;
      $base$0 = $base$1;
      continue L3;
     }
     $658 = $644;
     $663 = HEAP32[$658 + 4 >> 2] | 0;
     $664 = $89;
     HEAP32[$664 >> 2] = HEAP32[$658 >> 2];
     HEAP32[$664 + 4 >> 2] = $663;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = $648;
     $669 = HEAP32[$18 >> 2] | 0;
     $670 = HEAP32[$669 >> 2] | 0;
     $672 = $670 >>> 6 & 255;
     if (!$672) $679 = $669; else {
      _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($672 + -1 << 4) | 0);
      $679 = HEAP32[$18 >> 2] | 0;
     }
     HEAP32[$18 >> 2] = $679 + (($670 >>> 14) + -131070 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 2:
    {
     $121 = HEAP32[$18 >> 2] | 0;
     HEAP32[$18 >> 2] = $121 + 4;
     $124 = (HEAP32[$121 >> 2] | 0) >>> 6;
     $126 = $15 + ($124 << 4) | 0;
     $131 = HEAP32[$126 + 4 >> 2] | 0;
     $132 = $89;
     HEAP32[$132 >> 2] = HEAP32[$126 >> 2];
     HEAP32[$132 + 4 >> 2] = $131;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = HEAP32[$15 + ($124 << 4) + 8 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 27:
    {
     $622 = HEAP32[$base$1 + ($88 << 4) + 8 >> 2] | 0;
     $623 = ($622 | 0) == 0;
     if (!($22 & 8372224)) {
      if (!$623) if (($622 | 0) == 1) {
       if (HEAP32[$89 >> 2] | 0) label = 115;
      } else label = 115;
     } else if ($623) label = 115; else if (($622 | 0) == 1) if (!(HEAP32[$89 >> 2] | 0)) label = 115;
     if ((label | 0) == 115) {
      label = 0;
      HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 4;
      $base$0 = $base$1;
      continue L3;
     }
     $632 = HEAP32[$18 >> 2] | 0;
     $633 = HEAP32[$632 >> 2] | 0;
     $635 = $633 >>> 6 & 255;
     if (!$635) $642 = $632; else {
      _luaF_close($L, (HEAP32[$16 >> 2] | 0) + ($635 + -1 << 4) | 0);
      $642 = HEAP32[$18 >> 2] | 0;
     }
     HEAP32[$18 >> 2] = $642 + (($633 >>> 14) + -131070 << 2);
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 29:
    {
     $680 = $22 >>> 23;
     $682 = $22 >>> 14 & 511;
     if ($680) HEAP32[$4 >> 2] = $base$1 + ($88 + $680 << 4);
     if (!(_luaD_precall($L, $89, $682 + -1 | 0) | 0)) {
      label = 136;
      break L3;
     }
     if ($682) HEAP32[$4 >> 2] = HEAP32[$19 >> 2];
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 1:
    {
     $106 = $22 >>> 14;
     $108 = $15 + ($106 << 4) | 0;
     $113 = HEAP32[$108 + 4 >> 2] | 0;
     $114 = $89;
     HEAP32[$114 >> 2] = HEAP32[$108 >> 2];
     HEAP32[$114 + 4 >> 2] = $113;
     HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = HEAP32[$15 + ($106 << 4) + 8 >> 2];
     $base$0 = $base$1;
     continue L3;
     break;
    }
   case 15:
    {
     $352 = $22 >>> 23;
     $358 = ($352 & 256 | 0) == 0 ? $base$1 + ($352 << 4) | 0 : $15 + (($352 & 255) << 4) | 0;
     $359 = $22 >>> 14;
     $366 = ($359 & 256 | 0) == 0 ? $base$1 + (($359 & 511) << 4) | 0 : $15 + (($359 & 255) << 4) | 0;
     if ((HEAP32[$358 + 8 >> 2] | 0) == 3) if ((HEAP32[$366 + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = +HEAPF64[$358 >> 3] * +HEAPF64[$366 >> 3];
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $358, $366, 8);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 30:
    {
     $697 = $22 >>> 23;
     if ($697) HEAP32[$4 >> 2] = $base$1 + ($88 + $697 << 4);
     if (!(_luaD_precall($L, $89, -1) | 0)) {
      label = 141;
      break L3;
     }
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   case 16:
    {
     $378 = $22 >>> 23;
     $384 = ($378 & 256 | 0) == 0 ? $base$1 + ($378 << 4) | 0 : $15 + (($378 & 255) << 4) | 0;
     $385 = $22 >>> 14;
     $392 = ($385 & 256 | 0) == 0 ? $base$1 + (($385 & 511) << 4) | 0 : $15 + (($385 & 255) << 4) | 0;
     if ((HEAP32[$384 + 8 >> 2] | 0) == 3) if ((HEAP32[$392 + 8 >> 2] | 0) == 3) {
      HEAPF64[$89 >> 3] = +HEAPF64[$384 >> 3] / +HEAPF64[$392 >> 3];
      HEAP32[$base$1 + ($88 << 4) + 8 >> 2] = 3;
      $base$0 = $base$1;
      continue L3;
     }
     _luaV_arith($L, $89, $384, $392, 9);
     $base$0 = HEAP32[$16 >> 2] | 0;
     continue L3;
     break;
    }
   default:
    {
     $base$0 = $base$1;
     continue L3;
    }
   } while (0);
   $896 = HEAP32[$ra$1 + 24 >> 2] | 0;
   if (!$896) {
    $base$0 = $base$2;
    continue;
   }
   $899 = $ra$1 + 16 | 0;
   $904 = HEAP32[$899 + 4 >> 2] | 0;
   $905 = $ra$1;
   HEAP32[$905 >> 2] = HEAP32[$899 >> 2];
   HEAP32[$905 + 4 >> 2] = $904;
   HEAP32[$ra$1 + 8 >> 2] = $896;
   HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + (($i$0 >>> 14) + -131071 << 2);
   $base$0 = $base$2;
  }
  if ((label | 0) == 136) {
   label = 0;
   $691 = HEAP32[$0 >> 2] | 0;
   $692 = $691 + 18 | 0;
   HEAP8[$692 >> 0] = HEAPU8[$692 >> 0] | 4;
   $ci$0 = $691;
   continue;
  } else if ((label | 0) == 141) {
   label = 0;
   $703 = HEAP32[$0 >> 2] | 0;
   $705 = HEAP32[$703 + 8 >> 2] | 0;
   $706 = HEAP32[$703 >> 2] | 0;
   $707 = HEAP32[$705 >> 2] | 0;
   $708 = $703 + 24 | 0;
   $716 = (HEAP32[$708 >> 2] | 0) + (HEAPU8[(HEAP32[(HEAP32[$706 >> 2] | 0) + 12 >> 2] | 0) + 76 >> 0] << 4) | 0;
   if ((HEAP32[(HEAP32[$12 >> 2] | 0) + 56 >> 2] | 0) > 0) _luaF_close($L, HEAP32[$705 + 24 >> 2] | 0);
   if ($706 >>> 0 < $716 >>> 0) {
    $725 = $706;
    $aux$093 = 0;
    do {
     $726 = $725;
     $731 = HEAP32[$726 + 4 >> 2] | 0;
     $732 = $707 + ($aux$093 << 4) | 0;
     HEAP32[$732 >> 2] = HEAP32[$726 >> 2];
     HEAP32[$732 + 4 >> 2] = $731;
     HEAP32[$707 + ($aux$093 << 4) + 8 >> 2] = HEAP32[$706 + ($aux$093 << 4) + 8 >> 2];
     $aux$093 = $aux$093 + 1 | 0;
     $725 = $706 + ($aux$093 << 4) | 0;
    } while ($725 >>> 0 < $716 >>> 0);
   }
   $744 = $706;
   HEAP32[$705 + 24 >> 2] = $707 + ((HEAP32[$708 >> 2] | 0) - $744 >> 4 << 4);
   $753 = $707 + ((HEAP32[$4 >> 2] | 0) - $744 >> 4 << 4) | 0;
   HEAP32[$4 >> 2] = $753;
   HEAP32[$705 + 4 >> 2] = $753;
   HEAP32[$705 + 28 >> 2] = HEAP32[$703 + 28 >> 2];
   $758 = $705 + 18 | 0;
   HEAP8[$758 >> 0] = HEAPU8[$758 >> 0] | 64;
   HEAP32[$0 >> 2] = $705;
   $ci$0 = $705;
   continue;
  } else if ((label | 0) == 146) {
   label = 0;
   $763 = $$lcssa216 >>> 23;
   if ($763) HEAP32[$4 >> 2] = $base$1$lcssa + ($763 + -1 + $$lcssa230 << 4);
   if ((HEAP32[(HEAP32[$12 >> 2] | 0) + 56 >> 2] | 0) > 0) _luaF_close($L, $base$1$lcssa);
   $770 = _luaD_poscall($L, $$lcssa236) | 0;
   if (!(HEAP8[$ci$0 + 18 >> 0] & 4)) {
    label = 151;
    break;
   }
   $775 = HEAP32[$0 >> 2] | 0;
   if (!$770) {
    $ci$0 = $775;
    continue;
   }
   HEAP32[$4 >> 2] = HEAP32[$775 + 4 >> 2];
   $ci$0 = $775;
   continue;
  }
 }
 if ((label | 0) == 22) {
  $78 = $75;
  if (!$1059) {
   $79 = $78 + -4 | 0;
   HEAP32[$$pre$phi2$iZ2D >> 2] = $79;
   $80 = HEAP8[$36 >> 0] | 0;
   $81 = $80 & 255;
   $82 = $81 | 128;
   $83 = $82 & 255;
   HEAP8[$36 >> 0] = $83;
   $84 = HEAP32[$4 >> 2] | 0;
   $85 = $84 + -16 | 0;
   HEAP32[$31 >> 2] = $85;
   _luaD_throw($L, 1);
  }
  HEAP32[$6 >> 2] = 1;
  $79 = $78 + -4 | 0;
  HEAP32[$$pre$phi2$iZ2D >> 2] = $79;
  $80 = HEAP8[$36 >> 0] | 0;
  $81 = $80 & 255;
  $82 = $81 | 128;
  $83 = $82 & 255;
  HEAP8[$36 >> 0] = $83;
  $84 = HEAP32[$4 >> 2] | 0;
  $85 = $84 + -16 | 0;
  HEAP32[$31 >> 2] = $85;
  _luaD_throw($L, 1);
 } else if ((label | 0) == 151) {
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 162) _luaG_runerror($L, 3688, $vararg_buffer); else if ((label | 0) == 167) _luaG_runerror($L, 3728, $vararg_buffer1); else if ((label | 0) == 172) _luaG_runerror($L, 3760, $vararg_buffer3);
}

function _statement($ls) {
 $ls = $ls | 0;
 var $$$i$i = 0, $$$i$i$i = 0, $$01$i$i42 = 0, $$idx$val$idx$val$i$i37 = 0, $$idx1$val$idx$val$idx$val$i$i41 = 0, $$lcssa157 = 0, $$lcssa160 = 0, $$lcssa161 = 0, $$pre108 = 0, $0 = 0, $1 = 0, $104 = 0, $105 = 0, $106 = 0, $108 = 0, $116 = 0, $12 = 0, $126 = 0, $133 = 0, $134 = 0, $135 = 0, $144 = 0, $15 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $17 = 0, $178 = 0, $18 = 0, $180 = 0, $183 = 0, $187 = 0, $191 = 0, $193 = 0, $195 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $213 = 0, $218 = 0, $219 = 0, $220 = 0, $222 = 0, $225 = 0, $230 = 0, $233 = 0, $237 = 0, $240 = 0, $243 = 0, $246 = 0, $249 = 0, $253 = 0, $254 = 0, $255 = 0, $261 = 0, $269 = 0, $270 = 0, $275 = 0, $279 = 0, $282 = 0, $284 = 0, $288 = 0, $289 = 0, $29 = 0, $292 = 0, $314 = 0, $315 = 0, $317 = 0, $323 = 0, $326 = 0, $327 = 0, $331 = 0, $335 = 0, $336 = 0, $339 = 0, $340 = 0, $344 = 0, $346 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $366 = 0, $367 = 0, $375 = 0, $378 = 0, $382 = 0, $383 = 0, $39 = 0, $391 = 0, $392 = 0, $393 = 0, $398 = 0, $4 = 0, $400 = 0, $408 = 0, $413 = 0, $415 = 0, $416 = 0, $417 = 0, $42 = 0, $423 = 0, $424 = 0, $427 = 0, $439 = 0, $443 = 0, $456 = 0, $46 = 0, $47 = 0, $470 = 0, $471 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $490 = 0, $492 = 0, $500 = 0, $501 = 0, $502 = 0, $51 = 0, $510 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $520 = 0, $521 = 0, $522 = 0, $56 = 0, $6 = 0, $64 = 0, $74 = 0, $78 = 0, $86 = 0, $9 = 0, $96 = 0, $b$i = 0, $e$i73 = 0, $first$0$i = 0, $i$0$ph1$i$i = 0, $i$02$i$i = 0, $i$02$i$i$lcssa = 0, $ismethod$0$i$i = 0, $label$0$i = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i$i = 0, $ls$idx$val$i$i$i = 0, $ls$idx$val$i$i$i4 = 0, $ls$idx$val$i$i12 = 0, $ls$idx$val$i$i15 = 0, $ls$idx$val$i29 = 0, $ls$idx1 = 0, $ls$idx1$val$i = 0, $ls$idx1$val$i113 = 0, $n$0$i$i$lcssa = 0, $n$0$i$i53$lcssa = 0, $n$0$i$i5396 = 0, $n$0$i$i90 = 0, $n$0$i$lcssa = 0, $n$0$i86 = 0, $nret$0$i = 0, $nvars$0$i$i$lcssa = 0, $nvars$0$i$i87 = 0, $nvars$0$i$i87$lcssa156 = 0, $nvars$0$i94 = 0, $v$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer16 = 0, $vararg_buffer21 = 0, $vararg_buffer26 = 0, $vararg_buffer31 = 0, $vararg_buffer6 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $vararg_buffer31 = sp + 184 | 0;
 $vararg_buffer26 = sp + 168 | 0;
 $vararg_buffer21 = sp + 152 | 0;
 $vararg_buffer16 = sp + 136 | 0;
 $vararg_buffer11 = sp + 120 | 0;
 $vararg_buffer6 = sp + 104 | 0;
 $vararg_buffer1 = sp + 88 | 0;
 $vararg_buffer = sp + 80 | 0;
 $e$i73 = sp + 48 | 0;
 $v$i = sp + 24 | 0;
 $b$i = sp;
 $0 = $ls + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $ls$idx = $ls + 48 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1 = $ls + 52 | 0;
 $2 = (HEAP32[$ls$idx1 >> 2] | 0) + 38 | 0;
 $4 = (HEAP16[$2 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$2 >> 1] = $4;
 if (($4 & 65535) > 200) {
  $6 = $ls$idx$val + 12 | 0;
  $9 = HEAP32[(HEAP32[$6 >> 2] | 0) + 52 >> 2] | 0;
  $12 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 64 >> 2] | 0;
  if (!$12) {
   $15 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2512;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $15;
   $16 = _luaO_pushfstring($9, 2480, $vararg_buffer1) | 0;
   $17 = HEAP32[$6 >> 2] | 0;
   _luaX_syntaxerror($17, $16);
  }
  HEAP32[$vararg_buffer >> 2] = $12;
  $15 = _luaO_pushfstring($9, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2512;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $15;
  $16 = _luaO_pushfstring($9, 2480, $vararg_buffer1) | 0;
  $17 = HEAP32[$6 >> 2] | 0;
  _luaX_syntaxerror($17, $16);
 }
 $18 = $ls + 16 | 0;
 do switch (HEAP32[$18 >> 2] | 0) {
 case 59:
  {
   _luaX_next($ls);
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 case 267:
  {
   HEAP32[$v$i >> 2] = -1;
   _test_then_block($ls, $v$i);
   while (1) {
    $20 = HEAP32[$18 >> 2] | 0;
    if (($20 | 0) == 260) {
     label = 10;
     break;
    } else if (($20 | 0) != 261) {
     $42 = $20;
     break;
    }
    _test_then_block($ls, $v$i);
   }
   if ((label | 0) == 10) {
    _luaX_next($ls);
    $21 = HEAP32[$ls$idx >> 2] | 0;
    HEAP8[$e$i73 + 10 >> 0] = 0;
    HEAP8[$e$i73 + 8 >> 0] = HEAP8[$21 + 46 >> 0] | 0;
    $29 = HEAP32[(HEAP32[$21 + 12 >> 2] | 0) + 64 >> 2] | 0;
    HEAP16[$e$i73 + 4 >> 1] = HEAP32[$29 + 28 >> 2];
    HEAP16[$e$i73 + 6 >> 1] = HEAP32[$29 + 16 >> 2];
    HEAP8[$e$i73 + 9 >> 0] = 0;
    $39 = $21 + 16 | 0;
    HEAP32[$e$i73 >> 2] = HEAP32[$39 >> 2];
    HEAP32[$39 >> 2] = $e$i73;
    L17 : do {
     $ls$idx$val$i$i$i = HEAP32[$18 >> 2] | 0;
     switch ($ls$idx$val$i$i$i | 0) {
     case 277:
     case 286:
     case 262:
     case 261:
     case 260:
      {
       break L17;
       break;
      }
     default:
      {}
     }
     _statement($ls);
    } while (($ls$idx$val$i$i$i | 0) != 274);
    _leaveblock($21);
    $42 = HEAP32[$18 >> 2] | 0;
   }
   if (($42 | 0) == 262) {
    _luaX_next($ls);
    _luaK_patchtohere($ls$idx$val, HEAP32[$v$i >> 2] | 0);
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) _error_expected($ls, 262); else {
    $46 = HEAP32[$ls$idx1 >> 2] | 0;
    $47 = _luaX_token2str($ls, 262) | 0;
    $48 = _luaX_token2str($ls, 267) | 0;
    HEAP32[$vararg_buffer6 >> 2] = $47;
    HEAP32[$vararg_buffer6 + 4 >> 2] = $48;
    HEAP32[$vararg_buffer6 + 8 >> 2] = $1;
    _luaX_syntaxerror($ls, _luaO_pushfstring($46, 2528, $vararg_buffer6) | 0);
   }
   break;
  }
 case 278:
  {
   _luaX_next($ls);
   $51 = _luaK_getlabel($ls$idx$val) | 0;
   _subexpr($ls, $e$i73, 0) | 0;
   if ((HEAP32[$e$i73 >> 2] | 0) == 1) HEAP32[$e$i73 >> 2] = 3;
   _luaK_goiftrue(HEAP32[$ls$idx >> 2] | 0, $e$i73);
   $56 = HEAP32[$e$i73 + 20 >> 2] | 0;
   HEAP8[$v$i + 10 >> 0] = 1;
   HEAP8[$v$i + 8 >> 0] = HEAP8[$ls$idx$val + 46 >> 0] | 0;
   $64 = HEAP32[(HEAP32[$ls$idx$val + 12 >> 2] | 0) + 64 >> 2] | 0;
   HEAP16[$v$i + 4 >> 1] = HEAP32[$64 + 28 >> 2];
   HEAP16[$v$i + 6 >> 1] = HEAP32[$64 + 16 >> 2];
   HEAP8[$v$i + 9 >> 0] = 0;
   $74 = $ls$idx$val + 16 | 0;
   HEAP32[$v$i >> 2] = HEAP32[$74 >> 2];
   HEAP32[$74 >> 2] = $v$i;
   if ((HEAP32[$18 >> 2] | 0) != 259) _error_expected($ls, 259);
   _luaX_next($ls);
   $78 = HEAP32[$ls$idx >> 2] | 0;
   HEAP8[$e$i73 + 10 >> 0] = 0;
   HEAP8[$e$i73 + 8 >> 0] = HEAP8[$78 + 46 >> 0] | 0;
   $86 = HEAP32[(HEAP32[$78 + 12 >> 2] | 0) + 64 >> 2] | 0;
   HEAP16[$e$i73 + 4 >> 1] = HEAP32[$86 + 28 >> 2];
   HEAP16[$e$i73 + 6 >> 1] = HEAP32[$86 + 16 >> 2];
   HEAP8[$e$i73 + 9 >> 0] = 0;
   $96 = $78 + 16 | 0;
   HEAP32[$e$i73 >> 2] = HEAP32[$96 >> 2];
   HEAP32[$96 >> 2] = $e$i73;
   L36 : do {
    $ls$idx$val$i$i$i4 = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i$i4 | 0) {
    case 277:
    case 286:
    case 262:
    case 261:
    case 260:
     {
      break L36;
      break;
     }
    default:
     {}
    }
    _statement($ls);
   } while (($ls$idx$val$i$i$i4 | 0) != 274);
   _leaveblock($78);
   _luaK_patchlist($ls$idx$val, _luaK_jump($ls$idx$val) | 0, $51);
   if ((HEAP32[$18 >> 2] | 0) == 262) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    _luaK_patchtohere($ls$idx$val, $56);
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) _error_expected($ls, 262); else {
    $104 = HEAP32[$ls$idx1 >> 2] | 0;
    $105 = _luaX_token2str($ls, 262) | 0;
    $106 = _luaX_token2str($ls, 278) | 0;
    HEAP32[$vararg_buffer11 >> 2] = $105;
    HEAP32[$vararg_buffer11 + 4 >> 2] = $106;
    HEAP32[$vararg_buffer11 + 8 >> 2] = $1;
    _luaX_syntaxerror($ls, _luaO_pushfstring($104, 2528, $vararg_buffer11) | 0);
   }
   break;
  }
 case 269:
  {
   _luaX_next($ls);
   $282 = HEAP32[$18 >> 2] | 0;
   if (($282 | 0) == 265) {
    _luaX_next($ls);
    $284 = HEAP32[$ls$idx >> 2] | 0;
    if ((HEAP32[$18 >> 2] | 0) != 288) _error_expected($ls, 288);
    $288 = HEAP32[$ls + 24 >> 2] | 0;
    _luaX_next($ls);
    _new_localvar($ls, $288);
    $ls$idx$val$i = HEAP32[$ls$idx >> 2] | 0;
    $289 = $ls$idx$val$i + 46 | 0;
    $292 = (HEAPU8[$289 >> 0] | 0) + 1 | 0;
    HEAP8[$289 >> 0] = $292;
    HEAP32[(HEAP32[(HEAP32[$ls$idx$val$i >> 2] | 0) + 24 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$ls$idx$val$i + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0) + ((HEAP32[$ls$idx$val$i + 40 >> 2] | 0) + ($292 & 255) + -1 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$ls$idx$val$i + 20 >> 2];
    _body($ls, $e$i73, 0, HEAP32[$0 >> 2] | 0);
    HEAP32[(HEAP32[(HEAP32[$284 >> 2] | 0) + 24 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$284 + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0) + ((HEAP32[$284 + 40 >> 2] | 0) + (HEAP32[$e$i73 + 8 >> 2] | 0) << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$284 + 20 >> 2];
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   if (($282 | 0) != 288) _error_expected($ls, 288);
   $314 = $ls + 24 | 0;
   $nvars$0$i94 = 0;
   while (1) {
    $315 = HEAP32[$314 >> 2] | 0;
    _luaX_next($ls);
    _new_localvar($ls, $315);
    $nvars$0$i94 = $nvars$0$i94 + 1 | 0;
    $317 = HEAP32[$18 >> 2] | 0;
    if (($317 | 0) == 61) {
     $$lcssa161 = $nvars$0$i94;
     label = 103;
     break;
    } else if (($317 | 0) != 44) {
     $$lcssa160 = $nvars$0$i94;
     label = 105;
     break;
    }
    _luaX_next($ls);
    if ((HEAP32[$18 >> 2] | 0) != 288) {
     label = 100;
     break;
    }
   }
   do if ((label | 0) == 100) _error_expected($ls, 288); else if ((label | 0) == 103) {
    _luaX_next($ls);
    _subexpr($ls, $e$i73, 0) | 0;
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     $n$0$i$i90 = 1;
     while (1) {
      _luaX_next($ls);
      _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
      _subexpr($ls, $e$i73, 0) | 0;
      $323 = $n$0$i$i90 + 1 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i$i90 = $323; else {
       $n$0$i$i$lcssa = $323;
       break;
      }
     }
    } else $n$0$i$i$lcssa = 1;
    $$pre108 = HEAP32[$e$i73 >> 2] | 0;
    $ls$idx1$val$i = HEAP32[$ls$idx >> 2] | 0;
    $326 = $$lcssa161 - $n$0$i$i$lcssa | 0;
    if (!$$pre108) {
     $331 = $326;
     $522 = $$lcssa161;
     $ls$idx1$val$i113 = $ls$idx1$val$i;
     label = 110;
     break;
    } else if (!(($$pre108 | 0) == 13 | ($$pre108 | 0) == 12)) {
     _luaK_exp2nextreg($ls$idx1$val$i, $e$i73);
     $331 = $326;
     $522 = $$lcssa161;
     $ls$idx1$val$i113 = $ls$idx1$val$i;
     label = 110;
     break;
    }
    $327 = $326 + 1 | 0;
    $$$i$i = ($327 | 0) < 0 ? 0 : $327;
    _luaK_setreturns($ls$idx1$val$i, $e$i73, $$$i$i);
    if (($$$i$i | 0) > 1) {
     _luaK_reserveregs($ls$idx1$val$i, $$$i$i + -1 | 0);
     $340 = $$lcssa161;
    } else $340 = $$lcssa161;
   } else if ((label | 0) == 105) {
    HEAP32[$e$i73 >> 2] = 0;
    $331 = $$lcssa160;
    $522 = $$lcssa160;
    $ls$idx1$val$i113 = HEAP32[$ls$idx >> 2] | 0;
    label = 110;
   } while (0);
   if ((label | 0) == 110) if (($331 | 0) > 0) {
    $335 = HEAPU8[$ls$idx1$val$i113 + 48 >> 0] | 0;
    _luaK_reserveregs($ls$idx1$val$i113, $331);
    _luaK_nil($ls$idx1$val$i113, $335, $331);
    $340 = $522;
   } else $340 = $522;
   $ls$idx$val$i29 = HEAP32[$ls$idx >> 2] | 0;
   $336 = $ls$idx$val$i29 + 46 | 0;
   $339 = (HEAPU8[$336 >> 0] | 0) + $340 | 0;
   HEAP8[$336 >> 0] = $339;
   if ($340) {
    $344 = HEAP32[$ls$idx$val$i29 + 20 >> 2] | 0;
    $$idx$val$idx$val$i$i37 = HEAP32[(HEAP32[$ls$idx$val$i29 >> 2] | 0) + 24 >> 2] | 0;
    $$idx1$val$idx$val$idx$val$i$i41 = HEAP32[HEAP32[(HEAP32[$ls$idx$val$i29 + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0;
    $346 = (HEAP32[$ls$idx$val$i29 + 40 >> 2] | 0) + ($339 & 255) | 0;
    $$01$i$i42 = $340;
    do {
     HEAP32[$$idx$val$idx$val$i$i37 + ((HEAP16[$$idx1$val$idx$val$idx$val$i$i41 + ($346 - $$01$i$i42 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $344;
     $$01$i$i42 = $$01$i$i42 + -1 | 0;
    } while (($$01$i$i42 | 0) != 0);
   }
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 case 273:
  {
   $222 = _luaK_getlabel($ls$idx$val) | 0;
   HEAP8[$v$i + 10 >> 0] = 1;
   $225 = HEAP8[$ls$idx$val + 46 >> 0] | 0;
   HEAP8[$v$i + 8 >> 0] = $225;
   $230 = HEAP32[(HEAP32[$ls$idx$val + 12 >> 2] | 0) + 64 >> 2] | 0;
   $233 = HEAP32[$230 + 28 >> 2] & 65535;
   HEAP16[$v$i + 4 >> 1] = $233;
   $237 = HEAP32[$230 + 16 >> 2] & 65535;
   HEAP16[$v$i + 6 >> 1] = $237;
   HEAP8[$v$i + 9 >> 0] = 0;
   $240 = $ls$idx$val + 16 | 0;
   HEAP32[$v$i >> 2] = HEAP32[$240 >> 2];
   HEAP8[$b$i + 10 >> 0] = 0;
   $243 = $b$i + 8 | 0;
   HEAP8[$243 >> 0] = $225;
   HEAP16[$b$i + 4 >> 1] = $233;
   HEAP16[$b$i + 6 >> 1] = $237;
   $246 = $b$i + 9 | 0;
   HEAP8[$246 >> 0] = 0;
   HEAP32[$b$i >> 2] = $v$i;
   HEAP32[$240 >> 2] = $b$i;
   _luaX_next($ls);
   L84 : while (1) {
    $ls$idx$val$i$i15 = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i15 | 0) {
    case 277:
    case 286:
    case 262:
    case 261:
    case 260:
     {
      $249 = $ls$idx$val$i$i15;
      break L84;
      break;
     }
    default:
     {}
    }
    _statement($ls);
    if (($ls$idx$val$i$i15 | 0) == 274) {
     label = 75;
     break;
    }
   }
   if ((label | 0) == 75) $249 = HEAP32[$18 >> 2] | 0;
   if (($249 | 0) != 277) if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) _error_expected($ls, 277); else {
    $253 = HEAP32[$ls$idx1 >> 2] | 0;
    $254 = _luaX_token2str($ls, 277) | 0;
    $255 = _luaX_token2str($ls, 273) | 0;
    HEAP32[$vararg_buffer26 >> 2] = $254;
    HEAP32[$vararg_buffer26 + 4 >> 2] = $255;
    HEAP32[$vararg_buffer26 + 8 >> 2] = $1;
    _luaX_syntaxerror($ls, _luaO_pushfstring($253, 2528, $vararg_buffer26) | 0);
   }
   _luaX_next($ls);
   _subexpr($ls, $e$i73, 0) | 0;
   if ((HEAP32[$e$i73 >> 2] | 0) == 1) HEAP32[$e$i73 >> 2] = 3;
   _luaK_goiftrue(HEAP32[$ls$idx >> 2] | 0, $e$i73);
   $261 = HEAP32[$e$i73 + 20 >> 2] | 0;
   if (HEAP8[$246 >> 0] | 0) _luaK_patchclose($ls$idx$val, $261, HEAPU8[$243 >> 0] | 0);
   _leaveblock($ls$idx$val);
   _luaK_patchlist($ls$idx$val, $261, $222);
   _leaveblock($ls$idx$val);
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 case 259:
  {
   _luaX_next($ls);
   $108 = HEAP32[$ls$idx >> 2] | 0;
   HEAP8[$e$i73 + 10 >> 0] = 0;
   HEAP8[$e$i73 + 8 >> 0] = HEAP8[$108 + 46 >> 0] | 0;
   $116 = HEAP32[(HEAP32[$108 + 12 >> 2] | 0) + 64 >> 2] | 0;
   HEAP16[$e$i73 + 4 >> 1] = HEAP32[$116 + 28 >> 2];
   HEAP16[$e$i73 + 6 >> 1] = HEAP32[$116 + 16 >> 2];
   HEAP8[$e$i73 + 9 >> 0] = 0;
   $126 = $108 + 16 | 0;
   HEAP32[$e$i73 >> 2] = HEAP32[$126 >> 2];
   HEAP32[$126 >> 2] = $e$i73;
   L104 : do {
    $ls$idx$val$i$i = HEAP32[$18 >> 2] | 0;
    switch ($ls$idx$val$i$i | 0) {
    case 277:
    case 286:
    case 262:
    case 261:
    case 260:
     {
      break L104;
      break;
     }
    default:
     {}
    }
    _statement($ls);
   } while (($ls$idx$val$i$i | 0) != 274);
   _leaveblock($108);
   if ((HEAP32[$18 >> 2] | 0) == 262) {
    _luaX_next($ls);
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) _error_expected($ls, 262); else {
    $133 = HEAP32[$ls$idx1 >> 2] | 0;
    $134 = _luaX_token2str($ls, 262) | 0;
    $135 = _luaX_token2str($ls, 259) | 0;
    HEAP32[$vararg_buffer16 >> 2] = $134;
    HEAP32[$vararg_buffer16 + 4 >> 2] = $135;
    HEAP32[$vararg_buffer16 + 8 >> 2] = $1;
    _luaX_syntaxerror($ls, _luaO_pushfstring($133, 2528, $vararg_buffer16) | 0);
   }
   break;
  }
 case 285:
  {
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 288) _error_expected($ls, 288);
   $357 = HEAP32[$ls + 24 >> 2] | 0;
   _luaX_next($ls);
   $358 = HEAP32[$ls$idx >> 2] | 0;
   $359 = $ls + 64 | 0;
   $360 = HEAP32[$359 >> 2] | 0;
   $361 = $360 + 24 | 0;
   $362 = $358 + 16 | 0;
   $366 = HEAP16[(HEAP32[$362 >> 2] | 0) + 4 >> 1] | 0;
   $367 = $360 + 28 | 0;
   L119 : do if (($366 | 0) < (HEAP32[$367 >> 2] | 0)) {
    $i$02$i$i = $366;
    while (1) {
     if (_luaS_eqstr($357, HEAP32[(HEAP32[$361 >> 2] | 0) + ($i$02$i$i << 4) >> 2] | 0) | 0) {
      $i$02$i$i$lcssa = $i$02$i$i;
      break;
     }
     $i$02$i$i = $i$02$i$i + 1 | 0;
     if (($i$02$i$i | 0) >= (HEAP32[$367 >> 2] | 0)) break L119;
    }
    $375 = $358 + 12 | 0;
    $378 = HEAP32[(HEAP32[$375 >> 2] | 0) + 52 >> 2] | 0;
    $382 = HEAP32[(HEAP32[$361 >> 2] | 0) + ($i$02$i$i$lcssa << 4) + 8 >> 2] | 0;
    HEAP32[$vararg_buffer31 >> 2] = $357 + 16;
    HEAP32[$vararg_buffer31 + 4 >> 2] = $382;
    $383 = _luaO_pushfstring($378, 2688, $vararg_buffer31) | 0;
    _semerror(HEAP32[$375 >> 2] | 0, $383);
   } while (0);
   if ((HEAP32[$18 >> 2] | 0) != 285) _error_expected($ls, 285);
   _luaX_next($ls);
   $391 = HEAP32[$358 + 20 >> 2] | 0;
   $392 = HEAP32[$367 >> 2] | 0;
   $393 = $360 + 32 | 0;
   if (($392 | 0) < (HEAP32[$393 >> 2] | 0)) {
    $400 = HEAP32[$361 >> 2] | 0;
    $408 = $392;
   } else {
    $398 = _luaM_growaux_(HEAP32[$ls$idx1 >> 2] | 0, HEAP32[$361 >> 2] | 0, $393, 16, 32767, 2264) | 0;
    HEAP32[$361 >> 2] = $398;
    $400 = $398;
    $408 = HEAP32[$367 >> 2] | 0;
   }
   HEAP32[$400 + ($392 << 4) >> 2] = $357;
   HEAP32[$400 + ($392 << 4) + 8 >> 2] = $1;
   HEAP8[$400 + ($392 << 4) + 12 >> 0] = HEAP8[(HEAP32[$ls$idx >> 2] | 0) + 46 >> 0] | 0;
   HEAP32[$400 + ($392 << 4) + 4 >> 2] = $391;
   HEAP32[$367 >> 2] = $408 + 1;
   L133 : while (1) {
    switch (HEAP32[$18 >> 2] | 0) {
    case 285:
    case 59:
     break;
    case 286:
    case 262:
    case 261:
    case 260:
     {
      label = 132;
      break L133;
      break;
     }
    default:
     {
      label = 131;
      break L133;
     }
    }
    _statement($ls);
   }
   if ((label | 0) == 131) $416 = HEAP32[$361 >> 2] | 0; else if ((label | 0) == 132) {
    $413 = HEAP32[$361 >> 2] | 0;
    HEAP8[$413 + ($392 << 4) + 12 >> 0] = HEAP8[(HEAP32[$362 >> 2] | 0) + 8 >> 0] | 0;
    $416 = $413;
   }
   $415 = $416 + ($392 << 4) | 0;
   $417 = HEAP32[$359 >> 2] | 0;
   $423 = HEAP16[(HEAP32[(HEAP32[$ls$idx >> 2] | 0) + 16 >> 2] | 0) + 6 >> 1] | 0;
   $424 = $417 + 16 | 0;
   if (($423 | 0) >= (HEAP32[$424 >> 2] | 0)) {
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   $427 = $417 + 12 | 0;
   $i$0$ph1$i$i = $423;
   L143 : while (1) {
    while (1) {
     if (!(_luaS_eqstr(HEAP32[(HEAP32[$427 >> 2] | 0) + ($i$0$ph1$i$i << 4) >> 2] | 0, HEAP32[$415 >> 2] | 0) | 0)) break;
     _closegoto($ls, $i$0$ph1$i$i, $415);
     if (($i$0$ph1$i$i | 0) >= (HEAP32[$424 >> 2] | 0)) {
      label = 167;
      break L143;
     }
    }
    $i$0$ph1$i$i = $i$0$ph1$i$i + 1 | 0;
    if (($i$0$ph1$i$i | 0) >= (HEAP32[$424 >> 2] | 0)) {
     label = 167;
     break;
    }
   }
   if ((label | 0) == 167) {
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   break;
  }
 case 264:
  {
   HEAP8[$v$i + 10 >> 0] = 1;
   HEAP8[$v$i + 8 >> 0] = HEAP8[$ls$idx$val + 46 >> 0] | 0;
   $144 = HEAP32[(HEAP32[$ls$idx$val + 12 >> 2] | 0) + 64 >> 2] | 0;
   HEAP16[$v$i + 4 >> 1] = HEAP32[$144 + 28 >> 2];
   HEAP16[$v$i + 6 >> 1] = HEAP32[$144 + 16 >> 2];
   HEAP8[$v$i + 9 >> 0] = 0;
   $154 = $ls$idx$val + 16 | 0;
   HEAP32[$v$i >> 2] = HEAP32[$154 >> 2];
   HEAP32[$154 >> 2] = $v$i;
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 288) _error_expected($ls, 288);
   $158 = $ls + 24 | 0;
   $159 = HEAP32[$158 >> 2] | 0;
   _luaX_next($ls);
   $160 = HEAP32[$18 >> 2] | 0;
   if (($160 | 0) == 61) {
    $161 = HEAP32[$ls$idx >> 2] | 0;
    $162 = $161 + 48 | 0;
    $164 = HEAPU8[$162 >> 0] | 0;
    _new_localvar($ls, _luaX_newstring($ls, 2568, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 2584, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 2600, 10) | 0);
    _new_localvar($ls, $159);
    if ((HEAP32[$18 >> 2] | 0) != 61) _error_expected($ls, 61);
    _luaX_next($ls);
    _subexpr($ls, $e$i73, 0) | 0;
    _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
    if ((HEAP32[$18 >> 2] | 0) != 44) _error_expected($ls, 44);
    _luaX_next($ls);
    _subexpr($ls, $e$i73, 0) | 0;
    _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     _luaX_next($ls);
     _subexpr($ls, $e$i73, 0) | 0;
     _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
    } else {
     $178 = HEAPU8[$162 >> 0] | 0;
     _luaK_codek($161, $178, _luaK_numberK($161, 1.0) | 0) | 0;
     _luaK_reserveregs($161, 1);
    }
    _forbody($ls, $164, $1, 1, 1);
   } else if (($160 | 0) == 268 | ($160 | 0) == 44) {
    $180 = HEAP32[$ls$idx >> 2] | 0;
    $183 = HEAPU8[$180 + 48 >> 0] | 0;
    _new_localvar($ls, _luaX_newstring($ls, 2616, 15) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 2632, 11) | 0);
    _new_localvar($ls, _luaX_newstring($ls, 2648, 13) | 0);
    _new_localvar($ls, $159);
    $187 = HEAP32[$18 >> 2] | 0;
    do if (($187 | 0) == 44) {
     $nvars$0$i$i87 = 4;
     while (1) {
      _luaX_next($ls);
      if ((HEAP32[$18 >> 2] | 0) != 288) {
       label = 52;
       break;
      }
      $191 = HEAP32[$158 >> 2] | 0;
      _luaX_next($ls);
      _new_localvar($ls, $191);
      $193 = HEAP32[$18 >> 2] | 0;
      if (($193 | 0) == 44) $nvars$0$i$i87 = $nvars$0$i$i87 + 1 | 0; else {
       $$lcssa157 = $193;
       $nvars$0$i$i87$lcssa156 = $nvars$0$i$i87;
       label = 54;
       break;
      }
     }
     if ((label | 0) == 52) _error_expected($ls, 288); else if ((label | 0) == 54) {
      $195 = $$lcssa157;
      $nvars$0$i$i$lcssa = $nvars$0$i$i87$lcssa156 + -2 | 0;
      break;
     }
    } else {
     $195 = $187;
     $nvars$0$i$i$lcssa = 1;
    } while (0);
    if (($195 | 0) != 268) _error_expected($ls, 268);
    _luaX_next($ls);
    $197 = HEAP32[$0 >> 2] | 0;
    _subexpr($ls, $e$i73, 0) | 0;
    if ((HEAP32[$18 >> 2] | 0) == 44) {
     $n$0$i86 = 1;
     while (1) {
      _luaX_next($ls);
      _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
      _subexpr($ls, $e$i73, 0) | 0;
      $201 = $n$0$i86 + 1 | 0;
      if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i86 = $201; else {
       $n$0$i$lcssa = $201;
       break;
      }
     }
    } else $n$0$i$lcssa = 1;
    $ls$idx$val$i$i12 = HEAP32[$ls$idx >> 2] | 0;
    $204 = 3 - $n$0$i$lcssa | 0;
    $205 = HEAP32[$e$i73 >> 2] | 0;
    if (($205 | 0) == 13 | ($205 | 0) == 12) {
     $206 = $204 + 1 | 0;
     $$$i$i$i = ($206 | 0) < 0 ? 0 : $206;
     _luaK_setreturns($ls$idx$val$i$i12, $e$i73, $$$i$i$i);
     if (($$$i$i$i | 0) > 1) _luaK_reserveregs($ls$idx$val$i$i12, $$$i$i$i + -1 | 0);
    } else if (!$205) label = 63; else {
     _luaK_exp2nextreg($ls$idx$val$i$i12, $e$i73);
     label = 63;
    }
    if ((label | 0) == 63) if (($204 | 0) > 0) {
     $213 = HEAPU8[$ls$idx$val$i$i12 + 48 >> 0] | 0;
     _luaK_reserveregs($ls$idx$val$i$i12, $204);
     _luaK_nil($ls$idx$val$i$i12, $213, $204);
    }
    _luaK_checkstack($180, 3);
    _forbody($ls, $183, $197, $nvars$0$i$i$lcssa, 0);
   } else _luaX_syntaxerror($ls, 2664);
   if ((HEAP32[$18 >> 2] | 0) == 262) {
    _luaX_next($ls);
    _leaveblock($ls$idx$val);
    $514 = HEAP32[$ls$idx >> 2] | 0;
    $515 = $514 + 46 | 0;
    $516 = HEAP8[$515 >> 0] | 0;
    $517 = $514 + 48 | 0;
    HEAP8[$517 >> 0] = $516;
    $518 = HEAP32[$ls$idx1 >> 2] | 0;
    $519 = $518 + 38 | 0;
    $520 = HEAP16[$519 >> 1] | 0;
    $521 = $520 + -1 << 16 >> 16;
    HEAP16[$519 >> 1] = $521;
    STACKTOP = sp;
    return;
   }
   if ((HEAP32[$0 >> 2] | 0) == ($1 | 0)) _error_expected($ls, 262); else {
    $218 = HEAP32[$ls$idx1 >> 2] | 0;
    $219 = _luaX_token2str($ls, 262) | 0;
    $220 = _luaX_token2str($ls, 264) | 0;
    HEAP32[$vararg_buffer21 >> 2] = $219;
    HEAP32[$vararg_buffer21 + 4 >> 2] = $220;
    HEAP32[$vararg_buffer21 + 8 >> 2] = $1;
    _luaX_syntaxerror($ls, _luaO_pushfstring($218, 2528, $vararg_buffer21) | 0);
   }
   break;
  }
 case 274:
  {
   _luaX_next($ls);
   $439 = HEAP32[$ls$idx >> 2] | 0;
   L202 : do switch (HEAP32[$18 >> 2] | 0) {
   case 59:
   case 277:
   case 286:
   case 262:
   case 261:
   case 260:
    {
     $first$0$i = 0;
     $nret$0$i = 0;
     break;
    }
   default:
    {
     _subexpr($ls, $e$i73, 0) | 0;
     if ((HEAP32[$18 >> 2] | 0) == 44) {
      $n$0$i$i5396 = 1;
      while (1) {
       _luaX_next($ls);
       _luaK_exp2nextreg(HEAP32[$ls$idx >> 2] | 0, $e$i73);
       _subexpr($ls, $e$i73, 0) | 0;
       $443 = $n$0$i$i5396 + 1 | 0;
       if ((HEAP32[$18 >> 2] | 0) == 44) $n$0$i$i5396 = $443; else {
        $n$0$i$i53$lcssa = $443;
        break;
       }
      }
     } else $n$0$i$i53$lcssa = 1;
     if ((HEAP32[$e$i73 >> 2] & -2 | 0) == 12) {
      _luaK_setreturns($439, $e$i73, -1);
      if (($n$0$i$i53$lcssa | 0) == 1 & (HEAP32[$e$i73 >> 2] | 0) == 12) {
       $456 = (HEAP32[(HEAP32[$439 >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e$i73 + 8 >> 2] << 2) | 0;
       HEAP32[$456 >> 2] = HEAP32[$456 >> 2] & -64 | 30;
      }
      $first$0$i = HEAPU8[$439 + 46 >> 0] | 0;
      $nret$0$i = -1;
      break L202;
     } else if (($n$0$i$i53$lcssa | 0) == 1) {
      $first$0$i = _luaK_exp2anyreg($439, $e$i73) | 0;
      $nret$0$i = 1;
      break L202;
     } else {
      _luaK_exp2nextreg($439, $e$i73);
      $first$0$i = HEAPU8[$439 + 46 >> 0] | 0;
      $nret$0$i = $n$0$i$i53$lcssa;
      break L202;
     }
    }
   } while (0);
   _luaK_ret($439, $first$0$i, $nret$0$i);
   if ((HEAP32[$18 >> 2] | 0) == 59) _luaX_next($ls);
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 case 266:
 case 258:
  {
   $470 = _luaK_jump($ls$idx$val) | 0;
   $471 = HEAP32[$0 >> 2] | 0;
   $473 = (HEAP32[$18 >> 2] | 0) == 266;
   _luaX_next($ls);
   do if ($473) if ((HEAP32[$18 >> 2] | 0) == 288) {
    $477 = HEAP32[$ls + 24 >> 2] | 0;
    _luaX_next($ls);
    $label$0$i = $477;
    break;
   } else _error_expected($ls, 288); else $label$0$i = _luaS_new(HEAP32[$ls$idx1 >> 2] | 0, 2256) | 0; while (0);
   $481 = HEAP32[$ls + 64 >> 2] | 0;
   $482 = $481 + 12 | 0;
   $483 = $481 + 16 | 0;
   $484 = HEAP32[$483 >> 2] | 0;
   $485 = $481 + 20 | 0;
   if (($484 | 0) < (HEAP32[$485 >> 2] | 0)) {
    $492 = HEAP32[$482 >> 2] | 0;
    $500 = $484;
   } else {
    $490 = _luaM_growaux_(HEAP32[$ls$idx1 >> 2] | 0, HEAP32[$482 >> 2] | 0, $485, 16, 32767, 2264) | 0;
    HEAP32[$482 >> 2] = $490;
    $492 = $490;
    $500 = HEAP32[$483 >> 2] | 0;
   }
   HEAP32[$492 + ($484 << 4) >> 2] = $label$0$i;
   HEAP32[$492 + ($484 << 4) + 8 >> 2] = $471;
   HEAP8[$492 + ($484 << 4) + 12 >> 0] = HEAP8[(HEAP32[$ls$idx >> 2] | 0) + 46 >> 0] | 0;
   HEAP32[$492 + ($484 << 4) + 4 >> 2] = $470;
   HEAP32[$483 >> 2] = $500 + 1;
   _findlabel($ls, $484) | 0;
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 case 265:
  {
   _luaX_next($ls);
   if ((HEAP32[$18 >> 2] | 0) != 288) _error_expected($ls, 288);
   $269 = HEAP32[$ls + 24 >> 2] | 0;
   _luaX_next($ls);
   $270 = HEAP32[$ls$idx >> 2] | 0;
   if (!(_singlevaraux($270, $269, $v$i, 1) | 0)) {
    _singlevaraux($270, HEAP32[$ls + 72 >> 2] | 0, $v$i, 1) | 0;
    $275 = _luaK_stringK(HEAP32[$ls$idx >> 2] | 0, $269) | 0;
    HEAP32[$e$i73 + 16 >> 2] = -1;
    HEAP32[$e$i73 + 20 >> 2] = -1;
    HEAP32[$e$i73 >> 2] = 4;
    HEAP32[$e$i73 + 8 >> 2] = $275;
    _luaK_indexed($270, $v$i, $e$i73);
   }
   while (1) {
    $279 = HEAP32[$18 >> 2] | 0;
    if (($279 | 0) == 58) {
     label = 92;
     break;
    } else if (($279 | 0) != 46) {
     $ismethod$0$i$i = 0;
     break;
    }
    _fieldsel($ls, $v$i);
   }
   if ((label | 0) == 92) {
    _fieldsel($ls, $v$i);
    $ismethod$0$i$i = 1;
   }
   _body($ls, $b$i, $ismethod$0$i$i, $1);
   _luaK_storevar(HEAP32[$ls$idx >> 2] | 0, $v$i, $b$i);
   _luaK_fixline(HEAP32[$ls$idx >> 2] | 0, $1);
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 default:
  {
   $501 = $e$i73 + 8 | 0;
   _suffixedexp($ls, $501);
   $502 = HEAP32[$18 >> 2] | 0;
   do if (($502 | 0) == 44 | ($502 | 0) == 61) {
    HEAP32[$e$i73 >> 2] = 0;
    _assignment($ls, $e$i73, 1);
   } else if ((HEAP32[$501 >> 2] | 0) == 12) {
    $510 = (HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e$i73 + 16 >> 2] << 2) | 0;
    HEAP32[$510 >> 2] = HEAP32[$510 >> 2] & -8372225 | 16384;
    break;
   } else _luaX_syntaxerror($ls, 2728); while (0);
   $514 = HEAP32[$ls$idx >> 2] | 0;
   $515 = $514 + 46 | 0;
   $516 = HEAP8[$515 >> 0] | 0;
   $517 = $514 + 48 | 0;
   HEAP8[$517 >> 0] = $516;
   $518 = HEAP32[$ls$idx1 >> 2] | 0;
   $519 = $518 + 38 | 0;
   $520 = HEAP16[$519 >> 1] | 0;
   $521 = $520 + -1 << 16 >> 16;
   HEAP16[$519 >> 1] = $521;
   STACKTOP = sp;
   return;
  }
 } while (0);
}

function _match($ms, $s, $p) {
 $ms = $ms | 0;
 $s = $s | 0;
 $p = $p | 0;
 var $$$i34 = 0, $$$i4 = 0, $$$i42 = 0, $$$i50 = 0, $$$i7 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i23 = 0, $$0$i$i25 = 0, $$0$i$i30 = 0, $$0$i12 = 0, $$0$i15 = 0, $$0$i2 = 0, $$0$i5 = 0, $$0$ph$be = 0, $$0$ph136 = 0, $$0$ph136$lcssa = 0, $$0$ph136$lcssa402 = 0, $$0$ph136$lcssa406 = 0, $$0$ph136$lcssa409 = 0, $$01$be = 0, $$01$be$i = 0, $$01$be$i10 = 0, $$01$be$i37 = 0, $$01$be$i45 = 0, $$01$be$i53 = 0, $$01$i = 0, $$01$i$lcssa397 = 0, $$01$i$lcssa399 = 0, $$01$i18 = 0, $$01$i27119 = 0, $$01$i400 = 0, $$01$ph$be = 0, $$01$ph135 = 0, $$01125 = 0, $$01125$lcssa = 0, $$01125$lcssa382 = 0, $$01125$lcssa383 = 0, $$01125$lcssa384 = 0, $$01125$lcssa388 = 0, $$01125$lcssa390 = 0, $$01125391 = 0, $$012$i = 0, $$012$i35 = 0, $$012$i43 = 0, $$012$i51 = 0, $$012$i8 = 0, $$013$i = 0, $$013$i$lcssa = 0, $$013$i$phi = 0, $$1 = 0, $$1$i = 0, $$1$i$lcssa = 0, $$1$i17 = 0, $$1$i17$lcssa = 0, $$2 = 0, $$lcssa374 = 0, $$lcssa392 = 0, $$lcssa415 = 0, $$p$i = 0, $$p$i33 = 0, $$p$i41 = 0, $$p$i49 = 0, $$p$i6 = 0, $$pre$phi207$lcssa393Z2D = 0, $$pre$phi207$lcssa395Z2D = 0, $$pre$phi207396Z2D = 0, $$pre$phi207Z2D = 0, $$pre206 = 0, $0 = 0, $10 = 0, $103 = 0, $11 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $13 = 0, $134 = 0, $14 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $161 = 0, $170 = 0, $171 = 0, $176 = 0, $178 = 0, $180 = 0, $186 = 0, $19 = 0, $191 = 0, $201 = 0, $203 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $229 = 0, $231 = 0, $232 = 0, $237 = 0, $248 = 0, $25 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $258 = 0, $259 = 0, $262 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $279 = 0, $281 = 0, $282 = 0, $287 = 0, $29 = 0, $298 = 0, $304 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $320 = 0, $322 = 0, $323 = 0, $328 = 0, $340 = 0, $346 = 0, $347 = 0, $35 = 0, $39 = 0, $5 = 0, $52 = 0, $53 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $64 = 0, $68 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $cont$0$be$i = 0, $cont$04$i = 0, $i$0$i$lcssa = 0, $i$0$i$lcssa210 = 0, $i$0$i112 = 0, $i$1$i109 = 0, $level$0$i$i = 0, $level$0$in$i$i = 0, $ms$idx = 0, $ms$idx$val$i = 0, $ms$idx$val$i111 = 0, $ms$idx$val$i203 = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer19 = sp + 80 | 0;
 $vararg_buffer17 = sp + 72 | 0;
 $vararg_buffer15 = sp + 64 | 0;
 $vararg_buffer13 = sp + 56 | 0;
 $vararg_buffer11 = sp + 48 | 0;
 $vararg_buffer9 = sp + 40 | 0;
 $vararg_buffer7 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $0 = HEAP32[$ms >> 2] | 0;
 HEAP32[$ms >> 2] = $0 + -1;
 if (!$0) _luaL_error(HEAP32[$ms + 16 >> 2] | 0, 9272, sp) | 0;
 $5 = $ms + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 L4 : do if (($6 | 0) == ($p | 0)) $$2 = $s; else {
  $ms$idx = $ms + 8 | 0;
  $8 = $ms + 16 | 0;
  $9 = $ms + 4 | 0;
  $10 = $ms + 20 | 0;
  $$0$ph136 = $s;
  $$01$ph135 = $p;
  $346 = $6;
  L6 : while (1) {
   $11 = $$0$ph136 + 1 | 0;
   $12 = $$0$ph136 + -1 | 0;
   $$01125 = $$01$ph135;
   $57 = $346;
   L8 : while (1) {
    $13 = HEAP8[$$01125 >> 0] | 0;
    $14 = $13 << 24 >> 24;
    L10 : do if (($14 | 0) == 40) {
     $$0$ph136$lcssa = $$0$ph136;
     $$01125$lcssa = $$01125;
     label = 7;
     break L6;
    } else if (($14 | 0) == 37) {
     $61 = $$01125 + 1 | 0;
     $62 = HEAP8[$61 >> 0] | 0;
     switch ($62 << 24 >> 24 | 0) {
     case 102:
      break;
     case 98:
      {
       $$01125$lcssa383 = $$01125;
       $$lcssa374 = $57;
       label = 25;
       break L8;
       break;
      }
     case 57:
     case 56:
     case 55:
     case 54:
     case 53:
     case 52:
     case 51:
     case 50:
     case 49:
     case 48:
      {
       $$01125$lcssa384 = $$01125;
       $$lcssa392 = $62;
       label = 70;
       break L8;
       break;
      }
     default:
      {
       if (($61 | 0) == ($57 | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 9408, $vararg_buffer17) | 0;
       $$01$i = $$01125 + 2 | 0;
       $$pre$phi207Z2D = $61;
       label = 89;
       break L10;
      }
     }
     $86 = $$01125 + 2 | 0;
     if ((HEAP8[$86 >> 0] | 0) == 91) $92 = 91; else {
      _luaL_error(HEAP32[$8 >> 2] | 0, 9368, $vararg_buffer9) | 0;
      $92 = HEAP8[$86 >> 0] | 0;
     }
     $90 = $$01125 + 3 | 0;
     $91 = $92 << 24 >> 24;
     if (($91 | 0) == 37) {
      if (($90 | 0) == (HEAP32[$5 >> 2] | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 9408, $vararg_buffer11) | 0;
      $$01$i18 = $$01125 + 4 | 0;
     } else if (($91 | 0) == 91) {
      $$0$i15 = (HEAP8[$90 >> 0] | 0) == 94 ? $$01125 + 4 | 0 : $90;
      while (1) {
       if (($$0$i15 | 0) == (HEAP32[$5 >> 2] | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 9448, $vararg_buffer13) | 0;
       $103 = $$0$i15 + 1 | 0;
       if ((HEAP8[$$0$i15 >> 0] | 0) == 37) $$1$i17 = $103 >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0 ? $$0$i15 + 2 | 0 : $103; else $$1$i17 = $103;
       if ((HEAP8[$$1$i17 >> 0] | 0) == 93) {
        $$1$i17$lcssa = $$1$i17;
        break;
       } else $$0$i15 = $$1$i17;
      }
      $$01$i18 = $$1$i17$lcssa + 1 | 0;
     } else $$01$i18 = $90;
     if (($$0$ph136 | 0) == (HEAP32[$9 >> 2] | 0)) $117 = 0; else $117 = HEAP8[$12 >> 0] | 0;
     $116 = $117 & 255;
     $118 = $$01$i18 + -1 | 0;
     $120 = (HEAP8[$90 >> 0] | 0) == 94;
     $$p$i6 = $120 ? $90 : $86;
     $121 = $120 & 1;
     $$$i7 = $121 ^ 1;
     $122 = $$p$i6 + 1 | 0;
     L52 : do if ($122 >>> 0 < $118 >>> 0) {
      $124 = $117 & 255;
      $$012$i8 = $$p$i6;
      $126 = $122;
      while (1) {
       $125 = HEAP8[$126 >> 0] | 0;
       $128 = $$012$i8 + 2 | 0;
       $129 = HEAP8[$128 >> 0] | 0;
       do if ($125 << 24 >> 24 == 37) if (!(_match_class($116, $129 & 255) | 0)) $$01$be$i10 = $128; else {
        $$0$i12 = $$$i7;
        break L52;
       } else {
        if ($129 << 24 >> 24 == 45) {
         $134 = $$012$i8 + 3 | 0;
         if ($134 >>> 0 < $118 >>> 0) {
          if (($125 & 255) >>> 0 > $116 >>> 0) {
           $$01$be$i10 = $134;
           break;
          }
          if ((HEAPU8[$134 >> 0] | 0) >>> 0 < $116 >>> 0) {
           $$01$be$i10 = $134;
           break;
          } else {
           $$0$i12 = $$$i7;
           break L52;
          }
         }
        }
        if ($125 << 24 >> 24 == $124 << 24 >> 24) {
         $$0$i12 = $$$i7;
         break L52;
        } else $$01$be$i10 = $126;
       } while (0);
       $126 = $$01$be$i10 + 1 | 0;
       if ($126 >>> 0 >= $118 >>> 0) {
        $$0$i12 = $121;
        break;
       } else $$012$i8 = $$01$be$i10;
      }
     } else $$0$i12 = $121; while (0);
     if ($$0$i12) {
      $$2 = 0;
      break L4;
     }
     $145 = HEAP8[$$0$ph136 >> 0] | 0;
     $146 = $145 & 255;
     $148 = (HEAP8[$90 >> 0] | 0) == 94;
     $$p$i = $148 ? $90 : $86;
     $149 = $148 & 1;
     $$$i4 = $149 ^ 1;
     $150 = $$p$i + 1 | 0;
     L67 : do if ($150 >>> 0 < $118 >>> 0) {
      $$012$i = $$p$i;
      $153 = $150;
      while (1) {
       $152 = HEAP8[$153 >> 0] | 0;
       $155 = $$012$i + 2 | 0;
       $156 = HEAP8[$155 >> 0] | 0;
       do if ($152 << 24 >> 24 == 37) if (!(_match_class($146, $156 & 255) | 0)) $$01$be$i = $155; else {
        $$0$i5 = $$$i4;
        break L67;
       } else {
        if ($156 << 24 >> 24 == 45) {
         $161 = $$012$i + 3 | 0;
         if ($161 >>> 0 < $118 >>> 0) {
          if (($152 & 255) > ($145 & 255)) {
           $$01$be$i = $161;
           break;
          }
          if ((HEAPU8[$161 >> 0] | 0) < ($145 & 255)) {
           $$01$be$i = $161;
           break;
          } else {
           $$0$i5 = $$$i4;
           break L67;
          }
         }
        }
        if ($152 << 24 >> 24 == $145 << 24 >> 24) {
         $$0$i5 = $$$i4;
         break L67;
        } else $$01$be$i = $153;
       } while (0);
       $153 = $$01$be$i + 1 | 0;
       if ($153 >>> 0 >= $118 >>> 0) {
        $$0$i5 = $149;
        break;
       } else $$012$i = $$01$be$i;
      }
     } else $$0$i5 = $149; while (0);
     if (!$$0$i5) {
      $$2 = 0;
      break L4;
     } else $$01$be = $$01$i18;
    } else if (($14 | 0) == 41) {
     $$0$ph136$lcssa402 = $$0$ph136;
     $$01125$lcssa382 = $$01125;
     label = 16;
     break L6;
    } else if (($14 | 0) == 36) {
     $55 = $$01125 + 1 | 0;
     if (($55 | 0) == ($57 | 0)) {
      $$0$ph136$lcssa406 = $$0$ph136;
      label = 23;
      break L6;
     } else {
      $$01$i = $55;
      $$pre$phi207Z2D = $55;
      label = 89;
     }
    } else {
     $$pre206 = $$01125 + 1 | 0;
     if ($13 << 24 >> 24 == 91) {
      $$0$i2 = (HEAP8[$$pre206 >> 0] | 0) == 94 ? $$01125 + 2 | 0 : $$pre206;
      $201 = $57;
      while (1) {
       if (($$0$i2 | 0) == ($201 | 0)) _luaL_error(HEAP32[$8 >> 2] | 0, 9448, $vararg_buffer19) | 0;
       $203 = $$0$i2 + 1 | 0;
       if ((HEAP8[$$0$i2 >> 0] | 0) == 37) $$1$i = $203 >>> 0 < (HEAP32[$5 >> 2] | 0) >>> 0 ? $$0$i2 + 2 | 0 : $203; else $$1$i = $203;
       if ((HEAP8[$$1$i >> 0] | 0) == 93) {
        $$1$i$lcssa = $$1$i;
        break;
       }
       $$0$i2 = $$1$i;
       $201 = HEAP32[$5 >> 2] | 0;
      }
      $$01$i = $$1$i$lcssa + 1 | 0;
      $$pre$phi207Z2D = $$pre206;
      label = 89;
     } else {
      $$01$i = $$pre206;
      $$pre$phi207Z2D = $$pre206;
      label = 89;
     }
    } while (0);
    L81 : do if ((label | 0) == 89) {
     label = 0;
     do if ((HEAP32[$ms$idx >> 2] | 0) >>> 0 > $$0$ph136 >>> 0) {
      $214 = HEAP8[$$0$ph136 >> 0] | 0;
      $215 = $214 & 255;
      $216 = HEAP8[$$01125 >> 0] | 0;
      $217 = $216 << 24 >> 24;
      L85 : do if (($217 | 0) == 46) $253 = HEAP8[$$01$i >> 0] | 0; else if (($217 | 0) == 37) {
       $$0$i = _match_class($215, HEAPU8[$$pre$phi207Z2D >> 0] | 0) | 0;
       label = 104;
      } else if (($217 | 0) == 91) {
       $222 = $$01$i + -1 | 0;
       $224 = (HEAP8[$$pre$phi207Z2D >> 0] | 0) == 94;
       $$p$i33 = $224 ? $$pre$phi207Z2D : $$01125;
       $225 = $224 & 1;
       $$$i34 = $225 ^ 1;
       $226 = $$p$i33 + 1 | 0;
       if ($226 >>> 0 < $222 >>> 0) {
        $$012$i35 = $$p$i33;
        $229 = $226;
        while (1) {
         $228 = HEAP8[$229 >> 0] | 0;
         $231 = $$012$i35 + 2 | 0;
         $232 = HEAP8[$231 >> 0] | 0;
         do if ($228 << 24 >> 24 == 37) if (!(_match_class($215, $232 & 255) | 0)) $$01$be$i37 = $231; else {
          $$0$i = $$$i34;
          label = 104;
          break L85;
         } else {
          if ($232 << 24 >> 24 == 45) {
           $237 = $$012$i35 + 3 | 0;
           if ($237 >>> 0 < $222 >>> 0) {
            if (($228 & 255) > ($214 & 255)) {
             $$01$be$i37 = $237;
             break;
            }
            if ((HEAPU8[$237 >> 0] | 0) < ($214 & 255)) {
             $$01$be$i37 = $237;
             break;
            } else {
             $$0$i = $$$i34;
             label = 104;
             break L85;
            }
           }
          }
          if ($228 << 24 >> 24 == $214 << 24 >> 24) {
           $$0$i = $$$i34;
           label = 104;
           break L85;
          } else $$01$be$i37 = $229;
         } while (0);
         $229 = $$01$be$i37 + 1 | 0;
         if ($229 >>> 0 >= $222 >>> 0) {
          $$0$i = $225;
          label = 104;
          break;
         } else $$012$i35 = $$01$be$i37;
        }
       } else {
        $$0$i = $225;
        label = 104;
       }
      } else {
       $$0$i = $216 << 24 >> 24 == $214 << 24 >> 24 & 1;
       label = 104;
      } while (0);
      if ((label | 0) == 104) {
       label = 0;
       $248 = HEAP8[$$01$i >> 0] | 0;
       if (!$$0$i) {
        $347 = $248;
        break;
       } else $253 = $248;
      }
      $252 = $253 << 24 >> 24;
      if (($252 | 0) == 45) {
       $$0$ph136$lcssa409 = $$0$ph136;
       $$01$i$lcssa399 = $$01$i;
       $$01125$lcssa390 = $$01125;
       $$pre$phi207$lcssa395Z2D = $$pre$phi207Z2D;
       label = 109;
       break L6;
      } else if (($252 | 0) == 43) {
       $$01$i$lcssa397 = $$01$i;
       $$01125$lcssa388 = $$01125;
       $$lcssa415 = $11;
       $$pre$phi207$lcssa393Z2D = $$pre$phi207Z2D;
       label = 112;
       break L6;
      } else if (($252 | 0) == 42) {
       $$01$i400 = $$01$i;
       $$01125391 = $$01125;
       $$1 = $$0$ph136;
       $$pre$phi207396Z2D = $$pre$phi207Z2D;
       break L6;
      } else if (($252 | 0) != 63) {
       $$0$ph$be = $11;
       $$01$ph$be = $$01$i;
       break L8;
      }
      $258 = $$01$i + 1 | 0;
      $259 = _match($ms, $11, $258) | 0;
      if (!$259) {
       $$01$be = $258;
       break L81;
      } else {
       $$2 = $259;
       break L4;
      }
     } else $347 = HEAP8[$$01$i >> 0] | 0; while (0);
     if (!($347 << 24 >> 24 == 45 | $347 << 24 >> 24 == 63 | $347 << 24 >> 24 == 42)) {
      $$2 = 0;
      break L4;
     }
     $$01$be = $$01$i + 1 | 0;
    } while (0);
    $57 = HEAP32[$5 >> 2] | 0;
    if (($$01$be | 0) == ($57 | 0)) {
     $$2 = $$0$ph136;
     break L4;
    } else $$01125 = $$01$be;
   }
   if ((label | 0) == 25) {
    label = 0;
    $64 = $$01125$lcssa383 + 2 | 0;
    if (($$lcssa374 + -1 | 0) >>> 0 <= $64 >>> 0) _luaL_error(HEAP32[$8 >> 2] | 0, 9320, $vararg_buffer7) | 0;
    $68 = HEAP8[$$0$ph136 >> 0] | 0;
    if ($68 << 24 >> 24 != (HEAP8[$64 >> 0] | 0)) {
     $$2 = 0;
     break L4;
    }
    $72 = HEAP8[$$01125$lcssa383 + 3 >> 0] | 0;
    $73 = HEAP32[$ms$idx >> 2] | 0;
    if ($11 >>> 0 < $73 >>> 0) {
     $$013$i = $$0$ph136;
     $76 = $11;
     $cont$04$i = 1;
    } else {
     $$2 = 0;
     break L4;
    }
    while (1) {
     $75 = HEAP8[$76 >> 0] | 0;
     if ($75 << 24 >> 24 == $72 << 24 >> 24) {
      $78 = $cont$04$i + -1 | 0;
      if (!$78) {
       $$013$i$lcssa = $$013$i;
       break;
      } else $cont$0$be$i = $78;
     } else $cont$0$be$i = ($75 << 24 >> 24 == $68 << 24 >> 24 & 1) + $cont$04$i | 0;
     $80 = $76 + 1 | 0;
     if ($80 >>> 0 < $73 >>> 0) {
      $$013$i$phi = $76;
      $76 = $80;
      $cont$04$i = $cont$0$be$i;
      $$013$i = $$013$i$phi;
     } else {
      $$2 = 0;
      break L4;
     }
    }
    $$0$ph$be = $$013$i$lcssa + 2 | 0;
    $$01$ph$be = $$01125$lcssa383 + 4 | 0;
   } else if ((label | 0) == 70) {
    label = 0;
    $170 = $$lcssa392 & 255;
    $171 = $170 + -49 | 0;
    if (($$lcssa392 & 255) < 49) label = 73; else if (($171 | 0) < (HEAP32[$10 >> 2] | 0)) {
     $176 = HEAP32[$ms + 24 + ($171 << 3) + 4 >> 2] | 0;
     if (($176 | 0) == -1) label = 73; else {
      $$0$i$i = $171;
      $186 = $176;
     }
    } else label = 73;
    if ((label | 0) == 73) {
     label = 0;
     $178 = HEAP32[$8 >> 2] | 0;
     HEAP32[$vararg_buffer15 >> 2] = $170 + -48;
     $180 = _luaL_error($178, 9480, $vararg_buffer15) | 0;
     $$0$i$i = $180;
     $186 = HEAP32[$ms + 24 + ($180 << 3) + 4 >> 2] | 0;
    }
    if (((HEAP32[$ms$idx >> 2] | 0) - $$0$ph136 | 0) >>> 0 < $186 >>> 0) {
     $$2 = 0;
     break L4;
    }
    $191 = $$0$ph136 + $186 | 0;
    if (($191 | 0) == 0 | (_memcmp(HEAP32[$ms + 24 + ($$0$i$i << 3) >> 2] | 0, $$0$ph136, $186) | 0) != 0) {
     $$2 = 0;
     break L4;
    }
    $$0$ph$be = $191;
    $$01$ph$be = $$01125$lcssa384 + 2 | 0;
   }
   $346 = HEAP32[$5 >> 2] | 0;
   if (($$01$ph$be | 0) == ($346 | 0)) {
    $$2 = $$0$ph$be;
    break L4;
   } else {
    $$0$ph136 = $$0$ph$be;
    $$01$ph135 = $$01$ph$be;
   }
  }
  if ((label | 0) == 7) {
   $15 = $$01125$lcssa + 1 | 0;
   if ((HEAP8[$15 >> 0] | 0) == 41) {
    $19 = HEAP32[$10 >> 2] | 0;
    if (($19 | 0) > 31) _luaL_error(HEAP32[$8 >> 2] | 0, 9200, $vararg_buffer1) | 0;
    HEAP32[$ms + 24 + ($19 << 3) >> 2] = $$0$ph136$lcssa;
    HEAP32[$ms + 24 + ($19 << 3) + 4 >> 2] = -2;
    HEAP32[$10 >> 2] = $19 + 1;
    $25 = _match($ms, $$0$ph136$lcssa, $$01125$lcssa + 2 | 0) | 0;
    if ($25) {
     $$2 = $25;
     break;
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
    $$2 = 0;
    break;
   } else {
    $29 = HEAP32[$10 >> 2] | 0;
    if (($29 | 0) > 31) _luaL_error(HEAP32[$8 >> 2] | 0, 9200, $vararg_buffer3) | 0;
    HEAP32[$ms + 24 + ($29 << 3) >> 2] = $$0$ph136$lcssa;
    HEAP32[$ms + 24 + ($29 << 3) + 4 >> 2] = -1;
    HEAP32[$10 >> 2] = $29 + 1;
    $35 = _match($ms, $$0$ph136$lcssa, $15) | 0;
    if ($35) {
     $$2 = $35;
     break;
    }
    HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + -1;
    $$2 = 0;
    break;
   }
  } else if ((label | 0) == 16) {
   $39 = $$01125$lcssa382 + 1 | 0;
   $level$0$in$i$i = HEAP32[$10 >> 2] | 0;
   while (1) {
    $level$0$i$i = $level$0$in$i$i + -1 | 0;
    if (($level$0$in$i$i | 0) <= 0) {
     label = 19;
     break;
    }
    if ((HEAP32[$ms + 24 + ($level$0$i$i << 3) + 4 >> 2] | 0) == -1) {
     $$0$i$i23 = $level$0$i$i;
     break;
    } else $level$0$in$i$i = $level$0$i$i;
   }
   if ((label | 0) == 19) $$0$i$i23 = _luaL_error(HEAP32[$8 >> 2] | 0, 9296, $vararg_buffer5) | 0;
   $52 = $ms + 24 + ($$0$i$i23 << 3) + 4 | 0;
   HEAP32[$52 >> 2] = $$0$ph136$lcssa402 - (HEAP32[$ms + 24 + ($$0$i$i23 << 3) >> 2] | 0);
   $53 = _match($ms, $$0$ph136$lcssa402, $39) | 0;
   if ($53) {
    $$2 = $53;
    break;
   }
   HEAP32[$52 >> 2] = -1;
   $$2 = 0;
   break;
  } else if ((label | 0) == 23) {
   $$2 = ($$0$ph136$lcssa406 | 0) == (HEAP32[$ms$idx >> 2] | 0) ? $$0$ph136$lcssa406 : 0;
   break;
  } else if ((label | 0) == 109) {
   $254 = $$01$i$lcssa399 + 1 | 0;
   $255 = _match($ms, $$0$ph136$lcssa409, $254) | 0;
   if ($255) {
    $$2 = $255;
    break;
   }
   $257 = $$01$i$lcssa399 + -1 | 0;
   $$01$i27119 = $$0$ph136$lcssa409;
   while (1) {
    if ((HEAP32[$ms$idx >> 2] | 0) >>> 0 <= $$01$i27119 >>> 0) {
     $$2 = 0;
     break L4;
    }
    $307 = HEAP8[$$01$i27119 >> 0] | 0;
    $308 = $307 & 255;
    $309 = HEAP8[$$01125$lcssa390 >> 0] | 0;
    $310 = $309 << 24 >> 24;
    L159 : do if (($310 | 0) == 37) {
     $$0$i$i30 = _match_class($308, HEAPU8[$$pre$phi207$lcssa395Z2D >> 0] | 0) | 0;
     label = 147;
    } else if (($310 | 0) == 91) {
     $315 = (HEAP8[$$pre$phi207$lcssa395Z2D >> 0] | 0) == 94;
     $$p$i49 = $315 ? $$pre$phi207$lcssa395Z2D : $$01125$lcssa390;
     $316 = $315 & 1;
     $$$i50 = $316 ^ 1;
     $317 = $$p$i49 + 1 | 0;
     if ($317 >>> 0 < $257 >>> 0) {
      $$012$i51 = $$p$i49;
      $320 = $317;
      while (1) {
       $319 = HEAP8[$320 >> 0] | 0;
       $322 = $$012$i51 + 2 | 0;
       $323 = HEAP8[$322 >> 0] | 0;
       do if ($319 << 24 >> 24 == 37) if (!(_match_class($308, $323 & 255) | 0)) $$01$be$i53 = $322; else {
        $$0$i$i30 = $$$i50;
        label = 147;
        break L159;
       } else {
        if ($323 << 24 >> 24 == 45) {
         $328 = $$012$i51 + 3 | 0;
         if ($328 >>> 0 < $257 >>> 0) {
          if (($319 & 255) > ($307 & 255)) {
           $$01$be$i53 = $328;
           break;
          }
          if ((HEAPU8[$328 >> 0] | 0) < ($307 & 255)) {
           $$01$be$i53 = $328;
           break;
          } else {
           $$0$i$i30 = $$$i50;
           label = 147;
           break L159;
          }
         }
        }
        if ($319 << 24 >> 24 == $307 << 24 >> 24) {
         $$0$i$i30 = $$$i50;
         label = 147;
         break L159;
        } else $$01$be$i53 = $320;
       } while (0);
       $320 = $$01$be$i53 + 1 | 0;
       if ($320 >>> 0 >= $257 >>> 0) {
        $$0$i$i30 = $316;
        label = 147;
        break;
       } else $$012$i51 = $$01$be$i53;
      }
     } else {
      $$0$i$i30 = $316;
      label = 147;
     }
    } else if (($310 | 0) != 46) {
     $$0$i$i30 = $309 << 24 >> 24 == $307 << 24 >> 24 & 1;
     label = 147;
    } while (0);
    if ((label | 0) == 147) {
     label = 0;
     if (!$$0$i$i30) {
      $$2 = 0;
      break L4;
     }
    }
    $$01$i27119 = $$01$i27119 + 1 | 0;
    $340 = _match($ms, $$01$i27119, $254) | 0;
    if ($340) {
     $$2 = $340;
     break L4;
    }
   }
  } else if ((label | 0) == 112) {
   $$01$i400 = $$01$i$lcssa397;
   $$01125391 = $$01125$lcssa388;
   $$1 = $$lcssa415;
   $$pre$phi207396Z2D = $$pre$phi207$lcssa393Z2D;
  }
  $ms$idx$val$i111 = HEAP32[$ms$idx >> 2] | 0;
  if ($ms$idx$val$i111 >>> 0 > $$1 >>> 0) {
   $262 = $$01$i400 + -1 | 0;
   $266 = $$1;
   $i$0$i112 = 0;
   $ms$idx$val$i203 = $ms$idx$val$i111;
   while (1) {
    $265 = HEAP8[$266 >> 0] | 0;
    $267 = $265 & 255;
    $268 = HEAP8[$$01125391 >> 0] | 0;
    $269 = $268 << 24 >> 24;
    L183 : do if (($269 | 0) == 37) {
     $$0$i$i25 = _match_class($267, HEAPU8[$$pre$phi207396Z2D >> 0] | 0) | 0;
     label = 129;
    } else if (($269 | 0) == 91) {
     $274 = (HEAP8[$$pre$phi207396Z2D >> 0] | 0) == 94;
     $$p$i41 = $274 ? $$pre$phi207396Z2D : $$01125391;
     $275 = $274 & 1;
     $$$i42 = $275 ^ 1;
     $276 = $$p$i41 + 1 | 0;
     if ($276 >>> 0 < $262 >>> 0) {
      $$012$i43 = $$p$i41;
      $279 = $276;
      while (1) {
       $278 = HEAP8[$279 >> 0] | 0;
       $281 = $$012$i43 + 2 | 0;
       $282 = HEAP8[$281 >> 0] | 0;
       do if ($278 << 24 >> 24 == 37) if (!(_match_class($267, $282 & 255) | 0)) $$01$be$i45 = $281; else {
        $$0$i$i25 = $$$i42;
        label = 129;
        break L183;
       } else {
        if ($282 << 24 >> 24 == 45) {
         $287 = $$012$i43 + 3 | 0;
         if ($287 >>> 0 < $262 >>> 0) {
          if (($278 & 255) > ($265 & 255)) {
           $$01$be$i45 = $287;
           break;
          }
          if ((HEAPU8[$287 >> 0] | 0) < ($265 & 255)) {
           $$01$be$i45 = $287;
           break;
          } else {
           $$0$i$i25 = $$$i42;
           label = 129;
           break L183;
          }
         }
        }
        if ($278 << 24 >> 24 == $265 << 24 >> 24) {
         $$0$i$i25 = $$$i42;
         label = 129;
         break L183;
        } else $$01$be$i45 = $279;
       } while (0);
       $279 = $$01$be$i45 + 1 | 0;
       if ($279 >>> 0 >= $262 >>> 0) {
        $$0$i$i25 = $275;
        label = 129;
        break;
       } else $$012$i43 = $$01$be$i45;
      }
     } else {
      $$0$i$i25 = $275;
      label = 129;
     }
    } else if (($269 | 0) == 46) $ms$idx$val$i = $ms$idx$val$i203; else {
     $$0$i$i25 = $268 << 24 >> 24 == $265 << 24 >> 24 & 1;
     label = 129;
    } while (0);
    if ((label | 0) == 129) {
     label = 0;
     if (!$$0$i$i25) {
      $i$0$i$lcssa = $i$0$i112;
      break;
     }
     $ms$idx$val$i = HEAP32[$ms$idx >> 2] | 0;
    }
    $298 = $i$0$i112 + 1 | 0;
    $266 = $$1 + $298 | 0;
    if ($ms$idx$val$i >>> 0 <= $266 >>> 0) {
     $i$0$i$lcssa = $298;
     break;
    } else {
     $i$0$i112 = $298;
     $ms$idx$val$i203 = $ms$idx$val$i;
    }
   }
   if (($i$0$i$lcssa | 0) > -1) $i$0$i$lcssa210 = $i$0$i$lcssa; else {
    $$2 = 0;
    break;
   }
  } else $i$0$i$lcssa210 = 0;
  $264 = $$01$i400 + 1 | 0;
  $i$1$i109 = $i$0$i$lcssa210;
  while (1) {
   $304 = _match($ms, $$1 + $i$1$i109 | 0, $264) | 0;
   if ($304) {
    $$2 = $304;
    break L4;
   }
   if (($i$1$i109 | 0) > 0) $i$1$i109 = $i$1$i109 + -1 | 0; else {
    $$2 = 0;
    break;
   }
  }
 } while (0);
 HEAP32[$ms >> 2] = (HEAP32[$ms >> 2] | 0) + 1;
 STACKTOP = sp;
 return $$2 | 0;
}

function _strstr($h, $n) {
 $h = $h | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i13 = 0, $$01$i = 0, $$02$i = 0, $$02$i9 = 0, $$03$i = 0, $$03$us$i = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i6 = 0, $$lcssa303 = 0, $$lcssa306 = 0, $$lcssa309 = 0, $$lcssa323 = 0, $$lcssa326 = 0, $$lcssa329 = 0, $$lcssa344 = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $110 = 0, $114 = 0, $117 = 0, $12 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $141 = 0, $150 = 0, $152 = 0, $153 = 0, $160 = 0, $164 = 0, $168 = 0, $17 = 0, $170 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $183 = 0, $186 = 0, $193 = 0, $204 = 0, $205 = 0, $211 = 0, $213 = 0, $23 = 0, $234 = 0, $237 = 0, $238 = 0, $245 = 0, $256 = 0, $26 = 0, $261 = 0, $27 = 0, $280 = 0, $281 = 0, $281$phi = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $38 = 0, $47 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $68 = 0, $69 = 0, $8 = 0, $83 = 0, $9 = 0, $94 = 0, $97 = 0, $98 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i8 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa147$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0, $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$338$us$i = 0, $k$338$us$i$lcssa = 0, $k$4$i = 0, $k$4$us$i = 0, $l$080$i = 0, $l$080$i$lcssa343 = 0, $mem$0$us$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32151$i = 0, $p$0$ph$ph71$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $byteset$i = sp + 1024 | 0;
 $shift$i = sp;
 $0 = HEAP8[$n >> 0] | 0;
 if (!($0 << 24 >> 24)) {
  $$0 = $h;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $3 = _strchr($h, $0 << 24 >> 24) | 0;
 if (!$3) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $6 = HEAP8[$n + 1 >> 0] | 0;
 if (!($6 << 24 >> 24)) {
  $$0 = $3;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $8 = $3 + 1 | 0;
 $9 = HEAP8[$8 >> 0] | 0;
 if (!($9 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $12 = HEAP8[$n + 2 >> 0] | 0;
 if (!($12 << 24 >> 24)) {
  $17 = $6 & 255 | ($0 & 255) << 8;
  $$01$i = $8;
  $280 = $9;
  $281 = $3;
  $hw$0$in2$i = HEAPU8[$3 >> 0] << 8 | $9 & 255;
  while (1) {
   $23 = $hw$0$in2$i & 65535;
   if (($23 | 0) == ($17 | 0)) {
    $$lcssa$i = $281;
    $31 = $280;
    break;
   }
   $26 = $$01$i + 1 | 0;
   $27 = HEAP8[$26 >> 0] | 0;
   if (!($27 << 24 >> 24)) {
    $$lcssa$i = $$01$i;
    $31 = 0;
    break;
   } else {
    $281$phi = $$01$i;
    $$01$i = $26;
    $280 = $27;
    $hw$0$in2$i = $27 & 255 | $23 << 8;
    $281 = $281$phi;
   }
  }
  $$0 = $31 << 24 >> 24 != 0 ? $$lcssa$i : 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $34 = $3 + 2 | 0;
 $35 = HEAP8[$34 >> 0] | 0;
 if (!($35 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $38 = HEAP8[$n + 3 >> 0] | 0;
 if (!($38 << 24 >> 24)) {
  $47 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8;
  $56 = ($35 & 255) << 8 | ($9 & 255) << 16 | HEAPU8[$3 >> 0] << 24;
  if (($56 | 0) == ($47 | 0)) {
   $$0$lcssa$i = $34;
   $$lcssa$i6 = $35;
  } else {
   $$02$i = $34;
   $hw$03$i = $56;
   while (1) {
    $58 = $$02$i + 1 | 0;
    $59 = HEAP8[$58 >> 0] | 0;
    $hw$03$i = ($59 & 255 | $hw$03$i) << 8;
    if ($59 << 24 >> 24 == 0 | ($hw$03$i | 0) == ($47 | 0)) {
     $$0$lcssa$i = $58;
     $$lcssa$i6 = $59;
     break;
    } else $$02$i = $58;
   }
  }
  $$0 = $$lcssa$i6 << 24 >> 24 != 0 ? $$0$lcssa$i + -2 | 0 : 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $68 = $3 + 3 | 0;
 $69 = HEAP8[$68 >> 0] | 0;
 if (!($69 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$n + 4 >> 0] | 0)) {
  $83 = ($6 & 255) << 16 | ($0 & 255) << 24 | ($12 & 255) << 8 | $38 & 255;
  $94 = ($35 & 255) << 8 | ($9 & 255) << 16 | $69 & 255 | HEAPU8[$3 >> 0] << 24;
  if (($94 | 0) == ($83 | 0)) {
   $$0$lcssa$i13 = $68;
   $$lcssa$i12 = $69;
  } else {
   $$02$i9 = $68;
   $hw$03$i8 = $94;
   while (1) {
    $97 = $$02$i9 + 1 | 0;
    $98 = HEAP8[$97 >> 0] | 0;
    $hw$03$i8 = $98 & 255 | $hw$03$i8 << 8;
    if ($98 << 24 >> 24 == 0 | ($hw$03$i8 | 0) == ($83 | 0)) {
     $$0$lcssa$i13 = $97;
     $$lcssa$i12 = $98;
     break;
    } else $$02$i9 = $97;
   }
  }
  $$0 = $$lcssa$i12 << 24 >> 24 != 0 ? $$0$lcssa$i13 + -3 | 0 : 0;
  STACKTOP = sp;
  return $$0 | 0;
 };
 HEAP32[$byteset$i >> 2] = 0;
 HEAP32[$byteset$i + 4 >> 2] = 0;
 HEAP32[$byteset$i + 8 >> 2] = 0;
 HEAP32[$byteset$i + 12 >> 2] = 0;
 HEAP32[$byteset$i + 16 >> 2] = 0;
 HEAP32[$byteset$i + 20 >> 2] = 0;
 HEAP32[$byteset$i + 24 >> 2] = 0;
 HEAP32[$byteset$i + 28 >> 2] = 0;
 $110 = $0;
 $l$080$i = 0;
 while (1) {
  if (!(HEAP8[$3 + $l$080$i >> 0] | 0)) {
   $$0$i = 0;
   break;
  }
  $114 = $byteset$i + ((($110 & 255) >>> 5 & 255) << 2) | 0;
  HEAP32[$114 >> 2] = HEAP32[$114 >> 2] | 1 << ($110 & 31);
  $117 = $l$080$i + 1 | 0;
  HEAP32[$shift$i + (($110 & 255) << 2) >> 2] = $117;
  $110 = HEAP8[$n + $117 >> 0] | 0;
  if (!($110 << 24 >> 24)) {
   $$lcssa344 = $117;
   $l$080$i$lcssa343 = $l$080$i;
   label = 23;
   break;
  } else $l$080$i = $117;
 }
 L46 : do if ((label | 0) == 23) {
  L48 : do if ($$lcssa344 >>> 0 > 1) {
   $282 = 1;
   $ip$0$ph76$i = -1;
   $jp$0$ph77$i = 0;
   L49 : while (1) {
    $283 = $282;
    $jp$0$ph13$ph70$i = $jp$0$ph77$i;
    $p$0$ph$ph71$i = 1;
    while (1) {
     $284 = $283;
     $jp$0$ph1365$i = $jp$0$ph13$ph70$i;
     L53 : while (1) {
      $133 = $284;
      $k$059$i = 1;
      while (1) {
       $131 = HEAP8[$n + ($k$059$i + $ip$0$ph76$i) >> 0] | 0;
       $134 = HEAP8[$n + $133 >> 0] | 0;
       if ($131 << 24 >> 24 != $134 << 24 >> 24) {
        $$lcssa323 = $133;
        $$lcssa326 = $131;
        $$lcssa329 = $134;
        $jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
        break L53;
       }
       if (($k$059$i | 0) == ($p$0$ph$ph71$i | 0)) break;
       $k$059$i = $k$059$i + 1 | 0;
       $133 = $k$059$i + $jp$0$ph1365$i | 0;
       if ($133 >>> 0 >= $$lcssa344 >>> 0) {
        $ip$0$ph$lcssa$i = $ip$0$ph76$i;
        $p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
        break L49;
       }
      }
      $jp$0$ph1365$i = $jp$0$ph1365$i + $p$0$ph$ph71$i | 0;
      $284 = $jp$0$ph1365$i + 1 | 0;
      if ($284 >>> 0 >= $$lcssa344 >>> 0) {
       $ip$0$ph$lcssa$i = $ip$0$ph76$i;
       $p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
       break L49;
      }
     }
     $141 = $$lcssa323 - $ip$0$ph76$i | 0;
     if (($$lcssa326 & 255) <= ($$lcssa329 & 255)) {
      $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
      break;
     }
     $124 = $$lcssa323 + 1 | 0;
     if ($124 >>> 0 < $$lcssa344 >>> 0) {
      $283 = $124;
      $jp$0$ph13$ph70$i = $$lcssa323;
      $p$0$ph$ph71$i = $141;
     } else {
      $ip$0$ph$lcssa$i = $ip$0$ph76$i;
      $p$0$ph$ph$lcssa32$i = $141;
      break L49;
     }
    }
    $282 = $jp$0$ph1365$i$lcssa$lcssa + 2 | 0;
    if ($282 >>> 0 >= $$lcssa344 >>> 0) {
     $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;
     $p$0$ph$ph$lcssa32$i = 1;
     break;
    } else {
     $ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;
     $jp$0$ph77$i = $jp$0$ph1365$i$lcssa$lcssa + 1 | 0;
    }
   }
   $285 = 1;
   $ip$1$ph55$i = -1;
   $jp$1$ph56$i = 0;
   while (1) {
    $287 = $285;
    $jp$1$ph9$ph49$i = $jp$1$ph56$i;
    $p$1$ph$ph50$i = 1;
    while (1) {
     $286 = $287;
     $jp$1$ph944$i = $jp$1$ph9$ph49$i;
     L68 : while (1) {
      $152 = $286;
      $k$139$i = 1;
      while (1) {
       $150 = HEAP8[$n + ($k$139$i + $ip$1$ph55$i) >> 0] | 0;
       $153 = HEAP8[$n + $152 >> 0] | 0;
       if ($150 << 24 >> 24 != $153 << 24 >> 24) {
        $$lcssa303 = $152;
        $$lcssa306 = $150;
        $$lcssa309 = $153;
        $jp$1$ph944$i$lcssa = $jp$1$ph944$i;
        break L68;
       }
       if (($k$139$i | 0) == ($p$1$ph$ph50$i | 0)) break;
       $k$139$i = $k$139$i + 1 | 0;
       $152 = $k$139$i + $jp$1$ph944$i | 0;
       if ($152 >>> 0 >= $$lcssa344 >>> 0) {
        $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
        $ip$1$ph$lcssa$i = $ip$1$ph55$i;
        $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
        $p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
        break L48;
       }
      }
      $jp$1$ph944$i = $jp$1$ph944$i + $p$1$ph$ph50$i | 0;
      $286 = $jp$1$ph944$i + 1 | 0;
      if ($286 >>> 0 >= $$lcssa344 >>> 0) {
       $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
       $ip$1$ph$lcssa$i = $ip$1$ph55$i;
       $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
       $p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
       break L48;
      }
     }
     $160 = $$lcssa303 - $ip$1$ph55$i | 0;
     if (($$lcssa306 & 255) >= ($$lcssa309 & 255)) {
      $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
      break;
     }
     $164 = $$lcssa303 + 1 | 0;
     if ($164 >>> 0 < $$lcssa344 >>> 0) {
      $287 = $164;
      $jp$1$ph9$ph49$i = $$lcssa303;
      $p$1$ph$ph50$i = $160;
     } else {
      $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
      $ip$1$ph$lcssa$i = $ip$1$ph55$i;
      $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
      $p$1$ph$ph$lcssa23$i = $160;
      break L48;
     }
    }
    $285 = $jp$1$ph944$i$lcssa$lcssa + 2 | 0;
    if ($285 >>> 0 >= $$lcssa344 >>> 0) {
     $ip$0$ph$lcssa147$i = $ip$0$ph$lcssa$i;
     $ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;
     $p$0$ph$ph$lcssa32151$i = $p$0$ph$ph$lcssa32$i;
     $p$1$ph$ph$lcssa23$i = 1;
     break;
    } else {
     $ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;
     $jp$1$ph56$i = $jp$1$ph944$i$lcssa$lcssa + 1 | 0;
    }
   }
  } else {
   $ip$0$ph$lcssa147$i = -1;
   $ip$1$ph$lcssa$i = -1;
   $p$0$ph$ph$lcssa32151$i = 1;
   $p$1$ph$ph$lcssa23$i = 1;
  } while (0);
  $168 = ($ip$1$ph$lcssa$i + 1 | 0) >>> 0 > ($ip$0$ph$lcssa147$i + 1 | 0) >>> 0;
  $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32151$i;
  $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa147$i;
  $170 = $ip$1$ip$0$i + 1 | 0;
  if (!(_memcmp($n, $n + $p$1$p$0$i | 0, $170) | 0)) {
   $178 = $$lcssa344 - $p$1$p$0$i | 0;
   $179 = $$lcssa344 | 63;
   if (($$lcssa344 | 0) == ($p$1$p$0$i | 0)) {
    $237 = $179;
    $p$3155$i = $$lcssa344;
   } else {
    $$03$us$i = $3;
    $mem$0$us$i = 0;
    $z$0$us$i = $3;
    L82 : while (1) {
     $183 = $$03$us$i;
     do if (($z$0$us$i - $183 | 0) >>> 0 < $$lcssa344 >>> 0) {
      $186 = _memchr($z$0$us$i, 0, $179) | 0;
      if (!$186) {
       $z$1$us$i = $z$0$us$i + $179 | 0;
       break;
      } else if (($186 - $183 | 0) >>> 0 < $$lcssa344 >>> 0) {
       $$0$i = 0;
       break L46;
      } else {
       $z$1$us$i = $186;
       break;
      }
     } else $z$1$us$i = $z$0$us$i; while (0);
     $193 = HEAP8[$$03$us$i + $l$080$i$lcssa343 >> 0] | 0;
     if (!(1 << ($193 & 31) & HEAP32[$byteset$i + ((($193 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$03$us$i = $$03$us$i + $$lcssa344 | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue;
     }
     $204 = HEAP32[$shift$i + (($193 & 255) << 2) >> 2] | 0;
     $205 = $$lcssa344 - $204 | 0;
     if (($$lcssa344 | 0) != ($204 | 0)) {
      $$03$us$i = $$03$us$i + (($mem$0$us$i | 0) != 0 & $205 >>> 0 < $p$1$p$0$i >>> 0 ? $178 : $205) | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue;
     }
     $211 = $170 >>> 0 > $mem$0$us$i >>> 0 ? $170 : $mem$0$us$i;
     $213 = HEAP8[$n + $211 >> 0] | 0;
     L96 : do if (!($213 << 24 >> 24)) $k$4$us$i = $170; else {
      $$pr$us$i = $213;
      $k$338$us$i = $211;
      while (1) {
       if ($$pr$us$i << 24 >> 24 != (HEAP8[$$03$us$i + $k$338$us$i >> 0] | 0)) {
        $k$338$us$i$lcssa = $k$338$us$i;
        break;
       }
       $k$338$us$i = $k$338$us$i + 1 | 0;
       $$pr$us$i = HEAP8[$n + $k$338$us$i >> 0] | 0;
       if (!($$pr$us$i << 24 >> 24)) {
        $k$4$us$i = $170;
        break L96;
       }
      }
      $$03$us$i = $$03$us$i + ($k$338$us$i$lcssa - $ip$1$ip$0$i) | 0;
      $mem$0$us$i = 0;
      $z$0$us$i = $z$1$us$i;
      continue L82;
     } while (0);
     do {
      if ($k$4$us$i >>> 0 <= $mem$0$us$i >>> 0) {
       $$0$i = $$03$us$i;
       break L46;
      }
      $k$4$us$i = $k$4$us$i + -1 | 0;
     } while ((HEAP8[$n + $k$4$us$i >> 0] | 0) == (HEAP8[$$03$us$i + $k$4$us$i >> 0] | 0));
     $$03$us$i = $$03$us$i + $p$1$p$0$i | 0;
     $mem$0$us$i = $178;
     $z$0$us$i = $z$1$us$i;
    }
   }
  } else {
   $174 = $$lcssa344 - $ip$1$ip$0$i + -1 | 0;
   $237 = $$lcssa344 | 63;
   $p$3155$i = ($ip$1$ip$0$i >>> 0 > $174 >>> 0 ? $ip$1$ip$0$i : $174) + 1 | 0;
  }
  $181 = $n + $170 | 0;
  $$03$i = $3;
  $z$0$i = $3;
  L106 : while (1) {
   $234 = $$03$i;
   do if (($z$0$i - $234 | 0) >>> 0 < $$lcssa344 >>> 0) {
    $238 = _memchr($z$0$i, 0, $237) | 0;
    if (!$238) {
     $z$1$i = $z$0$i + $237 | 0;
     break;
    } else if (($238 - $234 | 0) >>> 0 < $$lcssa344 >>> 0) {
     $$0$i = 0;
     break L46;
    } else {
     $z$1$i = $238;
     break;
    }
   } else $z$1$i = $z$0$i; while (0);
   $245 = HEAP8[$$03$i + $l$080$i$lcssa343 >> 0] | 0;
   if (!(1 << ($245 & 31) & HEAP32[$byteset$i + ((($245 & 255) >>> 5 & 255) << 2) >> 2])) {
    $$03$i = $$03$i + $$lcssa344 | 0;
    $z$0$i = $z$1$i;
    continue;
   }
   $256 = HEAP32[$shift$i + (($245 & 255) << 2) >> 2] | 0;
   if (($$lcssa344 | 0) != ($256 | 0)) {
    $$03$i = $$03$i + ($$lcssa344 - $256) | 0;
    $z$0$i = $z$1$i;
    continue;
   }
   $261 = HEAP8[$181 >> 0] | 0;
   L120 : do if (!($261 << 24 >> 24)) $k$4$i = $170; else {
    $$pr$i = $261;
    $k$338$i = $170;
    while (1) {
     if ($$pr$i << 24 >> 24 != (HEAP8[$$03$i + $k$338$i >> 0] | 0)) {
      $k$338$i$lcssa = $k$338$i;
      break;
     }
     $k$338$i = $k$338$i + 1 | 0;
     $$pr$i = HEAP8[$n + $k$338$i >> 0] | 0;
     if (!($$pr$i << 24 >> 24)) {
      $k$4$i = $170;
      break L120;
     }
    }
    $$03$i = $$03$i + ($k$338$i$lcssa - $ip$1$ip$0$i) | 0;
    $z$0$i = $z$1$i;
    continue L106;
   } while (0);
   do {
    if (!$k$4$i) {
     $$0$i = $$03$i;
     break L46;
    }
    $k$4$i = $k$4$i + -1 | 0;
   } while ((HEAP8[$n + $k$4$i >> 0] | 0) == (HEAP8[$$03$i + $k$4$i >> 0] | 0));
   $$03$i = $$03$i + $p$3155$i | 0;
   $z$0$i = $z$1$i;
  }
 } while (0);
 $$0 = $$0$i;
 STACKTOP = sp;
 return $$0 | 0;
}

function _singlestep($L) {
 $L = $L | 0;
 var $$0 = 0, $$02$i$i = 0, $$02$i16$i = 0, $$lcssa = 0, $$lcssa71 = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa78 = 0, $$lcssa84 = 0, $0 = 0, $1 = 0, $109 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $138 = 0, $14 = 0, $141 = 0, $147 = 0, $151 = 0, $152 = 0, $166 = 0, $167 = 0, $170 = 0, $178 = 0, $179 = 0, $182 = 0, $186 = 0, $187 = 0, $189 = 0, $192 = 0, $193 = 0, $199 = 0, $2 = 0, $214 = 0, $217 = 0, $221 = 0, $222 = 0, $224 = 0, $227 = 0, $228 = 0, $234 = 0, $25 = 0, $251 = 0, $257 = 0, $260 = 0, $263 = 0, $264 = 0, $265 = 0, $268 = 0, $269 = 0, $270 = 0, $276 = 0, $277 = 0, $278 = 0, $282 = 0, $284 = 0, $285 = 0, $287 = 0, $289 = 0, $290 = 0, $293 = 0, $294 = 0, $299 = 0, $305 = 0, $309 = 0, $311 = 0, $314 = 0, $32 = 0, $33 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $63 = 0, $68 = 0, $7 = 0, $76 = 0, $81 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L$idx$val$i = 0, $changed$0$ph$i$i = 0, $changed$0$ph$i$i$lcssa = 0, $changed$0$ph$i8$i = 0, $changed$0$ph$i8$i$lcssa = 0, $i$0$i$i = 0, $i$0$i1$i = 0, $i$0$lcssa = 0, $i$016 = 0, $lastnext$0$i$i = 0, $lastnext$0$i$i$lcssa = 0, $lastnext$1$ph5$i$i = 0, $lastnext$13$i$i = 0, $lastnext$13$i$i$lcssa = 0, $lastnext$13$i$i$phi = 0, $mt = 0, $n$01$i$i = 0, $n$01$i18$i = 0, $next$0$i$i = 0, $next$0$i11$i = 0, $next$0$ph$i$i = 0, $next$0$ph$i9$i = 0, $o$01$i$i = 0, $o$01$i$i2 = 0, $o$02$i$i = 0, $o$02$i$i3 = 0, $p$0$ph4$i$i = 0, $uv$03$i$i = 0, $uv$04$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $mt = sp;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 61 | 0;
 switch (HEAPU8[$2 >> 0] | 0) {
 case 2:
  {
   $5 = $1 + 64 | 0;
   $6 = $1 + 32 | 0;
   $7 = $1 + 24 | 0;
   $i$016 = 0;
   while (1) {
    $276 = HEAP32[$5 >> 2] | 0;
    $277 = $276 + $i$016 | 0;
    $278 = HEAP32[$6 >> 2] | 0;
    if (($277 | 0) >= ($278 | 0)) {
     $285 = $276;
     $287 = $278;
     $i$0$lcssa = $i$016;
     break;
    }
    _sweeplist($L, (HEAP32[$7 >> 2] | 0) + ($277 << 2) | 0, -3) | 0;
    $282 = $i$016 + 1 | 0;
    if (($282 | 0) < 80) $i$016 = $282; else {
     $$lcssa84 = $282;
     label = 93;
     break;
    }
   }
   if ((label | 0) == 93) {
    $285 = HEAP32[$5 >> 2] | 0;
    $287 = HEAP32[$6 >> 2] | 0;
    $i$0$lcssa = $$lcssa84;
   }
   $284 = $285 + $i$0$lcssa | 0;
   HEAP32[$5 >> 2] = $284;
   if (($284 | 0) >= ($287 | 0)) HEAP8[$2 >> 0] = 3;
   $$0 = $i$0$lcssa * 5 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 5:
  {
   $11 = $1 + 16 | 0;
   HEAP32[$11 >> 2] = HEAP32[$1 + 32 >> 2] << 2;
   $12 = $1 + 84 | 0;
   HEAP32[$12 >> 2] = 0;
   HEAP32[$12 + 4 >> 2] = 0;
   HEAP32[$12 + 8 >> 2] = 0;
   HEAP32[$12 + 12 >> 2] = 0;
   HEAP32[$12 + 16 >> 2] = 0;
   $14 = HEAP32[$1 + 172 >> 2] | 0;
   if ($14) if (HEAP8[$14 + 5 >> 0] & 3) _reallymarkobject($1, $14);
   if (HEAP32[$1 + 48 >> 2] & 64) {
    $25 = HEAP32[$1 + 40 >> 2] | 0;
    if (HEAP8[$25 + 5 >> 0] & 3) _reallymarkobject($1, $25);
   }
   _markmt($1);
   $o$01$i$i = HEAP32[$1 + 104 >> 2] | 0;
   if ($o$01$i$i) {
    $32 = $1 + 60 | 0;
    $o$02$i$i = $o$01$i$i;
    do {
     $33 = $o$02$i$i + 5 | 0;
     HEAP8[$33 >> 0] = HEAPU8[$32 >> 0] & 3 | HEAPU8[$33 >> 0] & 184;
     _reallymarkobject($1, $o$02$i$i);
     $o$02$i$i = HEAP32[$o$02$i$i >> 2] | 0;
    } while (($o$02$i$i | 0) != 0);
   }
   HEAP8[$2 >> 0] = 0;
   $$0 = HEAP32[$11 >> 2] | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 0:
  {
   $44 = $1 + 84 | 0;
   if (HEAP32[$44 >> 2] | 0) {
    $47 = $1 + 16 | 0;
    $48 = HEAP32[$47 >> 2] | 0;
    _propagatemark($1);
    $$0 = (HEAP32[$47 >> 2] | 0) - $48 | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP8[$2 >> 0] = 1;
   $51 = $1 + 16 | 0;
   $52 = HEAP32[$51 >> 2] | 0;
   $53 = $1 + 20 | 0;
   HEAP32[$53 >> 2] = $52;
   if (HEAP8[$L + 5 >> 0] & 3) _reallymarkobject($1, $L);
   if (HEAP32[$1 + 48 >> 2] & 64) {
    $63 = HEAP32[$1 + 40 >> 2] | 0;
    if (HEAP8[$63 + 5 >> 0] & 3) _reallymarkobject($1, $63);
   }
   _markmt($1);
   $68 = $1 + 112 | 0;
   $uv$03$i$i = HEAP32[$1 + 128 + 4 >> 2] | 0;
   if (($uv$03$i$i | 0) != ($68 | 0)) {
    $uv$04$i$i = $uv$03$i$i;
    do {
     if (!(HEAP8[$uv$04$i$i + 5 >> 0] & 7)) {
      $76 = HEAP32[$uv$04$i$i + 8 >> 2] | 0;
      if (HEAP32[$76 + 8 >> 2] & 64) {
       $81 = HEAP32[$76 >> 2] | 0;
       if (HEAP8[$81 + 5 >> 0] & 3) _reallymarkobject($1, $81);
      }
     }
     $uv$04$i$i = HEAP32[$uv$04$i$i + 16 + 4 >> 2] | 0;
    } while (($uv$04$i$i | 0) != ($68 | 0));
   }
   if (HEAP32[$44 >> 2] | 0) do _propagatemark($1); while ((HEAP32[$44 >> 2] | 0) != 0);
   $93 = (HEAP32[$51 >> 2] | 0) - $52 | 0;
   $94 = $1 + 92 | 0;
   $95 = HEAP32[$94 >> 2] | 0;
   $96 = $1 + 88 | 0;
   $97 = HEAP32[$96 >> 2] | 0;
   $98 = $1 + 96 | 0;
   $99 = HEAP32[$98 >> 2] | 0;
   HEAP32[$98 >> 2] = 0;
   HEAP32[$96 >> 2] = 0;
   HEAP32[$94 >> 2] = 0;
   HEAP32[$44 >> 2] = $97;
   if ($97) do _propagatemark($1); while ((HEAP32[$44 >> 2] | 0) != 0);
   HEAP32[$44 >> 2] = $95;
   if ($95) do _propagatemark($1); while ((HEAP32[$44 >> 2] | 0) != 0);
   HEAP32[$44 >> 2] = $99;
   if ($99) do _propagatemark($1); while ((HEAP32[$44 >> 2] | 0) != 0);
   $109 = HEAP32[$51 >> 2] | 0;
   while (1) {
    $110 = HEAP32[$98 >> 2] | 0;
    HEAP32[$98 >> 2] = 0;
    $changed$0$ph$i$i = 0;
    $next$0$ph$i$i = $110;
    L67 : while (1) {
     $next$0$i$i = $next$0$ph$i$i;
     while (1) {
      if (!$next$0$i$i) {
       $changed$0$ph$i$i$lcssa = $changed$0$ph$i$i;
       break L67;
      }
      $113 = HEAP32[$next$0$i$i + 24 >> 2] | 0;
      if (!(_traverseephemeron($1, $next$0$i$i) | 0)) $next$0$i$i = $113; else {
       $$lcssa78 = $113;
       break;
      }
     }
     if (!(HEAP32[$44 >> 2] | 0)) {
      $changed$0$ph$i$i = 1;
      $next$0$ph$i$i = $$lcssa78;
      continue;
     }
     while (1) {
      _propagatemark($1);
      if (!(HEAP32[$44 >> 2] | 0)) {
       $changed$0$ph$i$i = 1;
       $next$0$ph$i$i = $$lcssa78;
       continue L67;
      }
     }
    }
    if (!$changed$0$ph$i$i$lcssa) break;
   }
   _clearvalues($1, HEAP32[$94 >> 2] | 0, 0);
   $122 = $1 + 100 | 0;
   _clearvalues($1, HEAP32[$122 >> 2] | 0, 0);
   $124 = HEAP32[$94 >> 2] | 0;
   $125 = HEAP32[$122 >> 2] | 0;
   $126 = HEAP32[$51 >> 2] | 0;
   $L$idx$val$i = HEAP32[$0 >> 2] | 0;
   $lastnext$0$i$i = $L$idx$val$i + 104 | 0;
   while (1) {
    $128 = HEAP32[$lastnext$0$i$i >> 2] | 0;
    if (!$128) {
     $lastnext$0$i$i$lcssa = $lastnext$0$i$i;
     break;
    } else $lastnext$0$i$i = $128;
   }
   $131 = $93 - $109 + $126 | 0;
   $132 = $L$idx$val$i + 72 | 0;
   $133 = HEAP32[$132 >> 2] | 0;
   L80 : do if ($133) {
    $314 = $133;
    $lastnext$1$ph5$i$i = $lastnext$0$i$i$lcssa;
    $p$0$ph4$i$i = $132;
    while (1) {
     $136 = $314;
     $lastnext$13$i$i = $lastnext$1$ph5$i$i;
     while (1) {
      $135 = $136 + 5 | 0;
      $138 = HEAPU8[$135 >> 0] | 0;
      if (!($138 & 3)) {
       $$lcssa75 = $136;
       $lastnext$13$i$i$lcssa = $lastnext$13$i$i;
       break;
      }
      HEAP8[$135 >> 0] = $138 | 8;
      HEAP32[$p$0$ph4$i$i >> 2] = HEAP32[$136 >> 2];
      HEAP32[$136 >> 2] = HEAP32[$lastnext$13$i$i >> 2];
      HEAP32[$lastnext$13$i$i >> 2] = $136;
      $147 = HEAP32[$p$0$ph4$i$i >> 2] | 0;
      if (!$147) break L80; else {
       $lastnext$13$i$i$phi = $136;
       $136 = $147;
       $lastnext$13$i$i = $lastnext$13$i$i$phi;
      }
     }
     $141 = HEAP32[$$lcssa75 >> 2] | 0;
     if (!$141) break; else {
      $314 = $141;
      $lastnext$1$ph5$i$i = $lastnext$13$i$i$lcssa;
      $p$0$ph4$i$i = $$lcssa75;
     }
    }
   } while (0);
   $o$01$i$i2 = HEAP32[$1 + 104 >> 2] | 0;
   if ($o$01$i$i2) {
    $151 = $1 + 60 | 0;
    $o$02$i$i3 = $o$01$i$i2;
    do {
     $152 = $o$02$i$i3 + 5 | 0;
     HEAP8[$152 >> 0] = HEAPU8[$151 >> 0] & 3 | HEAPU8[$152 >> 0] & 184;
     _reallymarkobject($1, $o$02$i$i3);
     $o$02$i$i3 = HEAP32[$o$02$i$i3 >> 2] | 0;
    } while (($o$02$i$i3 | 0) != 0);
   }
   if (HEAP32[$44 >> 2] | 0) do _propagatemark($1); while ((HEAP32[$44 >> 2] | 0) != 0);
   $166 = HEAP32[$51 >> 2] | 0;
   while (1) {
    $167 = HEAP32[$98 >> 2] | 0;
    HEAP32[$98 >> 2] = 0;
    $changed$0$ph$i8$i = 0;
    $next$0$ph$i9$i = $167;
    L99 : while (1) {
     $next$0$i11$i = $next$0$ph$i9$i;
     while (1) {
      if (!$next$0$i11$i) {
       $changed$0$ph$i8$i$lcssa = $changed$0$ph$i8$i;
       break L99;
      }
      $170 = HEAP32[$next$0$i11$i + 24 >> 2] | 0;
      if (!(_traverseephemeron($1, $next$0$i11$i) | 0)) $next$0$i11$i = $170; else {
       $$lcssa74 = $170;
       break;
      }
     }
     if (!(HEAP32[$44 >> 2] | 0)) {
      $changed$0$ph$i8$i = 1;
      $next$0$ph$i9$i = $$lcssa74;
      continue;
     }
     while (1) {
      _propagatemark($1);
      if (!(HEAP32[$44 >> 2] | 0)) {
       $changed$0$ph$i8$i = 1;
       $next$0$ph$i9$i = $$lcssa74;
       continue L99;
      }
     }
    }
    if (!$changed$0$ph$i8$i$lcssa) break;
   }
   $178 = $131 - $166 | 0;
   $179 = HEAP32[$98 >> 2] | 0;
   if ($179) {
    $$02$i$i = $179;
    do {
     $182 = HEAP8[$$02$i$i + 7 >> 0] | 0;
     $186 = HEAP32[$$02$i$i + 16 >> 2] | 0;
     $187 = $186 + (1 << ($182 & 255) << 5) | 0;
     if ($182 << 24 >> 24 != 31) {
      $n$01$i$i = $186;
      do {
       $189 = $n$01$i$i + 8 | 0;
       do if (HEAP32[$189 >> 2] | 0) {
        $192 = $n$01$i$i + 24 | 0;
        $193 = HEAP32[$192 >> 2] | 0;
        if (!($193 & 64)) break;
        $199 = HEAP32[$n$01$i$i + 16 >> 2] | 0;
        if (($193 & 15 | 0) != 4) {
         if (!(HEAP8[$199 + 5 >> 0] & 3)) break;
         HEAP32[$189 >> 2] = 0;
         HEAP32[$192 >> 2] = 11;
         break;
        }
        if (!$199) break;
        if (!(HEAP8[$199 + 5 >> 0] & 3)) break;
        _reallymarkobject($1, $199);
       } while (0);
       $n$01$i$i = $n$01$i$i + 32 | 0;
      } while ($n$01$i$i >>> 0 < $187 >>> 0);
     }
     $$02$i$i = HEAP32[$$02$i$i + 24 >> 2] | 0;
    } while (($$02$i$i | 0) != 0);
   }
   $214 = HEAP32[$122 >> 2] | 0;
   if ($214) {
    $$02$i16$i = $214;
    do {
     $217 = HEAP8[$$02$i16$i + 7 >> 0] | 0;
     $221 = HEAP32[$$02$i16$i + 16 >> 2] | 0;
     $222 = $221 + (1 << ($217 & 255) << 5) | 0;
     if ($217 << 24 >> 24 != 31) {
      $n$01$i18$i = $221;
      do {
       $224 = $n$01$i18$i + 8 | 0;
       do if (HEAP32[$224 >> 2] | 0) {
        $227 = $n$01$i18$i + 24 | 0;
        $228 = HEAP32[$227 >> 2] | 0;
        if (!($228 & 64)) break;
        $234 = HEAP32[$n$01$i18$i + 16 >> 2] | 0;
        if (($228 & 15 | 0) != 4) {
         if (!(HEAP8[$234 + 5 >> 0] & 3)) break;
         HEAP32[$224 >> 2] = 0;
         HEAP32[$227 >> 2] = 11;
         break;
        }
        if (!$234) break;
        if (!(HEAP8[$234 + 5 >> 0] & 3)) break;
        _reallymarkobject($1, $234);
       } while (0);
       $n$01$i18$i = $n$01$i18$i + 32 | 0;
      } while ($n$01$i18$i >>> 0 < $222 >>> 0);
     }
     $$02$i16$i = HEAP32[$$02$i16$i + 24 >> 2] | 0;
    } while (($$02$i16$i | 0) != 0);
   }
   _clearvalues($1, HEAP32[$94 >> 2] | 0, $124);
   _clearvalues($1, HEAP32[$122 >> 2] | 0, $125);
   $251 = $1 + 60 | 0;
   HEAP8[$251 >> 0] = HEAPU8[$251 >> 0] ^ 3;
   $257 = $178 + (HEAP32[$51 >> 2] | 0) | 0;
   HEAP32[$53 >> 2] = (HEAP32[$53 >> 2] | 0) + $257;
   $260 = HEAP32[$0 >> 2] | 0;
   HEAP8[$260 + 61 >> 0] = 2;
   HEAP32[$260 + 64 >> 2] = 0;
   $263 = $260 + 72 | 0;
   $i$0$i$i = 0;
   while (1) {
    $264 = $i$0$i$i + 1 | 0;
    $265 = _sweeplist($L, $263, 1) | 0;
    if (($265 | 0) == ($263 | 0)) $i$0$i$i = $264; else {
     $$lcssa72 = $264;
     $$lcssa73 = $265;
     break;
    }
   }
   HEAP32[$260 + 80 >> 2] = $$lcssa73;
   $268 = $260 + 68 | 0;
   $i$0$i1$i = 0;
   while (1) {
    $269 = $i$0$i1$i + 1 | 0;
    $270 = _sweeplist($L, $268, 1) | 0;
    if (($270 | 0) == ($268 | 0)) $i$0$i1$i = $269; else {
     $$lcssa = $269;
     $$lcssa71 = $270;
     break;
    }
   }
   HEAP32[$260 + 76 >> 2] = $$lcssa71;
   $$0 = (($$lcssa + $$lcssa72 | 0) * 5 | 0) + $257 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   $289 = $1 + 80 | 0;
   $290 = HEAP32[$289 >> 2] | 0;
   if (!$290) {
    HEAP8[$2 >> 0] = 4;
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    HEAP32[$289 >> 2] = _sweeplist($L, $290, 80) | 0;
    $$0 = 400;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 4:
  {
   $293 = $1 + 76 | 0;
   $294 = HEAP32[$293 >> 2] | 0;
   if ($294) {
    HEAP32[$293 >> 2] = _sweeplist($L, $294, 80) | 0;
    $$0 = 400;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$mt >> 2] = HEAP32[$1 + 172 >> 2];
   _sweeplist($L, $mt, 1) | 0;
   $299 = HEAP32[$0 >> 2] | 0;
   if ((HEAP8[$299 + 62 >> 0] | 0) != 1) {
    $305 = (HEAP32[$299 + 32 >> 2] | 0) / 2 | 0;
    if ((HEAP32[$299 + 28 >> 2] | 0) >>> 0 < $305 >>> 0) _luaS_resize($L, $305);
    $309 = $299 + 144 | 0;
    $311 = $299 + 152 | 0;
    HEAP32[$309 >> 2] = _luaM_realloc_($L, HEAP32[$309 >> 2] | 0, HEAP32[$311 >> 2] | 0, 0) | 0;
    HEAP32[$311 >> 2] = 0;
   }
   HEAP8[$2 >> 0] = 5;
   $$0 = 5;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function _propagatemark($g) {
 $g = $g | 0;
 var $$0$i$i$i = 0, $$lcssa$i = 0, $$lcssa$i12 = 0, $$lcssa$i4 = 0, $$lcssa41 = 0, $$ph8$i = 0, $$ph9$i = 0, $$pr$pre$i = 0, $$pr7$i = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $116 = 0, $12 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $132 = 0, $140 = 0, $146 = 0, $148 = 0, $167 = 0, $173 = 0, $174 = 0, $178 = 0, $185 = 0, $186 = 0, $192 = 0, $193 = 0, $2 = 0, $201 = 0, $207 = 0, $208 = 0, $21 = 0, $212 = 0, $214 = 0, $218 = 0, $219 = 0, $221 = 0, $222 = 0, $228 = 0, $233 = 0, $235 = 0, $241 = 0, $242 = 0, $247 = 0, $249 = 0, $251 = 0, $256 = 0, $262 = 0, $263 = 0, $270 = 0, $276 = 0, $277 = 0, $279 = 0, $280 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $301 = 0, $304 = 0, $312 = 0, $313 = 0, $314 = 0, $316 = 0, $319 = 0, $327 = 0, $33 = 0, $330 = 0, $338 = 0, $34 = 0, $348 = 0, $353 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $4 = 0, $44 = 0, $48 = 0, $49 = 0, $53 = 0, $55 = 0, $58 = 0, $61 = 0, $69 = 0, $75 = 0, $80 = 0, $93 = 0, $95 = 0, $97 = 0, $ci$04$i = 0, $hasclears$0$lcssa$i$i = 0, $hasclears$03$i$i = 0, $hasclears$1$i$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$016$i = 0, $i$03$i$i = 0, $i$113$i = 0, $i$210$i = 0, $i$39$i = 0, $n$0$lcssa$i = 0, $n$01$i$i = 0, $n$01$i1$i = 0, $n$03$i = 0, $n$1$i = 0, $o$0$lcssa$i = 0, $o$06$i = 0, $o$12$i = 0, $size$0 = 0, label = 0;
 $0 = $g + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 5 | 0;
 $4 = HEAPU8[$2 >> 0] | 0;
 HEAP8[$2 >> 0] = $4 | 4;
 switch (HEAPU8[$1 + 4 >> 0] | 0) {
 case 6:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
   $167 = HEAP32[$1 + 12 >> 2] | 0;
   if ($167) if (HEAP8[$167 + 5 >> 0] & 3) _reallymarkobject($g, $167);
   $173 = $1 + 6 | 0;
   $174 = HEAP8[$173 >> 0] | 0;
   if (!($174 << 24 >> 24)) $$lcssa$i = $174 & 255; else {
    $357 = $174;
    $i$01$i = 0;
    while (1) {
     $178 = HEAP32[$1 + 16 + ($i$01$i << 2) >> 2] | 0;
     if (!$178) $186 = $357; else if (!(HEAP8[$178 + 5 >> 0] & 3)) $186 = $357; else {
      _reallymarkobject($g, $178);
      $186 = HEAP8[$173 >> 0] | 0;
     }
     $i$01$i = $i$01$i + 1 | 0;
     $185 = $186 & 255;
     if (($i$01$i | 0) >= ($185 | 0)) {
      $$lcssa$i = $185;
      break;
     } else $357 = $186;
    }
   }
   $size$0 = ($$lcssa$i << 2) + 16 | 0;
   break;
  }
 case 9:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 72 >> 2];
   $262 = $1 + 32 | 0;
   $263 = HEAP32[$262 >> 2] | 0;
   if ($263) if (HEAP8[$263 + 5 >> 0] & 3) HEAP32[$262 >> 2] = 0;
   $270 = HEAP32[$1 + 36 >> 2] | 0;
   if ($270) if (HEAP8[$270 + 5 >> 0] & 3) _reallymarkobject($g, $270);
   $276 = $1 + 44 | 0;
   $277 = HEAP32[$276 >> 2] | 0;
   if (($277 | 0) > 0) {
    $279 = $1 + 8 | 0;
    $360 = $277;
    $i$016$i = 0;
    while (1) {
     $284 = HEAP32[$279 >> 2] | 0;
     if (!(HEAP32[$284 + ($i$016$i << 4) + 8 >> 2] & 64)) $297 = $360; else {
      $290 = HEAP32[$284 + ($i$016$i << 4) >> 2] | 0;
      if (!(HEAP8[$290 + 5 >> 0] & 3)) $297 = $360; else {
       _reallymarkobject($g, $290);
       $297 = HEAP32[$276 >> 2] | 0;
      }
     }
     $i$016$i = $i$016$i + 1 | 0;
     if (($i$016$i | 0) >= ($297 | 0)) break; else $360 = $297;
    }
   }
   $280 = $1 + 40 | 0;
   $281 = HEAP32[$280 >> 2] | 0;
   if (($281 | 0) > 0) {
    $283 = $1 + 28 | 0;
    $361 = $281;
    $i$113$i = 0;
    while (1) {
     $304 = HEAP32[(HEAP32[$283 >> 2] | 0) + ($i$113$i << 3) >> 2] | 0;
     if (!$304) $312 = $361; else if (!(HEAP8[$304 + 5 >> 0] & 3)) $312 = $361; else {
      _reallymarkobject($g, $304);
      $312 = HEAP32[$280 >> 2] | 0;
     }
     $i$113$i = $i$113$i + 1 | 0;
     if (($i$113$i | 0) >= ($312 | 0)) break; else $361 = $312;
    }
   }
   $298 = $1 + 56 | 0;
   $299 = HEAP32[$298 >> 2] | 0;
   if (($299 | 0) > 0) {
    $301 = $1 + 16 | 0;
    $363 = $299;
    $i$210$i = 0;
    while (1) {
     $319 = HEAP32[(HEAP32[$301 >> 2] | 0) + ($i$210$i << 2) >> 2] | 0;
     if (!$319) $327 = $363; else if (!(HEAP8[$319 + 5 >> 0] & 3)) $327 = $363; else {
      _reallymarkobject($g, $319);
      $327 = HEAP32[$298 >> 2] | 0;
     }
     $i$210$i = $i$210$i + 1 | 0;
     if (($i$210$i | 0) >= ($327 | 0)) {
      $362 = $327;
      break;
     } else $363 = $327;
    }
   } else $362 = $299;
   $313 = $1 + 60 | 0;
   $314 = HEAP32[$313 >> 2] | 0;
   if (($314 | 0) > 0) {
    $316 = $1 + 24 | 0;
    $364 = $314;
    $i$39$i = 0;
    while (1) {
     $330 = HEAP32[(HEAP32[$316 >> 2] | 0) + ($i$39$i * 12 | 0) >> 2] | 0;
     if (!$330) $338 = $364; else if (!(HEAP8[$330 + 5 >> 0] & 3)) $338 = $364; else {
      _reallymarkobject($g, $330);
      $338 = HEAP32[$313 >> 2] | 0;
     }
     $i$39$i = $i$39$i + 1 | 0;
     if (($i$39$i | 0) >= ($338 | 0)) {
      $$lcssa41 = $338;
      break;
     } else $364 = $338;
    }
    $$lcssa$i12 = $$lcssa41;
    $348 = HEAP32[$298 >> 2] | 0;
   } else {
    $$lcssa$i12 = $314;
    $348 = $362;
   }
   $size$0 = ($$lcssa$i12 * 12 | 0) + 80 + (HEAP32[$276 >> 2] << 4) + (HEAP32[$280 >> 2] << 3) + ((HEAP32[$1 + 48 >> 2] | 0) + $348 + (HEAP32[$1 + 52 >> 2] | 0) << 2) | 0;
   break;
  }
 case 5:
  {
   $10 = $1 + 24 | 0;
   HEAP32[$0 >> 2] = HEAP32[$10 >> 2];
   $12 = $1 + 8 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   do if (!$13) label = 34; else {
    if (!(HEAP8[$13 + 6 >> 0] & 8)) {
     $21 = _luaT_gettm($13, 3, HEAP32[$g + 196 >> 2] | 0) | 0;
     $$pr$pre$i = HEAP32[$12 >> 2] | 0;
     if (!$$pr$pre$i) $$ph9$i = $21; else {
      $$ph8$i = $21;
      $$pr7$i = $$pr$pre$i;
      label = 5;
     }
    } else {
     $$ph8$i = 0;
     $$pr7$i = $13;
     label = 5;
    }
    if ((label | 0) == 5) if (!(HEAP8[$$pr7$i + 5 >> 0] & 3)) $$ph9$i = $$ph8$i; else {
     _reallymarkobject($g, $$pr7$i);
     $$ph9$i = $$ph8$i;
    }
    if (!$$ph9$i) label = 34; else if ((HEAP32[$$ph9$i + 8 >> 2] & 15 | 0) == 4) {
     $33 = (HEAP32[$$ph9$i >> 2] | 0) + 16 | 0;
     $34 = _strchr($33, 107) | 0;
     $36 = ($34 | 0) != 0;
     $37 = (_strchr($33, 118) | 0) != 0;
     if ($36 | $37) {
      HEAP8[$2 >> 0] = HEAPU8[$2 >> 0] & 251;
      if ($36) if ($37) {
       $97 = $g + 100 | 0;
       HEAP32[$10 >> 2] = HEAP32[$97 >> 2];
       HEAP32[$97 >> 2] = $1;
       break;
      } else {
       _traverseephemeron($g, $1) | 0;
       break;
      }
      $44 = HEAP8[$1 + 7 >> 0] | 0;
      $48 = HEAP32[$1 + 16 >> 2] | 0;
      $49 = $48 + (1 << ($44 & 255) << 5) | 0;
      $53 = (HEAP32[$1 + 28 >> 2] | 0) > 0 & 1;
      if ($44 << 24 >> 24 == 31) $hasclears$0$lcssa$i$i = $53; else {
       $hasclears$03$i$i = $53;
       $n$01$i$i = $48;
       while (1) {
        $55 = $n$01$i$i + 8 | 0;
        $58 = $n$01$i$i + 24 | 0;
        $61 = (HEAP32[$58 >> 2] & 64 | 0) == 0;
        if (!(HEAP32[$55 >> 2] | 0)) if ($61) $hasclears$1$i$i = $hasclears$03$i$i; else if (!(HEAP8[(HEAP32[$n$01$i$i + 16 >> 2] | 0) + 5 >> 0] & 3)) $hasclears$1$i$i = $hasclears$03$i$i; else {
         HEAP32[$58 >> 2] = 11;
         $hasclears$1$i$i = $hasclears$03$i$i;
        } else {
         if (!$61) {
          $69 = HEAP32[$n$01$i$i + 16 >> 2] | 0;
          if (HEAP8[$69 + 5 >> 0] & 3) _reallymarkobject($g, $69);
         }
         if (!$hasclears$03$i$i) {
          $75 = HEAP32[$55 >> 2] | 0;
          do if (!($75 & 64)) $$0$i$i$i = 0; else {
           $80 = HEAP32[$n$01$i$i >> 2] | 0;
           if (($75 & 15 | 0) != 4) {
            $$0$i$i$i = HEAPU8[$80 + 5 >> 0] & 3;
            break;
           }
           if (!$80) $$0$i$i$i = 0; else if (!(HEAP8[$80 + 5 >> 0] & 3)) $$0$i$i$i = 0; else {
            _reallymarkobject($g, $80);
            $$0$i$i$i = 0;
           }
          } while (0);
          $hasclears$1$i$i = ($$0$i$i$i | 0) != 0 & 1;
         } else $hasclears$1$i$i = $hasclears$03$i$i;
        }
        $n$01$i$i = $n$01$i$i + 32 | 0;
        if ($n$01$i$i >>> 0 >= $49 >>> 0) {
         $hasclears$0$lcssa$i$i = $hasclears$1$i$i;
         break;
        } else $hasclears$03$i$i = $hasclears$1$i$i;
       }
      }
      if (!$hasclears$0$lcssa$i$i) {
       $95 = $g + 88 | 0;
       HEAP32[$10 >> 2] = HEAP32[$95 >> 2];
       HEAP32[$95 >> 2] = $1;
       break;
      } else {
       $93 = $g + 92 | 0;
       HEAP32[$10 >> 2] = HEAP32[$93 >> 2];
       HEAP32[$93 >> 2] = $1;
       break;
      }
     } else label = 34;
    } else label = 34;
   } while (0);
   if ((label | 0) == 34) {
    $103 = $1 + 16 | 0;
    $104 = HEAP32[$103 >> 2] | 0;
    $105 = $104 + (1 << HEAPU8[$1 + 7 >> 0] << 5) | 0;
    $106 = $1 + 28 | 0;
    $107 = HEAP32[$106 >> 2] | 0;
    if (($107 | 0) > 0) {
     $109 = $1 + 12 | 0;
     $356 = $107;
     $i$03$i$i = 0;
     while (1) {
      $110 = HEAP32[$109 >> 2] | 0;
      if (!(HEAP32[$110 + ($i$03$i$i << 4) + 8 >> 2] & 64)) $123 = $356; else {
       $116 = HEAP32[$110 + ($i$03$i$i << 4) >> 2] | 0;
       if (!(HEAP8[$116 + 5 >> 0] & 3)) $123 = $356; else {
        _reallymarkobject($g, $116);
        $123 = HEAP32[$106 >> 2] | 0;
       }
      }
      $i$03$i$i = $i$03$i$i + 1 | 0;
      if (($i$03$i$i | 0) >= ($123 | 0)) break; else $356 = $123;
     }
     $124 = HEAP32[$103 >> 2] | 0;
    } else $124 = $104;
    if ($124 >>> 0 < $105 >>> 0) {
     $n$01$i1$i = $124;
     do {
      $126 = $n$01$i1$i + 8 | 0;
      $127 = HEAP32[$126 >> 2] | 0;
      $129 = $n$01$i1$i + 24 | 0;
      $132 = (HEAP32[$129 >> 2] & 64 | 0) == 0;
      if (!$127) {
       if (!$132) if (HEAP8[(HEAP32[$n$01$i1$i + 16 >> 2] | 0) + 5 >> 0] & 3) HEAP32[$129 >> 2] = 11;
      } else {
       if ($132) $146 = $127; else {
        $140 = HEAP32[$n$01$i1$i + 16 >> 2] | 0;
        if (!(HEAP8[$140 + 5 >> 0] & 3)) $146 = $127; else {
         _reallymarkobject($g, $140);
         $146 = HEAP32[$126 >> 2] | 0;
        }
       }
       if ($146 & 64) {
        $148 = HEAP32[$n$01$i1$i >> 2] | 0;
        if (HEAP8[$148 + 5 >> 0] & 3) _reallymarkobject($g, $148);
       }
      }
      $n$01$i1$i = $n$01$i1$i + 32 | 0;
     } while ($n$01$i1$i >>> 0 < $105 >>> 0);
    }
   }
   $size$0 = (HEAP32[$1 + 28 >> 2] << 4) + 32 + (32 << HEAPU8[$1 + 7 >> 0]) | 0;
   break;
  }
 case 38:
  {
   HEAP32[$0 >> 2] = HEAP32[$1 + 8 >> 2];
   $192 = $1 + 6 | 0;
   $193 = HEAP8[$192 >> 0] | 0;
   if (!($193 << 24 >> 24)) $$lcssa$i4 = $193 & 255; else {
    $358 = $193;
    $i$01$i1 = 0;
    while (1) {
     if (!(HEAP32[$1 + 16 + ($i$01$i1 << 4) + 8 >> 2] & 64)) $208 = $358; else {
      $201 = HEAP32[$1 + 16 + ($i$01$i1 << 4) >> 2] | 0;
      if (!(HEAP8[$201 + 5 >> 0] & 3)) $208 = $358; else {
       _reallymarkobject($g, $201);
       $208 = HEAP8[$192 >> 0] | 0;
      }
     }
     $i$01$i1 = $i$01$i1 + 1 | 0;
     $207 = $208 & 255;
     if (($i$01$i1 | 0) >= ($207 | 0)) {
      $$lcssa$i4 = $207;
      break;
     } else $358 = $208;
    }
   }
   $size$0 = ($$lcssa$i4 << 4) + 16 | 0;
   break;
  }
 case 8:
  {
   $212 = $1 + 60 | 0;
   HEAP32[$0 >> 2] = HEAP32[$212 >> 2];
   $214 = $g + 88 | 0;
   HEAP32[$212 >> 2] = HEAP32[$214 >> 2];
   HEAP32[$214 >> 2] = $1;
   HEAP8[$2 >> 0] = $4 & 251;
   $218 = $1 + 28 | 0;
   $219 = HEAP32[$218 >> 2] | 0;
   if (!$219) $size$0 = 1; else {
    $221 = $1 + 8 | 0;
    $222 = HEAP32[$221 >> 2] | 0;
    if ($219 >>> 0 < $222 >>> 0) {
     $359 = $222;
     $o$06$i = $219;
     while (1) {
      if (!(HEAP32[$o$06$i + 8 >> 2] & 64)) $235 = $359; else {
       $228 = HEAP32[$o$06$i >> 2] | 0;
       if (!(HEAP8[$228 + 5 >> 0] & 3)) $235 = $359; else {
        _reallymarkobject($g, $228);
        $235 = HEAP32[$221 >> 2] | 0;
       }
      }
      $233 = $o$06$i + 16 | 0;
      if ($233 >>> 0 < $235 >>> 0) {
       $359 = $235;
       $o$06$i = $233;
      } else {
       $o$0$lcssa$i = $233;
       break;
      }
     }
    } else $o$0$lcssa$i = $219;
    if ((HEAP8[$g + 61 >> 0] | 0) == 1) {
     $241 = HEAP32[$1 + 32 >> 2] | 0;
     $242 = (HEAP32[$218 >> 2] | 0) + ($241 << 4) | 0;
     if ($o$0$lcssa$i >>> 0 < $242 >>> 0) {
      $o$12$i = $o$0$lcssa$i;
      do {
       HEAP32[$o$12$i + 8 >> 2] = 0;
       $o$12$i = $o$12$i + 16 | 0;
      } while ($o$12$i >>> 0 < $242 >>> 0);
      $256 = $241;
      $n$1$i = 0;
     } else {
      $256 = $241;
      $n$1$i = 0;
     }
    } else {
     $247 = $1 + 72 | 0;
     $249 = HEAP32[$1 + 16 >> 2] | 0;
     if (($247 | 0) == ($249 | 0)) $n$0$lcssa$i = 0; else {
      $ci$04$i = $247;
      $n$03$i = 0;
      while (1) {
       $251 = $n$03$i + 1 | 0;
       $ci$04$i = HEAP32[$ci$04$i + 12 >> 2] | 0;
       if (($ci$04$i | 0) == ($249 | 0)) {
        $n$0$lcssa$i = $251;
        break;
       } else $n$03$i = $251;
      }
     }
     $256 = HEAP32[$1 + 32 >> 2] | 0;
     $n$1$i = $n$0$lcssa$i;
    }
    $size$0 = ($256 << 4) + 112 + ($n$1$i * 40 | 0) | 0;
   }
   break;
  }
 default:
  return;
 }
 $353 = $g + 16 | 0;
 HEAP32[$353 >> 2] = (HEAP32[$353 >> 2] | 0) + $size$0;
 return;
}

function _DumpFunction($f, $D) {
 $f = $f | 0;
 $D = $D | 0;
 var $$ph = 0, $0 = 0, $102 = 0, $107 = 0, $11 = 0, $113 = 0, $114 = 0, $120 = 0, $128 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $146 = 0, $148 = 0, $153 = 0, $154 = 0, $155 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $170 = 0, $175 = 0, $177 = 0, $179 = 0, $184 = 0, $186 = 0, $190 = 0, $192 = 0, $199 = 0, $205 = 0, $208 = 0, $21 = 0, $210 = 0, $223 = 0, $224 = 0, $225 = 0, $227 = 0, $230 = 0, $232 = 0, $238 = 0, $24 = 0, $243 = 0, $244 = 0, $251 = 0, $253 = 0, $254 = 0, $255 = 0, $258 = 0, $260 = 0, $265 = 0, $273 = 0, $280 = 0, $281 = 0, $284 = 0, $289 = 0, $291 = 0, $293 = 0, $298 = 0, $3 = 0, $303 = 0, $304 = 0, $31 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $318 = 0, $320 = 0, $325 = 0, $333 = 0, $34 = 0, $340 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $4 = 0, $41 = 0, $44 = 0, $51 = 0, $53 = 0, $55 = 0, $56 = 0, $58 = 0, $61 = 0, $63 = 0, $66 = 0, $71 = 0, $73 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $92 = 0, $97 = 0, $98 = 0, $99 = 0, $i$0$i21 = 0, $i$013$i = 0, $i$03$i = 0, $i$1$i20 = 0, $i$112$i = 0, $size1$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $size1$i$i12 = sp + 8 | 0;
 HEAP32[$0 >> 2] = HEAP32[$f + 64 >> 2];
 $3 = $D + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (!$4) {
  $11 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $11;
  $14 = $11;
 } else $14 = $4;
 HEAP32[$0 >> 2] = HEAP32[$f + 68 >> 2];
 if (!$14) {
  $21 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $21;
  $24 = $21;
 } else $24 = $14;
 HEAP8[$0 >> 0] = HEAP8[$f + 76 >> 0] | 0;
 if (!$24) {
  $31 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $31;
  $34 = $31;
 } else $34 = $24;
 HEAP8[$0 >> 0] = HEAP8[$f + 77 >> 0] | 0;
 if (!$34) {
  $41 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $41;
  $44 = $41;
 } else $44 = $34;
 HEAP8[$0 >> 0] = HEAP8[$f + 78 >> 0] | 0;
 if (!$44) {
  $51 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $51;
  $56 = $51;
 } else $56 = $44;
 $53 = HEAP32[$f + 12 >> 2] | 0;
 $55 = HEAP32[$f + 48 >> 2] | 0;
 HEAP32[$0 >> 2] = $55;
 if (!$56) {
  $58 = $D + 4 | 0;
  $61 = $D + 8 | 0;
  $63 = FUNCTION_TABLE_iiiii[HEAP32[$58 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$61 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $63;
  if (!$63) {
   $71 = FUNCTION_TABLE_iiiii[HEAP32[$58 >> 2] & 31](HEAP32[$D >> 2] | 0, $53, $55 << 2, HEAP32[$61 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $71;
   $73 = HEAP32[$f + 44 >> 2] | 0;
   HEAP32[$0 >> 2] = $73;
   if (!$71) {
    $80 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $80;
    $342 = $0;
    $343 = $80;
    $81 = $73;
   } else {
    $342 = $0;
    $343 = $71;
    $81 = $73;
   }
  } else {
   $$ph = $63;
   label = 14;
  }
 } else {
  $$ph = $56;
  label = 14;
 }
 if ((label | 0) == 14) {
  $66 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$0 >> 2] = $66;
  $342 = $0;
  $343 = $$ph;
  $81 = $66;
 }
 if (($81 | 0) > 0) {
  $83 = $f + 8 | 0;
  $84 = $D + 4 | 0;
  $85 = $D + 8 | 0;
  $92 = $343;
  $i$0$i21 = 0;
  while (1) {
   $86 = HEAP32[$83 >> 2] | 0;
   $87 = $86 + ($i$0$i21 << 4) | 0;
   $88 = $86 + ($i$0$i21 << 4) + 8 | 0;
   $89 = HEAP32[$88 >> 2] | 0;
   HEAP8[$0 >> 0] = $89 & 15;
   if (!$92) {
    $97 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$85 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $97;
    $102 = $97;
    $99 = HEAP32[$88 >> 2] | 0;
   } else {
    $102 = $92;
    $99 = $89;
   }
   $98 = $99 & 15;
   if (($98 | 0) == 4) {
    $114 = HEAP32[$87 >> 2] | 0;
    if (!$114) {
     HEAP32[$0 >> 2] = 0;
     if (!$102) {
      $120 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$85 >> 2] | 0) | 0;
      HEAP32[$3 >> 2] = $120;
      $347 = $120;
     } else $347 = $102;
    } else {
     HEAP32[$size1$i$i12 >> 2] = (HEAP32[$114 + 12 >> 2] | 0) + 1;
     if (!$102) {
      $128 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $size1$i$i12, 4, HEAP32[$85 >> 2] | 0) | 0;
      HEAP32[$3 >> 2] = $128;
      if (!$128) {
       $135 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $114 + 16 | 0, HEAP32[$size1$i$i12 >> 2] | 0, HEAP32[$85 >> 2] | 0) | 0;
       HEAP32[$3 >> 2] = $135;
       $347 = $135;
      } else $347 = $128;
     } else $347 = $102;
    }
    $344 = $347;
   } else if (($98 | 0) == 3) {
    HEAPF64[$0 >> 3] = +HEAPF64[$87 >> 3];
    if (!$102) {
     $113 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 8, HEAP32[$85 >> 2] | 0) | 0;
     HEAP32[$3 >> 2] = $113;
     $346 = $113;
    } else $346 = $102;
    $344 = $346;
   } else if (($98 | 0) == 1) {
    HEAP8[$0 >> 0] = HEAP32[$87 >> 2];
    if (!$102) {
     $107 = FUNCTION_TABLE_iiiii[HEAP32[$84 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$85 >> 2] | 0) | 0;
     HEAP32[$3 >> 2] = $107;
     $345 = $107;
    } else $345 = $102;
    $344 = $345;
   } else $344 = $102;
   $i$0$i21 = $i$0$i21 + 1 | 0;
   if (($i$0$i21 | 0) == ($81 | 0)) {
    $139 = $344;
    break;
   } else $92 = $344;
  }
 } else $139 = $343;
 $138 = HEAP32[$f + 56 >> 2] | 0;
 HEAP32[$0 >> 2] = $138;
 if (!$139) {
  $146 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $146;
  $348 = $146;
 } else $348 = $139;
 if (($138 | 0) > 0) {
  $148 = $f + 16 | 0;
  $i$1$i20 = 0;
  do {
   _DumpFunction(HEAP32[(HEAP32[$148 >> 2] | 0) + ($i$1$i20 << 2) >> 2] | 0, $D);
   $i$1$i20 = $i$1$i20 + 1 | 0;
  } while (($i$1$i20 | 0) != ($138 | 0));
  $155 = HEAP32[$3 >> 2] | 0;
 } else $155 = $348;
 $153 = $f + 40 | 0;
 $154 = HEAP32[$153 >> 2] | 0;
 HEAP32[$0 >> 2] = $154;
 if (!$155) {
  $162 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $162;
  $349 = $162;
 } else $349 = $155;
 if (($154 | 0) > 0) {
  $164 = $f + 28 | 0;
  $165 = $D + 4 | 0;
  $166 = $D + 8 | 0;
  $170 = $349;
  $i$03$i = 0;
  while (1) {
   $167 = HEAP32[$164 >> 2] | 0;
   HEAP8[$0 >> 0] = HEAP8[$167 + ($i$03$i << 3) + 4 >> 0] | 0;
   if (!$170) {
    $175 = FUNCTION_TABLE_iiiii[HEAP32[$165 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$166 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $175;
    $177 = HEAP32[$164 >> 2] | 0;
    $179 = $175;
   } else {
    $177 = $167;
    $179 = $170;
   }
   HEAP8[$0 >> 0] = HEAP8[$177 + ($i$03$i << 3) + 5 >> 0] | 0;
   if (!$179) {
    $184 = FUNCTION_TABLE_iiiii[HEAP32[$165 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 1, HEAP32[$166 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $184;
    $350 = $184;
   } else $350 = $179;
   $i$03$i = $i$03$i + 1 | 0;
   if (($i$03$i | 0) == ($154 | 0)) {
    $192 = $350;
    break;
   } else $170 = $350;
  }
 } else $192 = $349;
 $186 = $D + 12 | 0;
 if (!(HEAP32[$186 >> 2] | 0)) {
  $190 = HEAP32[$f + 36 >> 2] | 0;
  if (!$190) {
   $199 = $0;
   $351 = $size1$i$i12;
   label = 54;
  } else {
   HEAP32[$size1$i$i12 >> 2] = (HEAP32[$190 + 12 >> 2] | 0) + 1;
   if (!$192) {
    $205 = $D + 4 | 0;
    $208 = $D + 8 | 0;
    $210 = FUNCTION_TABLE_iiiii[HEAP32[$205 >> 2] & 31](HEAP32[$D >> 2] | 0, $size1$i$i12, 4, HEAP32[$208 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $210;
    if (!$210) {
     HEAP32[$3 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[$205 >> 2] & 31](HEAP32[$D >> 2] | 0, $190 + 16 | 0, HEAP32[$size1$i$i12 >> 2] | 0, HEAP32[$208 >> 2] | 0) | 0;
     $352 = $size1$i$i12;
     $353 = $0;
    } else {
     $352 = $size1$i$i12;
     $353 = $0;
    }
   } else {
    $352 = $size1$i$i12;
    $353 = $0;
   }
  }
 } else {
  $199 = $0;
  $351 = $size1$i$i12;
  label = 54;
 }
 if ((label | 0) == 54) {
  HEAP32[$0 >> 2] = 0;
  if (!$192) {
   HEAP32[$3 >> 2] = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $199, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
   $352 = $351;
   $353 = $199;
  } else {
   $352 = $351;
   $353 = $199;
  }
 }
 if (!(HEAP32[$186 >> 2] | 0)) $224 = HEAP32[$f + 52 >> 2] | 0; else $224 = 0;
 $223 = HEAP32[$f + 20 >> 2] | 0;
 HEAP32[$0 >> 2] = $224;
 $225 = HEAP32[$3 >> 2] | 0;
 if (!$225) {
  $227 = $D + 4 | 0;
  $230 = $D + 8 | 0;
  $232 = FUNCTION_TABLE_iiiii[HEAP32[$227 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$230 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $232;
  if (!$232) {
   $238 = FUNCTION_TABLE_iiiii[HEAP32[$227 >> 2] & 31](HEAP32[$D >> 2] | 0, $223, $224 << 2, HEAP32[$230 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $238;
   $244 = $238;
  } else $244 = $232;
 } else $244 = $225;
 if (!(HEAP32[$186 >> 2] | 0)) $243 = HEAP32[$f + 60 >> 2] | 0; else $243 = 0;
 HEAP32[$0 >> 2] = $243;
 if (!$244) {
  $251 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $251;
  $354 = $251;
 } else $354 = $244;
 if (($243 | 0) > 0) {
  $253 = $f + 24 | 0;
  $254 = $D + 4 | 0;
  $255 = $D + 8 | 0;
  $260 = $354;
  $i$013$i = 0;
  while (1) {
   $258 = HEAP32[(HEAP32[$253 >> 2] | 0) + ($i$013$i * 12 | 0) >> 2] | 0;
   do if (!$258) {
    HEAP32[$0 >> 2] = 0;
    if ($260) {
     $284 = $260;
     break;
    }
    $265 = FUNCTION_TABLE_iiiii[HEAP32[$254 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$255 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $265;
    $284 = $265;
   } else {
    HEAP32[$size1$i$i12 >> 2] = (HEAP32[$258 + 12 >> 2] | 0) + 1;
    if ($260) {
     $284 = $260;
     break;
    }
    $273 = FUNCTION_TABLE_iiiii[HEAP32[$254 >> 2] & 31](HEAP32[$D >> 2] | 0, $size1$i$i12, 4, HEAP32[$255 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $273;
    if ($273) {
     $284 = $273;
     break;
    }
    $280 = FUNCTION_TABLE_iiiii[HEAP32[$254 >> 2] & 31](HEAP32[$D >> 2] | 0, $258 + 16 | 0, HEAP32[$size1$i$i12 >> 2] | 0, HEAP32[$255 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $280;
    $284 = $280;
   } while (0);
   $281 = HEAP32[$253 >> 2] | 0;
   HEAP32[$0 >> 2] = HEAP32[$281 + ($i$013$i * 12 | 0) + 4 >> 2];
   if (!$284) {
    $289 = FUNCTION_TABLE_iiiii[HEAP32[$254 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$255 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $289;
    $291 = HEAP32[$253 >> 2] | 0;
    $293 = $289;
   } else {
    $291 = $281;
    $293 = $284;
   }
   HEAP32[$0 >> 2] = HEAP32[$291 + ($i$013$i * 12 | 0) + 8 >> 2];
   if (!$293) {
    $298 = FUNCTION_TABLE_iiiii[HEAP32[$254 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$255 >> 2] | 0) | 0;
    HEAP32[$3 >> 2] = $298;
    $355 = $298;
   } else $355 = $293;
   $i$013$i = $i$013$i + 1 | 0;
   if (($i$013$i | 0) == ($243 | 0)) {
    $304 = $355;
    break;
   } else $260 = $355;
  }
 } else $304 = $354;
 if (!(HEAP32[$186 >> 2] | 0)) $303 = HEAP32[$153 >> 2] | 0; else $303 = 0;
 HEAP32[$0 >> 2] = $303;
 if (!$304) {
  $311 = FUNCTION_TABLE_iiiii[HEAP32[$D + 4 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$D + 8 >> 2] | 0) | 0;
  HEAP32[$3 >> 2] = $311;
  $356 = $311;
 } else $356 = $304;
 if (($303 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $313 = $f + 28 | 0;
 $314 = $D + 4 | 0;
 $315 = $D + 8 | 0;
 $320 = $356;
 $i$112$i = 0;
 while (1) {
  $318 = HEAP32[(HEAP32[$313 >> 2] | 0) + ($i$112$i << 3) >> 2] | 0;
  do if (!$318) {
   HEAP32[$0 >> 2] = 0;
   if ($320) {
    $357 = $320;
    break;
   }
   $325 = FUNCTION_TABLE_iiiii[HEAP32[$314 >> 2] & 31](HEAP32[$D >> 2] | 0, $0, 4, HEAP32[$315 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $325;
   $357 = $325;
  } else {
   HEAP32[$size1$i$i12 >> 2] = (HEAP32[$318 + 12 >> 2] | 0) + 1;
   if ($320) {
    $357 = $320;
    break;
   }
   $333 = FUNCTION_TABLE_iiiii[HEAP32[$314 >> 2] & 31](HEAP32[$D >> 2] | 0, $size1$i$i12, 4, HEAP32[$315 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $333;
   if ($333) {
    $357 = $333;
    break;
   }
   $340 = FUNCTION_TABLE_iiiii[HEAP32[$314 >> 2] & 31](HEAP32[$D >> 2] | 0, $318 + 16 | 0, HEAP32[$size1$i$i12 >> 2] | 0, HEAP32[$315 >> 2] | 0) | 0;
   HEAP32[$3 >> 2] = $340;
   $357 = $340;
  } while (0);
  $i$112$i = $i$112$i + 1 | 0;
  if (($i$112$i | 0) == ($303 | 0)) break; else $320 = $357;
 }
 STACKTOP = sp;
 return;
}

function _exp2reg($fs, $e, $reg) {
 $fs = $fs | 0;
 $e = $e | 0;
 $reg = $reg | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i35 = 0, $$0$i$i26 = 0, $$0$i$i26$us = 0, $$0$i$i59 = 0, $$014$i = 0, $$014$i16 = 0, $$02$i = 0, $$02$i$us = 0, $$02$i42 = 0, $$lcssa = 0, $$lcssa119 = 0, $$lcssa120 = 0, $$lcssa121 = 0, $$lcssa122 = 0, $$lcssa123 = 0, $$pre88 = 0, $1 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $11 = 0, $110 = 0, $120 = 0, $122 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $135 = 0, $136 = 0, $142 = 0, $144 = 0, $152 = 0, $16 = 0, $162 = 0, $172 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $180 = 0, $185 = 0, $186 = 0, $192 = 0, $194 = 0, $2 = 0, $206 = 0, $215 = 0, $216 = 0, $218 = 0, $223 = 0, $224 = 0, $230 = 0, $239 = 0, $242 = 0, $243 = 0, $249 = 0, $25 = 0, $252 = 0, $253 = 0, $259 = 0, $26 = 0, $27 = 0, $30 = 0, $33 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $52 = 0, $58 = 0, $6 = 0, $62 = 0, $67 = 0, $68 = 0, $71 = 0, $72 = 0, $74 = 0, $79 = 0, $8 = 0, $88 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $96 = 0, $98 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i32 = 0, $fs$idx$val$idx$val$i45$pre = 0, $fs$idx$val$idx$val$i5$us$pre = 0, $fs$idx2$val$idx$val$i = 0, $fs$idx2$val$idx$val$i14 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $list$0$i$i34 = 0, $list$0$i$i34$lcssa = 0, $list$0$i$lcssa = 0, $p_f$0 = 0, $p_t$0 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge$i62 = 0, $storemerge90 = 0, $storemerge91 = 0, label = 0, $$02$i42$looptemp = 0, $$02$i$us$looptemp = 0, $$02$i$looptemp = 0;
 _discharge2reg($fs, $e, $reg);
 $1 = (HEAP32[$e >> 2] | 0) == 10;
 $2 = $e + 16 | 0;
 do if ($1) {
  $4 = HEAP32[$e + 8 >> 2] | 0;
  if (($4 | 0) != -1) {
   $6 = HEAP32[$2 >> 2] | 0;
   if (($6 | 0) == -1) {
    HEAP32[$2 >> 2] = $4;
    break;
   }
   $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
   $list$0$i = $6;
   while (1) {
    $8 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
    $9 = HEAP32[$8 >> 2] | 0;
    $11 = ($9 >>> 14) + -131071 | 0;
    $$0$i$i = ($11 | 0) == -1 ? -1 : $list$0$i + 1 + $11 | 0;
    if (($$0$i$i | 0) == -1) {
     $$lcssa122 = $8;
     $$lcssa123 = $9;
     $list$0$i$lcssa = $list$0$i;
     break;
    } else $list$0$i = $$0$i$i;
   }
   $16 = $4 + ~$list$0$i$lcssa | 0;
   if (((($16 | 0) > -1 ? $16 : 0 - $16 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
    HEAP32[$$lcssa122 >> 2] = ($16 << 14) + 2147467264 | $$lcssa123 & 16383;
    break;
   }
  }
 } while (0);
 $25 = HEAP32[$2 >> 2] | 0;
 $26 = $e + 20 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 if (($25 | 0) == ($27 | 0)) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $259 = $e + 8 | 0;
  HEAP32[$259 >> 2] = $reg;
  HEAP32[$e >> 2] = 6;
  return;
 }
 L17 : do if (($25 | 0) == -1) label = 18; else {
  $fs$idx2$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $$014$i = $25;
  while (1) {
   $30 = $fs$idx2$val$idx$val$i + ($$014$i << 2) | 0;
   if (($$014$i | 0) > 0) {
    $33 = HEAP32[$fs$idx2$val$idx$val$i + ($$014$i + -1 << 2) >> 2] | 0;
    if ((HEAP8[2216 + ($33 & 63) >> 0] | 0) < 0) $39 = $33; else label = 15;
   } else label = 15;
   if ((label | 0) == 15) {
    label = 0;
    $39 = HEAP32[$30 >> 2] | 0;
   }
   if (($39 & 63 | 0) != 28) {
    label = 25;
    break L17;
   }
   $43 = ((HEAP32[$30 >> 2] | 0) >>> 14) + -131071 | 0;
   $$014$i = ($43 | 0) == -1 ? -1 : $$014$i + 1 + $43 | 0;
   if (($$014$i | 0) == -1) {
    label = 18;
    break;
   }
  }
 } while (0);
 L27 : do if ((label | 0) == 18) if (($27 | 0) == -1) {
  $p_f$0 = -1;
  $p_t$0 = -1;
 } else {
  $fs$idx2$val$idx$val$i14 = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $$014$i16 = $27;
  while (1) {
   $49 = $fs$idx2$val$idx$val$i14 + ($$014$i16 << 2) | 0;
   if (($$014$i16 | 0) > 0) {
    $52 = HEAP32[$fs$idx2$val$idx$val$i14 + ($$014$i16 + -1 << 2) >> 2] | 0;
    if ((HEAP8[2216 + ($52 & 63) >> 0] | 0) < 0) $58 = $52; else label = 22;
   } else label = 22;
   if ((label | 0) == 22) {
    label = 0;
    $58 = HEAP32[$49 >> 2] | 0;
   }
   if (($58 & 63 | 0) != 28) {
    label = 25;
    break L27;
   }
   $62 = ((HEAP32[$49 >> 2] | 0) >>> 14) + -131071 | 0;
   $$014$i16 = ($62 | 0) == -1 ? -1 : $$014$i16 + 1 + $62 | 0;
   if (($$014$i16 | 0) == -1) {
    $p_f$0 = -1;
    $p_t$0 = -1;
    break;
   }
  }
 } while (0);
 do if ((label | 0) == 25) {
  $$pre88 = $fs + 28 | 0;
  do if ($1) $98 = -1; else {
   $67 = HEAP32[$$pre88 >> 2] | 0;
   HEAP32[$$pre88 >> 2] = -1;
   $68 = _luaK_code($fs, 2147450903) | 0;
   if (($67 | 0) == -1) $98 = $68; else if (($68 | 0) == -1) $98 = $67; else {
    $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $list$0$i$i = $68;
    while (1) {
     $71 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
     $72 = HEAP32[$71 >> 2] | 0;
     $74 = ($72 >>> 14) + -131071 | 0;
     $$0$i$i$i = ($74 | 0) == -1 ? -1 : $list$0$i$i + 1 + $74 | 0;
     if (($$0$i$i$i | 0) == -1) {
      $$lcssa120 = $71;
      $$lcssa121 = $72;
      $list$0$i$i$lcssa = $list$0$i$i;
      break;
     } else $list$0$i$i = $$0$i$i$i;
    }
    $79 = $67 + ~$list$0$i$i$lcssa | 0;
    if (((($79 | 0) > -1 ? $79 : 0 - $79 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
     HEAP32[$$lcssa120 >> 2] = ($79 << 14) + 2147467264 | $$lcssa121 & 16383;
     $98 = $68;
     break;
    }
   }
  } while (0);
  $88 = $fs + 20 | 0;
  $90 = $fs + 24 | 0;
  HEAP32[$90 >> 2] = HEAP32[$88 >> 2];
  $91 = $reg << 6;
  $93 = _luaK_code($fs, $91 | 16387) | 0;
  HEAP32[$90 >> 2] = HEAP32[$88 >> 2];
  $96 = _luaK_code($fs, $91 | 8388611) | 0;
  HEAP32[$90 >> 2] = HEAP32[$88 >> 2];
  if (($98 | 0) == -1) {
   $p_f$0 = $93;
   $p_t$0 = $96;
  } else {
   $100 = HEAP32[$$pre88 >> 2] | 0;
   if (($100 | 0) == -1) {
    HEAP32[$$pre88 >> 2] = $98;
    $p_f$0 = $93;
    $p_t$0 = $96;
    break;
   }
   $fs$idx$val$idx$val$i$i32 = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
   $list$0$i$i34 = $100;
   while (1) {
    $102 = $fs$idx$val$idx$val$i$i32 + ($list$0$i$i34 << 2) | 0;
    $103 = HEAP32[$102 >> 2] | 0;
    $105 = ($103 >>> 14) + -131071 | 0;
    $$0$i$i$i35 = ($105 | 0) == -1 ? -1 : $list$0$i$i34 + 1 + $105 | 0;
    if (($$0$i$i$i35 | 0) == -1) {
     $$lcssa = $102;
     $$lcssa119 = $103;
     $list$0$i$i34$lcssa = $list$0$i$i34;
     break;
    } else $list$0$i$i34 = $$0$i$i$i35;
   }
   $110 = $98 + ~$list$0$i$i34$lcssa | 0;
   if (((($110 | 0) > -1 ? $110 : 0 - $110 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
    HEAP32[$$lcssa >> 2] = ($110 << 14) + 2147467264 | $$lcssa119 & 16383;
    $p_f$0 = $93;
    $p_t$0 = $96;
    break;
   }
  }
 } while (0);
 $120 = HEAP32[$fs + 20 >> 2] | 0;
 HEAP32[$fs + 24 >> 2] = $120;
 $122 = HEAP32[$26 >> 2] | 0;
 L62 : do if (($122 | 0) != -1) {
  $124 = ($reg | 0) == 255;
  $126 = $reg << 6 & 16320;
  $fs$idx$val$idx$val$i45$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $$02$i42 = $122;
  while (1) {
   $127 = $fs$idx$val$idx$val$i45$pre + ($$02$i42 << 2) | 0;
   $128 = HEAP32[$127 >> 2] | 0;
   $130 = ($128 >>> 14) + -131071 | 0;
   $$02$i42$looptemp = $$02$i42;
   $$02$i42 = ($130 | 0) == -1 ? -1 : $$02$i42 + 1 + $130 | 0;
   if (($$02$i42$looptemp | 0) > 0) {
    $135 = $fs$idx$val$idx$val$i45$pre + ($$02$i42$looptemp + -1 << 2) | 0;
    $136 = HEAP32[$135 >> 2] | 0;
    if ((HEAP8[2216 + ($136 & 63) >> 0] | 0) < 0) {
     $$0$i$i59 = $135;
     $142 = $136;
    } else label = 45;
   } else label = 45;
   if ((label | 0) == 45) {
    label = 0;
    $$0$i$i59 = $127;
    $142 = $128;
   }
   if (($142 & 63 | 0) == 28) {
    $144 = $142 >>> 23;
    if ($124 | ($144 | 0) == ($reg | 0)) $storemerge$i62 = $142 & 8372224 | $144 << 6 | 27; else $storemerge$i62 = $142 & -16321 | $126;
    HEAP32[$$0$i$i59 >> 2] = $storemerge$i62;
    $152 = $120 + ~$$02$i42$looptemp | 0;
    if (((($152 | 0) > -1 ? $152 : 0 - $152 | 0) | 0) > 131071) {
     label = 51;
     break;
    }
    $storemerge = HEAP32[$127 >> 2] & 16383 | ($152 << 14) + 2147467264;
   } else {
    $162 = $p_f$0 + ~$$02$i42$looptemp | 0;
    if (((($162 | 0) > -1 ? $162 : 0 - $162 | 0) | 0) > 131071) {
     label = 54;
     break;
    }
    $storemerge = $128 & 16383 | ($162 << 14) + 2147467264;
   }
   HEAP32[$127 >> 2] = $storemerge;
   if (($$02$i42 | 0) == -1) break L62;
  }
  if ((label | 0) == 51) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else if ((label | 0) == 54) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 } while (0);
 $172 = HEAP32[$2 >> 2] | 0;
 if (($172 | 0) == -1) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $259 = $e + 8 | 0;
  HEAP32[$259 >> 2] = $reg;
  HEAP32[$e >> 2] = 6;
  return;
 }
 $175 = $reg << 6;
 $176 = $175 & 16320;
 $fs$idx$val$idx$val$i5$us$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 if (($reg | 0) == 255) {
  $$02$i$us = $172;
  while (1) {
   $177 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i$us << 2) | 0;
   $178 = HEAP32[$177 >> 2] | 0;
   $180 = ($178 >>> 14) + -131071 | 0;
   $$02$i$us$looptemp = $$02$i$us;
   $$02$i$us = ($180 | 0) == -1 ? -1 : $$02$i$us + 1 + $180 | 0;
   if (($$02$i$us$looptemp | 0) > 0) {
    $185 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i$us$looptemp + -1 << 2) | 0;
    $186 = HEAP32[$185 >> 2] | 0;
    if ((HEAP8[2216 + ($186 & 63) >> 0] | 0) < 0) {
     $$0$i$i26$us = $185;
     $192 = $186;
    } else label = 61;
   } else label = 61;
   if ((label | 0) == 61) {
    label = 0;
    $$0$i$i26$us = $177;
    $192 = $178;
   }
   if (($192 & 63 | 0) == 28) {
    HEAP32[$$0$i$i26$us >> 2] = $192 & 8372224 | $192 >>> 23 << 6 | 27;
    $206 = $120 + ~$$02$i$us$looptemp | 0;
    if (((($206 | 0) > -1 ? $206 : 0 - $206 | 0) | 0) > 131071) {
     label = 76;
     break;
    }
    $storemerge91 = HEAP32[$177 >> 2] & 16383 | ($206 << 14) + 2147467264;
   } else {
    $194 = $p_t$0 + ~$$02$i$us$looptemp | 0;
    if (((($194 | 0) > -1 ? $194 : 0 - $194 | 0) | 0) > 131071) {
     label = 79;
     break;
    }
    $storemerge91 = $178 & 16383 | ($194 << 14) + 2147467264;
   }
   HEAP32[$177 >> 2] = $storemerge91;
   if (($$02$i$us | 0) == -1) {
    label = 82;
    break;
   }
  }
  if ((label | 0) == 76) {
   $242 = $fs + 12 | 0;
   $243 = HEAP32[$242 >> 2] | 0;
   _luaX_syntaxerror($243, 16);
  } else if ((label | 0) == 79) {
   $252 = $fs + 12 | 0;
   $253 = HEAP32[$252 >> 2] | 0;
   _luaX_syntaxerror($253, 16);
  } else if ((label | 0) == 82) {
   HEAP32[$2 >> 2] = -1;
   HEAP32[$26 >> 2] = -1;
   $259 = $e + 8 | 0;
   HEAP32[$259 >> 2] = $reg;
   HEAP32[$e >> 2] = 6;
   return;
  }
 } else $$02$i = $172;
 while (1) {
  $215 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i << 2) | 0;
  $216 = HEAP32[$215 >> 2] | 0;
  $218 = ($216 >>> 14) + -131071 | 0;
  $$02$i$looptemp = $$02$i;
  $$02$i = ($218 | 0) == -1 ? -1 : $$02$i + 1 + $218 | 0;
  if (($$02$i$looptemp | 0) > 0) {
   $223 = $fs$idx$val$idx$val$i5$us$pre + ($$02$i$looptemp + -1 << 2) | 0;
   $224 = HEAP32[$223 >> 2] | 0;
   if ((HEAP8[2216 + ($224 & 63) >> 0] | 0) < 0) {
    $$0$i$i26 = $223;
    $230 = $224;
   } else label = 70;
  } else label = 70;
  if ((label | 0) == 70) {
   label = 0;
   $$0$i$i26 = $215;
   $230 = $216;
  }
  if (($230 & 63 | 0) == 28) {
   if (($230 >>> 23 | 0) == ($reg | 0)) $storemerge$i = $230 & 8372224 | $175 | 27; else $storemerge$i = $230 & -16321 | $176;
   HEAP32[$$0$i$i26 >> 2] = $storemerge$i;
   $239 = $120 + ~$$02$i$looptemp | 0;
   if (((($239 | 0) > -1 ? $239 : 0 - $239 | 0) | 0) > 131071) {
    label = 76;
    break;
   }
   $storemerge90 = HEAP32[$215 >> 2] & 16383 | ($239 << 14) + 2147467264;
  } else {
   $249 = $p_t$0 + ~$$02$i$looptemp | 0;
   if (((($249 | 0) > -1 ? $249 : 0 - $249 | 0) | 0) > 131071) {
    label = 79;
    break;
   }
   $storemerge90 = $216 & 16383 | ($249 << 14) + 2147467264;
  }
  HEAP32[$215 >> 2] = $storemerge90;
  if (($$02$i | 0) == -1) {
   label = 82;
   break;
  }
 }
 if ((label | 0) == 76) {
  $242 = $fs + 12 | 0;
  $243 = HEAP32[$242 >> 2] | 0;
  _luaX_syntaxerror($243, 16);
 } else if ((label | 0) == 79) {
  $252 = $fs + 12 | 0;
  $253 = HEAP32[$252 >> 2] | 0;
  _luaX_syntaxerror($253, 16);
 } else if ((label | 0) == 82) {
  HEAP32[$2 >> 2] = -1;
  HEAP32[$26 >> 2] = -1;
  $259 = $e + 8 | 0;
  HEAP32[$259 >> 2] = $reg;
  HEAP32[$e >> 2] = 6;
  return;
 }
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[3030] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[3031] | 0)) {
   $103 = $mem + ($8 + -4) | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if (($104 & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[3028] = $15;
   HEAP32[$103 >> 2] = $104 & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 12144 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[3026] = HEAP32[3026] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi61Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi61Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi61Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 12408 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3027] = HEAP32[3027] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   $87 = HEAP32[3030] | 0;
   if ($R$1 >>> 0 < $87 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < $87 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$97) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($97 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $97;
    HEAP32[$97 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $111 = $mem + ($8 + -4) | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 if (!($112 & 1)) _abort();
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[3032] | 0)) {
   $120 = (HEAP32[3029] | 0) + $psize$0 | 0;
   HEAP32[3029] = $120;
   HEAP32[3032] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $120 | 1;
   if (($p$0 | 0) != (HEAP32[3031] | 0)) return;
   HEAP32[3031] = 0;
   HEAP32[3028] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[3031] | 0)) {
   $128 = (HEAP32[3028] | 0) + $psize$0 | 0;
   HEAP32[3028] = $128;
   HEAP32[3031] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $128 | 1;
   HEAP32[$p$0 + $128 >> 2] = $128;
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0;
  $134 = $112 >>> 3;
  do if ($112 >>> 0 < 256) {
   $137 = HEAP32[$mem + $8 >> 2] | 0;
   $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $141 = 12144 + ($134 << 1 << 2) | 0;
   if (($137 | 0) != ($141 | 0)) {
    if ($137 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($139 | 0) == ($137 | 0)) {
    HEAP32[3026] = HEAP32[3026] & ~(1 << $134);
    break;
   }
   if (($139 | 0) == ($141 | 0)) $$pre$phi59Z2D = $139 + 8 | 0; else {
    if ($139 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $156 = $139 + 8 | 0;
    if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) $$pre$phi59Z2D = $156; else _abort();
   }
   HEAP32[$137 + 12 >> 2] = $139;
   HEAP32[$$pre$phi59Z2D >> 2] = $137;
  } else {
   $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($163 | 0) == ($9 | 0)) {
    $175 = $mem + ($8 + 12) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    if (!$176) {
     $178 = $mem + ($8 + 8) | 0;
     $179 = HEAP32[$178 >> 2] | 0;
     if (!$179) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $179;
      $RP9$0 = $178;
     }
    } else {
     $R7$0 = $176;
     $RP9$0 = $175;
    }
    while (1) {
     $181 = $R7$0 + 20 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     if ($182) {
      $R7$0 = $182;
      $RP9$0 = $181;
      continue;
     }
     $184 = $R7$0 + 16 | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     if (!$185) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $185;
      $RP9$0 = $184;
     }
    }
    if ($RP9$0$lcssa >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $166 = HEAP32[$mem + $8 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $169 = $166 + 12 | 0;
    if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) _abort();
    $172 = $163 + 8 | 0;
    if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$169 >> 2] = $163;
     HEAP32[$172 >> 2] = $166;
     $R7$1 = $163;
     break;
    } else _abort();
   } while (0);
   if ($161) {
    $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $192 = 12408 + ($191 << 2) | 0;
    if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[3027] = HEAP32[3027] & ~(1 << $191);
      break;
     }
    } else {
     if ($161 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
     $201 = $161 + 16 | 0;
     if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) HEAP32[$201 >> 2] = $R7$1; else HEAP32[$161 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $206 = HEAP32[3030] | 0;
    if ($R7$1 >>> 0 < $206 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $161;
    $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($210) if ($210 >>> 0 < $206 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $210;
     HEAP32[$210 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($216) if ($216 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $216;
     HEAP32[$216 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1;
  HEAP32[$p$0 + $133 >> 2] = $133;
  if (($p$0 | 0) == (HEAP32[3031] | 0)) {
   HEAP32[3028] = $133;
   return;
  } else $psize$1 = $133;
 } else {
  HEAP32[$111 >> 2] = $112 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1;
  $234 = 12144 + ($233 << 2) | 0;
  $235 = HEAP32[3026] | 0;
  $236 = 1 << $231;
  if (!($235 & $236)) {
   HEAP32[3026] = $235 | $236;
   $$pre$phiZ2D = 12144 + ($233 + 2 << 2) | 0;
   $F16$0 = $234;
  } else {
   $240 = 12144 + ($233 + 2 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   if ($241 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 if (!$247) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $252 = ($247 + 1048320 | 0) >>> 16 & 8;
  $253 = $247 << $252;
  $256 = ($253 + 520192 | 0) >>> 16 & 4;
  $258 = $253 << $256;
  $261 = ($258 + 245760 | 0) >>> 16 & 2;
  $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1;
 }
 $272 = 12408 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $276 = HEAP32[3027] | 0;
 $277 = 1 << $I18$0;
 L199 : do if (!($276 & $277)) {
  HEAP32[3027] = $276 | $277;
  HEAP32[$272 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $272;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $284 = HEAP32[$272 >> 2] | 0;
  L202 : do if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $284; else {
   $K19$052 = $psize$1 << (($I18$0 | 0) == 31 ? 0 : 25 - ($I18$0 >>> 1) | 0);
   $T$051 = $284;
   while (1) {
    $301 = $T$051 + 16 + ($K19$052 >>> 31 << 2) | 0;
    $296 = HEAP32[$301 >> 2] | 0;
    if (!$296) {
     $$lcssa = $301;
     $T$051$lcssa = $T$051;
     break;
    }
    if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $296;
     break L202;
    } else {
     $K19$052 = $K19$052 << 1;
     $T$051 = $296;
    }
   }
   if ($$lcssa >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    HEAP32[$$lcssa >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$051$lcssa;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $308 = $T$0$lcssa + 8 | 0;
  $309 = HEAP32[$308 >> 2] | 0;
  $310 = HEAP32[3030] | 0;
  if ($309 >>> 0 >= $310 >>> 0 & $T$0$lcssa >>> 0 >= $310 >>> 0) {
   HEAP32[$309 + 12 >> 2] = $p$0;
   HEAP32[$308 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $309;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $318 = (HEAP32[3034] | 0) + -1 | 0;
 HEAP32[3034] = $318;
 if (!$318) $sp$0$in$i = 12560; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[3034] = -1;
 return;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$sum18 = 0, $$sum21 = 0, $0 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $123 = 0, $128 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $149 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $275 = 0, $287 = 0, $292 = 0, $299 = 0, $300 = 0, $301 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[3030] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[3031] | 0)) {
   $99 = $p + ($psize + 4) | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$0 = $9;
    $$02 = $10;
    break;
   }
   HEAP32[3028] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$p + (4 - $5) >> 2] = $10 | 1;
   HEAP32[$0 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$p + (8 - $5) >> 2] | 0;
   $20 = HEAP32[$p + (12 - $5) >> 2] | 0;
   $22 = 12144 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[3026] = HEAP32[3026] & ~(1 << $15);
    $$0 = $9;
    $$02 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi52Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi52Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi52Z2D >> 2] = $18;
   $$0 = $9;
   $$02 = $10;
   break;
  }
  $40 = HEAP32[$p + (24 - $5) >> 2] | 0;
  $42 = HEAP32[$p + (12 - $5) >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $$sum18 = 16 - $5 | 0;
   $53 = $p + ($$sum18 + 4) | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if (!$54) {
    $56 = $p + $$sum18 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (!$57) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $57;
     $RP$0 = $56;
    }
   } else {
    $R$0 = $54;
    $RP$0 = $53;
   }
   while (1) {
    $59 = $R$0 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     $R$0 = $60;
     $RP$0 = $59;
     continue;
    }
    $62 = $R$0 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $63;
     $RP$0 = $62;
    }
   }
   if ($RP$0$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$p + (8 - $5) >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$1 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$0 = $9;
   $$02 = $10;
  } else {
   $68 = HEAP32[$p + (28 - $5) >> 2] | 0;
   $69 = 12408 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3027] = HEAP32[3027] & ~(1 << $68);
     $$0 = $9;
     $$02 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$1; else HEAP32[$40 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
   }
   $83 = HEAP32[3030] | 0;
   if ($R$1 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $40;
   $$sum21 = 16 - $5 | 0;
   $87 = HEAP32[$p + $$sum21 >> 2] | 0;
   do if ($87) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $93 = HEAP32[$p + ($$sum21 + 4) >> 2] | 0;
   if (!$93) {
    $$0 = $9;
    $$02 = $10;
   } else if ($93 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$1;
    $$0 = $9;
    $$02 = $10;
    break;
   }
  }
 } else {
  $$0 = $p;
  $$02 = $psize;
 } while (0);
 $106 = HEAP32[3030] | 0;
 if ($0 >>> 0 < $106 >>> 0) _abort();
 $108 = $p + ($psize + 4) | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 if (!($109 & 2)) {
  if (($0 | 0) == (HEAP32[3032] | 0)) {
   $115 = (HEAP32[3029] | 0) + $$02 | 0;
   HEAP32[3029] = $115;
   HEAP32[3032] = $$0;
   HEAP32[$$0 + 4 >> 2] = $115 | 1;
   if (($$0 | 0) != (HEAP32[3031] | 0)) return;
   HEAP32[3031] = 0;
   HEAP32[3028] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[3031] | 0)) {
   $123 = (HEAP32[3028] | 0) + $$02 | 0;
   HEAP32[3028] = $123;
   HEAP32[3031] = $$0;
   HEAP32[$$0 + 4 >> 2] = $123 | 1;
   HEAP32[$$0 + $123 >> 2] = $123;
   return;
  }
  $128 = ($109 & -8) + $$02 | 0;
  $129 = $109 >>> 3;
  do if ($109 >>> 0 < 256) {
   $132 = HEAP32[$p + ($psize + 8) >> 2] | 0;
   $134 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   $136 = 12144 + ($129 << 1 << 2) | 0;
   if (($132 | 0) != ($136 | 0)) {
    if ($132 >>> 0 < $106 >>> 0) _abort();
    if ((HEAP32[$132 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($134 | 0) == ($132 | 0)) {
    HEAP32[3026] = HEAP32[3026] & ~(1 << $129);
    break;
   }
   if (($134 | 0) == ($136 | 0)) $$pre$phi50Z2D = $134 + 8 | 0; else {
    if ($134 >>> 0 < $106 >>> 0) _abort();
    $149 = $134 + 8 | 0;
    if ((HEAP32[$149 >> 2] | 0) == ($0 | 0)) $$pre$phi50Z2D = $149; else _abort();
   }
   HEAP32[$132 + 12 >> 2] = $134;
   HEAP32[$$pre$phi50Z2D >> 2] = $132;
  } else {
   $154 = HEAP32[$p + ($psize + 24) >> 2] | 0;
   $156 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   do if (($156 | 0) == ($0 | 0)) {
    $167 = $p + ($psize + 20) | 0;
    $168 = HEAP32[$167 >> 2] | 0;
    if (!$168) {
     $170 = $p + ($psize + 16) | 0;
     $171 = HEAP32[$170 >> 2] | 0;
     if (!$171) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $171;
      $RP9$0 = $170;
     }
    } else {
     $R7$0 = $168;
     $RP9$0 = $167;
    }
    while (1) {
     $173 = $R7$0 + 20 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     if ($174) {
      $R7$0 = $174;
      $RP9$0 = $173;
      continue;
     }
     $176 = $R7$0 + 16 | 0;
     $177 = HEAP32[$176 >> 2] | 0;
     if (!$177) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $177;
      $RP9$0 = $176;
     }
    }
    if ($RP9$0$lcssa >>> 0 < $106 >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $159 = HEAP32[$p + ($psize + 8) >> 2] | 0;
    if ($159 >>> 0 < $106 >>> 0) _abort();
    $161 = $159 + 12 | 0;
    if ((HEAP32[$161 >> 2] | 0) != ($0 | 0)) _abort();
    $164 = $156 + 8 | 0;
    if ((HEAP32[$164 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$161 >> 2] = $156;
     HEAP32[$164 >> 2] = $159;
     $R7$1 = $156;
     break;
    } else _abort();
   } while (0);
   if ($154) {
    $182 = HEAP32[$p + ($psize + 28) >> 2] | 0;
    $183 = 12408 + ($182 << 2) | 0;
    if (($0 | 0) == (HEAP32[$183 >> 2] | 0)) {
     HEAP32[$183 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[3027] = HEAP32[3027] & ~(1 << $182);
      break;
     }
    } else {
     if ($154 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
     $192 = $154 + 16 | 0;
     if ((HEAP32[$192 >> 2] | 0) == ($0 | 0)) HEAP32[$192 >> 2] = $R7$1; else HEAP32[$154 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $197 = HEAP32[3030] | 0;
    if ($R7$1 >>> 0 < $197 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $154;
    $201 = HEAP32[$p + ($psize + 16) >> 2] | 0;
    do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $201;
     HEAP32[$201 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $207 = HEAP32[$p + ($psize + 20) >> 2] | 0;
    if ($207) if ($207 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $207;
     HEAP32[$207 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $128 | 1;
  HEAP32[$$0 + $128 >> 2] = $128;
  if (($$0 | 0) == (HEAP32[3031] | 0)) {
   HEAP32[3028] = $128;
   return;
  } else $$1 = $128;
 } else {
  HEAP32[$108 >> 2] = $109 & -2;
  HEAP32[$$0 + 4 >> 2] = $$02 | 1;
  HEAP32[$$0 + $$02 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 if ($$1 >>> 0 < 256) {
  $224 = $222 << 1;
  $225 = 12144 + ($224 << 2) | 0;
  $226 = HEAP32[3026] | 0;
  $227 = 1 << $222;
  if (!($226 & $227)) {
   HEAP32[3026] = $226 | $227;
   $$pre$phiZ2D = 12144 + ($224 + 2 << 2) | 0;
   $F16$0 = $225;
  } else {
   $231 = 12144 + ($224 + 2 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   if ($232 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  HEAP32[$F16$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $F16$0;
  HEAP32[$$0 + 12 >> 2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 if (!$238) $I19$0 = 0; else if ($$1 >>> 0 > 16777215) $I19$0 = 31; else {
  $243 = ($238 + 1048320 | 0) >>> 16 & 8;
  $244 = $238 << $243;
  $247 = ($244 + 520192 | 0) >>> 16 & 4;
  $249 = $244 << $247;
  $252 = ($249 + 245760 | 0) >>> 16 & 2;
  $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0;
  $I19$0 = $$1 >>> ($257 + 7 | 0) & 1 | $257 << 1;
 }
 $263 = 12408 + ($I19$0 << 2) | 0;
 HEAP32[$$0 + 28 >> 2] = $I19$0;
 HEAP32[$$0 + 20 >> 2] = 0;
 HEAP32[$$0 + 16 >> 2] = 0;
 $267 = HEAP32[3027] | 0;
 $268 = 1 << $I19$0;
 if (!($267 & $268)) {
  HEAP32[3027] = $267 | $268;
  HEAP32[$263 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $263;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 L191 : do if ((HEAP32[$275 + 4 >> 2] & -8 | 0) == ($$1 | 0)) $T$0$lcssa = $275; else {
  $K20$043 = $$1 << (($I19$0 | 0) == 31 ? 0 : 25 - ($I19$0 >>> 1) | 0);
  $T$042 = $275;
  while (1) {
   $292 = $T$042 + 16 + ($K20$043 >>> 31 << 2) | 0;
   $287 = HEAP32[$292 >> 2] | 0;
   if (!$287) {
    $$lcssa = $292;
    $T$042$lcssa = $T$042;
    break;
   }
   if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
    $T$0$lcssa = $287;
    break L191;
   } else {
    $K20$043 = $K20$043 << 1;
    $T$042 = $287;
   }
  }
  if ($$lcssa >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $T$042$lcssa;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[3030] | 0;
 if (!($300 >>> 0 >= $301 >>> 0 & $T$0$lcssa >>> 0 >= $301 >>> 0)) _abort();
 HEAP32[$300 + 12 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 HEAP32[$$0 + 8 >> 2] = $300;
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$$0 + 24 >> 2] = 0;
 return;
}

function _luaD_precall($L, $func, $nresults) {
 $L = $L | 0;
 $func = $func | 0;
 $nresults = $nresults | 0;
 var $$$$i = 0, $$$$i$i = 0, $$$$i$i13 = 0, $$$$i4 = 0, $$$i = 0, $$$i$i = 0, $$$i$i12 = 0, $$$i3 = 0, $$0 = 0, $$0$i = 0, $$1$i = 0, $$25$i = 0, $$lcssa155 = 0, $$lcssa156 = 0, $$lcssa157 = 0, $$lcssa161 = 0, $$lcssa162 = 0, $$lcssa163 = 0, $$pn = 0, $$pre3$i = 0, $$promoted = 0, $$sum$i = 0, $$sum$i47 = 0, $0 = 0, $1 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $122 = 0, $124 = 0, $126 = 0, $13 = 0, $132 = 0, $133 = 0, $138 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $168 = 0, $169 = 0, $175 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $187 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $2 = 0, $203 = 0, $208 = 0, $21 = 0, $211 = 0, $214 = 0, $220 = 0, $224 = 0, $225 = 0, $239 = 0, $256 = 0, $259 = 0, $26 = 0, $260 = 0, $264 = 0, $267 = 0, $27 = 0, $272 = 0, $273 = 0, $281 = 0, $282 = 0, $285 = 0, $288 = 0, $294 = 0, $295 = 0, $299 = 0, $3 = 0, $300 = 0, $301 = 0, $306 = 0, $307 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $5 = 0, $51 = 0, $55 = 0, $58 = 0, $59 = 0, $61 = 0, $69 = 0, $73 = 0, $78 = 0, $8 = 0, $80 = 0, $81 = 0, $88 = 0, $89 = 0, $94 = 0, $95 = 0, $base$0 = 0, $f$0 = 0, $f$0$in = 0, $func$tr = 0, $func$tr$lcssa = 0, $func$tr$lcssa150 = 0, $func$tr$lcssa151 = 0, $func$tr$lcssa152 = 0, $hook$0$i = 0, $i$03$i = 0, $i$03$i$lcssa = 0, $i$11$i = 0, $n$0$lcssa = 0, $n$049 = 0, $p$01$i = 0, $res$04$i = 0, $res$04$i$lcssa = 0, $res$1$lcssa$i = 0, $res$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0, $p$01$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = $L + 28 | 0;
 $1 = $L + 8 | 0;
 $2 = $L + 24 | 0;
 $3 = $L + 32 | 0;
 $func$tr = $func;
 while (1) {
  $4 = HEAP32[$0 >> 2] | 0;
  $5 = $func$tr;
  $8 = HEAP32[$func$tr + 8 >> 2] & 63;
  if (($8 | 0) == 22) {
   $$lcssa155 = $4;
   $$lcssa161 = $5;
   $func$tr$lcssa = $func$tr;
   label = 3;
   break;
  } else if (($8 | 0) == 38) {
   $$lcssa156 = $4;
   $$lcssa162 = $5;
   $func$tr$lcssa150 = $func$tr;
   label = 4;
   break;
  } else if (($8 | 0) == 6) {
   $$lcssa157 = $4;
   $$lcssa163 = $5;
   $func$tr$lcssa151 = $func$tr;
   label = 30;
   break;
  }
  $256 = _luaT_gettmbyobj($L, $func$tr, 16) | 0;
  $259 = $5 - (HEAP32[$0 >> 2] | 0) | 0;
  $260 = $256 + 8 | 0;
  if ((HEAP32[$260 >> 2] & 15 | 0) != 6) {
   $func$tr$lcssa152 = $func$tr;
   label = 62;
   break;
  }
  $264 = HEAP32[$1 >> 2] | 0;
  if ($264 >>> 0 > $func$tr >>> 0) {
   $p$01$i = $264;
   do {
    $p$01$i$looptemp = $p$01$i;
    $p$01$i = $p$01$i + -16 | 0;
    $267 = $p$01$i;
    $272 = HEAP32[$267 + 4 >> 2] | 0;
    $273 = $p$01$i$looptemp;
    HEAP32[$273 >> 2] = HEAP32[$267 >> 2];
    HEAP32[$273 + 4 >> 2] = $272;
    HEAP32[$p$01$i$looptemp + 8 >> 2] = HEAP32[$p$01$i$looptemp + -8 >> 2];
   } while ($p$01$i >>> 0 > $func$tr >>> 0);
   $282 = HEAP32[$1 >> 2] | 0;
  } else $282 = $264;
  $281 = $282 + 16 | 0;
  HEAP32[$1 >> 2] = $281;
  $285 = $281;
  if (((HEAP32[$2 >> 2] | 0) - $285 | 0) < 16) {
   $288 = HEAP32[$3 >> 2] | 0;
   if (($288 | 0) > 1e6) {
    label = 68;
    break;
   }
   $294 = ($285 - (HEAP32[$0 >> 2] | 0) >> 4) + 5 | 0;
   $295 = $288 << 1;
   $$$i$i12 = ($295 | 0) > 1e6 ? 1e6 : $295;
   $$$$i$i13 = ($$$i$i12 | 0) < ($294 | 0) ? $294 : $$$i$i12;
   if (($$$$i$i13 | 0) > 1e6) {
    label = 70;
    break;
   }
   _luaD_reallocstack($L, $$$$i$i13);
  }
  $299 = HEAP32[$0 >> 2] | 0;
  $300 = $299 + $259 | 0;
  $301 = $256;
  $306 = HEAP32[$301 + 4 >> 2] | 0;
  $307 = $300;
  HEAP32[$307 >> 2] = HEAP32[$301 >> 2];
  HEAP32[$307 + 4 >> 2] = $306;
  HEAP32[$299 + ($259 + 8) >> 2] = HEAP32[$260 >> 2];
  $func$tr = $300;
 }
 if ((label | 0) == 3) {
  $11 = $$lcssa155;
  $14 = $$lcssa161;
  $f$0$in = $func$tr$lcssa;
 } else if ((label | 0) == 4) {
  $11 = $$lcssa156;
  $14 = $$lcssa162;
  $f$0$in = (HEAP32[$func$tr$lcssa150 >> 2] | 0) + 12 | 0;
 } else if ((label | 0) == 30) {
  $109 = $$lcssa163 - $$lcssa157 | 0;
  $112 = HEAP32[(HEAP32[$func$tr$lcssa151 >> 2] | 0) + 12 >> 2] | 0;
  $114 = HEAP32[$1 >> 2] | 0;
  $116 = $114 - $$lcssa163 >> 4;
  $117 = $116 + -1 | 0;
  $122 = $112 + 78 | 0;
  $124 = HEAPU8[$122 >> 0] | 0;
  do if (((HEAP32[$2 >> 2] | 0) - $114 >> 4 | 0) <= ($124 | 0)) {
   $126 = HEAP32[$3 >> 2] | 0;
   if (($126 | 0) > 1e6) _luaD_throw($L, 6);
   $132 = $124 + 5 + ($114 - $$lcssa157 >> 4) | 0;
   $133 = $126 << 1;
   $$$i3 = ($133 | 0) > 1e6 ? 1e6 : $133;
   $$$$i4 = ($$$i3 | 0) < ($132 | 0) ? $132 : $$$i3;
   if (($$$$i4 | 0) > 1e6) {
    _luaD_reallocstack($L, 1000200);
    _luaG_runerror($L, 4984, $vararg_buffer1);
   } else {
    _luaD_reallocstack($L, $$$$i4);
    break;
   }
  } while (0);
  $138 = HEAP8[$112 + 76 >> 0] | 0;
  $139 = $138 & 255;
  if (($116 | 0) > ($139 | 0)) $n$0$lcssa = $117; else {
   $$promoted = HEAP32[$1 >> 2] | 0;
   $142 = $139 + 1 - $116 | 0;
   $144 = $$promoted;
   $n$049 = $117;
   while (1) {
    HEAP32[$144 + 8 >> 2] = 0;
    $n$049 = $n$049 + 1 | 0;
    if (($n$049 | 0) >= ($139 | 0)) break; else $144 = $144 + 16 | 0;
   }
   HEAP32[$1 >> 2] = $$promoted + ($142 << 4);
   $n$0$lcssa = $139;
  }
  if (!(HEAP8[$112 + 77 >> 0] | 0)) {
   $151 = HEAP32[$0 >> 2] | 0;
   $$pn = $151;
   $base$0 = $151 + ($109 + 16) | 0;
  } else {
   $154 = HEAP32[$1 >> 2] | 0;
   $156 = $154;
   $159 = HEAPU8[$122 >> 0] | 0;
   do if (((HEAP32[$2 >> 2] | 0) - $156 >> 4 | 0) > ($159 | 0)) $175 = $154; else {
    $161 = HEAP32[$3 >> 2] | 0;
    if (($161 | 0) > 1e6) _luaD_throw($L, 6);
    $168 = $159 + 5 + ($156 - (HEAP32[$0 >> 2] | 0) >> 4) | 0;
    $169 = $161 << 1;
    $$$i$i = ($169 | 0) > 1e6 ? 1e6 : $169;
    $$$$i$i = ($$$i$i | 0) < ($168 | 0) ? $168 : $$$i$i;
    if (($$$$i$i | 0) > 1e6) {
     _luaD_reallocstack($L, 1000200);
     _luaG_runerror($L, 4984, $vararg_buffer3);
    } else {
     _luaD_reallocstack($L, $$$$i$i);
     $175 = HEAP32[$1 >> 2] | 0;
     break;
    }
   } while (0);
   if ($138 << 24 >> 24) {
    $$sum$i47 = 0 - $n$0$lcssa | 0;
    HEAP32[$1 >> 2] = $175 + 16;
    $177 = $175 + ($$sum$i47 << 4) | 0;
    $182 = HEAP32[$177 + 4 >> 2] | 0;
    $183 = $175;
    HEAP32[$183 >> 2] = HEAP32[$177 >> 2];
    HEAP32[$183 + 4 >> 2] = $182;
    $187 = $175 + ($$sum$i47 << 4) + 8 | 0;
    HEAP32[$175 + 8 >> 2] = HEAP32[$187 >> 2];
    HEAP32[$187 >> 2] = 0;
    if ($138 << 24 >> 24 != 1) {
     $190 = 1;
     do {
      $$pre3$i = HEAP32[$1 >> 2] | 0;
      $$sum$i = $190 - $n$0$lcssa | 0;
      HEAP32[$1 >> 2] = $$pre3$i + 16;
      $193 = $175 + ($$sum$i << 4) | 0;
      $198 = HEAP32[$193 + 4 >> 2] | 0;
      $199 = $$pre3$i;
      HEAP32[$199 >> 2] = HEAP32[$193 >> 2];
      HEAP32[$199 + 4 >> 2] = $198;
      $203 = $175 + ($$sum$i << 4) + 8 | 0;
      HEAP32[$$pre3$i + 8 >> 2] = HEAP32[$203 >> 2];
      HEAP32[$203 >> 2] = 0;
      $190 = $190 + 1 | 0;
     } while (($190 | 0) != ($139 | 0));
    }
   }
   $$pn = HEAP32[$0 >> 2] | 0;
   $base$0 = $175;
  }
  $208 = $L + 16 | 0;
  $211 = HEAP32[(HEAP32[$208 >> 2] | 0) + 12 >> 2] | 0;
  if (!$211) $214 = _luaE_extendCI($L) | 0; else $214 = $211;
  HEAP32[$208 >> 2] = $214;
  HEAP16[$214 + 16 >> 1] = $nresults;
  HEAP32[$214 >> 2] = $$pn + $109;
  HEAP32[$214 + 24 >> 2] = $base$0;
  $220 = $base$0 + (HEAPU8[$122 >> 0] << 4) | 0;
  HEAP32[$214 + 4 >> 2] = $220;
  $224 = $214 + 28 | 0;
  HEAP32[$224 >> 2] = HEAP32[$112 + 12 >> 2];
  $225 = $214 + 18 | 0;
  HEAP8[$225 >> 0] = 1;
  HEAP32[$1 >> 2] = $220;
  if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
  if (!(HEAP8[$L + 40 >> 0] & 1)) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP32[$224 >> 2] = (HEAP32[$224 >> 2] | 0) + 4;
  $239 = HEAP32[$214 + 8 >> 2] | 0;
  if (!(HEAP8[$239 + 18 >> 0] & 1)) $hook$0$i = 0; else if ((HEAP32[(HEAP32[$239 + 28 >> 2] | 0) + -4 >> 2] & 63 | 0) == 30) {
   HEAP8[$225 >> 0] = HEAPU8[$225 >> 0] | 64;
   $hook$0$i = 4;
  } else $hook$0$i = 0;
  _luaD_hook($L, $hook$0$i, -1);
  HEAP32[$224 >> 2] = (HEAP32[$224 >> 2] | 0) + -4;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 62) _luaG_typeerror($L, $func$tr$lcssa152, 6552); else if ((label | 0) == 68) _luaD_throw($L, 6); else if ((label | 0) == 70) {
  _luaD_reallocstack($L, 1000200);
  _luaG_runerror($L, 4984, $vararg_buffer5);
 }
 $13 = $14 - $11 | 0;
 $f$0 = HEAP32[$f$0$in >> 2] | 0;
 $18 = HEAP32[$1 >> 2] | 0;
 do if (((HEAP32[$2 >> 2] | 0) - $18 | 0) < 336) {
  $21 = HEAP32[$3 >> 2] | 0;
  if (($21 | 0) > 1e6) _luaD_throw($L, 6);
  $26 = ($18 - $11 >> 4) + 25 | 0;
  $27 = $21 << 1;
  $$$i = ($27 | 0) > 1e6 ? 1e6 : $27;
  $$$$i = ($$$i | 0) < ($26 | 0) ? $26 : $$$i;
  if (($$$$i | 0) > 1e6) {
   _luaD_reallocstack($L, 1000200);
   _luaG_runerror($L, 4984, $vararg_buffer);
  } else {
   _luaD_reallocstack($L, $$$$i);
   break;
  }
 } while (0);
 $31 = $L + 16 | 0;
 $34 = HEAP32[(HEAP32[$31 >> 2] | 0) + 12 >> 2] | 0;
 if (!$34) $37 = _luaE_extendCI($L) | 0; else $37 = $34;
 HEAP32[$31 >> 2] = $37;
 HEAP16[$37 + 16 >> 1] = $nresults;
 HEAP32[$37 >> 2] = (HEAP32[$0 >> 2] | 0) + $13;
 HEAP32[$37 + 4 >> 2] = (HEAP32[$1 >> 2] | 0) + 320;
 HEAP8[$37 + 18 >> 0] = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $51 = $L + 40 | 0;
 if (HEAP8[$51 >> 0] & 1) _luaD_hook($L, 0, -1);
 $55 = FUNCTION_TABLE_ii[$f$0 & 255]($L) | 0;
 $58 = (HEAP32[$1 >> 2] | 0) + (0 - $55 << 4) | 0;
 $59 = HEAP32[$31 >> 2] | 0;
 $61 = HEAPU8[$51 >> 0] | 0;
 if (!($61 & 6)) {
  $$1$i = $58;
  $81 = HEAP32[$59 + 8 >> 2] | 0;
 } else {
  if (!($61 & 2)) $$0$i = $58; else {
   $69 = $58 - (HEAP32[$0 >> 2] | 0) | 0;
   _luaD_hook($L, 1, -1);
   $$0$i = (HEAP32[$0 >> 2] | 0) + $69 | 0;
  }
  $73 = HEAP32[$59 + 8 >> 2] | 0;
  HEAP32[$L + 20 >> 2] = HEAP32[$73 + 28 >> 2];
  $$1$i = $$0$i;
  $81 = $73;
 }
 $78 = HEAP32[$59 >> 2] | 0;
 $80 = HEAP16[$59 + 16 >> 1] | 0;
 HEAP32[$31 >> 2] = $81;
 L95 : do if (!($80 << 16 >> 16)) $res$1$lcssa$i = $78; else {
  $$25$i = $$1$i;
  $i$03$i = $80 << 16 >> 16;
  $res$04$i = $78;
  while (1) {
   if ($$25$i >>> 0 >= (HEAP32[$1 >> 2] | 0) >>> 0) {
    $i$03$i$lcssa = $i$03$i;
    $res$04$i$lcssa = $res$04$i;
    break;
   }
   $88 = $res$04$i + 16 | 0;
   $89 = $$25$i;
   $94 = HEAP32[$89 + 4 >> 2] | 0;
   $95 = $res$04$i;
   HEAP32[$95 >> 2] = HEAP32[$89 >> 2];
   HEAP32[$95 + 4 >> 2] = $94;
   HEAP32[$res$04$i + 8 >> 2] = HEAP32[$$25$i + 8 >> 2];
   $i$03$i = $i$03$i + -1 | 0;
   if (!$i$03$i) {
    $res$1$lcssa$i = $88;
    break L95;
   } else {
    $$25$i = $$25$i + 16 | 0;
    $res$04$i = $88;
   }
  }
  if (($i$03$i$lcssa | 0) > 0) {
   $i$11$i = $i$03$i$lcssa;
   $res$12$i = $res$04$i$lcssa;
   while (1) {
    HEAP32[$res$12$i + 8 >> 2] = 0;
    if (($i$11$i | 0) > 1) {
     $i$11$i = $i$11$i + -1 | 0;
     $res$12$i = $res$12$i + 16 | 0;
    } else break;
   }
   $res$1$lcssa$i = $res$04$i$lcssa + ($i$03$i$lcssa << 4) | 0;
  } else $res$1$lcssa$i = $res$04$i$lcssa;
 } while (0);
 HEAP32[$1 >> 2] = $res$1$lcssa$i;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _LoadFunction($S, $f) {
 $S = $S | 0;
 $f = $f | 0;
 var $$0$i$i = 0, $$0$i$i32 = 0, $$0$i17$i = 0, $$0$i5$i = 0, $$pre = 0, $0 = 0, $10 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $122 = 0, $132 = 0, $136 = 0, $138 = 0, $139 = 0, $161 = 0, $166 = 0, $179 = 0, $183 = 0, $184 = 0, $185 = 0, $194 = 0, $198 = 0, $200 = 0, $201 = 0, $204 = 0, $210 = 0, $214 = 0, $228 = 0, $235 = 0, $244 = 0, $247 = 0, $251 = 0, $255 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $46 = 0, $50 = 0, $52 = 0, $53 = 0, $55 = 0, $56 = 0, $63 = 0, $65 = 0, $71 = 0, $81 = 0, $85 = 0, $99 = 0, $i$0$i41 = 0, $i$029$i = 0, $i$07$i = 0, $i$1$i3950 = 0, $i$126$i = 0, $i$16$i = 0, $i$225$i = 0, $i$3$i36 = 0, $x$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $x$i8$i = sp;
 $0 = $S + 4 | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $4 = HEAP32[$x$i8$i >> 2] | 0;
 if (($4 | 0) < 0) _error($S, 3544);
 HEAP32[$f + 64 >> 2] = $4;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $10 = HEAP32[$x$i8$i >> 2] | 0;
 if (($10 | 0) < 0) _error($S, 3544);
 HEAP32[$f + 68 >> 2] = $10;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) _error($S, 3480);
 HEAP8[$f + 76 >> 0] = HEAP8[$x$i8$i >> 0] | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) _error($S, 3480);
 HEAP8[$f + 77 >> 0] = HEAP8[$x$i8$i >> 0] | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) _error($S, 3480);
 HEAP8[$f + 78 >> 0] = HEAP8[$x$i8$i >> 0] | 0;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $31 = HEAP32[$x$i8$i >> 2] | 0;
 if (($31 | 0) < 0) _error($S, 3544);
 $35 = HEAP32[$S >> 2] | 0;
 if (($31 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($35);
 $36 = $31 << 2;
 $37 = _luaM_realloc_($35, 0, 0, $36) | 0;
 HEAP32[$f + 12 >> 2] = $37;
 HEAP32[$f + 48 >> 2] = $31;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $37, $36) | 0) _error($S, 3480);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $46 = HEAP32[$x$i8$i >> 2] | 0;
 if (($46 | 0) < 0) _error($S, 3544);
 $50 = HEAP32[$S >> 2] | 0;
 if (($46 + 1 | 0) >>> 0 > 268435455) _luaM_toobig($50);
 $52 = _luaM_realloc_($50, 0, 0, $46 << 4) | 0;
 $53 = $f + 8 | 0;
 HEAP32[$53 >> 2] = $52;
 HEAP32[$f + 44 >> 2] = $46;
 $55 = ($46 | 0) > 0;
 L43 : do if ($55) {
  $i$0$i41 = 0;
  do {
   HEAP32[$52 + ($i$0$i41 << 4) + 8 >> 2] = 0;
   $i$0$i41 = $i$0$i41 + 1 | 0;
  } while (($i$0$i41 | 0) != ($46 | 0));
  if ($55) {
   $56 = $S + 8 | 0;
   if (!(_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0)) {
    $65 = $52;
    $71 = $52;
    $i$1$i3950 = 0;
   } else _error($S, 3480);
   while (1) {
    $63 = HEAP8[$x$i8$i >> 0] | 0;
    if (($63 | 0) == 1) {
     if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) {
      label = 37;
      break;
     }
     HEAP32[$71 >> 2] = HEAP8[$x$i8$i >> 0];
     HEAP32[$65 + ($i$1$i3950 << 4) + 8 >> 2] = 1;
    } else if (!$63) HEAP32[$65 + ($i$1$i3950 << 4) + 8 >> 2] = 0; else if (($63 | 0) == 4) {
     if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) {
      label = 43;
      break;
     }
     $81 = HEAP32[$x$i8$i >> 2] | 0;
     if (!$81) $$0$i$i32 = 0; else {
      $85 = _luaZ_openspace(HEAP32[$S >> 2] | 0, HEAP32[$56 >> 2] | 0, $81) | 0;
      if (_luaZ_read(HEAP32[$0 >> 2] | 0, $85, HEAP32[$x$i8$i >> 2] | 0) | 0) {
       label = 46;
       break;
      }
      $$0$i$i32 = _luaS_newlstr(HEAP32[$S >> 2] | 0, $85, (HEAP32[$x$i8$i >> 2] | 0) + -1 | 0) | 0;
     }
     HEAP32[$71 >> 2] = $$0$i$i32;
     HEAP32[$65 + ($i$1$i3950 << 4) + 8 >> 2] = HEAPU8[$$0$i$i32 + 4 >> 0] | 64;
    } else if (($63 | 0) == 3) {
     if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 8) | 0) {
      label = 40;
      break;
     }
     HEAPF64[$71 >> 3] = +HEAPF64[$x$i8$i >> 3];
     HEAP32[$65 + ($i$1$i3950 << 4) + 8 >> 2] = 3;
    }
    $99 = $i$1$i3950 + 1 | 0;
    if (($99 | 0) >= ($46 | 0)) break L43;
    $$pre = HEAP32[$53 >> 2] | 0;
    if (!(_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0)) {
     $65 = $$pre;
     $71 = $$pre + ($99 << 4) | 0;
     $i$1$i3950 = $99;
    } else {
     label = 33;
     break;
    }
   }
   if ((label | 0) == 33) _error($S, 3480); else if ((label | 0) == 37) _error($S, 3480); else if ((label | 0) == 40) _error($S, 3480); else if ((label | 0) == 43) _error($S, 3480); else if ((label | 0) == 46) _error($S, 3480);
  }
 } while (0);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $108 = HEAP32[$x$i8$i >> 2] | 0;
 if (($108 | 0) < 0) _error($S, 3544);
 $112 = HEAP32[$S >> 2] | 0;
 if (($108 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($112);
 $114 = _luaM_realloc_($112, 0, 0, $108 << 2) | 0;
 $115 = $f + 16 | 0;
 HEAP32[$115 >> 2] = $114;
 HEAP32[$f + 56 >> 2] = $108;
 $117 = ($108 | 0) > 0;
 do if ($117) {
  HEAP32[$114 >> 2] = 0;
  if (($108 | 0) != 1) {
   $119 = 1;
   do {
    HEAP32[(HEAP32[$115 >> 2] | 0) + ($119 << 2) >> 2] = 0;
    $119 = $119 + 1 | 0;
   } while (($119 | 0) != ($108 | 0));
  }
  if ($117) $i$3$i36 = 0; else break;
  do {
   $122 = _luaF_newproto(HEAP32[$S >> 2] | 0) | 0;
   HEAP32[(HEAP32[$115 >> 2] | 0) + ($i$3$i36 << 2) >> 2] = $122;
   _LoadFunction($S, HEAP32[(HEAP32[$115 >> 2] | 0) + ($i$3$i36 << 2) >> 2] | 0);
   $i$3$i36 = $i$3$i36 + 1 | 0;
  } while (($i$3$i36 | 0) != ($108 | 0));
 } while (0);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $132 = HEAP32[$x$i8$i >> 2] | 0;
 if (($132 | 0) < 0) _error($S, 3544);
 $136 = HEAP32[$S >> 2] | 0;
 if (($132 + 1 | 0) >>> 0 > 536870911) _luaM_toobig($136);
 $138 = _luaM_realloc_($136, 0, 0, $132 << 3) | 0;
 $139 = $f + 28 | 0;
 HEAP32[$139 >> 2] = $138;
 HEAP32[$f + 40 >> 2] = $132;
 L100 : do if (($132 | 0) > 0) {
  $i$07$i = 0;
  do {
   HEAP32[$138 + ($i$07$i << 3) >> 2] = 0;
   $i$07$i = $i$07$i + 1 | 0;
  } while (($i$07$i | 0) != ($132 | 0));
  $i$16$i = 0;
  while (1) {
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) {
    label = 71;
    break;
   }
   HEAP8[(HEAP32[$139 >> 2] | 0) + ($i$16$i << 3) + 4 >> 0] = HEAP8[$x$i8$i >> 0] | 0;
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 1) | 0) {
    label = 73;
    break;
   }
   HEAP8[(HEAP32[$139 >> 2] | 0) + ($i$16$i << 3) + 5 >> 0] = HEAP8[$x$i8$i >> 0] | 0;
   $i$16$i = $i$16$i + 1 | 0;
   if (($i$16$i | 0) >= ($132 | 0)) break L100;
  }
  if ((label | 0) == 71) _error($S, 3480); else if ((label | 0) == 73) _error($S, 3480);
 } while (0);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $161 = HEAP32[$x$i8$i >> 2] | 0;
 do if (!$161) $$0$i$i = 0; else {
  $166 = _luaZ_openspace(HEAP32[$S >> 2] | 0, HEAP32[$S + 8 >> 2] | 0, $161) | 0;
  if (!(_luaZ_read(HEAP32[$0 >> 2] | 0, $166, HEAP32[$x$i8$i >> 2] | 0) | 0)) {
   $$0$i$i = _luaS_newlstr(HEAP32[$S >> 2] | 0, $166, (HEAP32[$x$i8$i >> 2] | 0) + -1 | 0) | 0;
   break;
  } else _error($S, 3480);
 } while (0);
 HEAP32[$f + 36 >> 2] = $$0$i$i;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $179 = HEAP32[$x$i8$i >> 2] | 0;
 if (($179 | 0) < 0) _error($S, 3544);
 $183 = HEAP32[$S >> 2] | 0;
 if (($179 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($183);
 $184 = $179 << 2;
 $185 = _luaM_realloc_($183, 0, 0, $184) | 0;
 HEAP32[$f + 20 >> 2] = $185;
 HEAP32[$f + 52 >> 2] = $179;
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $185, $184) | 0) _error($S, 3480);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $194 = HEAP32[$x$i8$i >> 2] | 0;
 if (($194 | 0) < 0) _error($S, 3544);
 $198 = HEAP32[$S >> 2] | 0;
 if (($194 + 1 | 0) >>> 0 > 357913941) _luaM_toobig($198);
 $200 = _luaM_realloc_($198, 0, 0, $194 * 12 | 0) | 0;
 $201 = $f + 24 | 0;
 HEAP32[$201 >> 2] = $200;
 HEAP32[$f + 60 >> 2] = $194;
 L141 : do if (($194 | 0) > 0) {
  $i$029$i = 0;
  do {
   HEAP32[$200 + ($i$029$i * 12 | 0) >> 2] = 0;
   $i$029$i = $i$029$i + 1 | 0;
  } while (($i$029$i | 0) != ($194 | 0));
  $204 = $S + 8 | 0;
  $i$126$i = 0;
  while (1) {
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) {
    label = 99;
    break;
   }
   $210 = HEAP32[$x$i8$i >> 2] | 0;
   if (!$210) $$0$i5$i = 0; else {
    $214 = _luaZ_openspace(HEAP32[$S >> 2] | 0, HEAP32[$204 >> 2] | 0, $210) | 0;
    if (_luaZ_read(HEAP32[$0 >> 2] | 0, $214, HEAP32[$x$i8$i >> 2] | 0) | 0) {
     label = 102;
     break;
    }
    $$0$i5$i = _luaS_newlstr(HEAP32[$S >> 2] | 0, $214, (HEAP32[$x$i8$i >> 2] | 0) + -1 | 0) | 0;
   }
   HEAP32[(HEAP32[$201 >> 2] | 0) + ($i$126$i * 12 | 0) >> 2] = $$0$i5$i;
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) {
    label = 105;
    break;
   }
   $228 = HEAP32[$x$i8$i >> 2] | 0;
   if (($228 | 0) < 0) {
    label = 107;
    break;
   }
   HEAP32[(HEAP32[$201 >> 2] | 0) + ($i$126$i * 12 | 0) + 4 >> 2] = $228;
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) {
    label = 109;
    break;
   }
   $235 = HEAP32[$x$i8$i >> 2] | 0;
   if (($235 | 0) < 0) {
    label = 111;
    break;
   }
   HEAP32[(HEAP32[$201 >> 2] | 0) + ($i$126$i * 12 | 0) + 8 >> 2] = $235;
   $i$126$i = $i$126$i + 1 | 0;
   if (($i$126$i | 0) >= ($194 | 0)) break L141;
  }
  if ((label | 0) == 99) _error($S, 3480); else if ((label | 0) == 102) _error($S, 3480); else if ((label | 0) == 105) _error($S, 3480); else if ((label | 0) == 107) _error($S, 3544); else if ((label | 0) == 109) _error($S, 3480); else if ((label | 0) == 111) _error($S, 3544);
 } while (0);
 if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) _error($S, 3480);
 $244 = HEAP32[$x$i8$i >> 2] | 0;
 if (($244 | 0) < 0) _error($S, 3544);
 if (($244 | 0) <= 0) {
  STACKTOP = sp;
  return;
 }
 $247 = $S + 8 | 0;
 $i$225$i = 0;
 while (1) {
  if (_luaZ_read(HEAP32[$0 >> 2] | 0, $x$i8$i, 4) | 0) {
   label = 120;
   break;
  }
  $251 = HEAP32[$x$i8$i >> 2] | 0;
  if (!$251) $$0$i17$i = 0; else {
   $255 = _luaZ_openspace(HEAP32[$S >> 2] | 0, HEAP32[$247 >> 2] | 0, $251) | 0;
   if (_luaZ_read(HEAP32[$0 >> 2] | 0, $255, HEAP32[$x$i8$i >> 2] | 0) | 0) {
    label = 123;
    break;
   }
   $$0$i17$i = _luaS_newlstr(HEAP32[$S >> 2] | 0, $255, (HEAP32[$x$i8$i >> 2] | 0) + -1 | 0) | 0;
  }
  HEAP32[(HEAP32[$139 >> 2] | 0) + ($i$225$i << 3) >> 2] = $$0$i17$i;
  $i$225$i = $i$225$i + 1 | 0;
  if (($i$225$i | 0) >= ($244 | 0)) {
   label = 126;
   break;
  }
 }
 if ((label | 0) == 120) _error($S, 3480); else if ((label | 0) == 123) _error($S, 3480); else if ((label | 0) == 126) {
  STACKTOP = sp;
  return;
 }
}

function _str_format($L) {
 $L = $L | 0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $$lcssa28 = 0, $$p$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $105 = 0, $106 = 0, $110 = 0, $113 = 0, $116 = 0, $117 = 0, $121 = 0, $124 = 0, $127 = 0, $129 = 0, $138 = 0, $139 = 0, $140 = 0, $143 = 0, $145 = 0, $149 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $164 = 0, $169 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $38 = 0, $40 = 0, $44 = 0, $48 = 0, $5 = 0, $53 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $73 = 0.0, $74 = 0, $76 = 0.0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $87 = 0.0, $88 = 0, $90 = 0.0, $93 = 0, $95 = 0, $96 = 0, $arg$0$ph13 = 0, $b = 0, $buff$i = 0, $form = 0, $isdigit6$i = 0, $l = 0, $l$i = 0, $nb$0 = 0, $p$0$lcssa$i = 0, $p$09$i = 0, $p$2$i = 0, $p$4$i = 0, $s$01$i = 0, $sfl = 0, $strfrmt$0$be = 0, $strfrmt$0$ph12 = 0, $strfrmt$011 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0, $arg$0$ph13$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1168 | 0;
 $vararg_buffer23 = sp + 72 | 0;
 $vararg_buffer20 = sp + 64 | 0;
 $vararg_buffer17 = sp + 56 | 0;
 $vararg_buffer14 = sp + 48 | 0;
 $vararg_buffer11 = sp + 40 | 0;
 $vararg_buffer8 = sp + 32 | 0;
 $vararg_buffer5 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $l$i = sp + 1124 | 0;
 $buff$i = sp + 1146 | 0;
 $sfl = sp + 1120 | 0;
 $b = sp + 80 | 0;
 $form = sp + 1128 | 0;
 $l = sp + 76 | 0;
 $0 = _lua_gettop($L) | 0;
 $1 = _luaL_checklstring($L, 1, $sfl) | 0;
 $2 = HEAP32[$sfl >> 2] | 0;
 $3 = $1 + $2 | 0;
 _luaL_buffinit($L, $b);
 L1 : do if (($2 | 0) > 0) {
  $5 = $b + 8 | 0;
  $6 = $b + 4 | 0;
  $7 = $form + 1 | 0;
  $arg$0$ph13 = 1;
  $strfrmt$0$ph12 = $1;
  L3 : while (1) {
   $strfrmt$011 = $strfrmt$0$ph12;
   while (1) {
    $8 = HEAP8[$strfrmt$011 >> 0] | 0;
    if ($8 << 24 >> 24 == 37) {
     $19 = $strfrmt$011 + 1 | 0;
     if ((HEAP8[$19 >> 0] | 0) != 37) {
      $$lcssa = $19;
      break;
     }
     $22 = HEAP32[$5 >> 2] | 0;
     if ($22 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) {
      $27 = $22;
      $30 = 37;
     } else {
      _luaL_prepbuffsize($b, 1) | 0;
      $27 = HEAP32[$5 >> 2] | 0;
      $30 = HEAP8[$19 >> 0] | 0;
     }
     HEAP32[$5 >> 2] = $27 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $27 >> 0] = $30;
     $strfrmt$0$be = $strfrmt$011 + 2 | 0;
    } else {
     $10 = HEAP32[$5 >> 2] | 0;
     if ($10 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) {
      $15 = $10;
      $18 = $8;
     } else {
      _luaL_prepbuffsize($b, 1) | 0;
      $15 = HEAP32[$5 >> 2] | 0;
      $18 = HEAP8[$strfrmt$011 >> 0] | 0;
     }
     HEAP32[$5 >> 2] = $15 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $15 >> 0] = $18;
     $strfrmt$0$be = $strfrmt$011 + 1 | 0;
    }
    if ($strfrmt$0$be >>> 0 < $3 >>> 0) $strfrmt$011 = $strfrmt$0$be; else break L1;
   }
   $32 = _luaL_prepbuffsize($b, 512) | 0;
   $arg$0$ph13$looptemp = $arg$0$ph13;
   $arg$0$ph13 = $arg$0$ph13 + 1 | 0;
   if (($arg$0$ph13$looptemp | 0) >= ($0 | 0)) _luaL_argerror($L, $arg$0$ph13, 9632) | 0;
   $35 = HEAP8[$$lcssa >> 0] | 0;
   L22 : do if (!($35 << 24 >> 24)) {
    $169 = 0;
    $p$0$lcssa$i = $$lcssa;
   } else {
    $38 = $35;
    $p$09$i = $$lcssa;
    while (1) {
     if (!(_memchr(9648, $38 << 24 >> 24, 6) | 0)) {
      $169 = $38;
      $p$0$lcssa$i = $p$09$i;
      break L22;
     }
     $40 = $p$09$i + 1 | 0;
     $38 = HEAP8[$40 >> 0] | 0;
     if (!($38 << 24 >> 24)) {
      $169 = 0;
      $p$0$lcssa$i = $40;
      break;
     } else $p$09$i = $40;
    }
   } while (0);
   $44 = $$lcssa;
   if (($p$0$lcssa$i - $44 | 0) >>> 0 > 5) {
    _luaL_error($L, 9656, $vararg_buffer) | 0;
    $48 = HEAP8[$p$0$lcssa$i >> 0] | 0;
   } else $48 = $169;
   $$p$0$i = (($48 & 255) + -48 | 0) >>> 0 < 10 ? $p$0$lcssa$i + 1 | 0 : $p$0$lcssa$i;
   $p$2$i = ((HEAPU8[$$p$0$i >> 0] | 0) + -48 | 0) >>> 0 < 10 ? $$p$0$i + 1 | 0 : $$p$0$i;
   $53 = HEAP8[$p$2$i >> 0] | 0;
   if ($53 << 24 >> 24 == 46) {
    $55 = $p$2$i + 1 | 0;
    $isdigit6$i = ((HEAPU8[$55 >> 0] | 0) + -48 | 0) >>> 0 < 10;
    $$$i = $isdigit6$i ? $p$2$i + 2 | 0 : $55;
    $59 = HEAP8[$$$i >> 0] | 0;
    if ((($59 & 255) + -48 | 0) >>> 0 < 10) {
     $61 = ($isdigit6$i ? $55 : $p$2$i) + 2 | 0;
     $63 = HEAP8[$61 >> 0] | 0;
     $p$4$i = $61;
    } else {
     $63 = $59;
     $p$4$i = $$$i;
    }
   } else {
    $63 = $53;
    $p$4$i = $p$2$i;
   }
   if ((($63 & 255) + -48 | 0) >>> 0 < 10) _luaL_error($L, 9688, $vararg_buffer1) | 0;
   HEAP8[$form >> 0] = 37;
   $65 = $p$4$i - $44 | 0;
   _memcpy($7 | 0, $$lcssa | 0, $65 + 1 | 0) | 0;
   HEAP8[$form + ($65 + 2) >> 0] = 0;
   $strfrmt$0$ph12 = $p$4$i + 1 | 0;
   $70 = HEAP8[$p$4$i >> 0] | 0;
   L37 : do switch ($70 | 0) {
   case 115:
    {
     $159 = _luaL_tolstring($L, $arg$0$ph13, $l) | 0;
     if ((_strchr($form, 46) | 0) == 0 & (HEAP32[$l >> 2] | 0) >>> 0 > 99) {
      _luaL_addvalue($b);
      $nb$0 = 0;
      break L37;
     } else {
      HEAP32[$vararg_buffer20 >> 2] = $159;
      $164 = _sprintf($32, $form, $vararg_buffer20) | 0;
      _lua_settop($L, -2);
      $nb$0 = $164;
      break L37;
     }
     break;
    }
   case 71:
   case 103:
   case 102:
   case 69:
   case 101:
    {
     HEAP8[$form + (_strlen($form | 0) | 0) >> 0] = 0;
     HEAPF64[$vararg_buffer11 >> 3] = +_luaL_checknumber($L, $arg$0$ph13);
     $nb$0 = _sprintf($32, $form, $vararg_buffer11) | 0;
     break;
    }
   case 113:
    {
     $105 = _luaL_checklstring($L, $arg$0$ph13, $l$i) | 0;
     $106 = HEAP32[$5 >> 2] | 0;
     if ($106 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $110 = $106; else {
      _luaL_prepbuffsize($b, 1) | 0;
      $110 = HEAP32[$5 >> 2] | 0;
     }
     HEAP32[$5 >> 2] = $110 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $110 >> 0] = 34;
     $113 = HEAP32[$l$i >> 2] | 0;
     HEAP32[$l$i >> 2] = $113 + -1;
     if ($113) {
      $s$01$i = $105;
      while (1) {
       $116 = HEAP8[$s$01$i >> 0] | 0;
       do if ($116 << 24 >> 24 == 10 | $116 << 24 >> 24 == 92 | $116 << 24 >> 24 == 34) {
        $117 = HEAP32[$5 >> 2] | 0;
        if ($117 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $121 = $117; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $121 = HEAP32[$5 >> 2] | 0;
        }
        HEAP32[$5 >> 2] = $121 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $121 >> 0] = 92;
        $124 = HEAP32[$5 >> 2] | 0;
        if ($124 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $129 = $124; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $129 = HEAP32[$5 >> 2] | 0;
        }
        $127 = HEAP8[$s$01$i >> 0] | 0;
        HEAP32[$5 >> 2] = $129 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $129 >> 0] = $127;
       } else if (!($116 << 24 >> 24)) {
        $139 = 0;
        label = 45;
       } else {
        if (_iscntrl($116 & 255) | 0) {
         $139 = HEAP8[$s$01$i >> 0] | 0;
         label = 45;
         break;
        }
        $140 = HEAP32[$5 >> 2] | 0;
        if ($140 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $145 = $140; else {
         _luaL_prepbuffsize($b, 1) | 0;
         $145 = HEAP32[$5 >> 2] | 0;
        }
        $143 = HEAP8[$s$01$i >> 0] | 0;
        HEAP32[$5 >> 2] = $145 + 1;
        HEAP8[(HEAP32[$b >> 2] | 0) + $145 >> 0] = $143;
       } while (0);
       if ((label | 0) == 45) {
        label = 0;
        $138 = $139 & 255;
        if (((HEAPU8[$s$01$i + 1 >> 0] | 0) + -48 | 0) >>> 0 < 10) {
         HEAP32[$vararg_buffer17 >> 2] = $138;
         _sprintf($buff$i, 9824, $vararg_buffer17) | 0;
        } else {
         HEAP32[$vararg_buffer14 >> 2] = $138;
         _sprintf($buff$i, 9816, $vararg_buffer14) | 0;
        }
        _luaL_addstring($b, $buff$i);
       }
       $149 = HEAP32[$l$i >> 2] | 0;
       HEAP32[$l$i >> 2] = $149 + -1;
       if (!$149) break; else $s$01$i = $s$01$i + 1 | 0;
      }
     }
     $152 = HEAP32[$5 >> 2] | 0;
     if ($152 >>> 0 < (HEAP32[$6 >> 2] | 0) >>> 0) $156 = $152; else {
      _luaL_prepbuffsize($b, 1) | 0;
      $156 = HEAP32[$5 >> 2] | 0;
     }
     HEAP32[$5 >> 2] = $156 + 1;
     HEAP8[(HEAP32[$b >> 2] | 0) + $156 >> 0] = 34;
     $nb$0 = 0;
     break;
    }
   case 88:
   case 120:
   case 117:
   case 111:
    {
     $87 = +_luaL_checknumber($L, $arg$0$ph13);
     $88 = ~~$87 >>> 0;
     $90 = $87 - +($88 >>> 0);
     if (!($90 > -1.0 & $90 < 1.0)) _luaL_argerror($L, $arg$0$ph13, 9768) | 0;
     $93 = _strlen($form | 0) | 0;
     $95 = $form + ($93 + -1) | 0;
     $96 = HEAP8[$95 >> 0] | 0;
     HEAP8[$95 >> 0] = 108;
     HEAP8[$95 + 1 >> 0] = 0;
     HEAP8[$form + $93 >> 0] = $96;
     HEAP8[$form + ($93 + 1) >> 0] = 0;
     HEAP32[$vararg_buffer8 >> 2] = $88;
     $nb$0 = _sprintf($32, $form, $vararg_buffer8) | 0;
     break;
    }
   case 105:
   case 100:
    {
     $73 = +_luaL_checknumber($L, $arg$0$ph13);
     $74 = ~~$73;
     $76 = $73 - +($74 | 0);
     if (!($76 > -1.0 & $76 < 1.0)) _luaL_argerror($L, $arg$0$ph13, 9736) | 0;
     $79 = _strlen($form | 0) | 0;
     $81 = $form + ($79 + -1) | 0;
     $82 = HEAP8[$81 >> 0] | 0;
     HEAP8[$81 >> 0] = 108;
     HEAP8[$81 + 1 >> 0] = 0;
     HEAP8[$form + $79 >> 0] = $82;
     HEAP8[$form + ($79 + 1) >> 0] = 0;
     HEAP32[$vararg_buffer5 >> 2] = $74;
     $nb$0 = _sprintf($32, $form, $vararg_buffer5) | 0;
     break;
    }
   case 99:
    {
     HEAP32[$vararg_buffer3 >> 2] = _luaL_checkinteger($L, $arg$0$ph13) | 0;
     $nb$0 = _sprintf($32, $form, $vararg_buffer3) | 0;
     break;
    }
   default:
    {
     $$lcssa28 = $70;
     break L3;
    }
   } while (0);
   HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $nb$0;
   if ($strfrmt$0$ph12 >>> 0 >= $3 >>> 0) break L1;
  }
  HEAP32[$vararg_buffer23 >> 2] = $$lcssa28;
  $$0 = _luaL_error($L, 9832, $vararg_buffer23) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _luaL_pushresult($b);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _read_long_string($ls, $seminfo, $sep) {
 $ls = $ls | 0;
 $seminfo = $seminfo | 0;
 $sep = $sep | 0;
 var $$lcssa = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$ph = 0, $$ph$ph = 0, $$pr23 = 0, $$pr24 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $116 = 0, $118 = 0, $120 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $130 = 0, $131 = 0, $136 = 0, $138 = 0, $139 = 0, $142 = 0, $143 = 0, $148 = 0, $149 = 0, $15 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $159 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $170 = 0, $172 = 0, $173 = 0, $174 = 0, $177 = 0, $178 = 0, $18 = 0, $183 = 0, $184 = 0, $186 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $208 = 0, $209 = 0, $21 = 0, $22 = 0, $221 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $67 = 0, $68 = 0, $7 = 0, $73 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $84 = 0, $87 = 0, $89 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $ts$0$i = 0, label = 0;
 $0 = HEAP32[$ls >> 2] | 0;
 $1 = $ls + 60 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 do if (($4 + 1 | 0) >>> 0 > $7 >>> 0) {
  if ($7 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
  $10 = $7 << 1;
  $13 = HEAP32[$ls + 52 >> 2] | 0;
  if (($10 | 0) == -2) _luaM_toobig($13); else {
   $15 = _luaM_realloc_($13, HEAP32[$2 >> 2] | 0, $7, $10) | 0;
   HEAP32[$2 >> 2] = $15;
   HEAP32[$6 >> 2] = $10;
   $18 = HEAP32[$3 >> 2] | 0;
   $20 = $15;
   break;
  }
 } else {
  $18 = $4;
  $20 = HEAP32[$2 >> 2] | 0;
 } while (0);
 HEAP32[$3 >> 2] = $18 + 1;
 HEAP8[$20 + $18 >> 0] = $0;
 $21 = $ls + 56 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 HEAP32[$22 >> 2] = $23 + -1;
 if (!$23) $32 = _luaZ_fill($22) | 0; else {
  $26 = $22 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  HEAP32[$26 >> 2] = $27 + 1;
  $32 = HEAPU8[$27 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $32;
 if (($32 | 0) == 13 | ($32 | 0) == 10) {
  $33 = HEAP32[$21 >> 2] | 0;
  $34 = HEAP32[$33 >> 2] | 0;
  HEAP32[$33 >> 2] = $34 + -1;
  if (!$34) $43 = _luaZ_fill($33) | 0; else {
   $37 = $33 + 4 | 0;
   $38 = HEAP32[$37 >> 2] | 0;
   HEAP32[$37 >> 2] = $38 + 1;
   $43 = HEAPU8[$38 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $43;
  if (($43 | 0) == 13 | ($43 | 0) == 10) if (($43 | 0) == ($32 | 0)) $$pr23 = $32; else {
   $45 = HEAP32[$21 >> 2] | 0;
   $46 = HEAP32[$45 >> 2] | 0;
   HEAP32[$45 >> 2] = $46 + -1;
   if (!$46) $55 = _luaZ_fill($45) | 0; else {
    $49 = $45 + 4 | 0;
    $50 = HEAP32[$49 >> 2] | 0;
    HEAP32[$49 >> 2] = $50 + 1;
    $55 = HEAPU8[$50 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $55;
   $$pr23 = $55;
  } else $$pr23 = $43;
  $56 = $ls + 4 | 0;
  $57 = HEAP32[$56 >> 2] | 0;
  HEAP32[$56 >> 2] = $57 + 1;
  if (($57 | 0) > 2147483643) _luaX_syntaxerror($ls, 1200); else $$ph$ph = $$pr23;
 } else $$ph$ph = $32;
 $60 = ($seminfo | 0) == 0;
 $61 = $ls + 52 | 0;
 $62 = $ls + 4 | 0;
 $$ph = $$ph$ph;
 L31 : while (1) {
  L33 : do if ($60) {
   $221 = $$ph;
   while (1) {
    if (($221 | 0) == 13 | ($221 | 0) == 10) break L33; else if (($221 | 0) == -1) {
     label = 31;
     break L31;
    } else if (($221 | 0) == 93) {
     label = 32;
     break L33;
    }
    $63 = HEAP32[$21 >> 2] | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    HEAP32[$63 >> 2] = $64 + -1;
    if (!$64) $73 = _luaZ_fill($63) | 0; else {
     $67 = $63 + 4 | 0;
     $68 = HEAP32[$67 >> 2] | 0;
     HEAP32[$67 >> 2] = $68 + 1;
     $73 = HEAPU8[$68 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $73;
    $221 = $73;
   }
  } else {
   $168 = $$ph;
   while (1) {
    if (($168 | 0) == 13 | ($168 | 0) == 10) break L33; else if (($168 | 0) == -1) {
     label = 31;
     break L31;
    } else if (($168 | 0) == 93) {
     label = 32;
     break L33;
    }
    $154 = HEAP32[$1 >> 2] | 0;
    $155 = $154 + 4 | 0;
    $156 = HEAP32[$155 >> 2] | 0;
    $158 = $154 + 8 | 0;
    $159 = HEAP32[$158 >> 2] | 0;
    if (($156 + 1 | 0) >>> 0 > $159 >>> 0) {
     if ($159 >>> 0 > 2147483645) {
      label = 67;
      break L31;
     }
     $162 = $159 << 1;
     $164 = HEAP32[$61 >> 2] | 0;
     if (($162 | 0) == -2) {
      $$lcssa = $164;
      label = 69;
      break L31;
     }
     $166 = _luaM_realloc_($164, HEAP32[$154 >> 2] | 0, $159, $162) | 0;
     HEAP32[$154 >> 2] = $166;
     HEAP32[$158 >> 2] = $162;
     $170 = HEAP32[$155 >> 2] | 0;
     $172 = $166;
    } else {
     $170 = $156;
     $172 = HEAP32[$154 >> 2] | 0;
    }
    HEAP32[$155 >> 2] = $170 + 1;
    HEAP8[$172 + $170 >> 0] = $168;
    $173 = HEAP32[$21 >> 2] | 0;
    $174 = HEAP32[$173 >> 2] | 0;
    HEAP32[$173 >> 2] = $174 + -1;
    if (!$174) $183 = _luaZ_fill($173) | 0; else {
     $177 = $173 + 4 | 0;
     $178 = HEAP32[$177 >> 2] | 0;
     HEAP32[$177 >> 2] = $178 + 1;
     $183 = HEAPU8[$178 >> 0] | 0;
    }
    HEAP32[$ls >> 2] = $183;
    $168 = $183;
   }
  } while (0);
  if ((label | 0) == 32) {
   label = 0;
   $77 = (_skip_sep($ls) | 0) == ($sep | 0);
   $78 = HEAP32[$ls >> 2] | 0;
   if ($77) {
    $$lcssa58 = $78;
    label = 33;
    break;
   } else {
    $$ph = $78;
    continue;
   }
  }
  $108 = HEAP32[$1 >> 2] | 0;
  $109 = $108 + 4 | 0;
  $110 = HEAP32[$109 >> 2] | 0;
  $112 = $108 + 8 | 0;
  $113 = HEAP32[$112 >> 2] | 0;
  if (($110 + 1 | 0) >>> 0 > $113 >>> 0) {
   if ($113 >>> 0 > 2147483645) {
    label = 47;
    break;
   }
   $116 = $113 << 1;
   $118 = HEAP32[$61 >> 2] | 0;
   if (($116 | 0) == -2) {
    $$lcssa57 = $118;
    label = 49;
    break;
   }
   $120 = _luaM_realloc_($118, HEAP32[$108 >> 2] | 0, $113, $116) | 0;
   HEAP32[$108 >> 2] = $120;
   HEAP32[$112 >> 2] = $116;
   $122 = HEAP32[$109 >> 2] | 0;
   $124 = $120;
  } else {
   $122 = $110;
   $124 = HEAP32[$108 >> 2] | 0;
  }
  HEAP32[$109 >> 2] = $122 + 1;
  HEAP8[$124 + $122 >> 0] = 10;
  $125 = HEAP32[$ls >> 2] | 0;
  $126 = HEAP32[$21 >> 2] | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  HEAP32[$126 >> 2] = $127 + -1;
  if (!$127) $136 = _luaZ_fill($126) | 0; else {
   $130 = $126 + 4 | 0;
   $131 = HEAP32[$130 >> 2] | 0;
   HEAP32[$130 >> 2] = $131 + 1;
   $136 = HEAPU8[$131 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $136;
  if (($136 | 0) == 13 | ($136 | 0) == 10) if (($136 | 0) == ($125 | 0)) $$pr24 = $125; else {
   $138 = HEAP32[$21 >> 2] | 0;
   $139 = HEAP32[$138 >> 2] | 0;
   HEAP32[$138 >> 2] = $139 + -1;
   if (!$139) $148 = _luaZ_fill($138) | 0; else {
    $142 = $138 + 4 | 0;
    $143 = HEAP32[$142 >> 2] | 0;
    HEAP32[$142 >> 2] = $143 + 1;
    $148 = HEAPU8[$143 >> 0] | 0;
   }
   HEAP32[$ls >> 2] = $148;
   $$pr24 = $148;
  } else $$pr24 = $136;
  $149 = HEAP32[$62 >> 2] | 0;
  HEAP32[$62 >> 2] = $149 + 1;
  if (($149 | 0) > 2147483643) {
   label = 61;
   break;
  }
  if (!$60) {
   $$ph = $$pr24;
   continue;
  }
  HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] = 0;
  $$ph = $$pr24;
 }
 if ((label | 0) == 31) _lexerror($ls, ($seminfo | 0) != 0 ? 1464 : 1488, 286); else if ((label | 0) == 33) {
  $79 = HEAP32[$1 >> 2] | 0;
  $80 = $79 + 4 | 0;
  $81 = HEAP32[$80 >> 2] | 0;
  $83 = $79 + 8 | 0;
  $84 = HEAP32[$83 >> 2] | 0;
  do if (($81 + 1 | 0) >>> 0 > $84 >>> 0) {
   if ($84 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
   $87 = $84 << 1;
   $89 = HEAP32[$61 >> 2] | 0;
   if (($87 | 0) == -2) _luaM_toobig($89); else {
    $91 = _luaM_realloc_($89, HEAP32[$79 >> 2] | 0, $84, $87) | 0;
    HEAP32[$79 >> 2] = $91;
    HEAP32[$83 >> 2] = $87;
    $94 = HEAP32[$80 >> 2] | 0;
    $96 = $91;
    break;
   }
  } else {
   $94 = $81;
   $96 = HEAP32[$79 >> 2] | 0;
  } while (0);
  HEAP32[$80 >> 2] = $94 + 1;
  HEAP8[$96 + $94 >> 0] = $$lcssa58;
  $97 = HEAP32[$21 >> 2] | 0;
  $98 = HEAP32[$97 >> 2] | 0;
  HEAP32[$97 >> 2] = $98 + -1;
  if (!$98) $107 = _luaZ_fill($97) | 0; else {
   $101 = $97 + 4 | 0;
   $102 = HEAP32[$101 >> 2] | 0;
   HEAP32[$101 >> 2] = $102 + 1;
   $107 = HEAPU8[$102 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $107;
  if ($60) return;
  $184 = HEAP32[$1 >> 2] | 0;
  $186 = $sep + 2 | 0;
  $192 = HEAP32[$61 >> 2] | 0;
  $193 = _luaS_newlstr($192, (HEAP32[$184 >> 2] | 0) + $186 | 0, (HEAP32[$184 + 4 >> 2] | 0) - ($186 << 1) | 0) | 0;
  $194 = $192 + 8 | 0;
  $195 = HEAP32[$194 >> 2] | 0;
  HEAP32[$194 >> 2] = $195 + 16;
  HEAP32[$195 >> 2] = $193;
  HEAP32[$195 + 8 >> 2] = HEAPU8[$193 + 4 >> 0] | 0 | 64;
  $208 = _luaH_set($192, HEAP32[(HEAP32[$ls + 48 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[$194 >> 2] | 0) + -16 | 0) | 0;
  $209 = $208 + 8 | 0;
  if (!(HEAP32[$209 >> 2] | 0)) {
   HEAP32[$208 >> 2] = 1;
   HEAP32[$209 >> 2] = 1;
   if ((HEAP32[(HEAP32[$192 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
    _luaC_step($192);
    $ts$0$i = $193;
   } else $ts$0$i = $193;
  } else $ts$0$i = HEAP32[$208 + 16 >> 2] | 0;
  HEAP32[$194 >> 2] = (HEAP32[$194 >> 2] | 0) + -16;
  HEAP32[$seminfo >> 2] = $ts$0$i;
  return;
 } else if ((label | 0) == 47) _lexerror($ls, 1264, 0); else if ((label | 0) == 49) _luaM_toobig($$lcssa57); else if ((label | 0) == 61) _luaX_syntaxerror($ls, 1200); else if ((label | 0) == 67) _lexerror($ls, 1264, 0); else if ((label | 0) == 69) _luaM_toobig($$lcssa);
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _lua_getinfo($L, $what, $ar) {
 $L = $L | 0;
 $what = $what | 0;
 $ar = $ar | 0;
 var $$0 = 0, $$01$i = 0, $100 = 0, $104 = 0, $109 = 0, $111 = 0, $119 = 0, $126 = 0, $127 = 0, $128 = 0, $133 = 0, $134 = 0, $14 = 0, $148 = 0, $149 = 0, $152 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $54 = 0, $61 = 0, $63 = 0, $7 = 0, $75 = 0, $79 = 0, $88 = 0, $9 = 0, $92 = 0, $ci$0 = 0, $func$0 = 0, $i$01$i = 0, $status$0$lcssa$i = 0, $status$02$i = 0, $status$1$i = 0, $storemerge$ph$i = 0, $storemerge3$i = 0, $tm$0$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $v$i = sp;
 if ((HEAP8[$what >> 0] | 0) == 62) {
  $2 = $L + 8 | 0;
  $4 = (HEAP32[$2 >> 2] | 0) + -16 | 0;
  HEAP32[$2 >> 2] = $4;
  $$0 = $what + 1 | 0;
  $ci$0 = 0;
  $func$0 = $4;
 } else {
  $7 = HEAP32[$ar + 96 >> 2] | 0;
  $$0 = $what;
  $ci$0 = $7;
  $func$0 = HEAP32[$7 >> 2] | 0;
 }
 $9 = $func$0 + 8 | 0;
 if ((HEAP32[$9 >> 2] & 31 | 0) == 6) $16 = HEAP32[$func$0 >> 2] | 0; else $16 = 0;
 $14 = HEAP8[$$0 >> 0] | 0;
 L8 : do if (!($14 << 24 >> 24)) $status$0$lcssa$i = 1; else {
  $17 = ($16 | 0) == 0;
  $18 = $ar + 16 | 0;
  $19 = $ar + 24 | 0;
  $20 = $ar + 28 | 0;
  $21 = $ar + 12 | 0;
  $22 = $ar + 36 | 0;
  $23 = $16 + 4 | 0;
  $24 = $16 + 12 | 0;
  $25 = ($ci$0 | 0) == 0;
  $26 = $ar + 20 | 0;
  $27 = $ci$0 + 18 | 0;
  $28 = $ci$0 + 28 | 0;
  $29 = $ar + 32 | 0;
  $30 = $ar + 34 | 0;
  $31 = $ar + 33 | 0;
  $32 = $16 + 6 | 0;
  $33 = $ar + 35 | 0;
  $34 = $ar + 8 | 0;
  $35 = $ar + 4 | 0;
  $36 = $ci$0 + 8 | 0;
  $37 = $L + 12 | 0;
  $$01$i = $$0;
  $39 = $14;
  $status$02$i = 1;
  while (1) {
   L12 : do switch ($39 << 24 >> 24 | 0) {
   case 83:
    {
     if ($17) label = 11; else if ((HEAP8[$23 >> 0] | 0) == 38) label = 11; else {
      $42 = HEAP32[$24 >> 2] | 0;
      $44 = HEAP32[$42 + 36 >> 2] | 0;
      $47 = ($44 | 0) == 0 ? 440 : $44 + 16 | 0;
      HEAP32[$18 >> 2] = $47;
      $49 = HEAP32[$42 + 64 >> 2] | 0;
      HEAP32[$19 >> 2] = $49;
      HEAP32[$20 >> 2] = HEAP32[$42 + 68 >> 2];
      $54 = $47;
      $storemerge3$i = ($49 | 0) == 0 ? 448 : 456;
     }
     if ((label | 0) == 11) {
      label = 0;
      HEAP32[$18 >> 2] = 432;
      HEAP32[$19 >> 2] = -1;
      HEAP32[$20 >> 2] = -1;
      $54 = 432;
      $storemerge3$i = 464;
     }
     HEAP32[$21 >> 2] = $storemerge3$i;
     _luaO_chunkid($22, $54, 60);
     $status$1$i = $status$02$i;
     break;
    }
   case 116:
    {
     if ($25) $88 = 0; else $88 = HEAPU8[$27 >> 0] & 64;
     HEAP8[$33 >> 0] = $88;
     $status$1$i = $status$02$i;
     break;
    }
   case 108:
    {
     if ($25) $75 = -1; else if (!(HEAP8[$27 >> 0] & 1)) $75 = -1; else {
      $61 = HEAP32[(HEAP32[HEAP32[$ci$0 >> 2] >> 2] | 0) + 12 >> 2] | 0;
      $63 = HEAP32[$61 + 20 >> 2] | 0;
      if (!$63) $75 = 0; else $75 = HEAP32[$63 + (((HEAP32[$28 >> 2] | 0) - (HEAP32[$61 + 12 >> 2] | 0) >> 2) + -1 << 2) >> 2] | 0;
     }
     HEAP32[$26 >> 2] = $75;
     $status$1$i = $status$02$i;
     break;
    }
   case 110:
    {
     L31 : do if ($25) label = 46; else if (!(HEAP8[$27 >> 0] & 64)) {
      $92 = HEAP32[$36 >> 2] | 0;
      if (!(HEAP8[$92 + 18 >> 0] & 1)) label = 46; else {
       $100 = HEAP32[(HEAP32[HEAP32[$92 >> 2] >> 2] | 0) + 12 >> 2] | 0;
       $104 = HEAP32[$100 + 12 >> 2] | 0;
       $109 = ((HEAP32[$92 + 28 >> 2] | 0) - $104 >> 2) + -1 | 0;
       $111 = HEAP32[$104 + ($109 << 2) >> 2] | 0;
       do switch ($111 & 63 | 0) {
       case 7:
       case 6:
       case 12:
        {
         $tm$0$i$i = 0;
         label = 45;
         break;
        }
       case 34:
        {
         HEAP32[$35 >> 2] = 472;
         $storemerge$ph$i = 472;
         break;
        }
       case 18:
        {
         $tm$0$i$i = 11;
         label = 45;
         break;
        }
       case 19:
        {
         $tm$0$i$i = 12;
         label = 45;
         break;
        }
       case 21:
        {
         $tm$0$i$i = 4;
         label = 45;
         break;
        }
       case 25:
        {
         $tm$0$i$i = 13;
         label = 45;
         break;
        }
       case 26:
        {
         $tm$0$i$i = 14;
         label = 45;
         break;
        }
       case 22:
        {
         $tm$0$i$i = 15;
         label = 45;
         break;
        }
       case 30:
       case 29:
        {
         $119 = _getobjname($100, $109, $111 >>> 6 & 255, $35) | 0;
         HEAP32[$34 >> 2] = $119;
         if (!$119) break L31; else {
          $status$1$i = $status$02$i;
          break L12;
         }
         break;
        }
       case 10:
       case 8:
        {
         $tm$0$i$i = 1;
         label = 45;
         break;
        }
       case 24:
        {
         $tm$0$i$i = 5;
         label = 45;
         break;
        }
       case 13:
        {
         $tm$0$i$i = 6;
         label = 45;
         break;
        }
       case 14:
        {
         $tm$0$i$i = 7;
         label = 45;
         break;
        }
       case 15:
        {
         $tm$0$i$i = 8;
         label = 45;
         break;
        }
       case 16:
        {
         $tm$0$i$i = 9;
         label = 45;
         break;
        }
       case 17:
        {
         $tm$0$i$i = 10;
         label = 45;
         break;
        }
       default:
        {
         label = 46;
         break L31;
        }
       } while (0);
       if ((label | 0) == 45) {
        label = 0;
        HEAP32[$35 >> 2] = (HEAP32[(HEAP32[$37 >> 2] | 0) + 184 + ($tm$0$i$i << 2) >> 2] | 0) + 16;
        $storemerge$ph$i = 488;
       }
       HEAP32[$34 >> 2] = $storemerge$ph$i;
       $status$1$i = $status$02$i;
       break L12;
      }
     } else label = 46; while (0);
     if ((label | 0) == 46) {
      label = 0;
      HEAP32[$34 >> 2] = 0;
     }
     HEAP32[$34 >> 2] = 10072;
     HEAP32[$35 >> 2] = 0;
     $status$1$i = $status$02$i;
     break;
    }
   case 102:
   case 76:
    {
     $status$1$i = $status$02$i;
     break;
    }
   case 117:
    {
     if ($17) HEAP8[$29 >> 0] = 0; else {
      HEAP8[$29 >> 0] = HEAP8[$32 >> 0] | 0;
      if ((HEAP8[$23 >> 0] | 0) != 38) {
       $79 = HEAP32[$24 >> 2] | 0;
       HEAP8[$30 >> 0] = HEAP8[$79 + 77 >> 0] | 0;
       HEAP8[$31 >> 0] = HEAP8[$79 + 76 >> 0] | 0;
       $status$1$i = $status$02$i;
       break L12;
      }
     }
     HEAP8[$30 >> 0] = 1;
     HEAP8[$31 >> 0] = 0;
     $status$1$i = $status$02$i;
     break;
    }
   default:
    $status$1$i = 0;
   } while (0);
   $$01$i = $$01$i + 1 | 0;
   $39 = HEAP8[$$01$i >> 0] | 0;
   if (!($39 << 24 >> 24)) {
    $status$0$lcssa$i = $status$1$i;
    break L8;
   } else $status$02$i = $status$1$i;
  }
 } while (0);
 if (_strchr($$0, 102) | 0) {
  $126 = $L + 8 | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $func$0;
  $133 = HEAP32[$128 + 4 >> 2] | 0;
  $134 = $127;
  HEAP32[$134 >> 2] = HEAP32[$128 >> 2];
  HEAP32[$134 + 4 >> 2] = $133;
  HEAP32[$127 + 8 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$126 >> 2] = (HEAP32[$126 >> 2] | 0) + 16;
 }
 if (!(_strchr($$0, 76) | 0)) {
  STACKTOP = sp;
  return $status$0$lcssa$i | 0;
 }
 if (!$16) label = 57; else if ((HEAP8[$16 + 4 >> 0] | 0) == 38) label = 57; else {
  $152 = $16 + 12 | 0;
  $155 = HEAP32[(HEAP32[$152 >> 2] | 0) + 20 >> 2] | 0;
  $156 = _luaH_new($L) | 0;
  $157 = $L + 8 | 0;
  $158 = HEAP32[$157 >> 2] | 0;
  HEAP32[$158 >> 2] = $156;
  HEAP32[$158 + 8 >> 2] = 69;
  HEAP32[$157 >> 2] = (HEAP32[$157 >> 2] | 0) + 16;
  HEAP32[$v$i >> 2] = 1;
  HEAP32[$v$i + 8 >> 2] = 1;
  if ((HEAP32[(HEAP32[$152 >> 2] | 0) + 52 >> 2] | 0) > 0) {
   $i$01$i = 0;
   do {
    _luaH_setint($L, $156, HEAP32[$155 + ($i$01$i << 2) >> 2] | 0, $v$i);
    $i$01$i = $i$01$i + 1 | 0;
   } while (($i$01$i | 0) < (HEAP32[(HEAP32[$152 >> 2] | 0) + 52 >> 2] | 0));
  }
 }
 if ((label | 0) == 57) {
  $148 = $L + 8 | 0;
  $149 = HEAP32[$148 >> 2] | 0;
  HEAP32[$149 + 8 >> 2] = 0;
  HEAP32[$148 >> 2] = $149 + 16;
 }
 STACKTOP = sp;
 return $status$0$lcssa$i | 0;
}

function _luaH_newkey($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$lcssa = 0, $$lcssa37 = 0, $$lcssa38 = 0, $$lcssa40 = 0, $$lcssa41 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0.0, $20 = 0, $24 = 0, $32 = 0, $35 = 0, $4 = 0, $43 = 0, $45 = 0, $5 = 0, $53 = 0.0, $55 = 0, $60 = 0, $65 = 0, $68 = 0.0, $70 = 0, $75 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $85$phi = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $a$03$i$i = 0, $a$1$i$i = 0, $ause$0$lcssa$i$i = 0, $ause$0$ph$i$i = 0, $ause$0$ph$i$i$lcssa = 0, $ause$06$i$i = 0, $i$0$i$i = 0, $i$0$ph$i$i = 0, $i$01$i$i = 0, $i$07$i$i = 0, $i$1$lcssa$i$i = 0, $i$11$i$i = 0, $lc$0$$i$i = 0, $lc$0$$i$i$lcssa = 0, $lc$0$lcssa$i$i = 0, $lc$02$i$i = 0, $lg$04$i$i = 0, $lim$0$ph$i$i = 0, $mp$0 = 0, $n$05$i$i = 0, $n$1$i$i = 0, $n$2$i$i = 0, $na$04$i$i = 0, $na$1$i$i = 0, $na$2$i$i = 0, $nums$i = 0, $othern$0 = 0, $totaluse$0$ph$i$i = 0, $totaluse$0$ph$i$i$lcssa = 0, $ttlg$05$i$i = 0, $twotoi$02$i$i = 0, $u$sroa$0$i$i$i = 0, $vararg_buffer1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $vararg_buffer1 = sp + 16 | 0;
 $u$sroa$0$i$i$i = sp;
 $nums$i = sp + 20 | 0;
 $0 = $key + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) _luaG_runerror($L, 3088, sp + 8 | 0); else if (($1 | 0) == 3) label = 3;
 if ((label | 0) == 3) {
  $2 = +HEAPF64[$key >> 3];
  if (!($2 == $2 & 0.0 == 0.0)) _luaG_runerror($L, 3112, $vararg_buffer1);
 }
 $4 = _mainposition($t, $key) | 0;
 $5 = $4 + 8 | 0;
 do if (($4 | 0) == 3040 | (HEAP32[$5 >> 2] | 0) != 0) {
  $9 = $t + 20 | 0;
  $10 = $t + 16 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = HEAP32[$9 >> 2] | 0;
  while (1) {
   if ($12 >>> 0 <= $11 >>> 0) break;
   $14 = $12 + -32 | 0;
   HEAP32[$9 >> 2] = $14;
   if (!(HEAP32[$12 + -8 >> 2] | 0)) {
    $$lcssa40 = $12;
    $$lcssa41 = $14;
    label = 39;
    break;
   } else $12 = $14;
  }
  if ((label | 0) == 39) {
   $97 = _mainposition($t, $4 + 16 | 0) | 0;
   if (($97 | 0) == ($4 | 0)) {
    $103 = $4 + 28 | 0;
    HEAP32[$$lcssa40 + -4 >> 2] = HEAP32[$103 >> 2];
    HEAP32[$103 >> 2] = $$lcssa41;
    $mp$0 = $$lcssa41;
    break;
   } else $othern$0 = $97;
   do {
    $99 = $othern$0 + 28 | 0;
    $othern$0 = HEAP32[$99 >> 2] | 0;
   } while (($othern$0 | 0) != ($4 | 0));
   $$lcssa = $99;
   HEAP32[$$lcssa >> 2] = $$lcssa41;
   HEAP32[$$lcssa41 >> 2] = HEAP32[$4 >> 2];
   HEAP32[$$lcssa41 + 4 >> 2] = HEAP32[$4 + 4 >> 2];
   HEAP32[$$lcssa41 + 8 >> 2] = HEAP32[$4 + 8 >> 2];
   HEAP32[$$lcssa41 + 12 >> 2] = HEAP32[$4 + 12 >> 2];
   HEAP32[$$lcssa41 + 16 >> 2] = HEAP32[$4 + 16 >> 2];
   HEAP32[$$lcssa41 + 20 >> 2] = HEAP32[$4 + 20 >> 2];
   HEAP32[$$lcssa41 + 24 >> 2] = HEAP32[$4 + 24 >> 2];
   HEAP32[$$lcssa41 + 28 >> 2] = HEAP32[$4 + 28 >> 2];
   HEAP32[$4 + 28 >> 2] = 0;
   HEAP32[$5 >> 2] = 0;
   $mp$0 = $4;
   break;
  }
  dest = $nums$i;
  stop = dest + 124 | 0;
  do {
   HEAP32[dest >> 2] = 0;
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $19 = $t + 12 | 0;
  $20 = HEAP32[$t + 28 >> 2] | 0;
  $ause$06$i$i = 0;
  $i$07$i$i = 1;
  $lg$04$i$i = 0;
  $ttlg$05$i$i = 1;
  while (1) {
   if (($ttlg$05$i$i | 0) > ($20 | 0)) if (($i$07$i$i | 0) > ($20 | 0)) {
    $ause$0$lcssa$i$i = $ause$06$i$i;
    break;
   } else $lim$0$ph$i$i = $20; else $lim$0$ph$i$i = $ttlg$05$i$i;
   if (($i$07$i$i | 0) > ($lim$0$ph$i$i | 0)) {
    $i$1$lcssa$i$i = $i$07$i$i;
    $lc$0$lcssa$i$i = 0;
   } else {
    $24 = HEAP32[$19 >> 2] | 0;
    $i$11$i$i = $i$07$i$i;
    $lc$02$i$i = 0;
    while (1) {
     $lc$0$$i$i = ((HEAP32[$24 + ($i$11$i$i + -1 << 4) + 8 >> 2] | 0) != 0 & 1) + $lc$02$i$i | 0;
     if (($i$11$i$i | 0) < ($lim$0$ph$i$i | 0)) {
      $i$11$i$i = $i$11$i$i + 1 | 0;
      $lc$02$i$i = $lc$0$$i$i;
     } else {
      $lc$0$$i$i$lcssa = $lc$0$$i$i;
      break;
     }
    }
    $i$1$lcssa$i$i = $lim$0$ph$i$i + 1 | 0;
    $lc$0$lcssa$i$i = $lc$0$$i$i$lcssa;
   }
   $32 = $nums$i + ($lg$04$i$i << 2) | 0;
   HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + $lc$0$lcssa$i$i;
   $35 = $lc$0$lcssa$i$i + $ause$06$i$i | 0;
   $lg$04$i$i = $lg$04$i$i + 1 | 0;
   if (($lg$04$i$i | 0) >= 31) {
    $ause$0$lcssa$i$i = $35;
    break;
   } else {
    $ause$06$i$i = $35;
    $i$07$i$i = $i$1$lcssa$i$i;
    $ttlg$05$i$i = $ttlg$05$i$i << 1;
   }
  }
  $ause$0$ph$i$i = 0;
  $i$0$ph$i$i = 1 << (HEAPU8[$t + 7 >> 0] | 0);
  $totaluse$0$ph$i$i = 0;
  L32 : while (1) {
   $i$0$i$i = $i$0$ph$i$i;
   while (1) {
    $43 = $i$0$i$i + -1 | 0;
    if (!$i$0$i$i) {
     $ause$0$ph$i$i$lcssa = $ause$0$ph$i$i;
     $totaluse$0$ph$i$i$lcssa = $totaluse$0$ph$i$i;
     break L32;
    }
    $45 = HEAP32[$10 >> 2] | 0;
    if (!(HEAP32[$45 + ($43 << 5) + 8 >> 2] | 0)) $i$0$i$i = $43; else {
     $$lcssa37 = $43;
     $$lcssa38 = $45;
     break;
    }
   }
   if ((HEAP32[$$lcssa38 + ($$lcssa37 << 5) + 24 >> 2] | 0) == 3) {
    $53 = +HEAPF64[$$lcssa38 + ($$lcssa37 << 5) + 16 >> 3];
    HEAPF64[$u$sroa$0$i$i$i >> 3] = $53 + 6755399441055744.0;
    $55 = HEAP32[$u$sroa$0$i$i$i >> 2] | 0;
    if (+($55 | 0) == $53) if (($55 + -1 | 0) >>> 0 < 1073741824) {
     $60 = $nums$i + ((_luaO_ceillog2($55) | 0) << 2) | 0;
     HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + 1;
     $$0$i$i$i = 1;
    } else $$0$i$i$i = 0; else label = 23;
   } else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    $$0$i$i$i = 0;
   }
   $ause$0$ph$i$i = $$0$i$i$i + $ause$0$ph$i$i | 0;
   $i$0$ph$i$i = $$lcssa37;
   $totaluse$0$ph$i$i = $totaluse$0$ph$i$i + 1 | 0;
  }
  $65 = $ause$0$ph$i$i$lcssa + $ause$0$lcssa$i$i | 0;
  if ((HEAP32[$0 >> 2] | 0) == 3) {
   $68 = +HEAPF64[$key >> 3];
   HEAPF64[$u$sroa$0$i$i$i >> 3] = $68 + 6755399441055744.0;
   $70 = HEAP32[$u$sroa$0$i$i$i >> 2] | 0;
   if (+($70 | 0) == $68) if (($70 + -1 | 0) >>> 0 < 1073741824) {
    $75 = $nums$i + ((_luaO_ceillog2($70) | 0) << 2) | 0;
    HEAP32[$75 >> 2] = (HEAP32[$75 >> 2] | 0) + 1;
    $$0$i$i = 1;
   } else $$0$i$i = 0; else label = 29;
  } else label = 29;
  if ((label | 0) == 29) $$0$i$i = 0;
  $78 = $65 + $$0$i$i | 0;
  L53 : do if (($78 | 0) > 0) {
   $85 = 0;
   $a$03$i$i = 0;
   $i$01$i$i = 0;
   $n$05$i$i = 0;
   $na$04$i$i = 0;
   $twotoi$02$i$i = 1;
   while (1) {
    $81 = HEAP32[$nums$i + ($i$01$i$i << 2) >> 2] | 0;
    if (($81 | 0) > 0) {
     $83 = $81 + $a$03$i$i | 0;
     $84 = ($83 | 0) > ($85 | 0);
     $a$1$i$i = $83;
     $n$1$i$i = $84 ? $twotoi$02$i$i : $n$05$i$i;
     $na$1$i$i = $84 ? $83 : $na$04$i$i;
    } else {
     $a$1$i$i = $a$03$i$i;
     $n$1$i$i = $n$05$i$i;
     $na$1$i$i = $na$04$i$i;
    }
    if (($a$1$i$i | 0) == ($78 | 0)) {
     $n$2$i$i = $n$1$i$i;
     $na$2$i$i = $na$1$i$i;
     break L53;
    }
    if (($twotoi$02$i$i | 0) < ($78 | 0)) {
     $85$phi = $twotoi$02$i$i;
     $a$03$i$i = $a$1$i$i;
     $i$01$i$i = $i$01$i$i + 1 | 0;
     $n$05$i$i = $n$1$i$i;
     $na$04$i$i = $na$1$i$i;
     $twotoi$02$i$i = $twotoi$02$i$i << 1;
     $85 = $85$phi;
    } else {
     $n$2$i$i = $n$1$i$i;
     $na$2$i$i = $na$1$i$i;
     break;
    }
   }
  } else {
   $n$2$i$i = 0;
   $na$2$i$i = 0;
  } while (0);
  _luaH_resize($L, $t, $n$2$i$i, $ause$0$lcssa$i$i + 1 + $totaluse$0$ph$i$i$lcssa - $na$2$i$i | 0);
  $93 = _luaH_get($t, $key) | 0;
  if (($93 | 0) != 1832) {
   $$0 = $93;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = _luaH_newkey($L, $t, $key) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else $mp$0 = $4; while (0);
 $107 = $key;
 $112 = HEAP32[$107 + 4 >> 2] | 0;
 $113 = $mp$0 + 16 | 0;
 HEAP32[$113 >> 2] = HEAP32[$107 >> 2];
 HEAP32[$113 + 4 >> 2] = $112;
 HEAP32[$mp$0 + 24 >> 2] = HEAP32[$0 >> 2];
 if (HEAP32[$0 >> 2] & 64) if (HEAP8[(HEAP32[$key >> 2] | 0) + 5 >> 0] & 3) if (HEAP8[$t + 5 >> 0] & 4) _luaC_barrierback_($L, $t);
 $$0 = $mp$0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaV_equalobj_($L, $t1, $t2) {
 $L = $L | 0;
 $t1 = $t1 | 0;
 $t2 = $t2 | 0;
 var $$0 = 0, $$0$i3 = 0, $$0$i4 = 0, $0 = 0, $101 = 0, $103 = 0, $109 = 0, $113 = 0, $124 = 0, $127 = 0, $170 = 0, $171 = 0, $172 = 0, $176 = 0, $178 = 0, $183 = 0, $184 = 0, $191 = 0, $193 = 0, $198 = 0, $199 = 0, $205 = 0, $207 = 0, $212 = 0, $213 = 0, $228 = 0, $230 = 0, $231 = 0, $232 = 0, $237 = 0, $238 = 0, $245 = 0, $247 = 0, $252 = 0, $26 = 0, $27 = 0, $31 = 0, $33 = 0, $39 = 0, $43 = 0, $54 = 0, $57 = 0, $96 = 0, $97 = 0, $tm$0$ph = 0;
 $0 = $t1 + 8 | 0;
 L1 : do switch (HEAP32[$0 >> 2] & 63 | 0) {
 case 5:
  {
   $96 = HEAP32[$t1 >> 2] | 0;
   $97 = HEAP32[$t2 >> 2] | 0;
   if (($96 | 0) == ($97 | 0)) {
    $$0 = 1;
    return $$0 | 0;
   }
   if (!$L) {
    $$0 = 0;
    return $$0 | 0;
   }
   $101 = HEAP32[$96 + 8 >> 2] | 0;
   $103 = HEAP32[$97 + 8 >> 2] | 0;
   if (!$101) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (HEAP8[$101 + 6 >> 0] & 32) {
    $$0 = 0;
    return $$0 | 0;
   }
   $109 = $L + 12 | 0;
   $113 = _luaT_gettm($101, 5, HEAP32[(HEAP32[$109 >> 2] | 0) + 204 >> 2] | 0) | 0;
   if (!$113) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (($101 | 0) == ($103 | 0)) $tm$0$ph = $113; else {
    if (!$103) {
     $$0 = 0;
     return $$0 | 0;
    }
    if (HEAP8[$103 + 6 >> 0] & 32) {
     $$0 = 0;
     return $$0 | 0;
    }
    $124 = _luaT_gettm($103, 5, HEAP32[(HEAP32[$109 >> 2] | 0) + 204 >> 2] | 0) | 0;
    if (!$124) {
     $$0 = 0;
     return $$0 | 0;
    }
    $127 = HEAP32[$113 + 8 >> 2] | 0;
    if (($127 | 0) != (HEAP32[$124 + 8 >> 2] | 0)) {
     $$0 = 0;
     return $$0 | 0;
    }
    switch ($127 & 63 | 0) {
    case 22:
     {
      $$0$i3 = (HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0) & 1;
      break;
     }
    case 20:
     {
      $$0$i3 = _luaS_eqlngstr(HEAP32[$113 >> 2] | 0, HEAP32[$124 >> 2] | 0) | 0;
      break;
     }
    case 7:
     {
      if ((HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0)) {
       $tm$0$ph = $113;
       break L1;
      } else $$0 = 0;
      return $$0 | 0;
     }
    case 0:
     {
      $tm$0$ph = $113;
      break L1;
      break;
     }
    case 4:
     {
      $$0$i3 = (HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0) & 1;
      break;
     }
    case 2:
     {
      $$0$i3 = (HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0) & 1;
      break;
     }
    case 1:
     {
      $$0$i3 = (HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0) & 1;
      break;
     }
    case 5:
     {
      if ((HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0)) {
       $tm$0$ph = $113;
       break L1;
      } else $$0 = 0;
      return $$0 | 0;
     }
    case 3:
     {
      $$0$i3 = +HEAPF64[$113 >> 3] == +HEAPF64[$124 >> 3] & 1;
      break;
     }
    default:
     $$0$i3 = (HEAP32[$113 >> 2] | 0) == (HEAP32[$124 >> 2] | 0) & 1;
    }
    if (!$$0$i3) {
     $$0 = 0;
     return $$0 | 0;
    } else $tm$0$ph = $113;
   }
   break;
  }
 case 2:
  {
   $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
   return $$0 | 0;
  }
 case 3:
  {
   $$0 = +HEAPF64[$t1 >> 3] == +HEAPF64[$t2 >> 3] & 1;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
   return $$0 | 0;
  }
 case 1:
  {
   $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
   return $$0 | 0;
  }
 case 20:
  {
   $$0 = _luaS_eqlngstr(HEAP32[$t1 >> 2] | 0, HEAP32[$t2 >> 2] | 0) | 0;
   return $$0 | 0;
  }
 case 0:
  {
   $$0 = 1;
   return $$0 | 0;
  }
 case 22:
  {
   $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
   return $$0 | 0;
  }
 case 7:
  {
   $26 = HEAP32[$t1 >> 2] | 0;
   $27 = HEAP32[$t2 >> 2] | 0;
   if (($26 | 0) == ($27 | 0)) {
    $$0 = 1;
    return $$0 | 0;
   }
   if (!$L) {
    $$0 = 0;
    return $$0 | 0;
   }
   $31 = HEAP32[$26 + 8 >> 2] | 0;
   $33 = HEAP32[$27 + 8 >> 2] | 0;
   if (!$31) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (HEAP8[$31 + 6 >> 0] & 32) {
    $$0 = 0;
    return $$0 | 0;
   }
   $39 = $L + 12 | 0;
   $43 = _luaT_gettm($31, 5, HEAP32[(HEAP32[$39 >> 2] | 0) + 204 >> 2] | 0) | 0;
   if (!$43) {
    $$0 = 0;
    return $$0 | 0;
   }
   if (($31 | 0) == ($33 | 0)) $tm$0$ph = $43; else {
    if (!$33) {
     $$0 = 0;
     return $$0 | 0;
    }
    if (HEAP8[$33 + 6 >> 0] & 32) {
     $$0 = 0;
     return $$0 | 0;
    }
    $54 = _luaT_gettm($33, 5, HEAP32[(HEAP32[$39 >> 2] | 0) + 204 >> 2] | 0) | 0;
    if (!$54) {
     $$0 = 0;
     return $$0 | 0;
    }
    $57 = HEAP32[$43 + 8 >> 2] | 0;
    if (($57 | 0) != (HEAP32[$54 + 8 >> 2] | 0)) {
     $$0 = 0;
     return $$0 | 0;
    }
    switch ($57 & 63 | 0) {
    case 1:
     {
      $$0$i4 = (HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0) & 1;
      break;
     }
    case 20:
     {
      $$0$i4 = _luaS_eqlngstr(HEAP32[$43 >> 2] | 0, HEAP32[$54 >> 2] | 0) | 0;
      break;
     }
    case 5:
     {
      if ((HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0)) {
       $tm$0$ph = $43;
       break L1;
      } else $$0 = 0;
      return $$0 | 0;
     }
    case 0:
     {
      $tm$0$ph = $43;
      break L1;
      break;
     }
    case 4:
     {
      $$0$i4 = (HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0) & 1;
      break;
     }
    case 22:
     {
      $$0$i4 = (HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0) & 1;
      break;
     }
    case 3:
     {
      $$0$i4 = +HEAPF64[$43 >> 3] == +HEAPF64[$54 >> 3] & 1;
      break;
     }
    case 7:
     {
      if ((HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0)) {
       $tm$0$ph = $43;
       break L1;
      } else $$0 = 0;
      return $$0 | 0;
     }
    case 2:
     {
      $$0$i4 = (HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0) & 1;
      break;
     }
    default:
     $$0$i4 = (HEAP32[$43 >> 2] | 0) == (HEAP32[$54 >> 2] | 0) & 1;
    }
    if (!$$0$i4) {
     $$0 = 0;
     return $$0 | 0;
    } else $tm$0$ph = $43;
   }
   break;
  }
 default:
  {
   $$0 = (HEAP32[$t1 >> 2] | 0) == (HEAP32[$t2 >> 2] | 0) & 1;
   return $$0 | 0;
  }
 } while (0);
 $170 = $L + 8 | 0;
 $171 = HEAP32[$170 >> 2] | 0;
 $172 = $L + 28 | 0;
 $176 = $171 - (HEAP32[$172 >> 2] | 0) | 0;
 HEAP32[$170 >> 2] = $171 + 16;
 $178 = $tm$0$ph;
 $183 = HEAP32[$178 + 4 >> 2] | 0;
 $184 = $171;
 HEAP32[$184 >> 2] = HEAP32[$178 >> 2];
 HEAP32[$184 + 4 >> 2] = $183;
 HEAP32[$171 + 8 >> 2] = HEAP32[$tm$0$ph + 8 >> 2];
 $191 = HEAP32[$170 >> 2] | 0;
 HEAP32[$170 >> 2] = $191 + 16;
 $193 = $t1;
 $198 = HEAP32[$193 + 4 >> 2] | 0;
 $199 = $191;
 HEAP32[$199 >> 2] = HEAP32[$193 >> 2];
 HEAP32[$199 + 4 >> 2] = $198;
 HEAP32[$191 + 8 >> 2] = HEAP32[$0 >> 2];
 $205 = HEAP32[$170 >> 2] | 0;
 HEAP32[$170 >> 2] = $205 + 16;
 $207 = $t2;
 $212 = HEAP32[$207 + 4 >> 2] | 0;
 $213 = $205;
 HEAP32[$213 >> 2] = HEAP32[$207 >> 2];
 HEAP32[$213 + 4 >> 2] = $212;
 HEAP32[$205 + 8 >> 2] = HEAP32[$t2 + 8 >> 2];
 _luaD_call($L, (HEAP32[$170 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
 $228 = HEAP32[$172 >> 2] | 0;
 $230 = HEAP32[$170 >> 2] | 0;
 $231 = $230 + -16 | 0;
 HEAP32[$170 >> 2] = $231;
 $232 = $231;
 $237 = HEAP32[$232 + 4 >> 2] | 0;
 $238 = $228 + $176 | 0;
 HEAP32[$238 >> 2] = HEAP32[$232 >> 2];
 HEAP32[$238 + 4 >> 2] = $237;
 HEAP32[$228 + ($176 + 8) >> 2] = HEAP32[$230 + -8 >> 2];
 $245 = HEAP32[$170 >> 2] | 0;
 $247 = HEAP32[$245 + 8 >> 2] | 0;
 if (!$247) $252 = 0; else if (($247 | 0) == 1) $252 = (HEAP32[$245 >> 2] | 0) != 0; else $252 = 1;
 $$0 = $252 & 1;
 return $$0 | 0;
}

function _luaK_goiftrue($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1 = 0, $$lcssa = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$lcssa58 = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $1 = 0, $108 = 0, $109 = 0, $111 = 0, $112 = 0, $114 = 0, $119 = 0, $12 = 0, $128 = 0, $129 = 0, $133 = 0, $135 = 0, $137 = 0, $138 = 0, $140 = 0, $145 = 0, $19 = 0, $2 = 0, $25 = 0, $28 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $39 = 0, $40 = 0, $42 = 0, $47 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $61 = 0, $68 = 0, $72 = 0, $79 = 0, $83 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $93 = 0, $98 = 0, $fs$idx$val$idx$val = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i5 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $list$0$i$i$i7 = 0, $list$0$i$i$i7$lcssa = 0, $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0, $pc$0 = 0, $pc$014 = 0, label = 0;
 _luaK_dischargevars($fs, $e);
 $0 = HEAP32[$e >> 2] | 0;
 do if (($0 | 0) == 10) {
  $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $1 = $e + 8 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  $3 = $fs$idx$val$idx$val + ($2 << 2) | 0;
  if (($2 | 0) > 0) {
   $5 = $fs$idx$val$idx$val + ($2 + -1 << 2) | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   if ((HEAP8[2216 + ($6 & 63) >> 0] | 0) < 0) {
    $$0$i$i = $5;
    $12 = $6;
   } else label = 4;
  } else label = 4;
  if ((label | 0) == 4) {
   $$0$i$i = $3;
   $12 = HEAP32[$3 >> 2] | 0;
  }
  HEAP32[$$0$i$i >> 2] = (($12 & 16320 | 0) == 0 & 1) << 6 | $12 & -16321;
  $pc$0 = HEAP32[$1 >> 2] | 0;
  label = 32;
 } else if (!(($0 | 0) == 2 | ($0 | 0) == 5 | ($0 | 0) == 4)) {
  $19 = $e + 8 | 0;
  if (($0 | 0) == 11) {
   $25 = HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$19 >> 2] << 2) >> 2] | 0;
   if (($25 & 63 | 0) == 20) {
    $28 = $fs + 20 | 0;
    HEAP32[$28 >> 2] = (HEAP32[$28 >> 2] | 0) + -1;
    _luaK_code($fs, $25 >>> 23 << 6 | 16411) | 0;
    $34 = $fs + 28 | 0;
    $35 = HEAP32[$34 >> 2] | 0;
    HEAP32[$34 >> 2] = -1;
    $36 = _luaK_code($fs, 2147450903) | 0;
    if (($35 | 0) == -1) {
     $pc$0 = $36;
     label = 32;
     break;
    }
    if (($36 | 0) == -1) {
     $pc$014 = $35;
     label = 33;
     break;
    }
    $fs$idx$val$idx$val$i$i$i5 = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $list$0$i$i$i7 = $36;
    while (1) {
     $39 = $fs$idx$val$idx$val$i$i$i5 + ($list$0$i$i$i7 << 2) | 0;
     $40 = HEAP32[$39 >> 2] | 0;
     $42 = ($40 >>> 14) + -131071 | 0;
     $$0$i$i$i$i8 = ($42 | 0) == -1 ? -1 : $list$0$i$i$i7 + 1 + $42 | 0;
     if (($$0$i$i$i$i8 | 0) == -1) {
      $$lcssa57 = $39;
      $$lcssa58 = $40;
      $list$0$i$i$i7$lcssa = $list$0$i$i$i7;
      break;
     } else $list$0$i$i$i7 = $$0$i$i$i$i8;
    }
    $47 = $35 + ~$list$0$i$i$i7$lcssa | 0;
    if (((($47 | 0) > -1 ? $47 : 0 - $47 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
     HEAP32[$$lcssa57 >> 2] = ($47 << 14) + 2147467264 | $$lcssa58 & 16383;
     $pc$0 = $36;
     label = 32;
     break;
    }
   } else label = 15;
  } else if (($0 | 0) == 6) label = 22; else label = 15;
  if ((label | 0) == 15) {
   $56 = $fs + 48 | 0;
   $59 = (HEAPU8[$56 >> 0] | 0) + 1 | 0;
   $61 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
   do if ($59 >>> 0 > (HEAPU8[$61 >> 0] | 0) >>> 0) if ($59 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
    $68 = $59 & 255;
    HEAP8[$61 >> 0] = $68;
    $$pre$phi$i$iZ2D = $68;
    break;
   } else $$pre$phi$i$iZ2D = $59 & 255; while (0);
   HEAP8[$56 >> 0] = $$pre$phi$i$iZ2D;
   _discharge2reg($fs, $e, ($$pre$phi$i$iZ2D & 255) + -1 | 0);
   if ((HEAP32[$e >> 2] | 0) == 6) label = 22; else $83 = HEAP32[$19 >> 2] | 0;
  }
  if ((label | 0) == 22) {
   $72 = HEAP32[$19 >> 2] | 0;
   if (!($72 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0) > ($72 | 0)) $83 = $72; else {
    $79 = $fs + 48 | 0;
    HEAP8[$79 >> 0] = (HEAP8[$79 >> 0] | 0) + -1 << 24 >> 24;
    $83 = $72;
   } else $83 = $72;
  }
  _luaK_code($fs, $83 << 23 | 16348) | 0;
  $85 = $fs + 28 | 0;
  $86 = HEAP32[$85 >> 2] | 0;
  HEAP32[$85 >> 2] = -1;
  $87 = _luaK_code($fs, 2147450903) | 0;
  if (($86 | 0) == -1) {
   $pc$0 = $87;
   label = 32;
  } else if (($87 | 0) == -1) {
   $pc$014 = $86;
   label = 33;
  } else {
   $fs$idx$val$idx$val$i$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
   $list$0$i$i$i = $87;
   while (1) {
    $90 = $fs$idx$val$idx$val$i$i$i + ($list$0$i$i$i << 2) | 0;
    $91 = HEAP32[$90 >> 2] | 0;
    $93 = ($91 >>> 14) + -131071 | 0;
    $$0$i$i$i$i = ($93 | 0) == -1 ? -1 : $list$0$i$i$i + 1 + $93 | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     $$lcssa55 = $90;
     $$lcssa56 = $91;
     $list$0$i$i$i$lcssa = $list$0$i$i$i;
     break;
    } else $list$0$i$i$i = $$0$i$i$i$i;
   }
   $98 = $86 + ~$list$0$i$i$i$lcssa | 0;
   if (((($98 | 0) > -1 ? $98 : 0 - $98 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
    HEAP32[$$lcssa55 >> 2] = ($98 << 14) + 2147467264 | $$lcssa56 & 16383;
    $pc$0 = $87;
    label = 32;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 32) if (($pc$0 | 0) != -1) {
  $pc$014 = $pc$0;
  label = 33;
 }
 do if ((label | 0) == 33) {
  $108 = $e + 20 | 0;
  $109 = HEAP32[$108 >> 2] | 0;
  if (($109 | 0) == -1) {
   HEAP32[$108 >> 2] = $pc$014;
   break;
  }
  $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $list$0$i = $109;
  while (1) {
   $111 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
   $112 = HEAP32[$111 >> 2] | 0;
   $114 = ($112 >>> 14) + -131071 | 0;
   $$0$i$i1 = ($114 | 0) == -1 ? -1 : $list$0$i + 1 + $114 | 0;
   if (($$0$i$i1 | 0) == -1) {
    $$lcssa53 = $111;
    $$lcssa54 = $112;
    $list$0$i$lcssa = $list$0$i;
    break;
   } else $list$0$i = $$0$i$i1;
  }
  $119 = $pc$014 + ~$list$0$i$lcssa | 0;
  if (((($119 | 0) > -1 ? $119 : 0 - $119 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
   HEAP32[$$lcssa53 >> 2] = ($119 << 14) + 2147467264 | $$lcssa54 & 16383;
   break;
  }
 } while (0);
 $128 = $e + 16 | 0;
 $129 = HEAP32[$128 >> 2] | 0;
 HEAP32[$fs + 24 >> 2] = HEAP32[$fs + 20 >> 2];
 $133 = $fs + 28 | 0;
 if (($129 | 0) == -1) {
  HEAP32[$128 >> 2] = -1;
  return;
 }
 $135 = HEAP32[$133 >> 2] | 0;
 if (($135 | 0) == -1) {
  HEAP32[$133 >> 2] = $129;
  HEAP32[$128 >> 2] = -1;
  return;
 }
 $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0$i$i = $135;
 while (1) {
  $137 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
  $138 = HEAP32[$137 >> 2] | 0;
  $140 = ($138 >>> 14) + -131071 | 0;
  $$0$i$i$i = ($140 | 0) == -1 ? -1 : $list$0$i$i + 1 + $140 | 0;
  if (($$0$i$i$i | 0) == -1) {
   $$lcssa = $137;
   $$lcssa52 = $138;
   $list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else $list$0$i$i = $$0$i$i$i;
 }
 $145 = $129 + ~$list$0$i$i$lcssa | 0;
 if (((($145 | 0) > -1 ? $145 : 0 - $145 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = ($145 << 14) + 2147467264 | $$lcssa52 & 16383;
 HEAP32[$128 >> 2] = -1;
 return;
}

function _body($ls, $e, $ismethod, $line) {
 $ls = $ls | 0;
 $e = $e | 0;
 $ismethod = $ismethod | 0;
 $line = $line | 0;
 var $$01$i$i = 0, $$idx$val$i = 0, $$idx$val$idx$val$i$i = 0, $$idx1$val$idx$val$idx$val$i$i = 0, $$pre = 0, $$pre3$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $112 = 0, $116 = 0, $118 = 0, $127 = 0, $128 = 0, $135 = 0, $138 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $148 = 0, $152 = 0, $16 = 0, $17 = 0, $3 = 0, $30 = 0, $33 = 0, $39 = 0, $4 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $69 = 0, $7 = 0, $8 = 0, $80 = 0, $85 = 0, $88 = 0, $99 = 0, $bl = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx$val$i = 0, $ls$idx$val$i7 = 0, $ls$idx1 = 0, $ls$idx1$val = 0, $ls$idx2$val = 0, $ls$idx3$val$idx$val = 0, $new_fs = 0, $nparams$0$i = 0, $nparams$0$i$lcssa26 = 0, $nparams$2$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer = sp;
 $new_fs = sp + 24 | 0;
 $bl = sp + 12 | 0;
 $ls$idx = $ls + 48 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1 = $ls + 52 | 0;
 $ls$idx1$val = HEAP32[$ls$idx1 >> 2] | 0;
 $0 = HEAP32[$ls$idx$val >> 2] | 0;
 $1 = $ls$idx$val + 36 | 0;
 $3 = $0 + 56 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $$pre3$i = $0 + 16 | 0;
 if ((HEAP32[$1 >> 2] | 0) >= ($4 | 0)) {
  $7 = _luaM_growaux_($ls$idx1$val, HEAP32[$$pre3$i >> 2] | 0, $3, 4, 262143, 2824) | 0;
  HEAP32[$$pre3$i >> 2] = $7;
  $8 = HEAP32[$3 >> 2] | 0;
  if (($4 | 0) < ($8 | 0)) {
   $10 = $4 + 1 | 0;
   HEAP32[$7 + ($4 << 2) >> 2] = 0;
   if (($10 | 0) < ($8 | 0)) {
    $14 = $10;
    do {
     HEAP32[(HEAP32[$$pre3$i >> 2] | 0) + ($14 << 2) >> 2] = 0;
     $14 = $14 + 1 | 0;
    } while (($14 | 0) != ($8 | 0));
   }
  }
 }
 $16 = _luaF_newproto($ls$idx1$val) | 0;
 $17 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $17 + 1;
 HEAP32[(HEAP32[$$pre3$i >> 2] | 0) + ($17 << 2) >> 2] = $16;
 if (HEAP8[$16 + 5 >> 0] & 3) if (HEAP8[$0 + 5 >> 0] & 4) _luaC_barrier_($ls$idx1$val, $0, $16);
 HEAP32[$new_fs >> 2] = $16;
 HEAP32[$16 + 64 >> 2] = $line;
 $30 = HEAP32[$ls$idx1 >> 2] | 0;
 HEAP32[$new_fs + 8 >> 2] = HEAP32[$ls$idx >> 2];
 $33 = $new_fs + 12 | 0;
 HEAP32[$33 >> 2] = $ls;
 HEAP32[$ls$idx >> 2] = $new_fs;
 HEAP32[$new_fs + 20 >> 2] = 0;
 HEAP32[$new_fs + 24 >> 2] = 0;
 HEAP32[$new_fs + 28 >> 2] = -1;
 HEAP32[$new_fs + 32 >> 2] = 0;
 HEAP32[$new_fs + 36 >> 2] = 0;
 $39 = $new_fs + 44 | 0;
 HEAP32[$39 >> 2] = 0;
 HEAP8[$39 + 4 >> 0] = 0;
 HEAP32[$new_fs + 40 >> 2] = HEAP32[(HEAP32[$ls + 64 >> 2] | 0) + 4 >> 2];
 $45 = $new_fs + 16 | 0;
 HEAP32[$45 >> 2] = 0;
 HEAP32[$16 + 36 >> 2] = HEAP32[$ls + 68 >> 2];
 HEAP8[$16 + 78 >> 0] = 2;
 $50 = _luaH_new($30) | 0;
 HEAP32[$new_fs + 4 >> 2] = $50;
 $52 = $30 + 8 | 0;
 $53 = HEAP32[$52 >> 2] | 0;
 HEAP32[$53 >> 2] = $50;
 HEAP32[$53 + 8 >> 2] = 69;
 $56 = (HEAP32[$52 >> 2] | 0) + 16 | 0;
 HEAP32[$52 >> 2] = $56;
 if (((HEAP32[$30 + 24 >> 2] | 0) - $56 | 0) < 16) _luaD_growstack($30, 0);
 HEAP8[$bl + 10 >> 0] = 0;
 HEAP8[$bl + 8 >> 0] = HEAP8[$new_fs + 46 >> 0] | 0;
 $69 = HEAP32[(HEAP32[$33 >> 2] | 0) + 64 >> 2] | 0;
 HEAP16[$bl + 4 >> 1] = HEAP32[$69 + 28 >> 2];
 HEAP16[$bl + 6 >> 1] = HEAP32[$69 + 16 >> 2];
 HEAP8[$bl + 9 >> 0] = 0;
 HEAP32[$bl >> 2] = HEAP32[$45 >> 2];
 HEAP32[$45 >> 2] = $bl;
 $80 = $ls + 16 | 0;
 if ((HEAP32[$80 >> 2] | 0) != 40) _error_expected($ls, 40);
 _luaX_next($ls);
 if (!$ismethod) {
  $$pre = HEAP32[$ls$idx >> 2] | 0;
  $100 = HEAP32[$$pre >> 2] | 0;
  $127 = $$pre;
 } else {
  _new_localvar($ls, _luaX_newstring($ls, 2840, 4) | 0);
  $ls$idx2$val = HEAP32[$ls$idx >> 2] | 0;
  $85 = $ls$idx2$val + 46 | 0;
  $88 = (HEAPU8[$85 >> 0] | 0) + 1 | 0;
  HEAP8[$85 >> 0] = $88;
  $$idx$val$i = HEAP32[$ls$idx2$val >> 2] | 0;
  HEAP32[(HEAP32[$$idx$val$i + 24 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$ls$idx2$val + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0) + ((HEAP32[$ls$idx2$val + 40 >> 2] | 0) + ($88 & 255) + -1 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = HEAP32[$ls$idx2$val + 20 >> 2];
  $100 = $$idx$val$i;
  $127 = $ls$idx2$val;
 }
 $99 = $100 + 77 | 0;
 HEAP8[$99 >> 0] = 0;
 $101 = HEAP32[$80 >> 2] | 0;
 L21 : do if (($101 | 0) == 41) $nparams$2$i = 0; else {
  $103 = $ls + 24 | 0;
  $152 = $101;
  $nparams$0$i = 0;
  while (1) {
   if (($152 | 0) == 280) {
    $nparams$0$i$lcssa26 = $nparams$0$i;
    label = 19;
    break;
   } else if (($152 | 0) != 288) {
    label = 20;
    break;
   }
   $104 = HEAP32[$103 >> 2] | 0;
   _luaX_next($ls);
   _new_localvar($ls, $104);
   $105 = $nparams$0$i + 1 | 0;
   if (HEAP8[$99 >> 0] | 0) {
    $nparams$2$i = $105;
    break L21;
   }
   if ((HEAP32[$80 >> 2] | 0) != 44) {
    $nparams$2$i = $105;
    break L21;
   }
   _luaX_next($ls);
   $152 = HEAP32[$80 >> 2] | 0;
   $nparams$0$i = $105;
  }
  if ((label | 0) == 19) {
   _luaX_next($ls);
   HEAP8[$99 >> 0] = 1;
   $nparams$2$i = $nparams$0$i$lcssa26;
   break;
  } else if ((label | 0) == 20) _luaX_syntaxerror($ls, 2848);
 } while (0);
 $ls$idx$val$i = HEAP32[$ls$idx >> 2] | 0;
 $109 = $ls$idx$val$i + 46 | 0;
 $112 = (HEAPU8[$109 >> 0] | 0) + $nparams$2$i | 0;
 HEAP8[$109 >> 0] = $112;
 if ($nparams$2$i) {
  $116 = HEAP32[$ls$idx$val$i + 20 >> 2] | 0;
  $$idx$val$idx$val$i$i = HEAP32[(HEAP32[$ls$idx$val$i >> 2] | 0) + 24 >> 2] | 0;
  $$idx1$val$idx$val$idx$val$i$i = HEAP32[HEAP32[(HEAP32[$ls$idx$val$i + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0;
  $118 = (HEAP32[$ls$idx$val$i + 40 >> 2] | 0) + ($112 & 255) | 0;
  $$01$i$i = $nparams$2$i;
  do {
   HEAP32[$$idx$val$idx$val$i$i + ((HEAP16[$$idx1$val$idx$val$idx$val$i$i + ($118 - $$01$i$i << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $116;
   $$01$i$i = $$01$i$i + -1 | 0;
  } while (($$01$i$i | 0) != 0);
 }
 $128 = HEAP8[$127 + 46 >> 0] | 0;
 HEAP8[$100 + 76 >> 0] = $128;
 _luaK_reserveregs($127, $128 & 255);
 if ((HEAP32[$80 >> 2] | 0) != 41) _error_expected($ls, 41);
 _luaX_next($ls);
 L40 : while (1) {
  $ls$idx$val$i7 = HEAP32[$80 >> 2] | 0;
  switch ($ls$idx$val$i7 | 0) {
  case 277:
  case 286:
  case 262:
  case 261:
  case 260:
   {
    $138 = $ls$idx$val$i7;
    break L40;
    break;
   }
  default:
   {}
  }
  _statement($ls);
  if (($ls$idx$val$i7 | 0) == 274) {
   label = 31;
   break;
  }
 }
 if ((label | 0) == 31) $138 = HEAP32[$80 >> 2] | 0;
 $135 = HEAP32[$ls + 4 >> 2] | 0;
 HEAP32[(HEAP32[$new_fs >> 2] | 0) + 68 >> 2] = $135;
 if (($138 | 0) == 262) {
  _luaX_next($ls);
  $ls$idx3$val$idx$val = HEAP32[(HEAP32[$ls$idx >> 2] | 0) + 8 >> 2] | 0;
  $148 = _luaK_codeABx($ls$idx3$val$idx$val, 37, 0, (HEAP32[$ls$idx3$val$idx$val + 36 >> 2] | 0) + -1 | 0) | 0;
  HEAP32[$e + 16 >> 2] = -1;
  HEAP32[$e + 20 >> 2] = -1;
  HEAP32[$e >> 2] = 11;
  HEAP32[$e + 8 >> 2] = $148;
  _luaK_exp2nextreg($ls$idx3$val$idx$val, $e);
  _close_func($ls);
  STACKTOP = sp;
  return;
 }
 if (($135 | 0) == ($line | 0)) _error_expected($ls, 262); else {
  $141 = HEAP32[$ls$idx1 >> 2] | 0;
  $142 = _luaX_token2str($ls, 262) | 0;
  $143 = _luaX_token2str($ls, 265) | 0;
  HEAP32[$vararg_buffer >> 2] = $142;
  HEAP32[$vararg_buffer + 4 >> 2] = $143;
  HEAP32[$vararg_buffer + 8 >> 2] = $line;
  _luaX_syntaxerror($ls, _luaO_pushfstring($141, 2528, $vararg_buffer) | 0);
 }
}

function _luaK_goiffalse($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$lcssa = 0, $$lcssa51 = 0, $$lcssa52 = 0, $$lcssa53 = 0, $$lcssa54 = 0, $$lcssa55 = 0, $$lcssa56 = 0, $$lcssa57 = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $103 = 0, $112 = 0, $113 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $124 = 0, $129 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $40 = 0, $43 = 0, $45 = 0, $52 = 0, $56 = 0, $63 = 0, $67 = 0, $69 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $77 = 0, $82 = 0, $9 = 0, $92 = 0, $93 = 0, $95 = 0, $96 = 0, $98 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$i$i = 0, $fs$idx$val$idx$val$i$i$i4 = 0, $list$0$i = 0, $list$0$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $list$0$i$i$i6 = 0, $list$0$i$i$i6$lcssa = 0, $list$0$i$i$lcssa = 0, $list$0$i$lcssa = 0, $pc$0 = 0, $pc$013 = 0, label = 0;
 _luaK_dischargevars($fs, $e);
 $0 = HEAP32[$e >> 2] | 0;
 do if (($0 | 0) == 10) {
  $pc$0 = HEAP32[$e + 8 >> 2] | 0;
  label = 29;
 } else if (!(($0 | 0) == 3 | ($0 | 0) == 1)) {
  $3 = $e + 8 | 0;
  if (($0 | 0) == 11) {
   $9 = HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$3 >> 2] << 2) >> 2] | 0;
   if (($9 & 63 | 0) == 20) {
    $12 = $fs + 20 | 0;
    HEAP32[$12 >> 2] = (HEAP32[$12 >> 2] | 0) + -1;
    _luaK_code($fs, $9 >>> 23 << 6 | 27) | 0;
    $18 = $fs + 28 | 0;
    $19 = HEAP32[$18 >> 2] | 0;
    HEAP32[$18 >> 2] = -1;
    $20 = _luaK_code($fs, 2147450903) | 0;
    if (($19 | 0) == -1) {
     $pc$0 = $20;
     label = 29;
     break;
    }
    if (($20 | 0) == -1) {
     $pc$013 = $19;
     label = 30;
     break;
    }
    $fs$idx$val$idx$val$i$i$i4 = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $list$0$i$i$i6 = $20;
    while (1) {
     $23 = $fs$idx$val$idx$val$i$i$i4 + ($list$0$i$i$i6 << 2) | 0;
     $24 = HEAP32[$23 >> 2] | 0;
     $26 = ($24 >>> 14) + -131071 | 0;
     $$0$i$i$i$i7 = ($26 | 0) == -1 ? -1 : $list$0$i$i$i6 + 1 + $26 | 0;
     if (($$0$i$i$i$i7 | 0) == -1) {
      $$lcssa56 = $23;
      $$lcssa57 = $24;
      $list$0$i$i$i6$lcssa = $list$0$i$i$i6;
      break;
     } else $list$0$i$i$i6 = $$0$i$i$i$i7;
    }
    $31 = $19 + ~$list$0$i$i$i6$lcssa | 0;
    if (((($31 | 0) > -1 ? $31 : 0 - $31 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
     HEAP32[$$lcssa56 >> 2] = ($31 << 14) + 2147467264 | $$lcssa57 & 16383;
     $pc$0 = $20;
     label = 29;
     break;
    }
   } else label = 12;
  } else if (($0 | 0) == 6) label = 19; else label = 12;
  if ((label | 0) == 12) {
   $40 = $fs + 48 | 0;
   $43 = (HEAPU8[$40 >> 0] | 0) + 1 | 0;
   $45 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
   do if ($43 >>> 0 > (HEAPU8[$45 >> 0] | 0) >>> 0) if ($43 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
    $52 = $43 & 255;
    HEAP8[$45 >> 0] = $52;
    $$pre$phi$i$iZ2D = $52;
    break;
   } else $$pre$phi$i$iZ2D = $43 & 255; while (0);
   HEAP8[$40 >> 0] = $$pre$phi$i$iZ2D;
   _discharge2reg($fs, $e, ($$pre$phi$i$iZ2D & 255) + -1 | 0);
   if ((HEAP32[$e >> 2] | 0) == 6) label = 19; else $67 = HEAP32[$3 >> 2] | 0;
  }
  if ((label | 0) == 19) {
   $56 = HEAP32[$3 >> 2] | 0;
   if (!($56 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) > ($56 | 0)) $67 = $56; else {
    $63 = $fs + 48 | 0;
    HEAP8[$63 >> 0] = (HEAP8[$63 >> 0] | 0) + -1 << 24 >> 24;
    $67 = $56;
   } else $67 = $56;
  }
  _luaK_code($fs, $67 << 23 | 32732) | 0;
  $69 = $fs + 28 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  HEAP32[$69 >> 2] = -1;
  $71 = _luaK_code($fs, 2147450903) | 0;
  if (($70 | 0) == -1) {
   $pc$0 = $71;
   label = 29;
  } else if (($71 | 0) == -1) {
   $pc$013 = $70;
   label = 30;
  } else {
   $fs$idx$val$idx$val$i$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
   $list$0$i$i$i = $71;
   while (1) {
    $74 = $fs$idx$val$idx$val$i$i$i + ($list$0$i$i$i << 2) | 0;
    $75 = HEAP32[$74 >> 2] | 0;
    $77 = ($75 >>> 14) + -131071 | 0;
    $$0$i$i$i$i = ($77 | 0) == -1 ? -1 : $list$0$i$i$i + 1 + $77 | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     $$lcssa54 = $74;
     $$lcssa55 = $75;
     $list$0$i$i$i$lcssa = $list$0$i$i$i;
     break;
    } else $list$0$i$i$i = $$0$i$i$i$i;
   }
   $82 = $70 + ~$list$0$i$i$i$lcssa | 0;
   if (((($82 | 0) > -1 ? $82 : 0 - $82 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
    HEAP32[$$lcssa54 >> 2] = ($82 << 14) + 2147467264 | $$lcssa55 & 16383;
    $pc$0 = $71;
    label = 29;
    break;
   }
  }
 } while (0);
 if ((label | 0) == 29) if (($pc$0 | 0) != -1) {
  $pc$013 = $pc$0;
  label = 30;
 }
 do if ((label | 0) == 30) {
  $92 = $e + 16 | 0;
  $93 = HEAP32[$92 >> 2] | 0;
  if (($93 | 0) == -1) {
   HEAP32[$92 >> 2] = $pc$013;
   break;
  }
  $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $list$0$i = $93;
  while (1) {
   $95 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
   $96 = HEAP32[$95 >> 2] | 0;
   $98 = ($96 >>> 14) + -131071 | 0;
   $$0$i$i = ($98 | 0) == -1 ? -1 : $list$0$i + 1 + $98 | 0;
   if (($$0$i$i | 0) == -1) {
    $$lcssa52 = $95;
    $$lcssa53 = $96;
    $list$0$i$lcssa = $list$0$i;
    break;
   } else $list$0$i = $$0$i$i;
  }
  $103 = $pc$013 + ~$list$0$i$lcssa | 0;
  if (((($103 | 0) > -1 ? $103 : 0 - $103 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
   HEAP32[$$lcssa52 >> 2] = ($103 << 14) + 2147467264 | $$lcssa53 & 16383;
   break;
  }
 } while (0);
 $112 = $e + 20 | 0;
 $113 = HEAP32[$112 >> 2] | 0;
 HEAP32[$fs + 24 >> 2] = HEAP32[$fs + 20 >> 2];
 $117 = $fs + 28 | 0;
 if (($113 | 0) == -1) {
  HEAP32[$112 >> 2] = -1;
  return;
 }
 $119 = HEAP32[$117 >> 2] | 0;
 if (($119 | 0) == -1) {
  HEAP32[$117 >> 2] = $113;
  HEAP32[$112 >> 2] = -1;
  return;
 }
 $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0$i$i = $119;
 while (1) {
  $121 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
  $122 = HEAP32[$121 >> 2] | 0;
  $124 = ($122 >>> 14) + -131071 | 0;
  $$0$i$i$i = ($124 | 0) == -1 ? -1 : $list$0$i$i + 1 + $124 | 0;
  if (($$0$i$i$i | 0) == -1) {
   $$lcssa = $121;
   $$lcssa51 = $122;
   $list$0$i$i$lcssa = $list$0$i$i;
   break;
  } else $list$0$i$i = $$0$i$i$i;
 }
 $129 = $113 + ~$list$0$i$i$lcssa | 0;
 if (((($129 | 0) > -1 ? $129 : 0 - $129 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = ($129 << 14) + 2147467264 | $$lcssa51 & 16383;
 HEAP32[$112 >> 2] = -1;
 return;
}

function _getobjname($p, $lastpc, $reg, $name) {
 $p = $p | 0;
 $lastpc = $lastpc | 0;
 $reg = $reg | 0;
 $name = $name | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa101 = 0, $$lcssa96 = 0, $$lcssa97 = 0, $$lcssa98 = 0, $$lcssa99 = 0, $0 = 0, $10 = 0, $106 = 0, $2 = 0, $23 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $49 = 0, $5 = 0, $54 = 0, $56 = 0, $64 = 0, $68 = 0, $7 = 0, $71 = 0, $74 = 0, $8 = 0, $83 = 0, $85 = 0, $92 = 0, $95 = 0, $97 = 0, $jmptarget$07$i = 0, $jmptarget$1$i = 0, $lastpc$tr = 0, $pc$09$i = 0, $reg$tr = 0, $setreg$08$i = 0, $setreg$1$i = 0, $setreg$1$i$lcssa = 0, $setreg$1$i$lcssa$lcssa = 0, $setreg$1$i$lcssa$lcssa90 = 0, $setreg$1$i$lcssa$lcssa92 = 0, label = 0;
 $0 = $p + 12 | 0;
 $lastpc$tr = $lastpc;
 $reg$tr = $reg;
 L1 : while (1) {
  $2 = _luaF_getlocalname($p, $reg$tr + 1 | 0, $lastpc$tr) | 0;
  HEAP32[$name >> 2] = $2;
  if ($2) {
   $$0 = 1608;
   label = 44;
   break;
  }
  if (($lastpc$tr | 0) <= 0) {
   $$0 = 0;
   label = 44;
   break;
  }
  $5 = HEAP32[$0 >> 2] | 0;
  $jmptarget$07$i = 0;
  $pc$09$i = 0;
  $setreg$08$i = -1;
  while (1) {
   $7 = HEAP32[$5 + ($pc$09$i << 2) >> 2] | 0;
   $8 = $7 & 63;
   $10 = $7 >>> 6 & 255;
   switch ($8 | 0) {
   case 23:
    {
     $23 = $pc$09$i + -131070 + ($7 >>> 14) | 0;
     $jmptarget$1$i = ($23 | 0) > ($jmptarget$07$i | 0) & (($23 | 0) <= ($lastpc$tr | 0) & ($pc$09$i | 0) < ($23 | 0)) ? $23 : $jmptarget$07$i;
     $setreg$1$i = $setreg$08$i;
     break;
    }
   case 27:
    {
     if (($10 | 0) == ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = ($pc$09$i | 0) < ($jmptarget$07$i | 0) ? -1 : $pc$09$i;
     } else {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = $setreg$08$i;
     }
     break;
    }
   case 4:
    {
     if (($10 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = $setreg$08$i;
     } else if (($10 + ($7 >>> 23) | 0) < ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = $setreg$08$i;
     } else {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = ($pc$09$i | 0) < ($jmptarget$07$i | 0) ? -1 : $pc$09$i;
     }
     break;
    }
   case 30:
   case 29:
    {
     if (($10 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = $setreg$08$i;
     } else {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = ($pc$09$i | 0) < ($jmptarget$07$i | 0) ? -1 : $pc$09$i;
     }
     break;
    }
   case 34:
    {
     if (($10 + 2 | 0) > ($reg$tr | 0)) {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = $setreg$08$i;
     } else {
      $jmptarget$1$i = $jmptarget$07$i;
      $setreg$1$i = ($pc$09$i | 0) < ($jmptarget$07$i | 0) ? -1 : $pc$09$i;
     }
     break;
    }
   default:
    if (($10 | 0) == ($reg$tr | 0) & (HEAP8[2216 + $8 >> 0] & 64) != 0) {
     $jmptarget$1$i = $jmptarget$07$i;
     $setreg$1$i = ($pc$09$i | 0) < ($jmptarget$07$i | 0) ? -1 : $pc$09$i;
    } else {
     $jmptarget$1$i = $jmptarget$07$i;
     $setreg$1$i = $setreg$08$i;
    }
   }
   $pc$09$i = $pc$09$i + 1 | 0;
   if (($pc$09$i | 0) == ($lastpc$tr | 0)) {
    $setreg$1$i$lcssa = $setreg$1$i;
    break;
   } else {
    $jmptarget$07$i = $jmptarget$1$i;
    $setreg$08$i = $setreg$1$i;
   }
  }
  if (($setreg$1$i$lcssa | 0) == -1) {
   $$0 = 0;
   label = 44;
   break;
  }
  $36 = HEAP32[$5 + ($setreg$1$i$lcssa << 2) >> 2] | 0;
  $37 = $36 & 63;
  switch ($37 | 0) {
  case 1:
   {
    $$lcssa99 = $36;
    label = 34;
    break L1;
    break;
   }
  case 0:
   break;
  case 2:
   {
    $$lcssa96 = $5;
    $setreg$1$i$lcssa$lcssa92 = $setreg$1$i$lcssa;
    label = 35;
    break L1;
    break;
   }
  case 5:
   {
    $$lcssa97 = $36;
    label = 33;
    break L1;
    break;
   }
  case 12:
   {
    $$lcssa98 = $36;
    $setreg$1$i$lcssa$lcssa90 = $setreg$1$i$lcssa;
    label = 38;
    break L1;
    break;
   }
  case 7:
  case 6:
   {
    $$lcssa = $36;
    $$lcssa101 = $37;
    $setreg$1$i$lcssa$lcssa = $setreg$1$i$lcssa;
    label = 22;
    break L1;
    break;
   }
  default:
   {
    $$0 = 0;
    label = 44;
    break L1;
   }
  }
  $38 = $36 >>> 23;
  if ($38 >>> 0 < ($36 >>> 6 & 255) >>> 0) {
   $lastpc$tr = $setreg$1$i$lcssa;
   $reg$tr = $38;
  } else {
   $$0 = 0;
   label = 44;
   break;
  }
 }
 if ((label | 0) == 22) {
  $42 = $$lcssa >>> 14;
  $44 = $$lcssa >>> 23;
  if (($$lcssa101 | 0) == 7) $68 = _luaF_getlocalname($p, $44 + 1 | 0, $setreg$1$i$lcssa$lcssa) | 0; else {
   $49 = HEAP32[(HEAP32[$p + 28 >> 2] | 0) + ($44 << 3) >> 2] | 0;
   $68 = ($49 | 0) == 0 ? 11136 : $49 + 16 | 0;
  }
  if (!($42 & 256)) {
   $64 = _getobjname($p, $setreg$1$i$lcssa$lcssa, $42 & 511, $name) | 0;
   if (!$64) label = 30; else if ((HEAP8[$64 >> 0] | 0) != 99) label = 30;
  } else {
   $54 = $42 & 255;
   $56 = HEAP32[$p + 8 >> 2] | 0;
   if ((HEAP32[$56 + ($54 << 4) + 8 >> 2] & 15 | 0) == 4) HEAP32[$name >> 2] = (HEAP32[$56 + ($54 << 4) >> 2] | 0) + 16; else label = 30;
  }
  if ((label | 0) == 30) HEAP32[$name >> 2] = 11136;
  if (!$68) {
   $$0 = 704;
   return $$0 | 0;
  }
  $71 = (_strcmp($68, 1192) | 0) == 0;
  $$0 = $71 ? 696 : 704;
  return $$0 | 0;
 } else if ((label | 0) == 33) {
  $74 = HEAP32[(HEAP32[$p + 28 >> 2] | 0) + ($$lcssa97 >>> 23 << 3) >> 2] | 0;
  HEAP32[$name >> 2] = ($74 | 0) == 0 ? 11136 : $74 + 16 | 0;
  $$0 = 504;
  return $$0 | 0;
 } else if ((label | 0) == 34) $85 = $$lcssa99 >>> 14; else if ((label | 0) == 35) $85 = (HEAP32[$$lcssa96 + ($setreg$1$i$lcssa$lcssa92 + 1 << 2) >> 2] | 0) >>> 6; else if ((label | 0) == 38) {
  $92 = $$lcssa98 >>> 14;
  if (!($92 & 256)) {
   $106 = _getobjname($p, $setreg$1$i$lcssa$lcssa90, $92 & 511, $name) | 0;
   if ($106) if ((HEAP8[$106 >> 0] | 0) == 99) {
    $$0 = 3960;
    return $$0 | 0;
   }
  } else {
   $95 = $92 & 255;
   $97 = HEAP32[$p + 8 >> 2] | 0;
   if ((HEAP32[$97 + ($95 << 4) + 8 >> 2] & 15 | 0) == 4) {
    HEAP32[$name >> 2] = (HEAP32[$97 + ($95 << 4) >> 2] | 0) + 16;
    $$0 = 3960;
    return $$0 | 0;
   }
  }
  HEAP32[$name >> 2] = 11136;
  $$0 = 3960;
  return $$0 | 0;
 } else if ((label | 0) == 44) return $$0 | 0;
 $83 = HEAP32[$p + 8 >> 2] | 0;
 if ((HEAP32[$83 + ($85 << 4) + 8 >> 2] & 15 | 0) != 4) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$name >> 2] = (HEAP32[$83 + ($85 << 4) >> 2] | 0) + 16;
 $$0 = 712;
 return $$0 | 0;
}

function _str_gsub($L) {
 $L = $L | 0;
 var $$$i$i = 0, $0 = 0, $1 = 0, $103 = 0, $107 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $41 = 0, $46 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $67 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $77 = 0, $78 = 0, $81 = 0, $83 = 0, $b = 0, $i$01$i$i = 0, $i$02$i$i = 0, $i$1$i$i = 0, $l$i$i = 0, $lp = 0, $ms = 0, $n$0 = 0, $n$17 = 0, $n$18 = 0, $n$2 = 0, $p$0 = 0, $src$0 = 0, $src$1 = 0, $src$2 = 0, $srcl = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $l$i$i = sp + 1352 | 0;
 $srcl = sp + 1348 | 0;
 $lp = sp + 1344 | 0;
 $ms = sp + 1064 | 0;
 $b = sp + 24 | 0;
 $0 = _luaL_checklstring($L, 1, $srcl) | 0;
 $1 = _luaL_checklstring($L, 2, $lp) | 0;
 $2 = _lua_type($L, 3) | 0;
 $5 = _luaL_optinteger($L, 4, (HEAP32[$srcl >> 2] | 0) + 1 | 0) | 0;
 $7 = (HEAP8[$1 >> 0] | 0) == 94;
 if (($2 + -3 | 0) >>> 0 >= 4) _luaL_argerror($L, 3, 9512) | 0;
 _luaL_buffinit($L, $b);
 if ($7) {
  $11 = (HEAP32[$lp >> 2] | 0) + -1 | 0;
  HEAP32[$lp >> 2] = $11;
  $18 = $11;
  $p$0 = $1 + 1 | 0;
 } else {
  $18 = HEAP32[$lp >> 2] | 0;
  $p$0 = $1;
 }
 $12 = $ms + 16 | 0;
 HEAP32[$12 >> 2] = $L;
 HEAP32[$ms >> 2] = 200;
 $13 = $ms + 4 | 0;
 HEAP32[$13 >> 2] = $0;
 $16 = $ms + 8 | 0;
 HEAP32[$16 >> 2] = $0 + (HEAP32[$srcl >> 2] | 0);
 HEAP32[$ms + 12 >> 2] = $p$0 + $18;
 $20 = $ms + 20 | 0;
 $21 = $b + 8 | 0;
 $22 = $b + 4 | 0;
 $23 = $ms + 28 | 0;
 $24 = $ms + 24 | 0;
 $n$0 = 0;
 $src$0 = $0;
 while (1) {
  if ($n$0 >>> 0 >= $5 >>> 0) {
   $n$2 = $n$0;
   $src$2 = $src$0;
   label = 49;
   break;
  }
  HEAP32[$20 >> 2] = 0;
  $26 = _match($ms, $src$0, $p$0) | 0;
  if (!$26) {
   $n$17 = $n$0;
   label = 44;
  } else {
   $28 = $n$0 + 1 | 0;
   $29 = HEAP32[$12 >> 2] | 0;
   if (($2 | 0) == 5) {
    do if ((HEAP32[$20 >> 2] | 0) > 0) {
     $41 = HEAP32[$23 >> 2] | 0;
     if (($41 | 0) == -1) {
      _luaL_error($29, 9248, $vararg_buffer) | 0;
      $52 = HEAP32[$12 >> 2] | 0;
      $53 = HEAP32[$24 >> 2] | 0;
     } else {
      $46 = HEAP32[$24 >> 2] | 0;
      if (($41 | 0) == -2) {
       _lua_pushinteger($29, $46 + 1 - (HEAP32[$13 >> 2] | 0) | 0);
       break;
      } else {
       $52 = $29;
       $53 = $46;
      }
     }
     _lua_pushlstring($52, $53, $41) | 0;
    } else _lua_pushlstring($29, $src$0, $26 - $src$0 | 0) | 0; while (0);
    _lua_gettable($29, 3);
    label = 38;
   } else if (($2 | 0) == 6) {
    _lua_pushvalue($29, 3);
    $30 = HEAP32[$20 >> 2] | 0;
    $$$i$i = ($src$0 | 0) != 0 & ($30 | 0) == 0 ? 1 : $30;
    _luaL_checkstack(HEAP32[$12 >> 2] | 0, $$$i$i, 9200);
    if (($$$i$i | 0) > 0) {
     $i$02$i$i = 0;
     do {
      _push_onecapture($ms, $i$02$i$i, $src$0, $26);
      $i$02$i$i = $i$02$i$i + 1 | 0;
     } while (($i$02$i$i | 0) != ($$$i$i | 0));
    }
    _lua_callk($29, $$$i$i, 1, 0, 0);
    label = 38;
   } else {
    $54 = _lua_tolstring($29, 3, $l$i$i) | 0;
    if (HEAP32[$l$i$i >> 2] | 0) {
     $59 = $26 - $src$0 | 0;
     $i$01$i$i = 0;
     do {
      $60 = $54 + $i$01$i$i | 0;
      $61 = HEAP8[$60 >> 0] | 0;
      do if ($61 << 24 >> 24 == 37) {
       $71 = $i$01$i$i + 1 | 0;
       $72 = $54 + $71 | 0;
       $73 = HEAP8[$72 >> 0] | 0;
       $75 = $73 << 24 >> 24;
       if ((($73 & 255) + -48 | 0) >>> 0 < 10) if ($73 << 24 >> 24 == 48) {
        _luaL_addlstring($b, $src$0, $59);
        $i$1$i$i = $71;
        break;
       } else {
        _push_onecapture($ms, $75 + -49 | 0, $src$0, $26);
        _luaL_addvalue($b);
        $i$1$i$i = $71;
        break;
       }
       if ($73 << 24 >> 24 != 37) {
        $77 = HEAP32[$12 >> 2] | 0;
        HEAP32[$vararg_buffer1 >> 2] = 37;
        _luaL_error($77, 9544, $vararg_buffer1) | 0;
       }
       $78 = HEAP32[$21 >> 2] | 0;
       if ($78 >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) $83 = $78; else {
        _luaL_prepbuffsize($b, 1) | 0;
        $83 = HEAP32[$21 >> 2] | 0;
       }
       $81 = HEAP8[$72 >> 0] | 0;
       HEAP32[$21 >> 2] = $83 + 1;
       HEAP8[(HEAP32[$b >> 2] | 0) + $83 >> 0] = $81;
       $i$1$i$i = $71;
      } else {
       $63 = HEAP32[$21 >> 2] | 0;
       if ($63 >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) {
        $67 = $63;
        $70 = $61;
       } else {
        _luaL_prepbuffsize($b, 1) | 0;
        $67 = HEAP32[$21 >> 2] | 0;
        $70 = HEAP8[$60 >> 0] | 0;
       }
       HEAP32[$21 >> 2] = $67 + 1;
       HEAP8[(HEAP32[$b >> 2] | 0) + $67 >> 0] = $70;
       $i$1$i$i = $i$01$i$i;
      } while (0);
      $i$01$i$i = $i$1$i$i + 1 | 0;
     } while ($i$01$i$i >>> 0 < (HEAP32[$l$i$i >> 2] | 0) >>> 0);
    }
   }
   if ((label | 0) == 38) {
    label = 0;
    if (!(_lua_toboolean($29, -1) | 0)) {
     _lua_settop($29, -2);
     _lua_pushlstring($29, $src$0, $26 - $src$0 | 0) | 0;
    } else if (!(_lua_isstring($29, -1) | 0)) {
     HEAP32[$vararg_buffer3 >> 2] = _lua_typename($29, _lua_type($29, -1) | 0) | 0;
     _luaL_error($29, 9592, $vararg_buffer3) | 0;
    }
    _luaL_addvalue($b);
   }
   if ($26 >>> 0 > $src$0 >>> 0) {
    $n$18 = $28;
    $src$1 = $26;
   } else {
    $n$17 = $28;
    label = 44;
   }
  }
  if ((label | 0) == 44) {
   label = 0;
   if ($src$0 >>> 0 >= (HEAP32[$16 >> 2] | 0) >>> 0) {
    $n$2 = $n$17;
    $src$2 = $src$0;
    label = 49;
    break;
   }
   $103 = HEAP32[$21 >> 2] | 0;
   if ($103 >>> 0 < (HEAP32[$22 >> 2] | 0) >>> 0) $109 = $103; else {
    _luaL_prepbuffsize($b, 1) | 0;
    $109 = HEAP32[$21 >> 2] | 0;
   }
   $107 = HEAP8[$src$0 >> 0] | 0;
   HEAP32[$21 >> 2] = $109 + 1;
   HEAP8[(HEAP32[$b >> 2] | 0) + $109 >> 0] = $107;
   $n$18 = $n$17;
   $src$1 = $src$0 + 1 | 0;
  }
  if ($7) {
   $n$2 = $n$18;
   $src$2 = $src$1;
   label = 49;
   break;
  } else {
   $n$0 = $n$18;
   $src$0 = $src$1;
  }
 }
 if ((label | 0) == 49) {
  _luaL_addlstring($b, $src$2, (HEAP32[$16 >> 2] | 0) - $src$2 | 0);
  _luaL_pushresult($b);
  _lua_pushinteger($L, $n$2);
  STACKTOP = sp;
  return 2;
 }
 return 0;
}

function _luaV_concat($L, $total) {
 $L = $L | 0;
 $total = $total | 0;
 var $$0 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa77 = 0, $$sum = 0, $0 = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $11 = 0, $112 = 0, $12 = 0, $121 = 0, $126 = 0, $127 = 0, $13 = 0, $133 = 0, $134 = 0, $135 = 0, $141 = 0, $148 = 0, $151 = 0, $152 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $169 = 0, $19 = 0, $2 = 0, $24 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $87 = 0, $88 = 0, $89 = 0, $94 = 0, $95 = 0, $i$011 = 0, $i$020 = 0, $i$020$lcssa = 0, $i$1 = 0, $n$0 = 0, $s$i = 0, $tl$014 = 0, $tl$021 = 0, $tl$021$lcssa = 0, $tl$1 = 0, $tm$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $s$i = sp + 32 | 0;
 $0 = $L + 8 | 0;
 $1 = $L + 12 | 0;
 $2 = $L + 28 | 0;
 $3 = $L + 16 | 0;
 $$0 = $total;
 $5 = HEAP32[$0 >> 2] | 0;
 L1 : while (1) {
  $4 = $5 + -32 | 0;
  $6 = $5 + -24 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $11 = $5 + -16 | 0;
  L3 : do if (($7 | 0) == 3 | ($7 & 15 | 0) == 4) {
   $12 = $5 + -8 | 0;
   $13 = HEAP32[$12 >> 2] | 0;
   do if (($13 & 15 | 0) == 4) $107 = $7; else if (($13 | 0) == 3) {
    HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$11 >> 3];
    $19 = _luaS_newlstr($L, $s$i, _sprintf($s$i, 7400, $vararg_buffer) | 0) | 0;
    HEAP32[$11 >> 2] = $19;
    HEAP32[$12 >> 2] = HEAPU8[$19 + 4 >> 0] | 0 | 64;
    $107 = HEAP32[$6 >> 2] | 0;
    break;
   } else {
    label = 7;
    break L3;
   } while (0);
   $104 = HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] | 0;
   $108 = ($107 & 15 | 0) == 4;
   if (!$104) {
    if ($108) {
     $n$0 = 2;
     break;
    }
    if (($107 | 0) == 3) {
     HEAPF64[$vararg_buffer1 >> 3] = +HEAPF64[$4 >> 3];
     $112 = _luaS_newlstr($L, $s$i, _sprintf($s$i, 7400, $vararg_buffer1) | 0) | 0;
     HEAP32[$4 >> 2] = $112;
     HEAP32[$6 >> 2] = HEAPU8[$112 + 4 >> 0] | 0 | 64;
    }
    $n$0 = 2;
    break;
   }
   if ($108) if (!(HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0)) {
    $121 = $11;
    $126 = HEAP32[$121 + 4 >> 2] | 0;
    $127 = $4;
    HEAP32[$127 >> 2] = HEAP32[$121 >> 2];
    HEAP32[$127 + 4 >> 2] = $126;
    HEAP32[$6 >> 2] = HEAP32[$12 >> 2];
    $n$0 = 2;
    break;
   }
   L22 : do if (($$0 | 0) > 1) {
    $i$020 = 1;
    $tl$021 = $104;
    while (1) {
     $$sum = ~$i$020;
     $133 = $5 + ($$sum << 4) | 0;
     $134 = $5 + ($$sum << 4) + 8 | 0;
     $135 = HEAP32[$134 >> 2] | 0;
     if (($135 & 15 | 0) != 4) {
      if (($135 | 0) != 3) {
       $i$020$lcssa = $i$020;
       $tl$021$lcssa = $tl$021;
       break;
      }
      HEAPF64[$vararg_buffer4 >> 3] = +HEAPF64[$133 >> 3];
      $141 = _luaS_newlstr($L, $s$i, _sprintf($s$i, 7400, $vararg_buffer4) | 0) | 0;
      HEAP32[$133 >> 2] = $141;
      HEAP32[$134 >> 2] = HEAPU8[$141 + 4 >> 0] | 0 | 64;
     }
     $148 = HEAP32[(HEAP32[$133 >> 2] | 0) + 12 >> 2] | 0;
     if ($148 >>> 0 >= (-3 - $tl$021 | 0) >>> 0) {
      label = 25;
      break L1;
     }
     $151 = $148 + $tl$021 | 0;
     $152 = $i$020 + 1 | 0;
     if (($152 | 0) < ($$0 | 0)) {
      $i$020 = $152;
      $tl$021 = $151;
     } else {
      $i$011 = $152;
      $tl$014 = $151;
      break L22;
     }
    }
    $i$011 = $i$020$lcssa;
    $tl$014 = $tl$021$lcssa;
   } else {
    $i$011 = 1;
    $tl$014 = $104;
   } while (0);
   $156 = _luaZ_openspace($L, (HEAP32[$1 >> 2] | 0) + 144 | 0, $tl$014) | 0;
   $i$1 = $i$011;
   $tl$1 = 0;
   while (1) {
    $159 = HEAP32[$5 + (0 - $i$1 << 4) >> 2] | 0;
    $161 = HEAP32[$159 + 12 >> 2] | 0;
    _memcpy($156 + $tl$1 | 0, $159 + 16 | 0, $161 | 0) | 0;
    $164 = $161 + $tl$1 | 0;
    if (($i$1 | 0) > 1) {
     $i$1 = $i$1 + -1 | 0;
     $tl$1 = $164;
    } else {
     $$lcssa73 = $164;
     break;
    }
   }
   $167 = 0 - $i$011 | 0;
   $169 = _luaS_newlstr($L, $156, $$lcssa73) | 0;
   HEAP32[$5 + ($167 << 4) >> 2] = $169;
   HEAP32[$5 + ($167 << 4) + 8 >> 2] = HEAPU8[$169 + 4 >> 0] | 0 | 64;
   $n$0 = $i$011;
  } else label = 7; while (0);
  if ((label | 0) == 7) {
   label = 0;
   $24 = _luaT_gettmbyobj($L, $4, 15) | 0;
   if (!(HEAP32[$24 + 8 >> 2] | 0)) {
    $28 = _luaT_gettmbyobj($L, $11, 15) | 0;
    if (!(HEAP32[$28 + 8 >> 2] | 0)) {
     $$lcssa74 = $4;
     $$lcssa77 = $11;
     label = 10;
     break;
    } else $tm$01$i = $28;
   } else $tm$01$i = $24;
   $33 = $4 - (HEAP32[$2 >> 2] | 0) | 0;
   $34 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $34 + 16;
   $36 = $tm$01$i;
   $41 = HEAP32[$36 + 4 >> 2] | 0;
   $42 = $34;
   HEAP32[$42 >> 2] = HEAP32[$36 >> 2];
   HEAP32[$42 + 4 >> 2] = $41;
   HEAP32[$34 + 8 >> 2] = HEAP32[$tm$01$i + 8 >> 2];
   $49 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $49 + 16;
   $51 = $4;
   $56 = HEAP32[$51 + 4 >> 2] | 0;
   $57 = $49;
   HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
   HEAP32[$57 + 4 >> 2] = $56;
   HEAP32[$49 + 8 >> 2] = HEAP32[$6 >> 2];
   $63 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $63 + 16;
   $65 = $11;
   $70 = HEAP32[$65 + 4 >> 2] | 0;
   $71 = $63;
   HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
   HEAP32[$71 + 4 >> 2] = $70;
   HEAP32[$63 + 8 >> 2] = HEAP32[$5 + -8 >> 2];
   _luaD_call($L, (HEAP32[$0 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$3 >> 2] | 0) + 18 >> 0] | 0) & 1);
   $85 = HEAP32[$2 >> 2] | 0;
   $87 = HEAP32[$0 >> 2] | 0;
   $88 = $87 + -16 | 0;
   HEAP32[$0 >> 2] = $88;
   $89 = $88;
   $94 = HEAP32[$89 + 4 >> 2] | 0;
   $95 = $85 + $33 | 0;
   HEAP32[$95 >> 2] = HEAP32[$89 >> 2];
   HEAP32[$95 + 4 >> 2] = $94;
   HEAP32[$85 + ($33 + 8) >> 2] = HEAP32[$87 + -8 >> 2];
   $n$0 = 2;
  }
  $$0 = $$0 + 1 - $n$0 | 0;
  $5 = (HEAP32[$0 >> 2] | 0) + (1 - $n$0 << 4) | 0;
  HEAP32[$0 >> 2] = $5;
  if (($$0 | 0) <= 1) {
   label = 31;
   break;
  }
 }
 if ((label | 0) == 10) _luaG_concaterror($L, $$lcssa74, $$lcssa77); else if ((label | 0) == 25) _luaG_runerror($L, 3648, $vararg_buffer7); else if ((label | 0) == 31) {
  STACKTOP = sp;
  return;
 }
}

function _constructor($ls, $t) {
 $ls = $ls | 0;
 $t = $t | 0;
 var $$lcssa = 0, $$lcssa12 = 0, $0 = 0, $1 = 0, $101 = 0, $111 = 0, $16 = 0, $2 = 0, $21 = 0, $29 = 0, $3 = 0, $33 = 0, $35 = 0, $38 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $91 = 0, $97 = 0, $cc = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer14 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer14 = sp + 88 | 0;
 $vararg_buffer9 = sp + 72 | 0;
 $vararg_buffer6 = sp + 64 | 0;
 $vararg_buffer1 = sp + 48 | 0;
 $vararg_buffer = sp + 40 | 0;
 $cc = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $ls + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = _luaK_codeABC($1, 11, 0, 0, 0) | 0;
 $5 = $cc + 36 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $cc + 28 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $cc + 32 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $cc + 24 | 0;
 HEAP32[$8 >> 2] = $t;
 HEAP32[$t + 16 >> 2] = -1;
 HEAP32[$t + 20 >> 2] = -1;
 HEAP32[$t >> 2] = 11;
 HEAP32[$t + 8 >> 2] = $4;
 HEAP32[$cc + 16 >> 2] = -1;
 HEAP32[$cc + 20 >> 2] = -1;
 HEAP32[$cc >> 2] = 0;
 HEAP32[$cc + 8 >> 2] = 0;
 _luaK_exp2nextreg(HEAP32[$0 >> 2] | 0, $t);
 $16 = $ls + 16 | 0;
 if ((HEAP32[$16 >> 2] | 0) != 123) _error_expected($ls, 123);
 _luaX_next($ls);
 L4 : do if ((HEAP32[$16 >> 2] | 0) != 125) {
  $21 = 0;
  L5 : while (1) {
   if ($21) {
    _luaK_exp2nextreg($1, $cc);
    HEAP32[$cc >> 2] = 0;
    if ((HEAP32[$5 >> 2] | 0) == 50) {
     _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$7 >> 2] | 0, 50);
     HEAP32[$5 >> 2] = 0;
    }
   }
   $29 = HEAP32[$16 >> 2] | 0;
   do if (($29 | 0) == 288) {
    if ((_luaX_lookahead($ls) | 0) == 61) {
     _recfield($ls, $cc);
     break;
    }
    _subexpr($ls, $cc, 0) | 0;
    $33 = HEAP32[$7 >> 2] | 0;
    if (($33 | 0) > 2147483645) {
     $$lcssa = HEAP32[$0 >> 2] | 0;
     label = 10;
     break L5;
    }
    HEAP32[$7 >> 2] = $33 + 1;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
   } else if (($29 | 0) == 91) _recfield($ls, $cc); else {
    _subexpr($ls, $cc, 0) | 0;
    $51 = HEAP32[$7 >> 2] | 0;
    if (($51 | 0) > 2147483645) {
     $$lcssa12 = HEAP32[$0 >> 2] | 0;
     label = 17;
     break L5;
    }
    HEAP32[$7 >> 2] = $51 + 1;
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1;
   } while (0);
   $68 = HEAP32[$16 >> 2] | 0;
   if (($68 | 0) == 59) _luaX_next($ls); else if (($68 | 0) == 44) _luaX_next($ls); else if (($68 | 0) == 125) break L4; else {
    label = 26;
    break;
   }
   if ((HEAP32[$16 >> 2] | 0) == 125) break L4;
   $21 = HEAP32[$cc >> 2] | 0;
  }
  if ((label | 0) == 10) {
   $35 = $$lcssa + 12 | 0;
   $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 52 >> 2] | 0;
   $41 = HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 64 >> 2] | 0;
   if (!$41) {
    $44 = 2464;
    HEAP32[$vararg_buffer1 >> 2] = 2800;
    $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
    HEAP32[$vararg_ptr4 >> 2] = 2147483645;
    $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
    HEAP32[$vararg_ptr5 >> 2] = $44;
    $45 = _luaO_pushfstring($38, 2480, $vararg_buffer1) | 0;
    $46 = HEAP32[$35 >> 2] | 0;
    _luaX_syntaxerror($46, $45);
   }
   HEAP32[$vararg_buffer >> 2] = $41;
   $44 = _luaO_pushfstring($38, 2440, $vararg_buffer) | 0;
   HEAP32[$vararg_buffer1 >> 2] = 2800;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 2147483645;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $44;
   $45 = _luaO_pushfstring($38, 2480, $vararg_buffer1) | 0;
   $46 = HEAP32[$35 >> 2] | 0;
   _luaX_syntaxerror($46, $45);
  } else if ((label | 0) == 17) {
   $53 = $$lcssa12 + 12 | 0;
   $56 = HEAP32[(HEAP32[$53 >> 2] | 0) + 52 >> 2] | 0;
   $59 = HEAP32[(HEAP32[$$lcssa12 >> 2] | 0) + 64 >> 2] | 0;
   if (!$59) {
    $62 = 2464;
    HEAP32[$vararg_buffer9 >> 2] = 2800;
    $vararg_ptr12 = $vararg_buffer9 + 4 | 0;
    HEAP32[$vararg_ptr12 >> 2] = 2147483645;
    $vararg_ptr13 = $vararg_buffer9 + 8 | 0;
    HEAP32[$vararg_ptr13 >> 2] = $62;
    $63 = _luaO_pushfstring($56, 2480, $vararg_buffer9) | 0;
    $64 = HEAP32[$53 >> 2] | 0;
    _luaX_syntaxerror($64, $63);
   }
   HEAP32[$vararg_buffer6 >> 2] = $59;
   $62 = _luaO_pushfstring($56, 2440, $vararg_buffer6) | 0;
   HEAP32[$vararg_buffer9 >> 2] = 2800;
   $vararg_ptr12 = $vararg_buffer9 + 4 | 0;
   HEAP32[$vararg_ptr12 >> 2] = 2147483645;
   $vararg_ptr13 = $vararg_buffer9 + 8 | 0;
   HEAP32[$vararg_ptr13 >> 2] = $62;
   $63 = _luaO_pushfstring($56, 2480, $vararg_buffer9) | 0;
   $64 = HEAP32[$53 >> 2] | 0;
   _luaX_syntaxerror($64, $63);
  } else if ((label | 0) == 26) if ((HEAP32[$2 >> 2] | 0) == ($3 | 0)) _error_expected($ls, 125); else {
   $74 = HEAP32[$ls + 52 >> 2] | 0;
   $75 = _luaX_token2str($ls, 125) | 0;
   $76 = _luaX_token2str($ls, 123) | 0;
   HEAP32[$vararg_buffer14 >> 2] = $75;
   HEAP32[$vararg_buffer14 + 4 >> 2] = $76;
   HEAP32[$vararg_buffer14 + 8 >> 2] = $3;
   _luaX_syntaxerror($ls, _luaO_pushfstring($74, 2528, $vararg_buffer14) | 0);
  }
 } while (0);
 _luaX_next($ls);
 $78 = HEAP32[$5 >> 2] | 0;
 do if ($78) {
  $80 = HEAP32[$cc >> 2] | 0;
  if (!$80) $91 = $78; else if (($80 | 0) == 13 | ($80 | 0) == 12) {
   _luaK_setreturns($1, $cc, -1);
   _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$7 >> 2] | 0, -1);
   HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1;
   break;
  } else {
   _luaK_exp2nextreg($1, $cc);
   $91 = HEAP32[$5 >> 2] | 0;
  }
  _luaK_setlist($1, HEAP32[(HEAP32[$8 >> 2] | 0) + 8 >> 2] | 0, HEAP32[$7 >> 2] | 0, $91);
 } while (0);
 $97 = HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + ($4 << 2) >> 2] & 8388607;
 $101 = (_luaO_int2fb(HEAP32[$7 >> 2] | 0) | 0) << 23 | $97;
 HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + ($4 << 2) >> 2] = $101;
 $111 = (_luaO_int2fb(HEAP32[$6 >> 2] | 0) | 0) << 14 & 8372224 | $101 & -8372225;
 HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] | 0) + ($4 << 2) >> 2] = $111;
 STACKTOP = sp;
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $134 = 0, $139 = 0, $143 = 0, $149 = 0, $159 = 0, $168 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $35 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $91 = 0, $96 = 0, $98 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[3030] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $7 = $p + ($2 | 4) | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[3146] << 1 >>> 0) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $20 | 3;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $20);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[3032] | 0)) {
  $33 = (HEAP32[3029] | 0) + $2 | 0;
  if ($33 >>> 0 <= $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $35 | 1;
  HEAP32[3032] = $p + $nb;
  HEAP32[3029] = $35;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[3031] | 0)) {
  $45 = (HEAP32[3028] | 0) + $2 | 0;
  if ($45 >>> 0 < $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  if ($47 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$p + ($nb + 4) >> 2] = $47 | 1;
   HEAP32[$p + $45 >> 2] = $47;
   $56 = $p + ($45 + 4) | 0;
   HEAP32[$56 >> 2] = HEAP32[$56 >> 2] & -2;
   $storemerge = $p + $nb | 0;
   $storemerge21 = $47;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $45 | 2;
   $62 = $p + ($45 + 4) | 0;
   HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 1;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[3028] = $storemerge21;
  HEAP32[3031] = $storemerge;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if ($8 & 2) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $68 = ($8 & -8) + $2 | 0;
 if ($68 >>> 0 < $nb >>> 0) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $74 = HEAP32[$p + ($2 + 8) >> 2] | 0;
  $76 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  $78 = 12144 + ($71 << 1 << 2) | 0;
  if (($74 | 0) != ($78 | 0)) {
   if ($74 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$74 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($76 | 0) == ($74 | 0)) {
   HEAP32[3026] = HEAP32[3026] & ~(1 << $71);
   break;
  }
  if (($76 | 0) == ($78 | 0)) $$pre$phiZ2D = $76 + 8 | 0; else {
   if ($76 >>> 0 < $4 >>> 0) _abort();
   $91 = $76 + 8 | 0;
   if ((HEAP32[$91 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $91; else _abort();
  }
  HEAP32[$74 + 12 >> 2] = $76;
  HEAP32[$$pre$phiZ2D >> 2] = $74;
 } else {
  $96 = HEAP32[$p + ($2 + 24) >> 2] | 0;
  $98 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  do if (($98 | 0) == ($3 | 0)) {
   $109 = $p + ($2 + 20) | 0;
   $110 = HEAP32[$109 >> 2] | 0;
   if (!$110) {
    $112 = $p + ($2 + 16) | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    if (!$113) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $113;
     $RP$0 = $112;
    }
   } else {
    $R$0 = $110;
    $RP$0 = $109;
   }
   while (1) {
    $115 = $R$0 + 20 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    if ($116) {
     $R$0 = $116;
     $RP$0 = $115;
     continue;
    }
    $118 = $R$0 + 16 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if (!$119) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $119;
     $RP$0 = $118;
    }
   }
   if ($RP$0$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $101 = HEAP32[$p + ($2 + 8) >> 2] | 0;
   if ($101 >>> 0 < $4 >>> 0) _abort();
   $103 = $101 + 12 | 0;
   if ((HEAP32[$103 >> 2] | 0) != ($3 | 0)) _abort();
   $106 = $98 + 8 | 0;
   if ((HEAP32[$106 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$103 >> 2] = $98;
    HEAP32[$106 >> 2] = $101;
    $R$1 = $98;
    break;
   } else _abort();
  } while (0);
  if ($96) {
   $124 = HEAP32[$p + ($2 + 28) >> 2] | 0;
   $125 = 12408 + ($124 << 2) | 0;
   if (($3 | 0) == (HEAP32[$125 >> 2] | 0)) {
    HEAP32[$125 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3027] = HEAP32[3027] & ~(1 << $124);
     break;
    }
   } else {
    if ($96 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort();
    $134 = $96 + 16 | 0;
    if ((HEAP32[$134 >> 2] | 0) == ($3 | 0)) HEAP32[$134 >> 2] = $R$1; else HEAP32[$96 + 20 >> 2] = $R$1;
    if (!$R$1) break;
   }
   $139 = HEAP32[3030] | 0;
   if ($R$1 >>> 0 < $139 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $96;
   $143 = HEAP32[$p + ($2 + 16) >> 2] | 0;
   do if ($143) if ($143 >>> 0 < $139 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $143;
    HEAP32[$143 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $149 = HEAP32[$p + ($2 + 20) >> 2] | 0;
   if ($149) if ($149 >>> 0 < (HEAP32[3030] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $149;
    HEAP32[$149 + 24 >> 2] = $R$1;
    break;
   }
  }
 } while (0);
 if ($70 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $68 | $1 & 1 | 2;
  $159 = $p + ($68 | 4) | 0;
  HEAP32[$159 >> 2] = HEAP32[$159 >> 2] | 1;
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $70 | 3;
  $168 = $p + ($68 | 4) | 0;
  HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $70);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0;
}

function _luaO_str2d($s, $len, $result) {
 $s = $s | 0;
 $len = $len | 0;
 $result = $result | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i2$i = 0, $$0$lcssa$i8$i = 0.0, $$01$i$i = 0.0, $$01$i6$i = 0.0, $$in$i = 0, $$in10$i = 0, $$in1121$i = 0, $$in12$i = 0, $$lcssa = 0, $$lcssa18$i = 0, $$lcssa19$i = 0, $$lcssa20$i = 0, $$lcssa61 = 0, $$lcssa62 = 0, $$lcssa63 = 0, $$lcssa71 = 0, $$lcssa72 = 0, $100 = 0, $103 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $126 = 0, $13 = 0, $130 = 0, $132 = 0.0, $133 = 0, $14 = 0, $142 = 0, $143 = 0, $154 = 0, $155 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $42 = 0, $45 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $61 = 0, $63 = 0, $65 = 0, $68 = 0, $73 = 0, $76 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $92 = 0, $94 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $endptr = 0, $exp1$022$i = 0, $r$0$i = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $endptr = sp;
 if (_strpbrk($s, 2104) | 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if (!(_strpbrk($s, 2112) | 0)) {
  $132 = +_strtod($s, $endptr);
  $133 = HEAP32[$endptr >> 2] | 0;
  $storemerge = $132;
 } else {
  $4 = $s;
  HEAP32[$endptr >> 2] = $4;
  $5 = HEAP8[$s >> 0] | 0;
  if (!(HEAP8[136 + (($5 & 255) + 1) >> 0] & 8)) {
   $$lcssa18$i = $4;
   $$lcssa19$i = $s;
   $$lcssa20$i = $5;
  } else {
   $13 = $s;
   while (1) {
    $12 = $13 + 1 | 0;
    $14 = HEAP8[$12 >> 0] | 0;
    if (!(HEAP8[136 + (($14 & 255) + 1) >> 0] & 8)) {
     $$lcssa71 = $12;
     $$lcssa72 = $14;
     break;
    } else $13 = $12;
   }
   $$lcssa18$i = $$lcssa71;
   $$lcssa19$i = $$lcssa71;
   $$lcssa20$i = $$lcssa72;
  }
  if ($$lcssa20$i << 24 >> 24 == 45) {
   $$0$i$i = 1;
   $26 = $$lcssa19$i + 1 | 0;
  } else if ($$lcssa20$i << 24 >> 24 == 43) {
   $$0$i$i = 0;
   $26 = $$lcssa19$i + 1 | 0;
  } else {
   $$0$i$i = 0;
   $26 = $$lcssa18$i;
  }
  $27 = $26;
  if ((HEAP8[$27 >> 0] | 0) == 48) {
   $31 = HEAP8[$27 + 1 >> 0] | 0;
   if ($31 << 24 >> 24 == 88 | $31 << 24 >> 24 == 120) {
    $32 = $27 + 2 | 0;
    $33 = HEAP8[$32 >> 0] | 0;
    $34 = $33 & 255;
    $37 = HEAP8[136 + ($34 + 1) >> 0] | 0;
    if (!($37 & 16)) {
     $$0$lcssa$i8$i = 0.0;
     $$in$i = $32;
     $61 = $33;
     $94 = 0;
    } else {
     $$01$i6$i = 0.0;
     $42 = $37;
     $45 = $34;
     $51 = 0;
     $53 = $32;
     while (1) {
      $49 = $$01$i6$i * 16.0 + +((($42 & 2) == 0 ? ($45 | 32) + -87 | 0 : $45 + -48 | 0) | 0);
      $50 = $51 + 1 | 0;
      $52 = $53 + 1 | 0;
      $54 = HEAP8[$52 >> 0] | 0;
      $45 = $54 & 255;
      $42 = HEAP8[136 + ($45 + 1) >> 0] | 0;
      if (!($42 & 16)) {
       $$0$lcssa$i8$i = $49;
       $$in$i = $52;
       $61 = $54;
       $94 = $50;
       break;
      } else {
       $$01$i6$i = $49;
       $51 = $50;
       $53 = $52;
      }
     }
    }
    if ($61 << 24 >> 24 == 46) {
     $63 = $$in$i + 1 | 0;
     $65 = HEAPU8[$63 >> 0] | 0;
     $68 = HEAP8[136 + ($65 + 1) >> 0] | 0;
     if (!($68 & 16)) {
      $$in12$i = $63;
      $95 = 0;
      $r$0$i = $$0$lcssa$i8$i;
     } else {
      $$01$i$i = $$0$lcssa$i8$i;
      $73 = $68;
      $76 = $65;
      $82 = 0;
      $84 = $63;
      while (1) {
       $80 = $$01$i$i * 16.0 + +((($73 & 2) == 0 ? ($76 | 32) + -87 | 0 : $76 + -48 | 0) | 0);
       $81 = $82 + 1 | 0;
       $83 = $84 + 1 | 0;
       $76 = HEAPU8[$83 >> 0] | 0;
       $73 = HEAP8[136 + ($76 + 1) >> 0] | 0;
       if (!($73 & 16)) {
        $$in12$i = $83;
        $95 = $81;
        $r$0$i = $80;
        break;
       } else {
        $$01$i$i = $80;
        $82 = $81;
        $84 = $83;
       }
      }
     }
    } else {
     $$in12$i = $$in$i;
     $95 = 0;
     $r$0$i = $$0$lcssa$i8$i;
    }
    $92 = $$in12$i;
    if ($95 | $94) {
     $97 = Math_imul($95, -4) | 0;
     HEAP32[$endptr >> 2] = $92;
     $98 = HEAP8[$$in12$i >> 0] | 0;
     if ($98 << 24 >> 24 == 80 | $98 << 24 >> 24 == 112) {
      $99 = $$in12$i + 1 | 0;
      $100 = HEAP8[$99 >> 0] | 0;
      if ($100 << 24 >> 24 == 43) {
       $$0$i2$i = 0;
       $$in10$i = $$in12$i + 2 | 0;
      } else if ($100 << 24 >> 24 == 45) {
       $$0$i2$i = 1;
       $$in10$i = $$in12$i + 2 | 0;
      } else {
       $$0$i2$i = 0;
       $$in10$i = $99;
      }
      $103 = HEAP8[$$in10$i >> 0] | 0;
      if (!(HEAP8[136 + (($103 & 255) + 1) >> 0] & 2)) {
       $130 = $97;
       $155 = $$in12$i;
      } else {
       $$in1121$i = $$in10$i;
       $113 = $103;
       $exp1$022$i = 0;
       while (1) {
        $111 = $$in1121$i + 1 | 0;
        $115 = ($113 << 24 >> 24) + -48 + ($exp1$022$i * 10 | 0) | 0;
        $113 = HEAP8[$111 >> 0] | 0;
        if (!(HEAP8[136 + (($113 & 255) + 1) >> 0] & 2)) {
         $$lcssa62 = $111;
         $$lcssa63 = $115;
         break;
        } else {
         $$in1121$i = $111;
         $exp1$022$i = $115;
        }
       }
       $126 = $$lcssa62;
       $154 = (($$0$i2$i | 0) == 0 ? $$lcssa63 : 0 - $$lcssa63 | 0) + $97 | 0;
       label = 24;
      }
     } else {
      $126 = $92;
      $154 = $97;
      label = 24;
     }
     if ((label | 0) == 24) {
      HEAP32[$endptr >> 2] = $126;
      $130 = $154;
      $155 = $126;
     }
     $133 = $155;
     $storemerge = +_ldexp(($$0$i$i | 0) == 0 ? $r$0$i : -$r$0$i, $130);
     break;
    }
   }
  }
  HEAPF64[$result >> 3] = 0.0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAPF64[$result >> 3] = $storemerge;
 if (($133 | 0) == ($s | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[136 + ((HEAPU8[$133 >> 0] | 0) + 1) >> 0] & 8)) $$lcssa = $133; else {
  $143 = $133;
  while (1) {
   $142 = $143 + 1 | 0;
   if (!(HEAP8[136 + ((HEAPU8[$142 >> 0] | 0) + 1) >> 0] & 8)) {
    $$lcssa61 = $142;
    break;
   } else $143 = $142;
  }
  HEAP32[$endptr >> 2] = $$lcssa61;
  $$lcssa = $$lcssa61;
 }
 $$0 = ($$lcssa | 0) == ($s + $len | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _assignment($ls, $lh, $nvars) {
 $ls = $ls | 0;
 $lh = $lh | 0;
 $nvars = $nvars | 0;
 var $$$i = 0, $$02$i = 0, $$02$i$us = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre5 = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $22 = 0, $3 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $47 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $86 = 0, $89 = 0, $9 = 0, $95 = 0, $99 = 0, $conflict$01$i = 0, $conflict$01$i$us = 0, $conflict$1$i$us = 0, $conflict$2$i = 0, $conflict$2$i$lcssa = 0, $conflict$2$i$us = 0, $e = 0, $ls$idx1$val = 0, $n$0$i$lcssa = 0, $n$0$i2 = 0, $nv = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer1 = sp + 64 | 0;
 $vararg_buffer = sp + 56 | 0;
 $e = sp + 32 | 0;
 $nv = sp;
 $0 = $lh + 8 | 0;
 if (((HEAP32[$0 >> 2] | 0) + -7 | 0) >>> 0 >= 3) _luaX_syntaxerror($ls, 2728);
 $3 = $ls + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($4 | 0) == 61) {
  _luaX_next($ls);
  _subexpr($ls, $e, 0) | 0;
  $70 = $ls + 48 | 0;
  if ((HEAP32[$3 >> 2] | 0) == 44) {
   $n$0$i2 = 1;
   while (1) {
    _luaX_next($ls);
    _luaK_exp2nextreg(HEAP32[$70 >> 2] | 0, $e);
    _subexpr($ls, $e, 0) | 0;
    $72 = $n$0$i2 + 1 | 0;
    if ((HEAP32[$3 >> 2] | 0) == 44) $n$0$i2 = $72; else {
     $n$0$i$lcssa = $72;
     break;
    }
   }
  } else $n$0$i$lcssa = 1;
  $76 = HEAP32[$70 >> 2] | 0;
  if (($n$0$i$lcssa | 0) == ($nvars | 0)) {
   _luaK_setoneret($76, $e);
   _luaK_storevar(HEAP32[$70 >> 2] | 0, $0, $e);
   STACKTOP = sp;
   return;
  }
  $77 = $nvars - $n$0$i$lcssa | 0;
  $78 = HEAP32[$e >> 2] | 0;
  if (($78 | 0) == 13 | ($78 | 0) == 12) {
   $79 = $77 + 1 | 0;
   $$$i = ($79 | 0) < 0 ? 0 : $79;
   _luaK_setreturns($76, $e, $$$i);
   if (($$$i | 0) > 1) _luaK_reserveregs($76, $$$i + -1 | 0);
  } else if (!$78) label = 33; else {
   _luaK_exp2nextreg($76, $e);
   label = 33;
  }
  if ((label | 0) == 33) if (($77 | 0) > 0) {
   $86 = HEAPU8[$76 + 48 >> 0] | 0;
   _luaK_reserveregs($76, $77);
   _luaK_nil($76, $86, $77);
  }
  if (($n$0$i$lcssa | 0) > ($nvars | 0)) {
   $89 = (HEAP32[$70 >> 2] | 0) + 48 | 0;
   HEAP8[$89 >> 0] = $77 + (HEAPU8[$89 >> 0] | 0);
   $$pre$phi4Z2D = $e;
   $$pre$phiZ2D = $70;
  } else {
   $$pre$phi4Z2D = $e;
   $$pre$phiZ2D = $70;
  }
 } else if (($4 | 0) == 44) {
  _luaX_next($ls);
  HEAP32[$nv >> 2] = $lh;
  $5 = $nv + 8 | 0;
  _suffixedexp($ls, $5);
  $6 = HEAP32[$5 >> 2] | 0;
  $$pre5 = $ls + 48 | 0;
  if (($6 | 0) != 9) {
   $ls$idx1$val = HEAP32[$$pre5 >> 2] | 0;
   $9 = HEAP8[$ls$idx1$val + 48 >> 0] | 0;
   $10 = $9 & 255;
   $12 = $9 & 255;
   $13 = HEAP32[$nv + 16 >> 2] | 0;
   $14 = ($6 | 0) == 7;
   if ($14) {
    $$02$i$us = $lh;
    $conflict$01$i$us = 0;
    while (1) {
     if ((HEAP32[$$02$i$us + 8 >> 2] | 0) == 9) {
      $18 = $$02$i$us + 16 | 0;
      $19 = $18 + 3 | 0;
      if ((HEAP8[$19 >> 0] | 0) == 7) {
       $22 = $18 + 2 | 0;
       if ((HEAPU8[$22 >> 0] | 0) == ($13 | 0)) {
        HEAP8[$19 >> 0] = 7;
        HEAP8[$22 >> 0] = $9;
        $conflict$1$i$us = 1;
       } else $conflict$1$i$us = $conflict$01$i$us;
      } else $conflict$1$i$us = $conflict$01$i$us;
      if ((HEAP16[$18 >> 1] | 0) == ($13 | 0)) {
       HEAP16[$18 >> 1] = $12;
       $conflict$2$i$us = 1;
      } else $conflict$2$i$us = $conflict$1$i$us;
     } else $conflict$2$i$us = $conflict$01$i$us;
     $$02$i$us = HEAP32[$$02$i$us >> 2] | 0;
     if (!$$02$i$us) {
      $conflict$2$i$lcssa = $conflict$2$i$us;
      break;
     } else $conflict$01$i$us = $conflict$2$i$us;
    }
   } else {
    $$02$i = $lh;
    $conflict$01$i = 0;
    while (1) {
     if ((HEAP32[$$02$i + 8 >> 2] | 0) == 9) {
      $34 = $$02$i + 16 | 0;
      $35 = $34 + 3 | 0;
      if ((HEAPU8[$35 >> 0] | 0) == ($6 | 0)) {
       $39 = $34 + 2 | 0;
       if ((HEAPU8[$39 >> 0] | 0) == ($13 | 0)) {
        HEAP8[$35 >> 0] = 7;
        HEAP8[$39 >> 0] = $9;
        $conflict$2$i = 1;
       } else $conflict$2$i = $conflict$01$i;
      } else $conflict$2$i = $conflict$01$i;
     } else $conflict$2$i = $conflict$01$i;
     $$02$i = HEAP32[$$02$i >> 2] | 0;
     if (!$$02$i) {
      $conflict$2$i$lcssa = $conflict$2$i;
      break;
     } else $conflict$01$i = $conflict$2$i;
    }
   }
   if ($conflict$2$i$lcssa) {
    _luaK_codeABC($ls$idx1$val, $14 ? 0 : 5, $10, $13, 0) | 0;
    _luaK_reserveregs($ls$idx1$val, 1);
   }
  }
  $47 = HEAP32[$$pre5 >> 2] | 0;
  if (((HEAPU16[(HEAP32[$ls + 52 >> 2] | 0) + 38 >> 1] | 0) + $nvars | 0) <= 200) {
   _assignment($ls, $nv, $nvars + 1 | 0);
   $$pre$phi4Z2D = $e;
   $$pre$phiZ2D = $$pre5;
   break;
  }
  $55 = $47 + 12 | 0;
  $58 = HEAP32[(HEAP32[$55 >> 2] | 0) + 52 >> 2] | 0;
  $61 = HEAP32[(HEAP32[$47 >> 2] | 0) + 64 >> 2] | 0;
  if (!$61) {
   $64 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2512;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $64;
   $65 = _luaO_pushfstring($58, 2480, $vararg_buffer1) | 0;
   $66 = HEAP32[$55 >> 2] | 0;
   _luaX_syntaxerror($66, $65);
  }
  HEAP32[$vararg_buffer >> 2] = $61;
  $64 = _luaO_pushfstring($58, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2512;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $64;
  $65 = _luaO_pushfstring($58, 2480, $vararg_buffer1) | 0;
  $66 = HEAP32[$55 >> 2] | 0;
  _luaX_syntaxerror($66, $65);
 } else _error_expected($ls, 61); while (0);
 $95 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $99 = (HEAPU8[$95 + 48 >> 0] | 0) + -1 | 0;
 HEAP32[$e + 16 >> 2] = -1;
 HEAP32[$e + 20 >> 2] = -1;
 HEAP32[$$pre$phi4Z2D >> 2] = 6;
 HEAP32[$e + 8 >> 2] = $99;
 _luaK_storevar($95, $0, $e);
 STACKTOP = sp;
 return;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 if (!(($11 | 0) == 0 & ($12 | 0) == 0)) {
  $16 = $3 & 2147483647;
  if (!($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047)) {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) return +(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0) ? $x * 0.0 : $x);
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026 = 0;
     while (1) {
      $44 = $ex$026 + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $44;
       break;
      } else $ex$026 = $44;
     }
    } else $ex$0$lcssa = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020 = 0;
     while (1) {
      $67 = $ey$020 + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $67;
       break;
      } else $ey$020 = $67;
     }
    } else $ey$0$lcssa = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L23 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $94 = $83;
    $96 = $84;
    $ex$212 = $ex$1;
    while (1) {
     if ($152) if (($94 | 0) == ($85 | 0) & ($96 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $94;
      $101 = $96;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212 + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $94 = $102;
      $96 = $103;
      $ex$212 = $104;
     } else {
      $$lcssa7 = $112;
      $113 = $102;
      $115 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa = $104;
      break L23;
     }
    }
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $$lcssa7 = $93;
    $113 = $83;
    $115 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($113 | 0) == ($85 | 0) & ($115 | 0) == ($86 | 0)) {
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $118 = $156;
    $120 = $155;
   } else {
    $118 = $115;
    $120 = $113;
   }
   if ($118 >>> 0 < 1048576 | ($118 | 0) == 1048576 & $120 >>> 0 < 0) {
    $126 = $120;
    $127 = $118;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39 + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39 = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;
    $138 = $118;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $151 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $149 = tempRet0;
    $151 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
   return +$$0;
  }
 }
 $23 = $x * $y;
 $$0 = $23 / $23;
 return +$$0;
}

function _luaK_prefix($fs, $op, $e, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e = $e | 0;
 $line = $line | 0;
 var $$0$i$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i9$i = 0, $$03$i$i = 0, $$03$i6$i = 0, $$phi$trans$insert$i = 0, $$pre$phi$i$i$iZ2D = 0, $$pre$phi17$iZ2D = 0, $101 = 0, $11 = 0, $110 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $26 = 0, $32 = 0, $35 = 0, $37 = 0, $44 = 0, $47 = 0, $48 = 0, $55 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $67 = 0, $69 = 0, $70 = 0, $76 = 0, $85 = 0, $90 = 0, $92 = 0, $94 = 0, $95 = 0, $e2 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$val$pre$i$i = 0, $fs$idx1$val$idx$val$pre$i4$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $e2 = sp;
 HEAP32[$e2 + 20 >> 2] = -1;
 HEAP32[$e2 + 16 >> 2] = -1;
 HEAP32[$e2 >> 2] = 5;
 HEAPF64[$e2 + 8 >> 3] = 0.0;
 if (!$op) {
  if ((HEAP32[$e >> 2] | 0) == 5) if ((HEAP32[$e + 16 >> 2] | 0) == -1) if ((HEAP32[$e + 20 >> 2] | 0) == -1) {
   $11 = $e + 8 | 0;
   HEAPF64[$11 >> 3] = -+HEAPF64[$11 >> 3];
   STACKTOP = sp;
   return;
  }
  _luaK_exp2anyreg($fs, $e) | 0;
  _codearith($fs, 19, $e, $e2, $line);
  STACKTOP = sp;
  return;
 } else if (($op | 0) == 1) {
  _luaK_dischargevars($fs, $e);
  switch (HEAP32[$e >> 2] | 0) {
  case 10:
   {
    $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $16 = HEAP32[$e + 8 >> 2] | 0;
    $17 = $fs$idx$val$idx$val$i + ($16 << 2) | 0;
    if (($16 | 0) > 0) {
     $19 = $fs$idx$val$idx$val$i + ($16 + -1 << 2) | 0;
     $20 = HEAP32[$19 >> 2] | 0;
     if ((HEAP8[2216 + ($20 & 63) >> 0] | 0) < 0) {
      $$0$i$i$i = $19;
      $26 = $20;
     } else label = 12;
    } else label = 12;
    if ((label | 0) == 12) {
     $$0$i$i$i = $17;
     $26 = HEAP32[$17 >> 2] | 0;
    }
    HEAP32[$$0$i$i$i >> 2] = (($26 & 16320 | 0) == 0 & 1) << 6 | $26 & -16321;
    break;
   }
  case 2:
  case 5:
  case 4:
   {
    HEAP32[$e >> 2] = 3;
    break;
   }
  case 6:
   {
    label = 21;
    break;
   }
  case 3:
  case 1:
   {
    HEAP32[$e >> 2] = 2;
    break;
   }
  case 11:
   {
    $32 = $fs + 48 | 0;
    $35 = (HEAPU8[$32 >> 0] | 0) + 1 | 0;
    $37 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
    do if ($35 >>> 0 > (HEAPU8[$37 >> 0] | 0) >>> 0) if ($35 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
     $44 = $35 & 255;
     HEAP8[$37 >> 0] = $44;
     $$pre$phi$i$i$iZ2D = $44;
     break;
    } else $$pre$phi$i$i$iZ2D = $35 & 255; while (0);
    HEAP8[$32 >> 0] = $$pre$phi$i$i$iZ2D;
    _discharge2reg($fs, $e, ($$pre$phi$i$i$iZ2D & 255) + -1 | 0);
    if ((HEAP32[$e >> 2] | 0) == 6) label = 21; else {
     $$phi$trans$insert$i = $e + 8 | 0;
     $$pre$phi17$iZ2D = $$phi$trans$insert$i;
     $59 = HEAP32[$$phi$trans$insert$i >> 2] | 0;
     label = 24;
    }
    break;
   }
  default:
   {}
  }
  if ((label | 0) == 21) {
   $47 = $e + 8 | 0;
   $48 = HEAP32[$47 >> 2] | 0;
   if (!($48 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0) > ($48 | 0)) {
    $$pre$phi17$iZ2D = $47;
    $59 = $48;
    label = 24;
   } else {
    $55 = $fs + 48 | 0;
    HEAP8[$55 >> 0] = (HEAP8[$55 >> 0] | 0) + -1 << 24 >> 24;
    $$pre$phi17$iZ2D = $47;
    $59 = $48;
    label = 24;
   } else {
    $$pre$phi17$iZ2D = $47;
    $59 = $48;
    label = 24;
   }
  }
  if ((label | 0) == 24) {
   HEAP32[$$pre$phi17$iZ2D >> 2] = _luaK_code($fs, $59 << 23 | 20) | 0;
   HEAP32[$e >> 2] = 11;
  }
  $62 = $e + 20 | 0;
  $63 = HEAP32[$62 >> 2] | 0;
  $64 = $e + 16 | 0;
  $65 = HEAP32[$64 >> 2] | 0;
  HEAP32[$62 >> 2] = $65;
  HEAP32[$64 >> 2] = $63;
  if (($65 | 0) == -1) $90 = $63; else {
   $fs$idx1$val$idx$val$pre$i4$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
   $$03$i6$i = $65;
   do {
    $67 = $fs$idx1$val$idx$val$pre$i4$i + ($$03$i6$i << 2) | 0;
    if (($$03$i6$i | 0) > 0) {
     $69 = $fs$idx1$val$idx$val$pre$i4$i + ($$03$i6$i + -1 << 2) | 0;
     $70 = HEAP32[$69 >> 2] | 0;
     if ((HEAP8[2216 + ($70 & 63) >> 0] | 0) < 0) {
      $$0$i$i$i9$i = $69;
      $76 = $70;
     } else label = 29;
    } else label = 29;
    if ((label | 0) == 29) {
     label = 0;
     $$0$i$i$i9$i = $67;
     $76 = HEAP32[$67 >> 2] | 0;
    }
    if (($76 & 63 | 0) == 28) HEAP32[$$0$i$i$i9$i >> 2] = $76 & 8372224 | $76 >>> 23 << 6 | 27;
    $85 = ((HEAP32[$67 >> 2] | 0) >>> 14) + -131071 | 0;
    $$03$i6$i = ($85 | 0) == -1 ? -1 : $$03$i6$i + 1 + $85 | 0;
   } while (($$03$i6$i | 0) != -1);
   $90 = HEAP32[$64 >> 2] | 0;
  }
  if (($90 | 0) == -1) {
   STACKTOP = sp;
   return;
  }
  $fs$idx1$val$idx$val$pre$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $$03$i$i = $90;
  do {
   $92 = $fs$idx1$val$idx$val$pre$i$i + ($$03$i$i << 2) | 0;
   if (($$03$i$i | 0) > 0) {
    $94 = $fs$idx1$val$idx$val$pre$i$i + ($$03$i$i + -1 << 2) | 0;
    $95 = HEAP32[$94 >> 2] | 0;
    if ((HEAP8[2216 + ($95 & 63) >> 0] | 0) < 0) {
     $$0$i$i$i$i = $94;
     $101 = $95;
    } else label = 38;
   } else label = 38;
   if ((label | 0) == 38) {
    label = 0;
    $$0$i$i$i$i = $92;
    $101 = HEAP32[$92 >> 2] | 0;
   }
   if (($101 & 63 | 0) == 28) HEAP32[$$0$i$i$i$i >> 2] = $101 & 8372224 | $101 >>> 23 << 6 | 27;
   $110 = ((HEAP32[$92 >> 2] | 0) >>> 14) + -131071 | 0;
   $$03$i$i = ($110 | 0) == -1 ? -1 : $$03$i$i + 1 + $110 | 0;
  } while (($$03$i$i | 0) != -1);
  STACKTOP = sp;
  return;
 } else if (($op | 0) == 2) {
  _luaK_exp2anyreg($fs, $e) | 0;
  _codearith($fs, 21, $e, $e2, $line);
  STACKTOP = sp;
  return;
 } else {
  STACKTOP = sp;
  return;
 }
}

function _subexpr($ls, $v, $limit) {
 $ls = $ls | 0;
 $v = $v | 0;
 $limit = $limit | 0;
 var $$0$i2$ph = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $29 = 0, $4 = 0, $46 = 0, $53 = 0, $58 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $ls$idx = 0, $ls$idx$val = 0, $ls$idx1 = 0, $op$0$lcssa = 0, $op$0$ph$ph = 0, $op$04 = 0, $v2 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0, $op$04$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer1 = sp + 32 | 0;
 $vararg_buffer = sp + 24 | 0;
 $v2 = sp;
 $ls$idx = $ls + 48 | 0;
 $ls$idx$val = HEAP32[$ls$idx >> 2] | 0;
 $ls$idx1 = $ls + 52 | 0;
 $0 = (HEAP32[$ls$idx1 >> 2] | 0) + 38 | 0;
 $2 = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$0 >> 1] = $2;
 if (($2 & 65535) > 200) {
  $4 = $ls$idx$val + 12 | 0;
  $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] | 0;
  $10 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 64 >> 2] | 0;
  if (!$10) {
   $13 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2512;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $13;
   $14 = _luaO_pushfstring($7, 2480, $vararg_buffer1) | 0;
   $15 = HEAP32[$4 >> 2] | 0;
   _luaX_syntaxerror($15, $14);
  }
  HEAP32[$vararg_buffer >> 2] = $10;
  $13 = _luaO_pushfstring($7, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2512;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $13;
  $14 = _luaO_pushfstring($7, 2480, $vararg_buffer1) | 0;
  $15 = HEAP32[$4 >> 2] | 0;
  _luaX_syntaxerror($15, $14);
 }
 $16 = $ls + 16 | 0;
 L8 : do switch (HEAP32[$16 >> 2] | 0) {
 case 270:
  {
   HEAP32[$v + 16 >> 2] = -1;
   HEAP32[$v + 20 >> 2] = -1;
   HEAP32[$v >> 2] = 1;
   HEAP32[$v + 8 >> 2] = 0;
   label = 20;
   break;
  }
 case 289:
  {
   $29 = _luaK_stringK($ls$idx$val, HEAP32[$ls + 24 >> 2] | 0) | 0;
   HEAP32[$v + 16 >> 2] = -1;
   HEAP32[$v + 20 >> 2] = -1;
   HEAP32[$v >> 2] = 4;
   HEAP32[$v + 8 >> 2] = $29;
   label = 20;
   break;
  }
 case 271:
  {
   $$0$i2$ph = 1;
   label = 8;
   break;
  }
 case 35:
  {
   $$0$i2$ph = 2;
   label = 8;
   break;
  }
 case 45:
  {
   $$0$i2$ph = 0;
   label = 8;
   break;
  }
 case 287:
  {
   HEAP32[$v + 16 >> 2] = -1;
   HEAP32[$v + 20 >> 2] = -1;
   HEAP32[$v >> 2] = 5;
   HEAP32[$v + 8 >> 2] = 0;
   HEAPF64[$v + 8 >> 3] = +HEAPF64[$ls + 24 >> 3];
   label = 20;
   break;
  }
 case 123:
  {
   _constructor($ls, $v);
   break;
  }
 case 263:
  {
   HEAP32[$v + 16 >> 2] = -1;
   HEAP32[$v + 20 >> 2] = -1;
   HEAP32[$v >> 2] = 3;
   HEAP32[$v + 8 >> 2] = 0;
   label = 20;
   break;
  }
 case 276:
  {
   HEAP32[$v + 16 >> 2] = -1;
   HEAP32[$v + 20 >> 2] = -1;
   HEAP32[$v >> 2] = 2;
   HEAP32[$v + 8 >> 2] = 0;
   label = 20;
   break;
  }
 case 280:
  {
   if (!(HEAP8[(HEAP32[$ls$idx$val >> 2] | 0) + 77 >> 0] | 0)) _luaX_syntaxerror($ls, 2896); else {
    $46 = _luaK_codeABC($ls$idx$val, 38, 0, 1, 0) | 0;
    HEAP32[$v + 16 >> 2] = -1;
    HEAP32[$v + 20 >> 2] = -1;
    HEAP32[$v >> 2] = 13;
    HEAP32[$v + 8 >> 2] = $46;
    label = 20;
    break L8;
   }
   break;
  }
 case 265:
  {
   _luaX_next($ls);
   _body($ls, $v, 0, HEAP32[$ls + 4 >> 2] | 0);
   break;
  }
 default:
  _suffixedexp($ls, $v);
 } while (0);
 if ((label | 0) == 8) {
  $19 = HEAP32[$ls + 4 >> 2] | 0;
  _luaX_next($ls);
  _subexpr($ls, $v, 8) | 0;
  _luaK_prefix(HEAP32[$ls$idx >> 2] | 0, $$0$i2$ph, $v, $19);
 } else if ((label | 0) == 20) _luaX_next($ls);
 do switch (HEAP32[$16 >> 2] | 0) {
 case 62:
  {
   $op$0$ph$ph = 11;
   break;
  }
 case 43:
  {
   $op$0$ph$ph = 0;
   break;
  }
 case 272:
  {
   $op$0$ph$ph = 14;
   break;
  }
 case 283:
  {
   $op$0$ph$ph = 9;
   break;
  }
 case 281:
  {
   $op$0$ph$ph = 7;
   break;
  }
 case 282:
  {
   $op$0$ph$ph = 12;
   break;
  }
 case 284:
  {
   $op$0$ph$ph = 10;
   break;
  }
 case 60:
  {
   $op$0$ph$ph = 8;
   break;
  }
 case 257:
  {
   $op$0$ph$ph = 13;
   break;
  }
 case 279:
  {
   $op$0$ph$ph = 6;
   break;
  }
 case 37:
  {
   $op$0$ph$ph = 4;
   break;
  }
 case 94:
  {
   $op$0$ph$ph = 5;
   break;
  }
 case 42:
  {
   $op$0$ph$ph = 2;
   break;
  }
 case 45:
  {
   $op$0$ph$ph = 1;
   break;
  }
 case 47:
  {
   $op$0$ph$ph = 3;
   break;
  }
 default:
  {
   $op$0$lcssa = 15;
   $66 = HEAP32[$ls$idx1 >> 2] | 0;
   $67 = $66 + 38 | 0;
   $68 = HEAP16[$67 >> 1] | 0;
   $69 = $68 + -1 << 16 >> 16;
   HEAP16[$67 >> 1] = $69;
   STACKTOP = sp;
   return $op$0$lcssa | 0;
  }
 } while (0);
 $53 = $ls + 4 | 0;
 $op$04 = $op$0$ph$ph;
 while (1) {
  if ((HEAPU8[2944 + ($op$04 << 1) >> 0] | 0) <= ($limit | 0)) {
   $op$0$lcssa = $op$04;
   label = 39;
   break;
  }
  $58 = HEAP32[$53 >> 2] | 0;
  _luaX_next($ls);
  _luaK_infix(HEAP32[$ls$idx >> 2] | 0, $op$04, $v);
  $op$04$looptemp = $op$04;
  $op$04 = _subexpr($ls, $v2, HEAPU8[2944 + ($op$04 << 1) + 1 >> 0] | 0) | 0;
  _luaK_posfix(HEAP32[$ls$idx >> 2] | 0, $op$04$looptemp, $v, $v2, $58);
  if (($op$04 | 0) == 15) {
   $op$0$lcssa = 15;
   label = 39;
   break;
  }
 }
 if ((label | 0) == 39) {
  $66 = HEAP32[$ls$idx1 >> 2] | 0;
  $67 = $66 + 38 | 0;
  $68 = HEAP16[$67 >> 1] | 0;
  $69 = $68 + -1 << 16 >> 16;
  HEAP16[$67 >> 1] = $69;
  STACKTOP = sp;
  return $op$0$lcssa | 0;
 }
 return 0;
}

function _leaveblock($fs) {
 $fs = $fs | 0;
 var $$i$0$i = 0, $0 = 0, $1 = 0, $100 = 0, $105 = 0, $106 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $115 = 0, $121 = 0, $132 = 0, $134 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $33 = 0, $35 = 0, $38 = 0, $43 = 0, $45 = 0, $47 = 0, $52 = 0, $53 = 0, $56 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $84 = 0, $86 = 0, $9 = 0, $95 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx1$val$idx$val$idx$val$i = 0, $fs$idx2$val$i = 0, $i$0$ph1$i$i = 0, $i$01$i = 0, $indvars$iv = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $fs + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $fs + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (HEAP32[$1 >> 2] | 0) if (HEAP8[$1 + 9 >> 0] | 0) {
  $9 = _luaK_jump($fs) | 0;
  _luaK_patchclose($fs, $9, HEAPU8[$1 + 8 >> 0] | 0);
  _luaK_patchtohere($fs, $9);
 }
 L5 : do if (HEAP8[$1 + 10 >> 0] | 0) {
  $16 = $3 + 52 | 0;
  $18 = _luaS_new(HEAP32[$16 >> 2] | 0, 2256) | 0;
  $19 = $3 + 64 | 0;
  $20 = HEAP32[$19 >> 2] | 0;
  $21 = $20 + 24 | 0;
  $22 = $3 + 48 | 0;
  $23 = HEAP32[$22 >> 2] | 0;
  $25 = HEAP32[$23 + 20 >> 2] | 0;
  $26 = $20 + 28 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $28 = $20 + 32 | 0;
  if (($27 | 0) < (HEAP32[$28 >> 2] | 0)) {
   $35 = HEAP32[$21 >> 2] | 0;
   $38 = $23;
   $43 = $27;
   $45 = $20;
  } else {
   $33 = _luaM_growaux_(HEAP32[$16 >> 2] | 0, HEAP32[$21 >> 2] | 0, $28, 16, 32767, 2264) | 0;
   HEAP32[$21 >> 2] = $33;
   $35 = $33;
   $38 = HEAP32[$22 >> 2] | 0;
   $43 = HEAP32[$26 >> 2] | 0;
   $45 = HEAP32[$19 >> 2] | 0;
  }
  HEAP32[$35 + ($27 << 4) >> 2] = $18;
  HEAP32[$35 + ($27 << 4) + 8 >> 2] = 0;
  HEAP8[$35 + ($27 << 4) + 12 >> 0] = HEAP8[$38 + 46 >> 0] | 0;
  HEAP32[$35 + ($27 << 4) + 4 >> 2] = $25;
  HEAP32[$26 >> 2] = $43 + 1;
  $47 = (HEAP32[$45 + 24 >> 2] | 0) + ($27 << 4) | 0;
  $52 = HEAP16[(HEAP32[$38 + 16 >> 2] | 0) + 6 >> 1] | 0;
  $53 = $45 + 16 | 0;
  if (($52 | 0) < (HEAP32[$53 >> 2] | 0)) {
   $56 = $45 + 12 | 0;
   $i$0$ph1$i$i = $52;
   do {
    while (1) {
     if (!(_luaS_eqstr(HEAP32[(HEAP32[$56 >> 2] | 0) + ($i$0$ph1$i$i << 4) >> 2] | 0, HEAP32[$47 >> 2] | 0) | 0)) break;
     _closegoto($3, $i$0$ph1$i$i, $47);
     if (($i$0$ph1$i$i | 0) >= (HEAP32[$53 >> 2] | 0)) break L5;
    }
    $i$0$ph1$i$i = $i$0$ph1$i$i + 1 | 0;
   } while (($i$0$ph1$i$i | 0) < (HEAP32[$53 >> 2] | 0));
  }
 } while (0);
 $68 = HEAP32[$1 >> 2] | 0;
 HEAP32[$0 >> 2] = $68;
 $69 = $1 + 8 | 0;
 $70 = HEAP8[$69 >> 0] | 0;
 $72 = $fs + 46 | 0;
 $73 = HEAP8[$72 >> 0] | 0;
 $74 = $73 & 255;
 $77 = HEAP32[(HEAP32[$2 >> 2] | 0) + 64 >> 2] | 0;
 $78 = $77 + 4 | 0;
 HEAP32[$78 >> 2] = ($70 & 255) - $74 + (HEAP32[$78 >> 2] | 0);
 if (($70 & 255) < ($73 & 255)) {
  $84 = HEAP32[$fs + 20 >> 2] | 0;
  $fs$idx2$val$i = HEAP32[$fs + 40 >> 2] | 0;
  $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 24 >> 2] | 0;
  $fs$idx1$val$idx$val$idx$val$i = HEAP32[$77 >> 2] | 0;
  $indvars$iv = $74;
  while (1) {
   $86 = ($indvars$iv & 255) + -1 << 24 >> 24;
   HEAP32[$fs$idx$val$idx$val$i + ((HEAP16[$fs$idx1$val$idx$val$idx$val$i + (($86 & 255) + $fs$idx2$val$i << 1) >> 1] | 0) * 12 | 0) + 8 >> 2] = $84;
   if (($86 & 255) > ($70 & 255)) $indvars$iv = $indvars$iv + -1 | 0; else break;
  }
  HEAP8[$72 >> 0] = $70;
  $95 = $70;
 } else $95 = $73;
 HEAP8[$fs + 48 >> 0] = $95;
 $100 = HEAP32[$3 + 64 >> 2] | 0;
 HEAP32[$100 + 28 >> 2] = HEAP16[$1 + 4 >> 1];
 $105 = HEAP16[$1 + 6 >> 1] | 0;
 if (!$68) {
  if (($105 | 0) >= (HEAP32[$100 + 16 >> 2] | 0)) {
   STACKTOP = sp;
   return;
  }
  $132 = HEAP32[$100 + 12 >> 2] | 0;
  $134 = HEAP32[$132 + ($105 << 4) >> 2] | 0;
  if ((HEAP8[$134 + 4 >> 0] | 0) != 4) {
   $146 = 2320;
   $141 = $3 + 52 | 0;
   $142 = HEAP32[$141 >> 2] | 0;
   $143 = $134 + 16 | 0;
   $144 = $132 + ($105 << 4) + 8 | 0;
   $145 = HEAP32[$144 >> 2] | 0;
   HEAP32[$vararg_buffer >> 2] = $143;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAP32[$vararg_ptr1 >> 2] = $145;
   $147 = _luaO_pushfstring($142, $146, $vararg_buffer) | 0;
   _semerror($3, $147);
  }
  $146 = (HEAP8[$134 + 6 >> 0] | 0) != 0 ? 2280 : 2320;
  $141 = $3 + 52 | 0;
  $142 = HEAP32[$141 >> 2] | 0;
  $143 = $134 + 16 | 0;
  $144 = $132 + ($105 << 4) + 8 | 0;
  $145 = HEAP32[$144 >> 2] | 0;
  HEAP32[$vararg_buffer >> 2] = $143;
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  HEAP32[$vararg_ptr1 >> 2] = $145;
  $147 = _luaO_pushfstring($142, $146, $vararg_buffer) | 0;
  _semerror($3, $147);
 }
 $106 = $77 + 16 | 0;
 if (($105 | 0) >= (HEAP32[$106 >> 2] | 0)) {
  STACKTOP = sp;
  return;
 }
 $109 = $77 + 12 | 0;
 $110 = $1 + 9 | 0;
 $115 = $70;
 $i$01$i = $105;
 while (1) {
  $111 = HEAP32[$109 >> 2] | 0;
  $112 = $111 + ($i$01$i << 4) + 12 | 0;
  $114 = $115 & 255;
  if ((HEAPU8[$112 >> 0] | 0) > ($115 & 255)) {
   if (!(HEAP8[$110 >> 0] | 0)) $121 = $115; else {
    _luaK_patchclose($fs, HEAP32[$111 + ($i$01$i << 4) + 4 >> 2] | 0, $114);
    $121 = HEAP8[$69 >> 0] | 0;
   }
   HEAP8[$112 >> 0] = $121;
  }
  $$i$0$i = ((_findlabel(HEAP32[$2 >> 2] | 0, $i$01$i) | 0) == 0 & 1) + $i$01$i | 0;
  if (($$i$0$i | 0) >= (HEAP32[$106 >> 2] | 0)) break;
  $115 = HEAP8[$69 >> 0] | 0;
  $i$01$i = $$i$0$i;
 }
 STACKTOP = sp;
 return;
}

function _luaV_lessequal($L, $l, $r) {
 $L = $L | 0;
 $l = $l | 0;
 $r = $r | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $105 = 0, $107 = 0, $108 = 0, $109 = 0, $114 = 0, $115 = 0, $122 = 0, $124 = 0, $129 = 0, $130 = 0, $131 = 0, $135 = 0, $137 = 0, $141 = 0, $142 = 0, $144 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $164 = 0, $165 = 0, $17 = 0, $172 = 0, $174 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $194 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $203 = 0, $204 = 0, $211 = 0, $213 = 0, $218 = 0, $26 = 0, $28 = 0, $31 = 0, $36 = 0, $40 = 0, $41 = 0, $42 = 0, $46 = 0, $48 = 0, $52 = 0, $53 = 0, $55 = 0, $60 = 0, $61 = 0, $68 = 0, $70 = 0, $75 = 0, $76 = 0, $82 = 0, $84 = 0, $89 = 0, $90 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $r$03$i = 0, $tm$01$i$i = 0, $tm$01$i$i4 = 0;
 $0 = $l + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 3) {
  if ((HEAP32[$r + 8 >> 2] | 0) == 3) {
   $$0 = +HEAPF64[$l >> 3] <= +HEAPF64[$r >> 3] & 1;
   return $$0 | 0;
  }
 } else if (($1 & 15 | 0) == 4) if ((HEAP32[$r + 8 >> 2] & 15 | 0) == 4) {
  $16 = HEAP32[$l >> 2] | 0;
  $17 = HEAP32[$r >> 2] | 0;
  $18 = $16 + 16 | 0;
  $19 = $17 + 16 | 0;
  $20 = _strcoll($18, $19) | 0;
  L5 : do if (!$20) {
   $l$01$i = $18;
   $ll$02$i = HEAP32[$16 + 12 >> 2] | 0;
   $lr$04$i = HEAP32[$17 + 12 >> 2] | 0;
   $r$03$i = $19;
   while (1) {
    $26 = _strlen($l$01$i | 0) | 0;
    $28 = ($26 | 0) == ($ll$02$i | 0);
    if (($26 | 0) == ($lr$04$i | 0)) {
     $$lcssa = $28;
     break;
    }
    if ($28) {
     $$0$i = -1;
     break L5;
    }
    $31 = $26 + 1 | 0;
    $l$01$i = $l$01$i + $31 | 0;
    $r$03$i = $r$03$i + $31 | 0;
    $36 = _strcoll($l$01$i, $r$03$i) | 0;
    if ($36) {
     $$0$i = $36;
     break L5;
    } else {
     $ll$02$i = $ll$02$i - $31 | 0;
     $lr$04$i = $lr$04$i - $31 | 0;
    }
   }
   $$0$i = $$lcssa & 1 ^ 1;
  } else $$0$i = $20; while (0);
  $$0 = ($$0$i | 0) < 1 & 1;
  return $$0 | 0;
 }
 $40 = $L + 8 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 $42 = _luaT_gettmbyobj($L, $l, 14) | 0;
 if (!(HEAP32[$42 + 8 >> 2] | 0)) {
  $46 = _luaT_gettmbyobj($L, $r, 14) | 0;
  if (!(HEAP32[$46 + 8 >> 2] | 0)) {
   $130 = HEAP32[$40 >> 2] | 0;
   $131 = _luaT_gettmbyobj($L, $r, 13) | 0;
   if (!(HEAP32[$131 + 8 >> 2] | 0)) {
    $135 = _luaT_gettmbyobj($L, $l, 13) | 0;
    if (!(HEAP32[$135 + 8 >> 2] | 0)) _luaG_ordererror($L, $l, $r); else $tm$01$i$i4 = $135;
   } else $tm$01$i$i4 = $131;
   $137 = $L + 28 | 0;
   $141 = $130 - (HEAP32[$137 >> 2] | 0) | 0;
   $142 = HEAP32[$40 >> 2] | 0;
   HEAP32[$40 >> 2] = $142 + 16;
   $144 = $tm$01$i$i4;
   $149 = HEAP32[$144 + 4 >> 2] | 0;
   $150 = $142;
   HEAP32[$150 >> 2] = HEAP32[$144 >> 2];
   HEAP32[$150 + 4 >> 2] = $149;
   HEAP32[$142 + 8 >> 2] = HEAP32[$tm$01$i$i4 + 8 >> 2];
   $157 = HEAP32[$40 >> 2] | 0;
   HEAP32[$40 >> 2] = $157 + 16;
   $159 = $r;
   $164 = HEAP32[$159 + 4 >> 2] | 0;
   $165 = $157;
   HEAP32[$165 >> 2] = HEAP32[$159 >> 2];
   HEAP32[$165 + 4 >> 2] = $164;
   HEAP32[$157 + 8 >> 2] = HEAP32[$r + 8 >> 2];
   $172 = HEAP32[$40 >> 2] | 0;
   HEAP32[$40 >> 2] = $172 + 16;
   $174 = $l;
   $179 = HEAP32[$174 + 4 >> 2] | 0;
   $180 = $172;
   HEAP32[$180 >> 2] = HEAP32[$174 >> 2];
   HEAP32[$180 + 4 >> 2] = $179;
   HEAP32[$172 + 8 >> 2] = HEAP32[$0 >> 2];
   _luaD_call($L, (HEAP32[$40 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
   $194 = HEAP32[$137 >> 2] | 0;
   $196 = HEAP32[$40 >> 2] | 0;
   $197 = $196 + -16 | 0;
   HEAP32[$40 >> 2] = $197;
   $198 = $197;
   $203 = HEAP32[$198 + 4 >> 2] | 0;
   $204 = $194 + $141 | 0;
   HEAP32[$204 >> 2] = HEAP32[$198 >> 2];
   HEAP32[$204 + 4 >> 2] = $203;
   HEAP32[$194 + ($141 + 8) >> 2] = HEAP32[$196 + -8 >> 2];
   $211 = HEAP32[$40 >> 2] | 0;
   $213 = HEAP32[$211 + 8 >> 2] | 0;
   if (!$213) $218 = 0; else if (($213 | 0) == 1) $218 = (HEAP32[$211 >> 2] | 0) != 0; else $218 = 1;
   $$0 = $218 & 1 ^ 1;
   return $$0 | 0;
  } else $tm$01$i$i = $46;
 } else $tm$01$i$i = $42;
 $48 = $L + 28 | 0;
 $52 = $41 - (HEAP32[$48 >> 2] | 0) | 0;
 $53 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $53 + 16;
 $55 = $tm$01$i$i;
 $60 = HEAP32[$55 + 4 >> 2] | 0;
 $61 = $53;
 HEAP32[$61 >> 2] = HEAP32[$55 >> 2];
 HEAP32[$61 + 4 >> 2] = $60;
 HEAP32[$53 + 8 >> 2] = HEAP32[$tm$01$i$i + 8 >> 2];
 $68 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $68 + 16;
 $70 = $l;
 $75 = HEAP32[$70 + 4 >> 2] | 0;
 $76 = $68;
 HEAP32[$76 >> 2] = HEAP32[$70 >> 2];
 HEAP32[$76 + 4 >> 2] = $75;
 HEAP32[$68 + 8 >> 2] = HEAP32[$0 >> 2];
 $82 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $82 + 16;
 $84 = $r;
 $89 = HEAP32[$84 + 4 >> 2] | 0;
 $90 = $82;
 HEAP32[$90 >> 2] = HEAP32[$84 >> 2];
 HEAP32[$90 + 4 >> 2] = $89;
 HEAP32[$82 + 8 >> 2] = HEAP32[$r + 8 >> 2];
 _luaD_call($L, (HEAP32[$40 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
 $105 = HEAP32[$48 >> 2] | 0;
 $107 = HEAP32[$40 >> 2] | 0;
 $108 = $107 + -16 | 0;
 HEAP32[$40 >> 2] = $108;
 $109 = $108;
 $114 = HEAP32[$109 + 4 >> 2] | 0;
 $115 = $105 + $52 | 0;
 HEAP32[$115 >> 2] = HEAP32[$109 >> 2];
 HEAP32[$115 + 4 >> 2] = $114;
 HEAP32[$105 + ($52 + 8) >> 2] = HEAP32[$107 + -8 >> 2];
 $122 = HEAP32[$40 >> 2] | 0;
 $124 = HEAP32[$122 + 8 >> 2] | 0;
 if (!$124) $129 = 0; else if (($124 | 0) == 1) $129 = (HEAP32[$122 >> 2] | 0) != 0; else $129 = 1;
 $$0 = $129 & 1;
 return $$0 | 0;
}

function _luaH_getn($t) {
 $t = $t | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i12$i = 0, $$0$i6$i = 0, $$01$i = 0, $$01$i$lcssa = 0, $$121$i = 0, $0 = 0, $1 = 0, $101 = 0, $102 = 0, $106 = 0.0, $11 = 0, $110 = 0, $112 = 0, $134 = 0, $15 = 0, $18 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $29 = 0.0, $33 = 0, $35 = 0, $5 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $70 = 0.0, $74 = 0, $76 = 0, $i$0$ = 0, $i$0$i = 0, $i$0$i$lcssa = 0, $i$0$i$phi = 0, $i$09 = 0, $i$1$i = 0, $i$1$i$i$i = 0, $i$1$i$i3$i = 0, $i$1$i$i9$i = 0, $i$2$$i = 0, $i$222$i = 0, $j$08 = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0, $n$0$i11$i = 0, $n$0$i11$i$lcssa = 0, $n$0$i5$i = 0, $n$0$i5$i$lcssa = 0, $u$sroa$0$i$i8$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $u$sroa$0$i$i8$i = sp;
 $0 = $t + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  $5 = HEAP32[$t + 12 >> 2] | 0;
  if (!(HEAP32[$5 + ($1 + -1 << 4) + 8 >> 2] | 0)) {
   if ($1 >>> 0 > 1) {
    $i$09 = 0;
    $j$08 = $1;
   } else {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   while (1) {
    $11 = ($i$09 + $j$08 | 0) >>> 1;
    $15 = (HEAP32[$5 + ($11 + -1 << 4) + 8 >> 2] | 0) == 0;
    $j$08 = $15 ? $11 : $j$08;
    $i$0$ = $15 ? $i$09 : $11;
    if (($j$08 - $i$0$ | 0) >>> 0 <= 1) {
     $$0 = $i$0$;
     break;
    } else $i$09 = $i$0$;
   }
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $18 = $t + 16 | 0;
 if ((HEAP32[$18 >> 2] | 0) == 3040) {
  $$0 = $1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $22 = $t + 12 | 0;
 $23 = $t + 7 | 0;
 $24 = $u$sroa$0$i$i8$i + 4 | 0;
 $$01$i = $1 + 1 | 0;
 $i$0$i = $1;
 while (1) {
  $25 = $$01$i + -1 | 0;
  L15 : do if ($25 >>> 0 < $1 >>> 0) $$0$i$i = (HEAP32[$22 >> 2] | 0) + ($25 << 4) | 0; else {
   $29 = +($$01$i | 0);
   HEAPF64[$u$sroa$0$i$i8$i >> 3] = $29 + 1.0;
   $33 = (HEAP32[$24 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i8$i >> 2] | 0) | 0;
   if (($33 | 0) < 0) {
    $35 = 0 - $33 | 0;
    $i$1$i$i$i = ($33 | 0) == ($35 | 0) ? 0 : $35;
   } else $i$1$i$i$i = $33;
   $n$0$i$i = (HEAP32[$18 >> 2] | 0) + ((($i$1$i$i$i | 0) % ((1 << (HEAPU8[$23 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
   while (1) {
    if ((HEAP32[$n$0$i$i + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i$i + 16 >> 3] == $29) {
     $n$0$i$i$lcssa = $n$0$i$i;
     break;
    }
    $n$0$i$i = HEAP32[$n$0$i$i + 28 >> 2] | 0;
    if (!$n$0$i$i) {
     $$0$i$i = 1832;
     break L15;
    }
   }
   $$0$i$i = $n$0$i$i$lcssa;
  } while (0);
  if (!(HEAP32[$$0$i$i + 8 >> 2] | 0)) {
   $$01$i$lcssa = $$01$i;
   $i$0$i$lcssa = $i$0$i;
   break;
  }
  $62 = $$01$i << 1;
  if ($62 >>> 0 > 2147483645) {
   label = 20;
   break;
  } else {
   $i$0$i$phi = $$01$i;
   $$01$i = $62;
   $i$0$i = $i$0$i$phi;
  }
 }
 if ((label | 0) == 20) {
  $64 = HEAP32[$0 >> 2] | 0;
  $65 = $u$sroa$0$i$i8$i + 4 | 0;
  $i$1$i = 1;
  while (1) {
   $66 = $i$1$i + -1 | 0;
   L33 : do if ($66 >>> 0 < $64 >>> 0) $$0$i12$i = (HEAP32[$22 >> 2] | 0) + ($66 << 4) | 0; else {
    $70 = +($i$1$i | 0);
    HEAPF64[$u$sroa$0$i$i8$i >> 3] = $70 + 1.0;
    $74 = (HEAP32[$65 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i8$i >> 2] | 0) | 0;
    if (($74 | 0) < 0) {
     $76 = 0 - $74 | 0;
     $i$1$i$i9$i = ($74 | 0) == ($76 | 0) ? 0 : $76;
    } else $i$1$i$i9$i = $74;
    $n$0$i11$i = (HEAP32[$18 >> 2] | 0) + ((($i$1$i$i9$i | 0) % ((1 << (HEAPU8[$23 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
    while (1) {
     if ((HEAP32[$n$0$i11$i + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i11$i + 16 >> 3] == $70) {
      $n$0$i11$i$lcssa = $n$0$i11$i;
      break;
     }
     $n$0$i11$i = HEAP32[$n$0$i11$i + 28 >> 2] | 0;
     if (!$n$0$i11$i) {
      $$0$i12$i = 1832;
      break L33;
     }
    }
    $$0$i12$i = $n$0$i11$i$lcssa;
   } while (0);
   if (!(HEAP32[$$0$i12$i + 8 >> 2] | 0)) {
    $$0 = $66;
    break;
   } else $i$1$i = $i$1$i + 1 | 0;
  }
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($$01$i$lcssa - $i$0$i$lcssa | 0) >>> 0 <= 1) {
  $$0 = $i$0$i$lcssa;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $60 = HEAP32[$0 >> 2] | 0;
 $61 = $u$sroa$0$i$i8$i + 4 | 0;
 $$121$i = $$01$i$lcssa;
 $i$222$i = $i$0$i$lcssa;
 while (1) {
  $101 = ($$121$i + $i$222$i | 0) >>> 1;
  $102 = $101 + -1 | 0;
  L53 : do if ($102 >>> 0 < $60 >>> 0) $$0$i6$i = (HEAP32[$22 >> 2] | 0) + ($102 << 4) | 0; else {
   $106 = +($101 | 0);
   HEAPF64[$u$sroa$0$i$i8$i >> 3] = $106 + 1.0;
   $110 = (HEAP32[$61 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i8$i >> 2] | 0) | 0;
   if (($110 | 0) < 0) {
    $112 = 0 - $110 | 0;
    $i$1$i$i3$i = ($110 | 0) == ($112 | 0) ? 0 : $112;
   } else $i$1$i$i3$i = $110;
   $n$0$i5$i = (HEAP32[$18 >> 2] | 0) + ((($i$1$i$i3$i | 0) % ((1 << (HEAPU8[$23 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
   while (1) {
    if ((HEAP32[$n$0$i5$i + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i5$i + 16 >> 3] == $106) {
     $n$0$i5$i$lcssa = $n$0$i5$i;
     break;
    }
    $n$0$i5$i = HEAP32[$n$0$i5$i + 28 >> 2] | 0;
    if (!$n$0$i5$i) {
     $$0$i6$i = 1832;
     break L53;
    }
   }
   $$0$i6$i = $n$0$i5$i$lcssa;
  } while (0);
  $134 = (HEAP32[$$0$i6$i + 8 >> 2] | 0) == 0;
  $$121$i = $134 ? $101 : $$121$i;
  $i$2$$i = $134 ? $i$222$i : $101;
  if (($$121$i - $i$2$$i | 0) >>> 0 <= 1) {
   $$0 = $i$2$$i;
   break;
  } else $i$222$i = $i$2$$i;
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_posfix($fs, $op, $e1, $e2, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e1 = $e1 | 0;
 $e2 = $e2 | 0;
 $line = $line | 0;
 var $$0$i$i = 0, $$0$i$i7 = 0, $$lcssa = 0, $$lcssa31 = 0, $$lcssa32 = 0, $$lcssa33 = 0, $$pre$phi$i$iZ2D = 0, $0 = 0, $104 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $32 = 0, $37 = 0, $4 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $7 = 0, $72 = 0, $82 = 0, $89 = 0, $9 = 0, $92 = 0, $95 = 0, $97 = 0, $fs$idx$val$idx$val$i = 0, $fs$idx$val$idx$val$i4 = 0, $list$0$i = 0, $list$0$i$lcssa = 0, $list$0$i6 = 0, $list$0$i6$lcssa = 0;
 switch ($op | 0) {
 case 14:
  {
   _luaK_dischargevars($fs, $e2);
   $23 = $e2 + 16 | 0;
   $25 = HEAP32[$e1 + 16 >> 2] | 0;
   do if (($25 | 0) != -1) {
    $27 = HEAP32[$23 >> 2] | 0;
    if (($27 | 0) == -1) {
     HEAP32[$23 >> 2] = $25;
     break;
    }
    $fs$idx$val$idx$val$i4 = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $list$0$i6 = $27;
    while (1) {
     $29 = $fs$idx$val$idx$val$i4 + ($list$0$i6 << 2) | 0;
     $30 = HEAP32[$29 >> 2] | 0;
     $32 = ($30 >>> 14) + -131071 | 0;
     $$0$i$i7 = ($32 | 0) == -1 ? -1 : $list$0$i6 + 1 + $32 | 0;
     if (($$0$i$i7 | 0) == -1) {
      $$lcssa32 = $29;
      $$lcssa33 = $30;
      $list$0$i6$lcssa = $list$0$i6;
      break;
     } else $list$0$i6 = $$0$i$i7;
    }
    $37 = $25 + ~$list$0$i6$lcssa | 0;
    if (((($37 | 0) > -1 ? $37 : 0 - $37 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
     HEAP32[$$lcssa32 >> 2] = ($37 << 14) + 2147467264 | $$lcssa33 & 16383;
     break;
    }
   } while (0);
   HEAP32[$e1 >> 2] = HEAP32[$e2 >> 2];
   HEAP32[$e1 + 4 >> 2] = HEAP32[$e2 + 4 >> 2];
   HEAP32[$e1 + 8 >> 2] = HEAP32[$e2 + 8 >> 2];
   HEAP32[$e1 + 12 >> 2] = HEAP32[$e2 + 12 >> 2];
   HEAP32[$e1 + 16 >> 2] = HEAP32[$e2 + 16 >> 2];
   HEAP32[$e1 + 20 >> 2] = HEAP32[$e2 + 20 >> 2];
   return;
  }
 case 13:
  {
   _luaK_dischargevars($fs, $e2);
   $0 = $e2 + 20 | 0;
   $2 = HEAP32[$e1 + 20 >> 2] | 0;
   do if (($2 | 0) != -1) {
    $4 = HEAP32[$0 >> 2] | 0;
    if (($4 | 0) == -1) {
     HEAP32[$0 >> 2] = $2;
     break;
    }
    $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
    $list$0$i = $4;
    while (1) {
     $6 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
     $7 = HEAP32[$6 >> 2] | 0;
     $9 = ($7 >>> 14) + -131071 | 0;
     $$0$i$i = ($9 | 0) == -1 ? -1 : $list$0$i + 1 + $9 | 0;
     if (($$0$i$i | 0) == -1) {
      $$lcssa = $6;
      $$lcssa31 = $7;
      $list$0$i$lcssa = $list$0$i;
      break;
     } else $list$0$i = $$0$i$i;
    }
    $14 = $2 + ~$list$0$i$lcssa | 0;
    if (((($14 | 0) > -1 ? $14 : 0 - $14 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else {
     HEAP32[$$lcssa >> 2] = ($14 << 14) + 2147467264 | $$lcssa31 & 16383;
     break;
    }
   } while (0);
   HEAP32[$e1 >> 2] = HEAP32[$e2 >> 2];
   HEAP32[$e1 + 4 >> 2] = HEAP32[$e2 + 4 >> 2];
   HEAP32[$e1 + 8 >> 2] = HEAP32[$e2 + 8 >> 2];
   HEAP32[$e1 + 12 >> 2] = HEAP32[$e2 + 12 >> 2];
   HEAP32[$e1 + 16 >> 2] = HEAP32[$e2 + 16 >> 2];
   HEAP32[$e1 + 20 >> 2] = HEAP32[$e2 + 20 >> 2];
   return;
  }
 case 6:
  {
   if ((HEAP32[$e2 + 16 >> 2] | 0) == (HEAP32[$e2 + 20 >> 2] | 0)) _luaK_dischargevars($fs, $e2); else _luaK_exp2anyreg($fs, $e2) | 0;
   if ((HEAP32[$e2 >> 2] | 0) == 11) {
    $53 = $e2 + 8 | 0;
    $58 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$53 >> 2] << 2) | 0;
    $59 = HEAP32[$58 >> 2] | 0;
    if (($59 & 63 | 0) == 22) {
     $64 = $e1 + 8 | 0;
     $65 = HEAP32[$64 >> 2] | 0;
     if ((HEAP32[$e1 >> 2] | 0) == 6 & ($65 & 256 | 0) == 0) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($65 | 0)) {
      $72 = $fs + 48 | 0;
      HEAP8[$72 >> 0] = (HEAP8[$72 >> 0] | 0) + -1 << 24 >> 24;
     }
     HEAP32[$58 >> 2] = $65 << 23 | $59 & 8388607;
     HEAP32[$e1 >> 2] = 11;
     HEAP32[$64 >> 2] = HEAP32[$53 >> 2];
     return;
    }
   }
   _luaK_dischargevars($fs, $e2);
   if ((HEAP32[$e2 >> 2] | 0) == 6) {
    $82 = HEAP32[$e2 + 8 >> 2] | 0;
    if (!($82 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($82 | 0)) {
     $89 = $fs + 48 | 0;
     HEAP8[$89 >> 0] = (HEAP8[$89 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $92 = $fs + 48 | 0;
   $95 = (HEAPU8[$92 >> 0] | 0) + 1 | 0;
   $97 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
   do if ($95 >>> 0 > (HEAPU8[$97 >> 0] | 0) >>> 0) if ($95 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
    $104 = $95 & 255;
    HEAP8[$97 >> 0] = $104;
    $$pre$phi$i$iZ2D = $104;
    break;
   } else $$pre$phi$i$iZ2D = $95 & 255; while (0);
   HEAP8[$92 >> 0] = $$pre$phi$i$iZ2D;
   _exp2reg($fs, $e2, ($$pre$phi$i$iZ2D & 255) + -1 | 0);
   _codearith($fs, 22, $e1, $e2, $line);
   return;
  }
 case 5:
 case 4:
 case 3:
 case 2:
 case 1:
 case 0:
  {
   _codearith($fs, $op + 13 | 0, $e1, $e2, $line);
   return;
  }
 case 9:
 case 8:
 case 7:
  {
   _codecomp($fs, $op + 17 | 0, 1, $e1, $e2);
   return;
  }
 case 12:
 case 11:
 case 10:
  {
   _codecomp($fs, $op + 14 | 0, 0, $e1, $e2);
   return;
  }
 default:
  return;
 }
}

function _luaH_resize($L, $t, $nasize, $nhsize) {
 $L = $L | 0;
 $t = $t | 0;
 $nasize = $nasize | 0;
 $nhsize = $nhsize | 0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i3 = 0, $$pre$phi16Z2D = 0.0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $102 = 0, $105 = 0, $110 = 0, $111 = 0, $14 = 0, $15 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $3 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $47 = 0.0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $75 = 0, $80 = 0, $81 = 0, $89 = 0, $94 = 0, $96 = 0, $cell$0$i = 0, $i$01$i = 0, $i$01$i1 = 0, $i$07 = 0, $i$1$i$i$i = 0, $i$16$in = 0, $k$i = 0, $lsize$0$i = 0, $n$0$i$i = 0, $n$0$i$i$lcssa = 0, $u$sroa$0$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0, $i$16$in$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 24 | 0;
 $u$sroa$0$i$i$i = sp + 16 | 0;
 $k$i = sp;
 $0 = $t + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $t + 7 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $3 & 255;
 $5 = $t + 16 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($1 | 0) < ($nasize | 0)) {
  if (($nasize + 1 | 0) >>> 0 > 268435455) _luaM_toobig($L);
  $10 = $t + 12 | 0;
  $14 = _luaM_realloc_($L, HEAP32[$10 >> 2] | 0, $1 << 4, $nasize << 4) | 0;
  HEAP32[$10 >> 2] = $14;
  $15 = HEAP32[$0 >> 2] | 0;
  if (($15 | 0) < ($nasize | 0)) {
   $i$01$i1 = $15;
   do {
    HEAP32[$14 + ($i$01$i1 << 4) + 8 >> 2] = 0;
    $i$01$i1 = $i$01$i1 + 1 | 0;
   } while (($i$01$i1 | 0) != ($nasize | 0));
  }
  HEAP32[$0 >> 2] = $nasize;
 }
 if (!$nhsize) {
  HEAP32[$5 >> 2] = 3040;
  $$0$i = 0;
  $33 = 3040;
  $lsize$0$i = 0;
 } else {
  $20 = _luaO_ceillog2($nhsize) | 0;
  if (($20 | 0) > 30) _luaG_runerror($L, 3072, $vararg_buffer);
  $22 = 1 << $20;
  if (($22 + 1 | 0) >>> 0 > 134217727) _luaM_toobig($L);
  $26 = _luaM_realloc_($L, 0, 0, $22 << 5) | 0;
  HEAP32[$5 >> 2] = $26;
  $i$01$i = 0;
  do {
   HEAP32[$26 + ($i$01$i << 5) + 28 >> 2] = 0;
   HEAP32[$26 + ($i$01$i << 5) + 24 >> 2] = 0;
   HEAP32[$26 + ($i$01$i << 5) + 8 >> 2] = 0;
   $i$01$i = $i$01$i + 1 | 0;
  } while (($i$01$i | 0) < ($22 | 0));
  $$0$i = $22;
  $33 = $26;
  $lsize$0$i = $20 & 255;
 }
 HEAP8[$2 >> 0] = $lsize$0$i;
 HEAP32[$t + 20 >> 2] = $33 + ($$0$i << 5);
 do if (($1 | 0) > ($nasize | 0)) {
  HEAP32[$0 >> 2] = $nasize;
  $36 = $t + 12 | 0;
  $37 = $k$i + 8 | 0;
  $38 = $u$sroa$0$i$i$i + 4 | 0;
  $i$07 = $nasize;
  while (1) {
   $39 = HEAP32[$36 >> 2] | 0;
   $40 = $39 + ($i$07 << 4) + 8 | 0;
   if (!(HEAP32[$40 >> 2] | 0)) $$pre$phiZ2D = $i$07 + 1 | 0; else {
    $43 = $39 + ($i$07 << 4) | 0;
    $44 = $i$07 + 1 | 0;
    L30 : do if ($i$07 >>> 0 < (HEAP32[$0 >> 2] | 0) >>> 0) {
     $$0$i$i = $43;
     label = 28;
    } else {
     $47 = +($44 | 0);
     HEAPF64[$u$sroa$0$i$i$i >> 3] = $47 + 1.0;
     $51 = (HEAP32[$38 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i$i >> 2] | 0) | 0;
     if (($51 | 0) < 0) {
      $53 = 0 - $51 | 0;
      $i$1$i$i$i = ($51 | 0) == ($53 | 0) ? 0 : $53;
     } else $i$1$i$i$i = $51;
     $n$0$i$i = (HEAP32[$5 >> 2] | 0) + ((($i$1$i$i$i | 0) % ((1 << (HEAPU8[$2 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
     while (1) {
      if ((HEAP32[$n$0$i$i + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i$i + 16 >> 3] == $47) {
       $n$0$i$i$lcssa = $n$0$i$i;
       break;
      }
      $n$0$i$i = HEAP32[$n$0$i$i + 28 >> 2] | 0;
      if (!$n$0$i$i) {
       $$pre$phi16Z2D = $47;
       label = 30;
       break L30;
      }
     }
     $$0$i$i = $n$0$i$i$lcssa;
     label = 28;
    } while (0);
    if ((label | 0) == 28) {
     label = 0;
     if (($$0$i$i | 0) == 1832) {
      $$pre$phi16Z2D = +($44 | 0);
      label = 30;
     } else $cell$0$i = $$0$i$i;
    }
    if ((label | 0) == 30) {
     label = 0;
     HEAPF64[$k$i >> 3] = $$pre$phi16Z2D;
     HEAP32[$37 >> 2] = 3;
     $cell$0$i = _luaH_newkey($L, $t, $k$i) | 0;
    }
    $75 = $43;
    $80 = HEAP32[$75 + 4 >> 2] | 0;
    $81 = $cell$0$i;
    HEAP32[$81 >> 2] = HEAP32[$75 >> 2];
    HEAP32[$81 + 4 >> 2] = $80;
    HEAP32[$cell$0$i + 8 >> 2] = HEAP32[$40 >> 2];
    $$pre$phiZ2D = $44;
   }
   if (($$pre$phiZ2D | 0) == ($1 | 0)) break; else $i$07 = $$pre$phiZ2D;
  }
  if (($nasize + 1 | 0) >>> 0 > 268435455) _luaM_toobig($L); else {
   $89 = $t + 12 | 0;
   HEAP32[$89 >> 2] = _luaM_realloc_($L, HEAP32[$89 >> 2] | 0, $1 << 4, $nasize << 4) | 0;
   break;
  }
 } while (0);
 $94 = 1 << $4;
 if ($3 << 24 >> 24 != 31) {
  $i$16$in = $94;
  do {
   $i$16$in$looptemp = $i$16$in;
   $i$16$in = $i$16$in + -1 | 0;
   $96 = $6 + ($i$16$in << 5) + 8 | 0;
   if (HEAP32[$96 >> 2] | 0) {
    $101 = $6 + ($i$16$in << 5) + 16 | 0;
    $102 = _luaH_get($t, $101) | 0;
    if (($102 | 0) == 1832) $$0$i3 = _luaH_newkey($L, $t, $101) | 0; else $$0$i3 = $102;
    $105 = $6 + ($i$16$in << 5) | 0;
    $110 = HEAP32[$105 + 4 >> 2] | 0;
    $111 = $$0$i3;
    HEAP32[$111 >> 2] = HEAP32[$105 >> 2];
    HEAP32[$111 + 4 >> 2] = $110;
    HEAP32[$$0$i3 + 8 >> 2] = HEAP32[$96 >> 2];
   }
  } while (($i$16$in$looptemp | 0) > 1);
 }
 if (($6 | 0) == 3040) {
  STACKTOP = sp;
  return;
 }
 _luaM_realloc_($L, $6, $94 << 5, 0) | 0;
 STACKTOP = sp;
 return;
}

function _lua_resume($L, $from, $nargs) {
 $L = $L | 0;
 $from = $from | 0;
 $nargs = $nargs | 0;
 var $$$i$i = 0, $$lcssa = 0, $$lim$0$i$i$i = 0, $$lim$0$i$i$i$lcssa = 0, $0 = 0, $1 = 0, $102 = 0, $109 = 0, $114 = 0, $115 = 0, $122 = 0, $125 = 0, $126 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $40 = 0, $46 = 0, $48 = 0, $53 = 0, $54 = 0, $61 = 0, $65 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $90 = 0, $93 = 0, $96 = 0, $ci$01$i$i = 0, $ci$02$i$i = 0, $ci$02$i$i$lcssa = 0, $ci$03$i$i$i = 0, $lim$02$i$i$i = 0, $status$011 = 0, $status$01143 = 0, $status$1 = 0, label = 0;
 $0 = $L + 36 | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 if (!$from) $8 = 1; else $8 = (HEAPU16[$from + 38 >> 1] | 0) + 1 & 65535;
 $7 = $L + 38 | 0;
 HEAP16[$7 >> 1] = $8;
 HEAP16[$0 >> 1] = 0;
 $9 = $L + 8 | 0;
 $13 = _luaD_rawrunprotected($L, 20, (HEAP32[$9 >> 2] | 0) + (0 - $nargs << 4) | 0) | 0;
 if (($13 | 0) == -1) {
  $status$1 = 2;
  HEAP16[$0 >> 1] = $1;
  $125 = HEAP16[$7 >> 1] | 0;
  $126 = $125 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $126;
  return $status$1 | 0;
 }
 if ($13 >>> 0 <= 1) {
  $status$1 = $13;
  HEAP16[$0 >> 1] = $1;
  $125 = HEAP16[$7 >> 1] | 0;
  $126 = $125 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $126;
  return $status$1 | 0;
 }
 $15 = $L + 16 | 0;
 $16 = $L + 28 | 0;
 $17 = $L + 41 | 0;
 $18 = $L + 68 | 0;
 $19 = $L + 32 | 0;
 $20 = $L + 12 | 0;
 $status$011 = $13;
 L10 : while (1) {
  $ci$01$i$i = HEAP32[$15 >> 2] | 0;
  if (!$ci$01$i$i) {
   $status$01143 = $status$011;
   break;
  } else $ci$02$i$i = $ci$01$i$i;
  while (1) {
   $22 = $ci$02$i$i + 18 | 0;
   if (HEAP8[$22 >> 0] & 16) {
    $$lcssa = $22;
    $ci$02$i$i$lcssa = $ci$02$i$i;
    break;
   }
   $ci$02$i$i = HEAP32[$ci$02$i$i + 8 >> 2] | 0;
   if (!$ci$02$i$i) {
    $status$01143 = $status$011;
    break L10;
   }
  }
  $28 = HEAP32[$16 >> 2] | 0;
  $30 = HEAP32[$ci$02$i$i$lcssa + 20 >> 2] | 0;
  $31 = $28 + $30 | 0;
  _luaF_close($L, $31);
  if (($status$011 | 0) == 4) {
   $34 = HEAP32[(HEAP32[$20 >> 2] | 0) + 180 >> 2] | 0;
   HEAP32[$31 >> 2] = $34;
   HEAP32[$28 + ($30 + 8) >> 2] = HEAPU8[$34 + 4 >> 0] | 0 | 64;
  } else if (($status$011 | 0) == 6) {
   $40 = _luaS_newlstr($L, 752, 23) | 0;
   HEAP32[$31 >> 2] = $40;
   HEAP32[$28 + ($30 + 8) >> 2] = HEAPU8[$40 + 4 >> 0] | 0 | 64;
  } else {
   $46 = HEAP32[$9 >> 2] | 0;
   $48 = $46 + -16 | 0;
   $53 = HEAP32[$48 + 4 >> 2] | 0;
   $54 = $31;
   HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$54 + 4 >> 2] = $53;
   HEAP32[$28 + ($30 + 8) >> 2] = HEAP32[$46 + -8 >> 2];
  }
  $61 = $28 + ($30 + 16) | 0;
  HEAP32[$9 >> 2] = $61;
  HEAP32[$15 >> 2] = $ci$02$i$i$lcssa;
  HEAP8[$17 >> 0] = HEAP8[$ci$02$i$i$lcssa + 36 >> 0] | 0;
  HEAP16[$0 >> 1] = 0;
  $ci$03$i$i$i = $ci$02$i$i$lcssa;
  $lim$02$i$i$i = $61;
  while (1) {
   $65 = HEAP32[$ci$03$i$i$i + 4 >> 2] | 0;
   $$lim$0$i$i$i = $lim$02$i$i$i >>> 0 < $65 >>> 0 ? $65 : $lim$02$i$i$i;
   $ci$03$i$i$i = HEAP32[$ci$03$i$i$i + 8 >> 2] | 0;
   if (!$ci$03$i$i$i) {
    $$lim$0$i$i$i$lcssa = $$lim$0$i$i$i;
    break;
   } else $lim$02$i$i$i = $$lim$0$i$i$i;
  }
  $72 = $$lim$0$i$i$i$lcssa - (HEAP32[$16 >> 2] | 0) | 0;
  $74 = ($72 >> 4) + 1 | 0;
  $77 = (($74 | 0) / 8 | 0) + 10 + $74 | 0;
  $$$i$i = ($77 | 0) > 1e6 ? 1e6 : $77;
  if (($72 | 0) <= 15999984) if (($$$i$i | 0) < (HEAP32[$19 >> 2] | 0)) _luaD_reallocstack($L, $$$i$i);
  HEAP32[$18 >> 2] = HEAP32[$ci$02$i$i$lcssa + 32 >> 2];
  HEAP8[$$lcssa >> 0] = HEAPU8[$$lcssa >> 0] | 0 | 32;
  HEAP8[$ci$02$i$i$lcssa + 37 >> 0] = $status$011;
  $90 = _luaD_rawrunprotected($L, 21, 0) | 0;
  if ($90 >>> 0 > 1) $status$011 = $90; else {
   $status$1 = $90;
   label = 24;
   break;
  }
 }
 if ((label | 0) == 24) {
  HEAP16[$0 >> 1] = $1;
  $125 = HEAP16[$7 >> 1] | 0;
  $126 = $125 + -1 << 16 >> 16;
  HEAP16[$7 >> 1] = $126;
  return $status$1 | 0;
 }
 HEAP8[$L + 6 >> 0] = $status$01143;
 $93 = HEAP32[$9 >> 2] | 0;
 if (($status$01143 | 0) == 6) {
  $102 = _luaS_newlstr($L, 752, 23) | 0;
  HEAP32[$93 >> 2] = $102;
  HEAP32[$93 + 8 >> 2] = HEAPU8[$102 + 4 >> 0] | 0 | 64;
 } else if (($status$01143 | 0) == 4) {
  $96 = HEAP32[(HEAP32[$20 >> 2] | 0) + 180 >> 2] | 0;
  HEAP32[$93 >> 2] = $96;
  HEAP32[$93 + 8 >> 2] = HEAPU8[$96 + 4 >> 0] | 0 | 64;
 } else {
  $109 = $93 + -16 | 0;
  $114 = HEAP32[$109 + 4 >> 2] | 0;
  $115 = $93;
  HEAP32[$115 >> 2] = HEAP32[$109 >> 2];
  HEAP32[$115 + 4 >> 2] = $114;
  HEAP32[$93 + 8 >> 2] = HEAP32[$93 + -8 >> 2];
 }
 $122 = $93 + 16 | 0;
 HEAP32[$9 >> 2] = $122;
 HEAP32[(HEAP32[$15 >> 2] | 0) + 4 >> 2] = $122;
 $status$1 = $status$01143;
 HEAP16[$0 >> 1] = $1;
 $125 = HEAP16[$7 >> 1] | 0;
 $126 = $125 + -1 << 16 >> 16;
 HEAP16[$7 >> 1] = $126;
 return $status$1 | 0;
}

function _luaO_pushvfstring($L, $fmt, $argp) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $argp = $argp | 0;
 var $$ = 0, $$0$lcssa = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $104 = 0, $105 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $116 = 0, $117 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $16 = 0, $17 = 0, $2 = 0, $25 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $59 = 0, $66 = 0, $67 = 0, $70 = 0, $77 = 0, $78 = 0.0, $8 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $90 = 0, $96 = 0, $98 = 0, $buff = 0, $buff2 = 0, $n$0$lcssa = 0, $n$07 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer13 = sp + 8 | 0;
 $vararg_buffer = sp;
 $buff = sp + 40 | 0;
 $buff2 = sp + 16 | 0;
 $0 = _strchr($fmt, 37) | 0;
 $2 = $L + 24 | 0;
 $4 = $L + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $8 = (HEAP32[$2 >> 2] | 0) - $5 | 0;
 L1 : do if (!$0) {
  $$0$lcssa = $fmt;
  $$lcssa4 = $8;
  $129 = $5;
  $n$0$lcssa = 0;
 } else {
  $$08 = $fmt;
  $11 = $0;
  $130 = $5;
  $9 = $8;
  $n$07 = 0;
  L3 : while (1) {
   if (($9 | 0) < 48) {
    _luaD_growstack($L, 2);
    $16 = HEAP32[$4 >> 2] | 0;
   } else $16 = $130;
   HEAP32[$4 >> 2] = $16 + 16;
   $17 = _luaS_newlstr($L, $$08, $11 - $$08 | 0) | 0;
   HEAP32[$16 >> 2] = $17;
   HEAP32[$16 + 8 >> 2] = HEAPU8[$17 + 4 >> 0] | 64;
   $25 = HEAP8[$11 + 1 >> 0] | 0;
   switch ($25 | 0) {
   case 115:
    {
     $31 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $32 = HEAP32[$31 >> 2] | 0;
     HEAP32[$argp >> 2] = $31 + 4;
     $$ = ($32 | 0) == 0 ? 12032 : $32;
     $34 = _strlen($$ | 0) | 0;
     $35 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $35 + 16;
     $37 = _luaS_newlstr($L, $$, $34) | 0;
     HEAP32[$35 >> 2] = $37;
     HEAP32[$35 + 8 >> 2] = HEAPU8[$37 + 4 >> 0] | 64;
     break;
    }
   case 99:
    {
     $48 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $49 = HEAP32[$48 >> 2] | 0;
     HEAP32[$argp >> 2] = $48 + 4;
     HEAP8[$buff >> 0] = $49;
     $51 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $51 + 16;
     $53 = _luaS_newlstr($L, $buff, 1) | 0;
     HEAP32[$51 >> 2] = $53;
     HEAP32[$51 + 8 >> 2] = HEAPU8[$53 + 4 >> 0] | 64;
     break;
    }
   case 102:
    {
     $70 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $70 + 16;
     $77 = (HEAP32[$argp >> 2] | 0) + (8 - 1) & ~(8 - 1);
     $78 = +HEAPF64[$77 >> 3];
     HEAP32[$argp >> 2] = $77 + 8;
     HEAPF64[$70 >> 3] = $78;
     HEAP32[$70 + 8 >> 2] = 3;
     break;
    }
   case 37:
    {
     $96 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $96 + 16;
     $98 = _luaS_newlstr($L, 2128, 1) | 0;
     HEAP32[$96 >> 2] = $98;
     HEAP32[$96 + 8 >> 2] = HEAPU8[$98 + 4 >> 0] | 64;
     break;
    }
   case 112:
    {
     $85 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $86 = HEAP32[$85 >> 2] | 0;
     HEAP32[$argp >> 2] = $85 + 4;
     HEAP32[$vararg_buffer >> 2] = $86;
     $87 = _sprintf($buff2, 2120, $vararg_buffer) | 0;
     $88 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $88 + 16;
     $90 = _luaS_newlstr($L, $buff2, $87) | 0;
     HEAP32[$88 >> 2] = $90;
     HEAP32[$88 + 8 >> 2] = HEAPU8[$90 + 4 >> 0] | 64;
     break;
    }
   case 100:
    {
     $59 = HEAP32[$4 >> 2] | 0;
     HEAP32[$4 >> 2] = $59 + 16;
     $66 = (HEAP32[$argp >> 2] | 0) + (4 - 1) & ~(4 - 1);
     $67 = HEAP32[$66 >> 2] | 0;
     HEAP32[$argp >> 2] = $66 + 4;
     HEAPF64[$59 >> 3] = +($67 | 0);
     HEAP32[$59 + 8 >> 2] = 3;
     break;
    }
   default:
    {
     $$lcssa = $25;
     break L3;
    }
   }
   $104 = $n$07 + 2 | 0;
   $105 = $11 + 2 | 0;
   $11 = _strchr($105, 37) | 0;
   $109 = HEAP32[$4 >> 2] | 0;
   $112 = (HEAP32[$2 >> 2] | 0) - $109 | 0;
   if (!$11) {
    $$0$lcssa = $105;
    $$lcssa4 = $112;
    $129 = $109;
    $n$0$lcssa = $104;
    break L1;
   } else {
    $$08 = $105;
    $130 = $109;
    $9 = $112;
    $n$07 = $104;
   }
  }
  HEAP32[$vararg_buffer13 >> 2] = $$lcssa;
  _luaG_runerror($L, 2136, $vararg_buffer13);
 } while (0);
 if (($$lcssa4 | 0) < 32) {
  _luaD_growstack($L, 1);
  $116 = HEAP32[$4 >> 2] | 0;
 } else $116 = $129;
 $114 = _strlen($$0$lcssa | 0) | 0;
 HEAP32[$4 >> 2] = $116 + 16;
 $117 = _luaS_newlstr($L, $$0$lcssa, $114) | 0;
 HEAP32[$116 >> 2] = $117;
 HEAP32[$116 + 8 >> 2] = HEAPU8[$117 + 4 >> 0] | 64;
 if (($n$0$lcssa | 0) <= 0) {
  $125 = HEAP32[$4 >> 2] | 0;
  $126 = $125 + -16 | 0;
  $127 = HEAP32[$126 >> 2] | 0;
  $128 = $127 + 16 | 0;
  STACKTOP = sp;
  return $128 | 0;
 }
 _luaV_concat($L, $n$0$lcssa | 1);
 $125 = HEAP32[$4 >> 2] | 0;
 $126 = $125 + -16 | 0;
 $127 = HEAP32[$126 >> 2] | 0;
 $128 = $127 + 16 | 0;
 STACKTOP = sp;
 return $128 | 0;
}

function _str_find_aux($L, $find) {
 $L = $L | 0;
 $find = $find | 0;
 var $$$i = 0, $$0$i = 0, $$0$i512 = 0, $$01$ph = 0, $$014$i = 0, $$023$i = 0, $$1 = 0, $$lcssa16 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $42 = 0, $48 = 0, $52 = 0, $54 = 0, $57 = 0, $58 = 0, $62 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $75 = 0, $80 = 0, $88 = 0, $89 = 0, $i$02$i = 0, $i$02$i6 = 0, $init$0 = 0, $lp = 0, $ls = 0, $ms = 0, $p$0 = 0, $s1$0$lcssa = 0, $s1$034 = 0, $upto$0$i = 0, label = 0, sp = 0, $$023$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $ls = sp + 284 | 0;
 $lp = sp + 280 | 0;
 $ms = sp;
 $0 = _luaL_checklstring($L, 1, $ls) | 0;
 $1 = _luaL_checklstring($L, 2, $lp) | 0;
 $2 = _luaL_optinteger($L, 3, 1) | 0;
 $3 = HEAP32[$ls >> 2] | 0;
 if (($2 | 0) > -1) {
  $$0$i = $2;
  label = 4;
 } else if ($3 >>> 0 < (0 - $2 | 0) >>> 0) $init$0 = 1; else {
  $$0$i = $2 + 1 + $3 | 0;
  label = 4;
 }
 if ((label | 0) == 4) if (!$$0$i) $init$0 = 1; else if ($$0$i >>> 0 > ($3 + 1 | 0) >>> 0) {
  _lua_pushnil($L);
  $$1 = 1;
  STACKTOP = sp;
  return $$1 | 0;
 } else $init$0 = $$0$i;
 $12 = ($find | 0) != 0;
 L10 : do if ($12) {
  $14 = (_lua_toboolean($L, 4) | 0) == 0;
  $15 = HEAP32[$lp >> 2] | 0;
  if ($14) {
   $upto$0$i = 0;
   do {
    $16 = $1 + $upto$0$i | 0;
    if (_strpbrk($16, 9184) | 0) {
     label = 20;
     break L10;
    }
    $upto$0$i = $upto$0$i + 1 + (_strlen($16 | 0) | 0) | 0;
   } while ($upto$0$i >>> 0 <= $15 >>> 0);
  }
  $23 = $0 + ($init$0 + -1) | 0;
  $26 = (HEAP32[$ls >> 2] | 0) - $init$0 + 1 | 0;
  L17 : do if (!$15) if (!$23) break L10; else $$0$i512 = $23; else {
   if ($15 >>> 0 > $26 >>> 0) break L10;
   $29 = $15 + -1 | 0;
   if (($26 | 0) == ($29 | 0)) break L10;
   $33 = HEAP8[$1 >> 0] | 0;
   $34 = $1 + 1 | 0;
   $$014$i = $26 - $29 | 0;
   $$023$i = $23;
   while (1) {
    $35 = _memchr($$023$i, $33, $$014$i) | 0;
    if (!$35) break L10;
    $$023$i$looptemp = $$023$i;
    $$023$i = $35 + 1 | 0;
    if (!(_memcmp($$023$i, $34, $29) | 0)) {
     $$0$i512 = $35;
     break L17;
    }
    $40 = $$023$i;
    $42 = $$023$i$looptemp + $$014$i | 0;
    if (($42 | 0) == ($40 | 0)) break L10; else $$014$i = $42 - $40 | 0;
   }
  } while (0);
  $48 = $$0$i512 - $0 | 0;
  _lua_pushinteger($L, $48 + 1 | 0);
  _lua_pushinteger($L, $48 + (HEAP32[$lp >> 2] | 0) | 0);
  $$1 = 2;
  STACKTOP = sp;
  return $$1 | 0;
 } else label = 20; while (0);
 do if ((label | 0) == 20) {
  $52 = $0 + ($init$0 + -1) | 0;
  $54 = (HEAP8[$1 >> 0] | 0) == 94;
  if ($54) {
   $57 = (HEAP32[$lp >> 2] | 0) + -1 | 0;
   HEAP32[$lp >> 2] = $57;
   $64 = $57;
   $p$0 = $1 + 1 | 0;
  } else {
   $64 = HEAP32[$lp >> 2] | 0;
   $p$0 = $1;
  }
  $58 = $ms + 16 | 0;
  HEAP32[$58 >> 2] = $L;
  HEAP32[$ms >> 2] = 200;
  HEAP32[$ms + 4 >> 2] = $0;
  $62 = $ms + 8 | 0;
  HEAP32[$62 >> 2] = $0 + (HEAP32[$ls >> 2] | 0);
  HEAP32[$ms + 12 >> 2] = $p$0 + $64;
  $66 = $ms + 20 | 0;
  HEAP32[$66 >> 2] = 0;
  $67 = _match($ms, $52, $p$0) | 0;
  $68 = ($67 | 0) == 0;
  L34 : do if ($54) if ($68) label = 35; else {
   $$lcssa16 = $67;
   $s1$0$lcssa = $52;
  } else if ($68) {
   $s1$034 = $52;
   while (1) {
    if ($s1$034 >>> 0 >= (HEAP32[$62 >> 2] | 0) >>> 0) {
     label = 35;
     break L34;
    }
    $88 = $s1$034 + 1 | 0;
    HEAP32[$66 >> 2] = 0;
    $89 = _match($ms, $88, $p$0) | 0;
    if (!$89) $s1$034 = $88; else {
     $$lcssa16 = $89;
     $s1$0$lcssa = $88;
     break;
    }
   }
  } else {
   $$lcssa16 = $67;
   $s1$0$lcssa = $52;
  } while (0);
  if ((label | 0) == 35) break;
  if ($12) {
   $70 = $0;
   _lua_pushinteger($L, 1 - $70 + $s1$0$lcssa | 0);
   _lua_pushinteger($L, $$lcssa16 - $70 | 0);
   $75 = HEAP32[$66 >> 2] | 0;
   _luaL_checkstack(HEAP32[$58 >> 2] | 0, $75, 9200);
   if (($75 | 0) > 0) {
    $i$02$i6 = 0;
    do {
     _push_onecapture($ms, $i$02$i6, 0, 0);
     $i$02$i6 = $i$02$i6 + 1 | 0;
    } while (($i$02$i6 | 0) != ($75 | 0));
   }
   $$01$ph = $75 + 2 | 0;
  } else {
   $80 = HEAP32[$66 >> 2] | 0;
   $$$i = ($s1$0$lcssa | 0) != 0 & ($80 | 0) == 0 ? 1 : $80;
   _luaL_checkstack(HEAP32[$58 >> 2] | 0, $$$i, 9200);
   if (($$$i | 0) > 0) {
    $i$02$i = 0;
    do {
     _push_onecapture($ms, $i$02$i, $s1$0$lcssa, $$lcssa16);
     $i$02$i = $i$02$i + 1 | 0;
    } while (($i$02$i | 0) != ($$$i | 0));
    $$01$ph = $$$i;
   } else $$01$ph = $$$i;
  }
  $$1 = $$01$ph;
  STACKTOP = sp;
  return $$1 | 0;
 } while (0);
 _lua_pushnil($L);
 $$1 = 1;
 STACKTOP = sp;
 return $$1 | 0;
}

function _traverseephemeron($g, $h) {
 $g = $g | 0;
 $h = $h | 0;
 var $10 = 0, $11 = 0, $17 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $4 = 0, $43 = 0, $5 = 0, $50 = 0, $57 = 0, $6 = 0, $63 = 0, $7 = 0, $71 = 0, $75 = 0, $78 = 0, $8 = 0, $81 = 0, $hasclears$01 = 0, $hasclears$1 = 0, $hasclears$1$lcssa = 0, $i$012 = 0, $marked$0$lcssa = 0, $marked$011 = 0, $marked$1 = 0, $marked$1$lcssa = 0, $marked$2$lcssa19 = 0, $marked$2$lcssa2022 = 0, $marked$27 = 0, $marked$3 = 0, $marked$3$lcssa = 0, $n$05 = 0, $prop$03 = 0, $prop$1 = 0, $prop$1$lcssa = 0, label = 0;
 $4 = $h + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $5 + (1 << (HEAPU8[$h + 7 >> 0] | 0) << 5) | 0;
 $7 = $h + 28 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (($8 | 0) > 0) {
  $10 = $h + 12 | 0;
  $81 = $8;
  $i$012 = 0;
  $marked$011 = 0;
  while (1) {
   $11 = HEAP32[$10 >> 2] | 0;
   if (!(HEAP32[$11 + ($i$012 << 4) + 8 >> 2] & 64)) {
    $24 = $81;
    $marked$1 = $marked$011;
   } else {
    $17 = HEAP32[$11 + ($i$012 << 4) >> 2] | 0;
    if (!(HEAP8[$17 + 5 >> 0] & 3)) {
     $24 = $81;
     $marked$1 = $marked$011;
    } else {
     _reallymarkobject($g, $17);
     $24 = HEAP32[$7 >> 2] | 0;
     $marked$1 = 1;
    }
   }
   $i$012 = $i$012 + 1 | 0;
   if (($i$012 | 0) >= ($24 | 0)) {
    $marked$1$lcssa = $marked$1;
    break;
   } else {
    $81 = $24;
    $marked$011 = $marked$1;
   }
  }
  $25 = HEAP32[$4 >> 2] | 0;
  $marked$0$lcssa = $marked$1$lcssa;
 } else {
  $25 = $5;
  $marked$0$lcssa = 0;
 }
 if ($25 >>> 0 < $6 >>> 0) {
  $hasclears$01 = 0;
  $marked$27 = $marked$0$lcssa;
  $n$05 = $25;
  $prop$03 = 0;
  while (1) {
   $27 = $n$05 + 8 | 0;
   $28 = HEAP32[$27 >> 2] | 0;
   $30 = $n$05 + 24 | 0;
   $31 = HEAP32[$30 >> 2] | 0;
   $33 = ($31 & 64 | 0) == 0;
   L14 : do if (!$28) if ($33) {
    $hasclears$1 = $hasclears$01;
    $marked$3 = $marked$27;
    $prop$1 = $prop$03;
   } else if (!(HEAP8[(HEAP32[$n$05 + 16 >> 2] | 0) + 5 >> 0] & 3)) {
    $hasclears$1 = $hasclears$01;
    $marked$3 = $marked$27;
    $prop$1 = $prop$03;
   } else {
    HEAP32[$30 >> 2] = 11;
    $hasclears$1 = $hasclears$01;
    $marked$3 = $marked$27;
    $prop$1 = $prop$03;
   } else {
    do if ($33) {
     $50 = $28;
     label = 18;
    } else {
     $43 = HEAP32[$n$05 + 16 >> 2] | 0;
     if (($31 & 15 | 0) == 4) {
      if (!$43) {
       $50 = $28;
       label = 18;
       break;
      }
      if (!(HEAP8[$43 + 5 >> 0] & 3)) {
       $50 = $28;
       label = 18;
       break;
      }
      _reallymarkobject($g, $43);
      $50 = HEAP32[$27 >> 2] | 0;
      label = 18;
      break;
     }
     $57 = ($28 & 64 | 0) == 0;
     if (!(HEAP8[$43 + 5 >> 0] & 3)) if ($57) {
      $hasclears$1 = $hasclears$01;
      $marked$3 = $marked$27;
      $prop$1 = $prop$03;
      break L14;
     } else break;
     if ($57) {
      $hasclears$1 = 1;
      $marked$3 = $marked$27;
      $prop$1 = $prop$03;
      break L14;
     }
     $hasclears$1 = 1;
     $marked$3 = $marked$27;
     $prop$1 = (HEAP8[(HEAP32[$n$05 >> 2] | 0) + 5 >> 0] & 3) == 0 ? $prop$03 : 1;
     break L14;
    } while (0);
    if ((label | 0) == 18) {
     label = 0;
     if (!($50 & 64)) {
      $hasclears$1 = $hasclears$01;
      $marked$3 = $marked$27;
      $prop$1 = $prop$03;
      break;
     }
    }
    $63 = HEAP32[$n$05 >> 2] | 0;
    if (!(HEAP8[$63 + 5 >> 0] & 3)) {
     $hasclears$1 = $hasclears$01;
     $marked$3 = $marked$27;
     $prop$1 = $prop$03;
    } else {
     _reallymarkobject($g, $63);
     $hasclears$1 = $hasclears$01;
     $marked$3 = 1;
     $prop$1 = $prop$03;
    }
   } while (0);
   $n$05 = $n$05 + 32 | 0;
   if ($n$05 >>> 0 >= $6 >>> 0) {
    $hasclears$1$lcssa = $hasclears$1;
    $marked$3$lcssa = $marked$3;
    $prop$1$lcssa = $prop$1;
    break;
   } else {
    $hasclears$01 = $hasclears$1;
    $marked$27 = $marked$3;
    $prop$03 = $prop$1;
   }
  }
  if ($prop$1$lcssa) {
   $71 = $g + 96 | 0;
   HEAP32[$h + 24 >> 2] = HEAP32[$71 >> 2];
   HEAP32[$71 >> 2] = $h;
   $marked$2$lcssa19 = $marked$3$lcssa;
   return $marked$2$lcssa19 | 0;
  }
  if (!$hasclears$1$lcssa) $marked$2$lcssa2022 = $marked$3$lcssa; else {
   $75 = $g + 100 | 0;
   HEAP32[$h + 24 >> 2] = HEAP32[$75 >> 2];
   HEAP32[$75 >> 2] = $h;
   $marked$2$lcssa19 = $marked$3$lcssa;
   return $marked$2$lcssa19 | 0;
  }
 } else $marked$2$lcssa2022 = $marked$0$lcssa;
 $78 = $g + 88 | 0;
 HEAP32[$h + 24 >> 2] = HEAP32[$78 >> 2];
 HEAP32[$78 >> 2] = $h;
 $marked$2$lcssa19 = $marked$2$lcssa2022;
 return $marked$2$lcssa19 | 0;
}

function _luaL_gsub($L, $s, $p, $r) {
 $L = $L | 0;
 $s = $s | 0;
 $p = $p | 0;
 $r = $r | 0;
 var $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i4 = 0, $$0$lcssa = 0, $$08 = 0, $$pre10 = 0, $$pre11 = 0, $0 = 0, $1 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $45 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $78 = 0, $80 = 0, $81 = 0, $85 = 0, $b = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $b = sp + 24 | 0;
 $0 = _strlen($p | 0) | 0;
 $1 = $b + 12 | 0;
 HEAP32[$1 >> 2] = $L;
 $2 = $b + 16 | 0;
 HEAP32[$b >> 2] = $2;
 $3 = $b + 8 | 0;
 HEAP32[$3 >> 2] = 0;
 $4 = $b + 4 | 0;
 HEAP32[$4 >> 2] = 1024;
 $5 = _strstr($s, $p) | 0;
 if (!$5) {
  $$0$lcssa = $s;
  $60 = 0;
  $61 = 1024;
  $70 = $L;
 } else {
  $$08 = $s;
  $12 = 0;
  $13 = 1024;
  $22 = $L;
  $7 = $5;
  while (1) {
   $10 = $7 - $$08 | 0;
   if (($13 - $12 | 0) >>> 0 < $10 >>> 0) {
    $15 = $13 << 1;
    $$$i$i = ($15 - $12 | 0) >>> 0 < $10 >>> 0 ? $12 + $10 | 0 : $15;
    if ($$$i$i >>> 0 < $12 >>> 0 | ($$$i$i - $12 | 0) >>> 0 < $10 >>> 0) _luaL_error($22, 4128, $vararg_buffer) | 0;
    $23 = _lua_newuserdata($22, $$$i$i) | 0;
    _memcpy($23 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
    if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) _lua_remove($22, -2);
    HEAP32[$b >> 2] = $23;
    HEAP32[$4 >> 2] = $$$i$i;
    $29 = $23;
    $30 = HEAP32[$3 >> 2] | 0;
   } else {
    $29 = HEAP32[$b >> 2] | 0;
    $30 = $12;
   }
   _memcpy($29 + $30 | 0, $$08 | 0, $10 | 0) | 0;
   $32 = (HEAP32[$3 >> 2] | 0) + $10 | 0;
   HEAP32[$3 >> 2] = $32;
   $33 = _strlen($r | 0) | 0;
   $34 = HEAP32[$1 >> 2] | 0;
   $35 = HEAP32[$4 >> 2] | 0;
   if (($35 - $32 | 0) >>> 0 < $33 >>> 0) {
    $38 = $35 << 1;
    $$$i$i$i = ($38 - $32 | 0) >>> 0 < $33 >>> 0 ? $32 + $33 | 0 : $38;
    if ($$$i$i$i >>> 0 < $32 >>> 0 | ($$$i$i$i - $32 | 0) >>> 0 < $33 >>> 0) _luaL_error($34, 4128, $vararg_buffer1) | 0;
    $45 = _lua_newuserdata($34, $$$i$i$i) | 0;
    _memcpy($45 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
    if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) _lua_remove($34, -2);
    HEAP32[$b >> 2] = $45;
    HEAP32[$4 >> 2] = $$$i$i$i;
    $51 = $45;
    $52 = HEAP32[$3 >> 2] | 0;
   } else {
    $51 = HEAP32[$b >> 2] | 0;
    $52 = $32;
   }
   _memcpy($51 + $52 | 0, $r | 0, $33 | 0) | 0;
   $54 = (HEAP32[$3 >> 2] | 0) + $33 | 0;
   HEAP32[$3 >> 2] = $54;
   $55 = $7 + $0 | 0;
   $7 = _strstr($55, $p) | 0;
   $$pre10 = HEAP32[$1 >> 2] | 0;
   $$pre11 = HEAP32[$4 >> 2] | 0;
   if (!$7) {
    $$0$lcssa = $55;
    $60 = $54;
    $61 = $$pre11;
    $70 = $$pre10;
    break;
   } else {
    $$08 = $55;
    $12 = $54;
    $13 = $$pre11;
    $22 = $$pre10;
   }
  }
 }
 $58 = _strlen($$0$lcssa | 0) | 0;
 if (($61 - $60 | 0) >>> 0 < $58 >>> 0) {
  $63 = $61 << 1;
  $$$i$i$i4 = ($63 - $60 | 0) >>> 0 < $58 >>> 0 ? $60 + $58 | 0 : $63;
  if ($$$i$i$i4 >>> 0 < $60 >>> 0 | ($$$i$i$i4 - $60 | 0) >>> 0 < $58 >>> 0) _luaL_error($70, 4128, $vararg_buffer3) | 0;
  $71 = _lua_newuserdata($70, $$$i$i$i4) | 0;
  _memcpy($71 | 0, HEAP32[$b >> 2] | 0, HEAP32[$3 >> 2] | 0) | 0;
  if ((HEAP32[$b >> 2] | 0) != ($2 | 0)) _lua_remove($70, -2);
  HEAP32[$b >> 2] = $71;
  HEAP32[$4 >> 2] = $$$i$i$i4;
  $77 = $71;
  $78 = HEAP32[$3 >> 2] | 0;
 } else {
  $77 = HEAP32[$b >> 2] | 0;
  $78 = $60;
 }
 _memcpy($77 + $78 | 0, $$0$lcssa | 0, $58 | 0) | 0;
 $80 = (HEAP32[$3 >> 2] | 0) + $58 | 0;
 HEAP32[$3 >> 2] = $80;
 $81 = HEAP32[$1 >> 2] | 0;
 _lua_pushlstring($81, HEAP32[$b >> 2] | 0, $80) | 0;
 if ((HEAP32[$b >> 2] | 0) == ($2 | 0)) {
  $85 = _lua_tolstring($L, -1, 0) | 0;
  STACKTOP = sp;
  return $85 | 0;
 }
 _lua_remove($81, -2);
 $85 = _lua_tolstring($L, -1, 0) | 0;
 STACKTOP = sp;
 return $85 | 0;
}

function _luaH_next($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa32 = 0, $0 = 0, $1 = 0, $11 = 0, $15 = 0, $16 = 0, $17 = 0, $22 = 0, $37 = 0, $39 = 0, $4 = 0.0, $44 = 0, $45 = 0, $46 = 0, $53 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $69 = 0, $71 = 0, $72 = 0, $77 = 0, $82 = 0, $83 = 0, $89 = 0, $92 = 0, $97 = 0, $98 = 0, $i$0 = 0, $i$0$in = 0, $i$0$in$lcssa30 = 0, $i$0$in$ph = 0, $i$0$lcssa = 0, $i$0$lcssa31 = 0, $i$19 = 0, $i$19$lcssa = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $u$sroa$0$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp + 8 | 0;
 $u$sroa$0$i$i = sp;
 $0 = $key + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  $44 = HEAP32[$t + 28 >> 2] | 0;
  $i$0$in$ph = -1;
 } else {
  if (($1 | 0) == 3) {
   $4 = +HEAPF64[$key >> 3];
   HEAPF64[$u$sroa$0$i$i >> 3] = $4 + 6755399441055744.0;
   $6 = HEAP32[$u$sroa$0$i$i >> 2] | 0;
   if (+($6 | 0) == $4) {
    if (($6 | 0) > 0) {
     $11 = HEAP32[$t + 28 >> 2] | 0;
     if (($6 | 0) <= ($11 | 0)) {
      $44 = $11;
      $i$0$in$ph = $6 + -1 | 0;
      break;
     }
    }
   } else label = 5;
  } else label = 5;
  if ((label | 0) == 5) {}
  $n$0$i = _mainposition($t, $key) | 0;
  while (1) {
   $15 = $n$0$i + 16 | 0;
   $16 = $n$0$i + 24 | 0;
   $17 = HEAP32[$16 >> 2] | 0;
   if (($17 | 0) == (HEAP32[$0 >> 2] | 0)) {
    if (_luaV_equalobj_(0, $15, $key) | 0) {
     $n$0$i$lcssa = $n$0$i;
     label = 16;
     break;
    }
    $22 = HEAP32[$16 >> 2] | 0;
   } else $22 = $17;
   if (($22 | 0) == 11) if (HEAP32[$0 >> 2] & 64) if ((HEAP32[$15 >> 2] | 0) == (HEAP32[$key >> 2] | 0)) {
    $n$0$i$lcssa = $n$0$i;
    label = 16;
    break;
   }
   $n$0$i = HEAP32[$n$0$i + 28 >> 2] | 0;
   if (!$n$0$i) {
    label = 19;
    break;
   }
  }
  if ((label | 0) == 16) {
   $37 = HEAP32[$t + 28 >> 2] | 0;
   $44 = $37;
   $i$0$in$ph = ($n$0$i$lcssa - (HEAP32[$t + 16 >> 2] | 0) >> 5) + $37 | 0;
   break;
  } else if ((label | 0) == 19) _luaG_runerror($L, 3016, $vararg_buffer);
 } while (0);
 $39 = $t + 12 | 0;
 $i$0$in = $i$0$in$ph;
 while (1) {
  $i$0 = $i$0$in + 1 | 0;
  if (($i$0 | 0) >= ($44 | 0)) {
   $i$0$lcssa = $i$0;
   break;
  }
  $45 = HEAP32[$39 >> 2] | 0;
  $46 = $45 + ($i$0 << 4) + 8 | 0;
  if (!(HEAP32[$46 >> 2] | 0)) $i$0$in = $i$0; else {
   $$lcssa = $45;
   $$lcssa32 = $46;
   $i$0$in$lcssa30 = $i$0$in;
   $i$0$lcssa31 = $i$0;
   label = 22;
   break;
  }
 }
 if ((label | 0) == 22) {
  HEAPF64[$key >> 3] = +($i$0$in$lcssa30 + 2 | 0);
  HEAP32[$0 >> 2] = 3;
  $53 = $$lcssa + ($i$0$lcssa31 << 4) | 0;
  $58 = HEAP32[$53 + 4 >> 2] | 0;
  $59 = $key + 16 | 0;
  HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
  HEAP32[$59 + 4 >> 2] = $58;
  HEAP32[$key + 24 >> 2] = HEAP32[$$lcssa32 >> 2];
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $65 = $i$0$lcssa - $44 | 0;
 $69 = 1 << (HEAPU8[$t + 7 >> 0] | 0);
 if (($65 | 0) >= ($69 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $71 = $t + 16 | 0;
 $72 = HEAP32[$71 >> 2] | 0;
 $i$19 = $65;
 while (1) {
  if (HEAP32[$72 + ($i$19 << 5) + 8 >> 2] | 0) {
   $i$19$lcssa = $i$19;
   break;
  }
  $i$19 = $i$19 + 1 | 0;
  if (($i$19 | 0) >= ($69 | 0)) {
   $$0 = 0;
   label = 28;
   break;
  }
 }
 if ((label | 0) == 28) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $77 = $72 + ($i$19$lcssa << 5) + 16 | 0;
 $82 = HEAP32[$77 + 4 >> 2] | 0;
 $83 = $key;
 HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
 HEAP32[$83 + 4 >> 2] = $82;
 HEAP32[$0 >> 2] = HEAP32[$72 + ($i$19$lcssa << 5) + 24 >> 2];
 $89 = HEAP32[$71 >> 2] | 0;
 $92 = $89 + ($i$19$lcssa << 5) | 0;
 $97 = HEAP32[$92 + 4 >> 2] | 0;
 $98 = $key + 16 | 0;
 HEAP32[$98 >> 2] = HEAP32[$92 >> 2];
 HEAP32[$98 + 4 >> 2] = $97;
 HEAP32[$key + 24 >> 2] = HEAP32[$89 + ($i$19$lcssa << 5) + 8 >> 2];
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _forbody($ls, $base, $line, $nvars, $isnum) {
 $ls = $ls | 0;
 $base = $base | 0;
 $line = $line | 0;
 $nvars = $nvars | 0;
 $isnum = $isnum | 0;
 var $$01$i14 = 0, $$idx$val$idx$val$i = 0, $$idx$val$idx$val$i9 = 0, $$idx1$i = 0, $$idx1$val$idx$val$idx$val$i = 0, $$idx1$val$idx$val$idx$val$i13 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $26 = 0, $29 = 0, $37 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $56 = 0, $58 = 0, $66 = 0, $74 = 0, $8 = 0, $84 = 0, $87 = 0, $91 = 0, $bl = 0, $bl$i = 0, $endfor$0 = 0, $ls$idx$val = 0, $ls$idx$val$i$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $bl$i = sp + 12 | 0;
 $bl = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 46 | 0;
 $5 = (HEAPU8[$2 >> 0] | 0) + 3 | 0;
 HEAP8[$2 >> 0] = $5;
 $8 = HEAP32[$1 + 20 >> 2] | 0;
 $$idx1$i = $1 + 12 | 0;
 $$idx$val$idx$val$i = HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] | 0;
 $$idx1$val$idx$val$idx$val$i = HEAP32[HEAP32[(HEAP32[$$idx1$i >> 2] | 0) + 64 >> 2] >> 2] | 0;
 $10 = (HEAP32[$1 + 40 >> 2] | 0) + ($5 & 255) | 0;
 HEAP32[$$idx$val$idx$val$i + ((HEAP16[$$idx1$val$idx$val$idx$val$i + ($10 + -3 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $8;
 HEAP32[$$idx$val$idx$val$i + ((HEAP16[$$idx1$val$idx$val$idx$val$i + ($10 + -2 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $8;
 HEAP32[$$idx$val$idx$val$i + ((HEAP16[$$idx1$val$idx$val$idx$val$i + ($10 + -1 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $8;
 $26 = $ls + 16 | 0;
 if ((HEAP32[$26 >> 2] | 0) != 259) _error_expected($ls, 259);
 _luaX_next($ls);
 $29 = ($isnum | 0) != 0;
 if ($29) $87 = _luaK_codeABx($1, 33, $base, 131070) | 0; else $87 = _luaK_jump($1) | 0;
 HEAP8[$bl + 10 >> 0] = 0;
 HEAP8[$bl + 8 >> 0] = HEAP8[$2 >> 0] | 0;
 $37 = HEAP32[(HEAP32[$$idx1$i >> 2] | 0) + 64 >> 2] | 0;
 HEAP16[$bl + 4 >> 1] = HEAP32[$37 + 28 >> 2];
 HEAP16[$bl + 6 >> 1] = HEAP32[$37 + 16 >> 2];
 HEAP8[$bl + 9 >> 0] = 0;
 $47 = $1 + 16 | 0;
 HEAP32[$bl >> 2] = HEAP32[$47 >> 2];
 HEAP32[$47 >> 2] = $bl;
 $ls$idx$val = HEAP32[$0 >> 2] | 0;
 $49 = $ls$idx$val + 46 | 0;
 $52 = (HEAPU8[$49 >> 0] | 0) + $nvars | 0;
 HEAP8[$49 >> 0] = $52;
 if ($nvars) {
  $56 = HEAP32[$ls$idx$val + 20 >> 2] | 0;
  $$idx$val$idx$val$i9 = HEAP32[(HEAP32[$ls$idx$val >> 2] | 0) + 24 >> 2] | 0;
  $$idx1$val$idx$val$idx$val$i13 = HEAP32[HEAP32[(HEAP32[$ls$idx$val + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0;
  $58 = (HEAP32[$ls$idx$val + 40 >> 2] | 0) + ($52 & 255) | 0;
  $$01$i14 = $nvars;
  do {
   HEAP32[$$idx$val$idx$val$i9 + ((HEAP16[$$idx1$val$idx$val$idx$val$i13 + ($58 - $$01$i14 << 1) >> 1] | 0) * 12 | 0) + 4 >> 2] = $56;
   $$01$i14 = $$01$i14 + -1 | 0;
  } while (($$01$i14 | 0) != 0);
 }
 _luaK_reserveregs($1, $nvars);
 $66 = HEAP32[$0 >> 2] | 0;
 HEAP8[$bl$i + 10 >> 0] = 0;
 HEAP8[$bl$i + 8 >> 0] = HEAP8[$66 + 46 >> 0] | 0;
 $74 = HEAP32[(HEAP32[$66 + 12 >> 2] | 0) + 64 >> 2] | 0;
 HEAP16[$bl$i + 4 >> 1] = HEAP32[$74 + 28 >> 2];
 HEAP16[$bl$i + 6 >> 1] = HEAP32[$74 + 16 >> 2];
 HEAP8[$bl$i + 9 >> 0] = 0;
 $84 = $66 + 16 | 0;
 HEAP32[$bl$i >> 2] = HEAP32[$84 >> 2];
 HEAP32[$84 >> 2] = $bl$i;
 L13 : do {
  $ls$idx$val$i$i = HEAP32[$26 >> 2] | 0;
  switch ($ls$idx$val$i$i | 0) {
  case 277:
  case 286:
  case 262:
  case 261:
  case 260:
   {
    break L13;
    break;
   }
  default:
   {}
  }
  _statement($ls);
 } while (($ls$idx$val$i$i | 0) != 274);
 _leaveblock($66);
 _leaveblock($1);
 _luaK_patchtohere($1, $87);
 if ($29) {
  $endfor$0 = _luaK_codeABx($1, 32, $base, 131070) | 0;
  $91 = $87 + 1 | 0;
  _luaK_patchlist($1, $endfor$0, $91);
  _luaK_fixline($1, $line);
  STACKTOP = sp;
  return;
 } else {
  _luaK_codeABC($1, 34, $base, 0, $nvars) | 0;
  _luaK_fixline($1, $line);
  $endfor$0 = _luaK_codeABx($1, 35, $base + 2 | 0, 131070) | 0;
  $91 = $87 + 1 | 0;
  _luaK_patchlist($1, $endfor$0, $91);
  _luaK_fixline($1, $line);
  STACKTOP = sp;
  return;
 }
}

function _luaV_settable($L, $t, $key, $val) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $val = $val | 0;
 var $$013 = 0, $$013$lcssa = 0, $$013$lcssa61 = 0, $$lcssa63 = 0, $$lcssa65 = 0, $0 = 0, $104 = 0, $106 = 0, $11 = 0, $111 = 0, $112 = 0, $20 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $34 = 0, $38 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $75 = 0, $77 = 0, $82 = 0, $83 = 0, $89 = 0, $91 = 0, $96 = 0, $97 = 0, $loop$012 = 0, $oldval$0 = 0, $tm$0 = 0, $tm$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 12 | 0;
 $$013 = $t;
 $3 = HEAP32[$t + 8 >> 2] | 0;
 $loop$012 = 0;
 while (1) {
  if (($3 | 0) == 69) {
   $5 = HEAP32[$$013 >> 2] | 0;
   $6 = _luaH_get($5, $key) | 0;
   if (HEAP32[$6 + 8 >> 2] | 0) {
    $38 = $5;
    $oldval$0 = $6;
    break;
   }
   $11 = HEAP32[$5 + 8 >> 2] | 0;
   if (!$11) {
    $$lcssa63 = $5;
    $$lcssa65 = $6;
    label = 9;
    break;
   }
   if (HEAP8[$11 + 6 >> 0] & 2) {
    $$lcssa63 = $5;
    $$lcssa65 = $6;
    label = 9;
    break;
   }
   $20 = _luaT_gettm($11, 1, HEAP32[(HEAP32[$0 >> 2] | 0) + 188 >> 2] | 0) | 0;
   if (!$20) {
    $$lcssa63 = $5;
    $$lcssa65 = $6;
    label = 9;
    break;
   }
   $56 = HEAP32[$20 + 8 >> 2] | 0;
   $tm$0 = $20;
  } else {
   $51 = _luaT_gettmbyobj($L, $$013, 1) | 0;
   $53 = HEAP32[$51 + 8 >> 2] | 0;
   if (!$53) {
    $$013$lcssa = $$013;
    label = 16;
    break;
   } else {
    $56 = $53;
    $tm$0 = $51;
   }
  }
  $loop$012 = $loop$012 + 1 | 0;
  if (($56 & 15 | 0) == 6) {
   $$013$lcssa61 = $$013;
   $tm$0$lcssa = $tm$0;
   label = 18;
   break;
  }
  if (($loop$012 | 0) >= 100) {
   label = 19;
   break;
  } else {
   $$013 = $tm$0;
   $3 = $56;
  }
 }
 if ((label | 0) == 9) if (($$lcssa65 | 0) == 1832) {
  $38 = $$lcssa63;
  $oldval$0 = _luaH_newkey($L, $$lcssa63, $key) | 0;
 } else {
  $38 = $$lcssa63;
  $oldval$0 = $$lcssa65;
 } else if ((label | 0) == 16) _luaG_typeerror($L, $$013$lcssa, 3592); else if ((label | 0) == 18) {
  $60 = $L + 8 | 0;
  $61 = HEAP32[$60 >> 2] | 0;
  HEAP32[$60 >> 2] = $61 + 16;
  $63 = $tm$0$lcssa;
  $68 = HEAP32[$63 + 4 >> 2] | 0;
  $69 = $61;
  HEAP32[$69 >> 2] = HEAP32[$63 >> 2];
  HEAP32[$69 + 4 >> 2] = $68;
  HEAP32[$61 + 8 >> 2] = HEAP32[$tm$0$lcssa + 8 >> 2];
  $75 = HEAP32[$60 >> 2] | 0;
  HEAP32[$60 >> 2] = $75 + 16;
  $77 = $$013$lcssa61;
  $82 = HEAP32[$77 + 4 >> 2] | 0;
  $83 = $75;
  HEAP32[$83 >> 2] = HEAP32[$77 >> 2];
  HEAP32[$83 + 4 >> 2] = $82;
  HEAP32[$75 + 8 >> 2] = HEAP32[$$013$lcssa61 + 8 >> 2];
  $89 = HEAP32[$60 >> 2] | 0;
  HEAP32[$60 >> 2] = $89 + 16;
  $91 = $key;
  $96 = HEAP32[$91 + 4 >> 2] | 0;
  $97 = $89;
  HEAP32[$97 >> 2] = HEAP32[$91 >> 2];
  HEAP32[$97 + 4 >> 2] = $96;
  HEAP32[$89 + 8 >> 2] = HEAP32[$key + 8 >> 2];
  $104 = HEAP32[$60 >> 2] | 0;
  HEAP32[$60 >> 2] = $104 + 16;
  $106 = $val;
  $111 = HEAP32[$106 + 4 >> 2] | 0;
  $112 = $104;
  HEAP32[$112 >> 2] = HEAP32[$106 >> 2];
  HEAP32[$112 + 4 >> 2] = $111;
  HEAP32[$104 + 8 >> 2] = HEAP32[$val + 8 >> 2];
  _luaD_call($L, (HEAP32[$60 >> 2] | 0) + -64 | 0, 0, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 19) _luaG_runerror($L, 3624, $vararg_buffer);
 $24 = $val;
 $29 = HEAP32[$24 + 4 >> 2] | 0;
 $30 = $oldval$0;
 HEAP32[$30 >> 2] = HEAP32[$24 >> 2];
 HEAP32[$30 + 4 >> 2] = $29;
 $34 = $val + 8 | 0;
 HEAP32[$oldval$0 + 8 >> 2] = HEAP32[$34 >> 2];
 HEAP8[$38 + 6 >> 0] = 0;
 if (!(HEAP32[$34 >> 2] & 64)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$val >> 2] | 0) + 5 >> 0] & 3)) {
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[$38 + 5 >> 0] & 4)) {
  STACKTOP = sp;
  return;
 }
 _luaC_barrierback_($L, $38);
 STACKTOP = sp;
 return;
}

function _luaL_traceback($L, $L1, $msg, $level) {
 $L = $L | 0;
 $L1 = $L1 | 0;
 $msg = $msg | 0;
 $level = $level | 0;
 var $$0$be = 0, $$in = 0, $$le$1$i = 0, $0 = 0, $13 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $34 = 0, $38 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ar = 0, $ar$i = 0, $le$0$i = 0, $le$0$i$lcssa = 0, $le$1$lcssa$i = 0, $le$11$i = 0, $li$0$i = 0, $li$0$i$lcssa = 0, $li$0$i$phi = 0, $li$12$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer13 = sp + 40 | 0;
 $vararg_buffer10 = sp + 32 | 0;
 $vararg_buffer7 = sp + 24 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 148 | 0;
 $ar = sp + 48 | 0;
 $0 = _lua_gettop($L) | 0;
 $le$0$i = 1;
 $li$0$i = 1;
 while (1) if (!(_lua_getstack($L1, $le$0$i, $ar$i) | 0)) {
  $le$0$i$lcssa = $le$0$i;
  $li$0$i$lcssa = $li$0$i;
  break;
 } else {
  $li$0$i$phi = $le$0$i;
  $le$0$i = $le$0$i << 1;
  $li$0$i = $li$0$i$phi;
 }
 if (($li$0$i$lcssa | 0) < ($le$0$i$lcssa | 0)) {
  $le$11$i = $le$0$i$lcssa;
  $li$12$i = $li$0$i$lcssa;
  while (1) {
   $6 = ($le$11$i + $li$12$i | 0) / 2 | 0;
   $8 = (_lua_getstack($L1, $6, $ar$i) | 0) == 0;
   $$le$1$i = $8 ? $6 : $le$11$i;
   $li$12$i = $8 ? $li$12$i : $6 + 1 | 0;
   if (($li$12$i | 0) >= ($$le$1$i | 0)) {
    $le$1$lcssa$i = $$le$1$i;
    break;
   } else $le$11$i = $$le$1$i;
  }
 } else $le$1$lcssa$i = $le$0$i$lcssa;
 $13 = ($le$1$lcssa$i + -1 | 0) > 22 ? 12 : 0;
 if ($msg) {
  HEAP32[$vararg_buffer >> 2] = $msg;
  _lua_pushfstring($L, 6984, $vararg_buffer) | 0;
 }
 _lua_pushlstring($L, 3792, 16) | 0;
 if (!(_lua_getstack($L1, $level, $ar) | 0)) {
  $45 = _lua_gettop($L) | 0;
  $46 = $45 - $0 | 0;
  _lua_concat($L, $46);
  STACKTOP = sp;
  return;
 }
 $17 = $le$1$lcssa$i + -11 | 0;
 $18 = $ar + 36 | 0;
 $19 = $ar + 20 | 0;
 $20 = $ar + 8 | 0;
 $21 = $ar + 12 | 0;
 $22 = $ar + 24 | 0;
 $23 = $ar + 35 | 0;
 $24 = $ar + 4 | 0;
 $$in = $level;
 while (1) {
  $25 = $$in + 1 | 0;
  if (($25 | 0) == ($13 | 0)) {
   _lua_pushlstring($L, 3816, 5) | 0;
   $$0$be = $17;
  } else {
   _lua_getinfo($L1, 3824, $ar) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $18;
   _lua_pushfstring($L, 3832, $vararg_buffer1) | 0;
   $27 = HEAP32[$19 >> 2] | 0;
   if (($27 | 0) > 0) {
    HEAP32[$vararg_buffer4 >> 2] = $27;
    _lua_pushfstring($L, 3840, $vararg_buffer4) | 0;
   }
   _lua_pushlstring($L, 3848, 4) | 0;
   do if (!(HEAP8[HEAP32[$20 >> 2] >> 0] | 0)) {
    $34 = HEAP8[HEAP32[$21 >> 2] >> 0] | 0;
    if ($34 << 24 >> 24 == 109) {
     _lua_pushlstring($L, 3872, 10) | 0;
     break;
    } else if ($34 << 24 >> 24 == 67) if (!(_pushglobalfuncname($L, $ar) | 0)) {
     _lua_pushlstring($L, 11136, 1) | 0;
     break;
    } else {
     HEAP32[$vararg_buffer10 >> 2] = _lua_tolstring($L, -1, 0) | 0;
     _lua_pushfstring($L, 3856, $vararg_buffer10) | 0;
     _lua_remove($L, -2);
     break;
    } else {
     $38 = HEAP32[$22 >> 2] | 0;
     HEAP32[$vararg_buffer13 >> 2] = $18;
     HEAP32[$vararg_buffer13 + 4 >> 2] = $38;
     _lua_pushfstring($L, 3888, $vararg_buffer13) | 0;
     break;
    }
   } else {
    HEAP32[$vararg_buffer7 >> 2] = HEAP32[$24 >> 2];
    _lua_pushfstring($L, 3856, $vararg_buffer7) | 0;
   } while (0);
   if (HEAP8[$23 >> 0] | 0) _lua_pushlstring($L, 3912, 20) | 0;
   _lua_concat($L, (_lua_gettop($L) | 0) - $0 | 0);
   $$0$be = $25;
  }
  if (!(_lua_getstack($L1, $$0$be, $ar) | 0)) break; else $$in = $$0$be;
 }
 $45 = _lua_gettop($L) | 0;
 $46 = $45 - $0 | 0;
 _lua_concat($L, $46);
 STACKTOP = sp;
 return;
}

function _luaV_gettable($L, $t, $key, $val) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $val = $val | 0;
 var $$09 = 0, $$09$lcssa = 0, $$09$lcssa42 = 0, $$lcssa = 0, $$lcssa44 = 0, $0 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $109 = 0, $11 = 0, $110 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $34 = 0, $36 = 0, $39 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $56 = 0, $57 = 0, $6 = 0, $63 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $77 = 0, $79 = 0, $84 = 0, $85 = 0, $loop$08 = 0, $tm$0 = 0, $tm$0$lcssa = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 12 | 0;
 $$09 = $t;
 $3 = HEAP32[$t + 8 >> 2] | 0;
 $loop$08 = 0;
 while (1) {
  if (($3 | 0) == 69) {
   $5 = HEAP32[$$09 >> 2] | 0;
   $6 = _luaH_get($5, $key) | 0;
   $7 = $6 + 8 | 0;
   if (HEAP32[$7 >> 2] | 0) {
    $$lcssa = $6;
    $$lcssa44 = $7;
    label = 9;
    break;
   }
   $11 = HEAP32[$5 + 8 >> 2] | 0;
   if (!$11) {
    $$lcssa = $6;
    $$lcssa44 = $7;
    label = 9;
    break;
   }
   if (HEAP8[$11 + 6 >> 0] & 1) {
    $$lcssa = $6;
    $$lcssa44 = $7;
    label = 9;
    break;
   }
   $20 = _luaT_gettm($11, 0, HEAP32[(HEAP32[$0 >> 2] | 0) + 184 >> 2] | 0) | 0;
   if (!$20) {
    $$lcssa = $6;
    $$lcssa44 = $7;
    label = 9;
    break;
   }
   $39 = HEAP32[$20 + 8 >> 2] | 0;
   $tm$0 = $20;
  } else {
   $34 = _luaT_gettmbyobj($L, $$09, 0) | 0;
   $36 = HEAP32[$34 + 8 >> 2] | 0;
   if (!$36) {
    $$09$lcssa = $$09;
    label = 11;
    break;
   } else {
    $39 = $36;
    $tm$0 = $34;
   }
  }
  $loop$08 = $loop$08 + 1 | 0;
  if (($39 & 15 | 0) == 6) {
   $$09$lcssa42 = $$09;
   $tm$0$lcssa = $tm$0;
   label = 13;
   break;
  }
  if (($loop$08 | 0) >= 100) {
   label = 14;
   break;
  } else {
   $$09 = $tm$0;
   $3 = $39;
  }
 }
 if ((label | 0) == 9) {
  $22 = $$lcssa;
  $27 = HEAP32[$22 + 4 >> 2] | 0;
  $28 = $val;
  HEAP32[$28 >> 2] = HEAP32[$22 >> 2];
  HEAP32[$28 + 4 >> 2] = $27;
  HEAP32[$val + 8 >> 2] = HEAP32[$$lcssa44 >> 2];
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 11) _luaG_typeerror($L, $$09$lcssa, 3592); else if ((label | 0) == 13) {
  $43 = $L + 28 | 0;
  $47 = $val - (HEAP32[$43 >> 2] | 0) | 0;
  $48 = $L + 8 | 0;
  $49 = HEAP32[$48 >> 2] | 0;
  HEAP32[$48 >> 2] = $49 + 16;
  $51 = $tm$0$lcssa;
  $56 = HEAP32[$51 + 4 >> 2] | 0;
  $57 = $49;
  HEAP32[$57 >> 2] = HEAP32[$51 >> 2];
  HEAP32[$57 + 4 >> 2] = $56;
  HEAP32[$49 + 8 >> 2] = HEAP32[$tm$0$lcssa + 8 >> 2];
  $63 = HEAP32[$48 >> 2] | 0;
  HEAP32[$48 >> 2] = $63 + 16;
  $65 = $$09$lcssa42;
  $70 = HEAP32[$65 + 4 >> 2] | 0;
  $71 = $63;
  HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
  HEAP32[$71 + 4 >> 2] = $70;
  HEAP32[$63 + 8 >> 2] = HEAP32[$$09$lcssa42 + 8 >> 2];
  $77 = HEAP32[$48 >> 2] | 0;
  HEAP32[$48 >> 2] = $77 + 16;
  $79 = $key;
  $84 = HEAP32[$79 + 4 >> 2] | 0;
  $85 = $77;
  HEAP32[$85 >> 2] = HEAP32[$79 >> 2];
  HEAP32[$85 + 4 >> 2] = $84;
  HEAP32[$77 + 8 >> 2] = HEAP32[$key + 8 >> 2];
  _luaD_call($L, (HEAP32[$48 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
  $100 = HEAP32[$43 >> 2] | 0;
  $102 = HEAP32[$48 >> 2] | 0;
  $103 = $102 + -16 | 0;
  HEAP32[$48 >> 2] = $103;
  $104 = $103;
  $109 = HEAP32[$104 + 4 >> 2] | 0;
  $110 = $100 + $47 | 0;
  HEAP32[$110 >> 2] = HEAP32[$104 >> 2];
  HEAP32[$110 + 4 >> 2] = $109;
  HEAP32[$100 + ($47 + 8) >> 2] = HEAP32[$102 + -8 >> 2];
  STACKTOP = sp;
  return;
 } else if ((label | 0) == 14) _luaG_runerror($L, 3600, $vararg_buffer);
}

function _luaK_code($fs, $i) {
 $fs = $fs | 0;
 $i = $i | 0;
 var $$0$i$i1$i = 0, $$02$i$i = 0, $$pre$phi7Z2D = 0, $$pre4 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $28 = 0, $3 = 0, $38 = 0, $4 = 0, $48 = 0, $50 = 0, $56 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $9 = 0, $fs$idx$val$idx$val$i$pre$i = 0, $storemerge$i = 0, label = 0, $$02$i$i$looptemp = 0;
 $0 = HEAP32[$fs >> 2] | 0;
 $1 = $fs + 28 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $fs + 20 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($2 | 0) == -1) $50 = $4; else {
  $fs$idx$val$idx$val$i$pre$i = HEAP32[$0 + 12 >> 2] | 0;
  $$02$i$i = $2;
  while (1) {
   $6 = $fs$idx$val$idx$val$i$pre$i + ($$02$i$i << 2) | 0;
   $7 = HEAP32[$6 >> 2] | 0;
   $9 = ($7 >>> 14) + -131071 | 0;
   $$02$i$i$looptemp = $$02$i$i;
   $$02$i$i = ($9 | 0) == -1 ? -1 : $$02$i$i + 1 + $9 | 0;
   if (($$02$i$i$looptemp | 0) > 0) {
    $14 = $fs$idx$val$idx$val$i$pre$i + ($$02$i$i$looptemp + -1 << 2) | 0;
    $15 = HEAP32[$14 >> 2] | 0;
    if ((HEAP8[2216 + ($15 & 63) >> 0] | 0) < 0) {
     $$0$i$i1$i = $14;
     $21 = $15;
    } else label = 5;
   } else label = 5;
   if ((label | 0) == 5) {
    label = 0;
    $$0$i$i1$i = $6;
    $21 = $7;
   }
   if (($21 & 63 | 0) == 28) {
    HEAP32[$$0$i$i1$i >> 2] = $21 & 8372224 | $21 >>> 23 << 6 | 27;
    $28 = $4 + ~$$02$i$i$looptemp | 0;
    if (((($28 | 0) > -1 ? $28 : 0 - $28 | 0) | 0) > 131071) {
     label = 8;
     break;
    }
    $storemerge$i = HEAP32[$6 >> 2] & 16383 | ($28 << 14) + 2147467264;
   } else {
    $38 = $4 + ~$$02$i$i$looptemp | 0;
    if (((($38 | 0) > -1 ? $38 : 0 - $38 | 0) | 0) > 131071) {
     label = 11;
     break;
    }
    $storemerge$i = ($38 << 14) + 2147467264 | $7 & 16383;
   }
   HEAP32[$6 >> 2] = $storemerge$i;
   if (($$02$i$i | 0) == -1) {
    label = 14;
    break;
   }
  }
  if ((label | 0) == 8) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else if ((label | 0) == 11) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else if ((label | 0) == 14) {
   $50 = HEAP32[$3 >> 2] | 0;
   break;
  }
 } while (0);
 HEAP32[$1 >> 2] = -1;
 $48 = $0 + 48 | 0;
 if (($50 | 0) < (HEAP32[$48 >> 2] | 0)) {
  $60 = HEAP32[$0 + 12 >> 2] | 0;
  $61 = $50;
 } else {
  $56 = $0 + 12 | 0;
  $58 = _luaM_growaux_(HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0, HEAP32[$56 >> 2] | 0, $48, 4, 2147483645, 128) | 0;
  HEAP32[$56 >> 2] = $58;
  $60 = $58;
  $61 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$60 + ($61 << 2) >> 2] = $i;
 $62 = HEAP32[$3 >> 2] | 0;
 $63 = $0 + 52 | 0;
 $$pre4 = $fs + 12 | 0;
 if (($62 | 0) < (HEAP32[$63 >> 2] | 0)) {
  $$pre$phi7Z2D = $0 + 20 | 0;
  $77 = $62;
  $72 = HEAP32[$$pre4 >> 2] | 0;
  $73 = $72 + 8 | 0;
  $74 = HEAP32[$73 >> 2] | 0;
  $75 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
  $76 = $75 + ($77 << 2) | 0;
  HEAP32[$76 >> 2] = $74;
  $78 = HEAP32[$3 >> 2] | 0;
  $79 = $78 + 1 | 0;
  HEAP32[$3 >> 2] = $79;
  return $78 | 0;
 } else {
  $69 = $0 + 20 | 0;
  HEAP32[$69 >> 2] = _luaM_growaux_(HEAP32[(HEAP32[$$pre4 >> 2] | 0) + 52 >> 2] | 0, HEAP32[$69 >> 2] | 0, $63, 4, 2147483645, 128) | 0;
  $$pre$phi7Z2D = $69;
  $77 = HEAP32[$3 >> 2] | 0;
  $72 = HEAP32[$$pre4 >> 2] | 0;
  $73 = $72 + 8 | 0;
  $74 = HEAP32[$73 >> 2] | 0;
  $75 = HEAP32[$$pre$phi7Z2D >> 2] | 0;
  $76 = $75 + ($77 << 2) | 0;
  HEAP32[$76 >> 2] = $74;
  $78 = HEAP32[$3 >> 2] | 0;
  $79 = $78 + 1 | 0;
  HEAP32[$3 >> 2] = $79;
  return $78 | 0;
 }
 return 0;
}

function _expm1($x) {
 $x = +$x;
 var $$0 = 0.0, $$02 = 0.0, $$pn = 0.0, $0 = 0, $1 = 0, $2 = 0, $24 = 0, $25 = 0.0, $29 = 0.0, $3 = 0, $35 = 0.0, $36 = 0.0, $46 = 0.0, $48 = 0.0, $53 = 0.0, $6 = 0, $61 = 0.0, $73 = 0, $74 = 0, $75 = 0.0, $78 = 0.0, $85 = 0, $86 = 0, $__x = 0, $c$0 = 0.0, $hi$0 = 0.0, $k$0 = 0, $k$1 = 0, $lo$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = $1 & 2147483647;
 $3 = _bitshift64Lshr($0 | 0, $1 | 0, 63) | 0;
 do if ($2 >>> 0 > 1078159481) {
  $6 = $1 & 2147483647;
  if ($6 >>> 0 > 2146435072 | ($6 | 0) == 2146435072 & $0 >>> 0 > 0) {
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  }
  if ($3) {
   $$0 = -1.0;
   STACKTOP = sp;
   return +$$0;
  }
  if ($x > 709.782712893384) {
   $$0 = $x * 8988465674311579538646525.0e283;
   STACKTOP = sp;
   return +$$0;
  } else label = 11;
 } else {
  if ($2 >>> 0 > 1071001154) {
   if ($2 >>> 0 >= 1072734898) {
    label = 11;
    break;
   }
   if (!$3) {
    $hi$0 = $x + -.6931471803691238;
    $k$0 = 1;
    $lo$0 = 1.9082149292705877e-10;
    label = 12;
    break;
   } else {
    $hi$0 = $x + .6931471803691238;
    $k$0 = -1;
    $lo$0 = -1.9082149292705877e-10;
    label = 12;
    break;
   }
  }
  if ($2 >>> 0 < 1016070144) {
   if ($2 >>> 0 >= 1048576) {
    $$0 = $x;
    STACKTOP = sp;
    return +$$0;
   }
   HEAPF32[$__x >> 2] = $x;
   $$0 = $x;
   STACKTOP = sp;
   return +$$0;
  } else {
   $$02 = $x;
   $c$0 = 0.0;
   $k$1 = 0;
  }
 } while (0);
 if ((label | 0) == 11) {
  $24 = ~~($x * 1.4426950408889634 + (($3 | 0) != 0 ? -.5 : .5));
  $25 = +($24 | 0);
  $hi$0 = $x - $25 * .6931471803691238;
  $k$0 = $24;
  $lo$0 = $25 * 1.9082149292705877e-10;
  label = 12;
 }
 if ((label | 0) == 12) {
  $29 = $hi$0 - $lo$0;
  $$02 = $29;
  $c$0 = $hi$0 - $29 - $lo$0;
  $k$1 = $k$0;
 }
 $35 = $$02 * .5;
 $36 = $$02 * $35;
 $46 = $36 * ($36 * ($36 * ($36 * (4.008217827329362e-06 - $36 * 2.0109921818362437e-07) + -7.93650757867488e-05) + 1.5873015872548146e-03) + -.03333333333333313) + 1.0;
 $48 = 3.0 - $35 * $46;
 $53 = $36 * (($46 - $48) / (6.0 - $$02 * $48));
 if (!$k$1) {
  $$0 = $$02 - ($$02 * $53 - $36);
  STACKTOP = sp;
  return +$$0;
 }
 $61 = $$02 * ($53 - $c$0) - $c$0 - $36;
 if (($k$1 | 0) == -1) {
  $$0 = ($$02 - $61) * .5 + -.5;
  STACKTOP = sp;
  return +$$0;
 } else if (($k$1 | 0) == 1) if ($$02 < -.25) {
  $$0 = ($61 - ($$02 + .5)) * -2.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = ($$02 - $61) * 2.0 + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $73 = _bitshift64Shl($k$1 + 1023 | 0, 0, 52) | 0;
  $74 = tempRet0;
  HEAP32[tempDoublePtr >> 2] = $73;
  HEAP32[tempDoublePtr + 4 >> 2] = $74;
  $75 = +HEAPF64[tempDoublePtr >> 3];
  if ($k$1 >>> 0 > 56) {
   $78 = $$02 - $61 + 1.0;
   $$0 = (($k$1 | 0) == 1024 ? $78 * 2.0 * 8988465674311579538646525.0e283 : $75 * $78) + -1.0;
   STACKTOP = sp;
   return +$$0;
  }
  $85 = _bitshift64Shl(1023 - $k$1 | 0, 0, 52) | 0;
  $86 = tempRet0;
  if (($k$1 | 0) < 20) {
   HEAP32[tempDoublePtr >> 2] = $85;
   HEAP32[tempDoublePtr + 4 >> 2] = $86;
   $$pn = 1.0 - +HEAPF64[tempDoublePtr >> 3] + ($$02 - $61);
  } else {
   HEAP32[tempDoublePtr >> 2] = $85;
   HEAP32[tempDoublePtr + 4 >> 2] = $86;
   $$pn = $$02 - (+HEAPF64[tempDoublePtr >> 3] + $61) + 1.0;
  }
  $$0 = $75 * $$pn;
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function _test_then_block($ls, $escapelist) {
 $ls = $ls | 0;
 $escapelist = $escapelist | 0;
 var $0 = 0, $1 = 0, $14 = 0, $2 = 0, $24 = 0, $27 = 0, $29 = 0, $31 = 0, $35 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $50 = 0, $52 = 0, $60 = 0, $71 = 0, $81 = 0, $bl = 0, $jf$0 = 0, $label$0$i = 0, $ls$idx$val$i = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $bl = sp + 24 | 0;
 $v = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 _luaX_next($ls);
 _subexpr($ls, $v, 0) | 0;
 $2 = $ls + 16 | 0;
 if ((HEAP32[$2 >> 2] | 0) != 275) _error_expected($ls, 275);
 _luaX_next($ls);
 $5 = HEAP32[$2 >> 2] | 0;
 do if (($5 | 0) == 258 | ($5 | 0) == 266) {
  _luaK_goiffalse(HEAP32[$0 >> 2] | 0, $v);
  HEAP8[$bl + 10 >> 0] = 0;
  HEAP8[$bl + 8 >> 0] = HEAP8[$1 + 46 >> 0] | 0;
  $14 = HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 64 >> 2] | 0;
  HEAP16[$bl + 4 >> 1] = HEAP32[$14 + 28 >> 2];
  HEAP16[$bl + 6 >> 1] = HEAP32[$14 + 16 >> 2];
  HEAP8[$bl + 9 >> 0] = 0;
  $24 = $1 + 16 | 0;
  HEAP32[$bl >> 2] = HEAP32[$24 >> 2];
  HEAP32[$24 >> 2] = $bl;
  $27 = HEAP32[$v + 16 >> 2] | 0;
  $29 = HEAP32[$ls + 4 >> 2] | 0;
  $31 = (HEAP32[$2 >> 2] | 0) == 266;
  _luaX_next($ls);
  do if ($31) if ((HEAP32[$2 >> 2] | 0) == 288) {
   $35 = HEAP32[$ls + 24 >> 2] | 0;
   _luaX_next($ls);
   $label$0$i = $35;
   break;
  } else _error_expected($ls, 288); else $label$0$i = _luaS_new(HEAP32[$ls + 52 >> 2] | 0, 2256) | 0; while (0);
  $40 = HEAP32[$ls + 64 >> 2] | 0;
  $41 = $40 + 12 | 0;
  $42 = $40 + 16 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  $44 = $40 + 20 | 0;
  if (($43 | 0) < (HEAP32[$44 >> 2] | 0)) {
   $52 = HEAP32[$41 >> 2] | 0;
   $60 = $43;
  } else {
   $50 = _luaM_growaux_(HEAP32[$ls + 52 >> 2] | 0, HEAP32[$41 >> 2] | 0, $44, 16, 32767, 2264) | 0;
   HEAP32[$41 >> 2] = $50;
   $52 = $50;
   $60 = HEAP32[$42 >> 2] | 0;
  }
  HEAP32[$52 + ($43 << 4) >> 2] = $label$0$i;
  HEAP32[$52 + ($43 << 4) + 8 >> 2] = $29;
  HEAP8[$52 + ($43 << 4) + 12 >> 0] = HEAP8[(HEAP32[$0 >> 2] | 0) + 46 >> 0] | 0;
  HEAP32[$52 + ($43 << 4) + 4 >> 2] = $27;
  HEAP32[$42 >> 2] = $60 + 1;
  _findlabel($ls, $43) | 0;
  L17 : while (1) {
   switch (HEAP32[$2 >> 2] | 0) {
   case 286:
   case 262:
   case 261:
   case 260:
    {
     break L17;
     break;
    }
   case 285:
   case 59:
    break;
   default:
    {
     label = 16;
     break L17;
    }
   }
   _statement($ls);
  }
  if ((label | 0) == 16) {
   $jf$0 = _luaK_jump($1) | 0;
   break;
  }
  _leaveblock($1);
  STACKTOP = sp;
  return;
 } else {
  _luaK_goiftrue(HEAP32[$0 >> 2] | 0, $v);
  HEAP8[$bl + 10 >> 0] = 0;
  HEAP8[$bl + 8 >> 0] = HEAP8[$1 + 46 >> 0] | 0;
  $71 = HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 64 >> 2] | 0;
  HEAP16[$bl + 4 >> 1] = HEAP32[$71 + 28 >> 2];
  HEAP16[$bl + 6 >> 1] = HEAP32[$71 + 16 >> 2];
  HEAP8[$bl + 9 >> 0] = 0;
  $81 = $1 + 16 | 0;
  HEAP32[$bl >> 2] = HEAP32[$81 >> 2];
  HEAP32[$81 >> 2] = $bl;
  $jf$0 = HEAP32[$v + 20 >> 2] | 0;
 } while (0);
 L26 : do {
  $ls$idx$val$i = HEAP32[$2 >> 2] | 0;
  switch ($ls$idx$val$i | 0) {
  case 277:
  case 286:
  case 262:
  case 261:
  case 260:
   {
    break L26;
    break;
   }
  default:
   {}
  }
  _statement($ls);
 } while (($ls$idx$val$i | 0) != 274);
 _leaveblock($1);
 if ((HEAP32[$2 >> 2] & -2 | 0) == 260) _luaK_concat($1, $escapelist, _luaK_jump($1) | 0);
 _luaK_patchtohere($1, $jf$0);
 STACKTOP = sp;
 return;
}

function _auxsort($L, $l, $u) {
 $L = $L | 0;
 $l = $l | 0;
 $u = $u | 0;
 var $$018 = 0, $$09 = 0, $$lcssa = 0, $$lcssa$lcssa = 0, $$lcssa3 = 0, $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $24 = 0, $26 = 0, $3 = 0, $32 = 0, $33 = 0, $6 = 0, $i$0$lcssa = 0, $i$0$lcssa$lcssa = 0, $i$0$ph = 0, $j$0$ph = 0, $j$1$lcssa = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0, $$018$looptemp = 0, $$09$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (($u | 0) > ($l | 0)) {
  $$018 = $l;
  $$09 = $u;
 } else {
  STACKTOP = sp;
  return;
 }
 while (1) {
  _lua_rawgeti($L, 1, $$018);
  _lua_rawgeti($L, 1, $$09);
  if (!(_sort_comp($L, -1, -2) | 0)) _lua_settop($L, -3); else {
   _lua_rawseti($L, 1, $$018);
   _lua_rawseti($L, 1, $$09);
  }
  $3 = $$09 - $$018 | 0;
  if (($3 | 0) == 1) {
   label = 24;
   break;
  }
  $6 = ($$09 + $$018 | 0) / 2 | 0;
  _lua_rawgeti($L, 1, $6);
  _lua_rawgeti($L, 1, $$018);
  do if (!(_sort_comp($L, -2, -1) | 0)) {
   _lua_settop($L, -2);
   _lua_rawgeti($L, 1, $$09);
   if (!(_sort_comp($L, -1, -2) | 0)) {
    _lua_settop($L, -3);
    break;
   } else {
    _lua_rawseti($L, 1, $6);
    _lua_rawseti($L, 1, $$09);
    break;
   }
  } else {
   _lua_rawseti($L, 1, $6);
   _lua_rawseti($L, 1, $$018);
  } while (0);
  if (($3 | 0) == 2) {
   label = 24;
   break;
  }
  _lua_rawgeti($L, 1, $6);
  _lua_pushvalue($L, -1);
  $12 = $$09 + -1 | 0;
  _lua_rawgeti($L, 1, $12);
  _lua_rawseti($L, 1, $6);
  _lua_rawseti($L, 1, $12);
  $i$0$ph = $$018;
  $j$0$ph = $12;
  while (1) {
   $13 = $i$0$ph + 1 | 0;
   _lua_rawgeti($L, 1, $13);
   if (!(_sort_comp($L, -1, -2) | 0)) {
    $$lcssa = $13;
    $i$0$lcssa = $i$0$ph;
   } else {
    $20 = $13;
    while (1) {
     if (($$09 | 0) <= ($20 | 0)) _luaL_error($L, 10080, $vararg_buffer) | 0;
     _lua_settop($L, -2);
     $21 = $20 + 1 | 0;
     _lua_rawgeti($L, 1, $21);
     if (!(_sort_comp($L, -1, -2) | 0)) {
      $$lcssa = $21;
      $i$0$lcssa = $20;
      break;
     } else $20 = $21;
    }
   }
   $16 = $j$0$ph + -1 | 0;
   _lua_rawgeti($L, 1, $16);
   if (!(_sort_comp($L, -3, -1) | 0)) {
    $$lcssa3 = $16;
    $j$1$lcssa = $j$0$ph;
   } else {
    $24 = $16;
    while (1) {
     if (($24 | 0) <= ($$018 | 0)) _luaL_error($L, 10080, $vararg_buffer1) | 0;
     _lua_settop($L, -2);
     $26 = $24 + -1 | 0;
     _lua_rawgeti($L, 1, $26);
     if (!(_sort_comp($L, -3, -1) | 0)) {
      $$lcssa3 = $26;
      $j$1$lcssa = $24;
      break;
     } else $24 = $26;
    }
   }
   if (($j$1$lcssa | 0) <= ($$lcssa | 0)) {
    $$lcssa$lcssa = $$lcssa;
    $i$0$lcssa$lcssa = $i$0$lcssa;
    break;
   }
   _lua_rawseti($L, 1, $$lcssa);
   _lua_rawseti($L, 1, $$lcssa3);
   $i$0$ph = $$lcssa;
   $j$0$ph = $$lcssa3;
  }
  _lua_settop($L, -4);
  _lua_rawgeti($L, 1, $12);
  _lua_rawgeti($L, 1, $$lcssa$lcssa);
  _lua_rawseti($L, 1, $12);
  _lua_rawseti($L, 1, $$lcssa$lcssa);
  $32 = ($$lcssa$lcssa - $$018 | 0) < ($$09 - $$lcssa$lcssa | 0);
  $33 = $i$0$lcssa$lcssa + 2 | 0;
  $$018$looptemp = $$018;
  $$018 = $32 ? $33 : $$018;
  $$09$looptemp = $$09;
  $$09 = $32 ? $$09 : $i$0$lcssa$lcssa;
  _auxsort($L, $32 ? $$018$looptemp : $33, $32 ? $i$0$lcssa$lcssa : $$09$looptemp);
  if (($$09 | 0) <= ($$018 | 0)) {
   label = 24;
   break;
  }
 }
 if ((label | 0) == 24) {
  STACKTOP = sp;
  return;
 }
}

function _luaY_parser($L, $z, $buff, $dyd, $name, $firstchar) {
 $L = $L | 0;
 $z = $z | 0;
 $buff = $buff | 0;
 $dyd = $dyd | 0;
 $name = $name | 0;
 $firstchar = $firstchar | 0;
 var $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $22 = 0, $23 = 0, $26 = 0, $32 = 0, $37 = 0, $41 = 0, $43 = 0, $44 = 0, $47 = 0, $5 = 0, $60 = 0, $78 = 0, $80 = 0, $bl$i = 0, $funcstate = 0, $lexstate = 0, $ls$idx$val$i$i = 0, $v$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $bl$i = sp + 156 | 0;
 $v$i = sp + 80 | 0;
 $lexstate = sp;
 $funcstate = sp + 104 | 0;
 $0 = _luaF_newLclosure($L, 1) | 0;
 $1 = $L + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = 70;
 $5 = (HEAP32[$1 >> 2] | 0) + 16 | 0;
 HEAP32[$1 >> 2] = $5;
 if (((HEAP32[$L + 24 >> 2] | 0) - $5 | 0) < 16) _luaD_growstack($L, 0);
 $12 = _luaF_newproto($L) | 0;
 HEAP32[$0 + 12 >> 2] = $12;
 HEAP32[$funcstate >> 2] = $12;
 $14 = _luaS_new($L, $name) | 0;
 $15 = $12 + 36 | 0;
 HEAP32[$15 >> 2] = $14;
 HEAP32[$lexstate + 60 >> 2] = $buff;
 $17 = $lexstate + 64 | 0;
 HEAP32[$17 >> 2] = $dyd;
 HEAP32[$dyd + 28 >> 2] = 0;
 HEAP32[$dyd + 16 >> 2] = 0;
 HEAP32[$dyd + 4 >> 2] = 0;
 _luaX_setinput($L, $lexstate, $z, $14, $firstchar);
 $22 = HEAP32[$lexstate + 52 >> 2] | 0;
 $23 = $lexstate + 48 | 0;
 HEAP32[$funcstate + 8 >> 2] = HEAP32[$23 >> 2];
 $26 = $funcstate + 12 | 0;
 HEAP32[$26 >> 2] = $lexstate;
 HEAP32[$23 >> 2] = $funcstate;
 HEAP32[$funcstate + 20 >> 2] = 0;
 HEAP32[$funcstate + 24 >> 2] = 0;
 HEAP32[$funcstate + 28 >> 2] = -1;
 HEAP32[$funcstate + 32 >> 2] = 0;
 HEAP32[$funcstate + 36 >> 2] = 0;
 $32 = $funcstate + 44 | 0;
 HEAP32[$32 >> 2] = 0;
 HEAP8[$32 + 4 >> 0] = 0;
 HEAP32[$funcstate + 40 >> 2] = HEAP32[(HEAP32[$17 >> 2] | 0) + 4 >> 2];
 $37 = $funcstate + 16 | 0;
 HEAP32[$37 >> 2] = 0;
 HEAP32[$15 >> 2] = HEAP32[$lexstate + 68 >> 2];
 HEAP8[$12 + 78 >> 0] = 2;
 $41 = _luaH_new($22) | 0;
 HEAP32[$funcstate + 4 >> 2] = $41;
 $43 = $22 + 8 | 0;
 $44 = HEAP32[$43 >> 2] | 0;
 HEAP32[$44 >> 2] = $41;
 HEAP32[$44 + 8 >> 2] = 69;
 $47 = (HEAP32[$43 >> 2] | 0) + 16 | 0;
 HEAP32[$43 >> 2] = $47;
 if (((HEAP32[$22 + 24 >> 2] | 0) - $47 | 0) < 16) _luaD_growstack($22, 0);
 HEAP8[$bl$i + 10 >> 0] = 0;
 HEAP8[$bl$i + 8 >> 0] = HEAP8[$funcstate + 46 >> 0] | 0;
 $60 = HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] | 0;
 HEAP16[$bl$i + 4 >> 1] = HEAP32[$60 + 28 >> 2];
 HEAP16[$bl$i + 6 >> 1] = HEAP32[$60 + 16 >> 2];
 HEAP8[$bl$i + 9 >> 0] = 0;
 HEAP32[$bl$i >> 2] = HEAP32[$37 >> 2];
 HEAP32[$37 >> 2] = $bl$i;
 HEAP8[(HEAP32[$funcstate >> 2] | 0) + 77 >> 0] = 1;
 HEAP32[$v$i + 16 >> 2] = -1;
 HEAP32[$v$i + 20 >> 2] = -1;
 HEAP32[$v$i >> 2] = 7;
 HEAP32[$v$i + 8 >> 2] = 0;
 _newupvalue($funcstate, HEAP32[$lexstate + 72 >> 2] | 0, $v$i) | 0;
 _luaX_next($lexstate);
 $78 = $lexstate + 16 | 0;
 L7 : while (1) {
  $ls$idx$val$i$i = HEAP32[$78 >> 2] | 0;
  switch ($ls$idx$val$i$i | 0) {
  case 277:
  case 286:
  case 262:
  case 261:
  case 260:
   {
    $80 = $ls$idx$val$i$i;
    break L7;
    break;
   }
  default:
   {}
  }
  _statement($lexstate);
  if (($ls$idx$val$i$i | 0) == 274) {
   label = 8;
   break;
  }
 }
 if ((label | 0) == 8) $80 = HEAP32[$78 >> 2] | 0;
 if (($80 | 0) == 286) {
  _close_func($lexstate);
  STACKTOP = sp;
  return $0 | 0;
 } else _error_expected($lexstate, 286);
 return 0;
}

function _luaV_lessthan($L, $l, $r) {
 $L = $L | 0;
 $l = $l | 0;
 $r = $r | 0;
 var $$0 = 0, $$0$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $112 = 0, $113 = 0, $120 = 0, $122 = 0, $127 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $26 = 0, $28 = 0, $31 = 0, $36 = 0, $38 = 0, $39 = 0, $40 = 0, $44 = 0, $46 = 0, $50 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $66 = 0, $68 = 0, $73 = 0, $74 = 0, $80 = 0, $82 = 0, $87 = 0, $88 = 0, $l$01$i = 0, $ll$02$i = 0, $lr$04$i = 0, $r$03$i = 0, $tm$01$i$i = 0;
 $0 = $l + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) == 3) {
  if ((HEAP32[$r + 8 >> 2] | 0) == 3) {
   $$0 = +HEAPF64[$l >> 3] < +HEAPF64[$r >> 3] & 1;
   return $$0 | 0;
  }
 } else if (($1 & 15 | 0) == 4) if ((HEAP32[$r + 8 >> 2] & 15 | 0) == 4) {
  $16 = HEAP32[$l >> 2] | 0;
  $17 = HEAP32[$r >> 2] | 0;
  $18 = $16 + 16 | 0;
  $19 = $17 + 16 | 0;
  $20 = _strcoll($18, $19) | 0;
  L5 : do if (!$20) {
   $l$01$i = $18;
   $ll$02$i = HEAP32[$16 + 12 >> 2] | 0;
   $lr$04$i = HEAP32[$17 + 12 >> 2] | 0;
   $r$03$i = $19;
   while (1) {
    $26 = _strlen($l$01$i | 0) | 0;
    $28 = ($26 | 0) == ($ll$02$i | 0);
    if (($26 | 0) == ($lr$04$i | 0)) {
     $$lcssa = $28;
     break;
    }
    if ($28) {
     $$0$i = -1;
     break L5;
    }
    $31 = $26 + 1 | 0;
    $l$01$i = $l$01$i + $31 | 0;
    $r$03$i = $r$03$i + $31 | 0;
    $36 = _strcoll($l$01$i, $r$03$i) | 0;
    if ($36) {
     $$0$i = $36;
     break L5;
    } else {
     $ll$02$i = $ll$02$i - $31 | 0;
     $lr$04$i = $lr$04$i - $31 | 0;
    }
   }
   $$0$i = $$lcssa & 1 ^ 1;
  } else $$0$i = $20; while (0);
  $$0 = $$0$i >>> 31;
  return $$0 | 0;
 }
 $38 = $L + 8 | 0;
 $39 = HEAP32[$38 >> 2] | 0;
 $40 = _luaT_gettmbyobj($L, $l, 13) | 0;
 if (!(HEAP32[$40 + 8 >> 2] | 0)) {
  $44 = _luaT_gettmbyobj($L, $r, 13) | 0;
  if (!(HEAP32[$44 + 8 >> 2] | 0)) _luaG_ordererror($L, $l, $r); else $tm$01$i$i = $44;
 } else $tm$01$i$i = $40;
 $46 = $L + 28 | 0;
 $50 = $39 - (HEAP32[$46 >> 2] | 0) | 0;
 $51 = HEAP32[$38 >> 2] | 0;
 HEAP32[$38 >> 2] = $51 + 16;
 $53 = $tm$01$i$i;
 $58 = HEAP32[$53 + 4 >> 2] | 0;
 $59 = $51;
 HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$59 + 4 >> 2] = $58;
 HEAP32[$51 + 8 >> 2] = HEAP32[$tm$01$i$i + 8 >> 2];
 $66 = HEAP32[$38 >> 2] | 0;
 HEAP32[$38 >> 2] = $66 + 16;
 $68 = $l;
 $73 = HEAP32[$68 + 4 >> 2] | 0;
 $74 = $66;
 HEAP32[$74 >> 2] = HEAP32[$68 >> 2];
 HEAP32[$74 + 4 >> 2] = $73;
 HEAP32[$66 + 8 >> 2] = HEAP32[$0 >> 2];
 $80 = HEAP32[$38 >> 2] | 0;
 HEAP32[$38 >> 2] = $80 + 16;
 $82 = $r;
 $87 = HEAP32[$82 + 4 >> 2] | 0;
 $88 = $80;
 HEAP32[$88 >> 2] = HEAP32[$82 >> 2];
 HEAP32[$88 + 4 >> 2] = $87;
 HEAP32[$80 + 8 >> 2] = HEAP32[$r + 8 >> 2];
 _luaD_call($L, (HEAP32[$38 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
 $103 = HEAP32[$46 >> 2] | 0;
 $105 = HEAP32[$38 >> 2] | 0;
 $106 = $105 + -16 | 0;
 HEAP32[$38 >> 2] = $106;
 $107 = $106;
 $112 = HEAP32[$107 + 4 >> 2] | 0;
 $113 = $103 + $50 | 0;
 HEAP32[$113 >> 2] = HEAP32[$107 >> 2];
 HEAP32[$113 + 4 >> 2] = $112;
 HEAP32[$103 + ($50 + 8) >> 2] = HEAP32[$105 + -8 >> 2];
 $120 = HEAP32[$38 >> 2] | 0;
 $122 = HEAP32[$120 + 8 >> 2] | 0;
 if (!$122) $127 = 0; else if (($122 | 0) == 1) $127 = (HEAP32[$120 >> 2] | 0) != 0; else $127 = 1;
 $$0 = $127 & 1;
 return $$0 | 0;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $48 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $63 = 0, $78 = 0, $9 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$013 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 if (($9 | 0) == 43 | ($9 | 0) == 45) {
  $11 = ($9 | 0) == 45 & 1;
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $20 = HEAPU8[$12 >> 0] | 0;
  } else $20 = ___shgetc($f) | 0;
  if (($pok | 0) != 0 & ($20 + -48 | 0) >>> 0 > 9) if (!(HEAP32[$2 >> 2] | 0)) {
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   $c$0 = $20;
   $neg$0 = $11;
  }
 } else {
  $c$0 = $9;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $98 = -2147483648;
   $99 = 0;
   tempRet0 = $98;
   return $99 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $98 = -2147483648;
  $99 = 0;
  tempRet0 = $98;
  return $99 | 0;
 } else {
  $c$112 = $c$0;
  $x$013 = 0;
 }
 while (1) {
  $35 = $c$112 + -48 + ($x$013 * 10 | 0) | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $36 + 1;
   $c$1$be = HEAPU8[$36 >> 0] | 0;
  } else $c$1$be = ___shgetc($f) | 0;
  if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
   $c$112 = $c$1$be;
   $x$013 = $35;
  } else {
   $$lcssa22 = $35;
   $c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $48 = (($$lcssa22 | 0) < 0) << 31 >> 31;
 if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
  $53 = $$lcssa22;
  $54 = $48;
  $c$27 = $c$1$be$lcssa;
  while (1) {
   $55 = ___muldi3($53 | 0, $54 | 0, 10, 0) | 0;
   $56 = tempRet0;
   $59 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   $61 = _i64Add($59 | 0, tempRet0 | 0, $55 | 0, $56 | 0) | 0;
   $62 = tempRet0;
   $63 = HEAP32[$0 >> 2] | 0;
   if ($63 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $63 + 1;
    $c$2$be = HEAPU8[$63 >> 0] | 0;
   } else $c$2$be = ___shgetc($f) | 0;
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($62 | 0) < 21474836 | ($62 | 0) == 21474836 & $61 >>> 0 < 2061584302)) {
    $53 = $61;
    $54 = $62;
    $c$27 = $c$2$be;
   } else {
    $92 = $61;
    $93 = $62;
    $c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $92 = $$lcssa22;
  $93 = $48;
  $c$2$lcssa = $c$1$be$lcssa;
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
  $78 = HEAP32[$0 >> 2] | 0;
  if ($78 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $78 + 1;
   $c$3$be = HEAPU8[$78 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
 } while (($c$3$be + -48 | 0) >>> 0 < 10);
 if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
 $91 = ($neg$0 | 0) != 0;
 $94 = _i64Subtract(0, 0, $92 | 0, $93 | 0) | 0;
 $98 = $91 ? tempRet0 : $93;
 $99 = $91 ? $94 : $92;
 tempRet0 = $98;
 return $99 | 0;
}

function _unroll($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $$0$i$i = 0, $$1$i$i = 0, $$25$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $44 = 0, $5 = 0, $52 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $7 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $i$03$i$i = 0, $i$03$i$i$lcssa = 0, $i$11$i$i = 0, $res$04$i$i = 0, $res$04$i$i$lcssa = 0, $res$1$lcssa$i$i = 0, $res$12$i$i = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 72 | 0;
 if (($1 | 0) == ($2 | 0)) return;
 $4 = $L + 8 | 0;
 $5 = $L + 40 | 0;
 $6 = $L + 20 | 0;
 $7 = $L + 28 | 0;
 $8 = $L + 68 | 0;
 $10 = $1;
 do {
  $9 = $10 + 18 | 0;
  $11 = HEAP8[$9 >> 0] | 0;
  if (!($11 & 1)) {
   $14 = $11 & 255;
   if (!($14 & 16)) $29 = $11; else {
    $18 = $14 & 239;
    HEAP8[$9 >> 0] = $18;
    HEAP32[$8 >> 2] = HEAP32[$10 + 32 >> 2];
    $29 = $18;
   }
   if ((HEAP16[$10 + 16 >> 1] | 0) == -1) {
    $24 = $10 + 4 | 0;
    $26 = HEAP32[$4 >> 2] | 0;
    if ((HEAP32[$24 >> 2] | 0) >>> 0 < $26 >>> 0) HEAP32[$24 >> 2] = $26;
   }
   if (!($29 & 32)) HEAP8[$10 + 37 >> 0] = 1;
   HEAP8[$9 >> 0] = $29 & 199 | 8;
   $38 = FUNCTION_TABLE_ii[HEAP32[$10 + 28 >> 2] & 255]($L) | 0;
   $41 = (HEAP32[$4 >> 2] | 0) + (0 - $38 << 4) | 0;
   $42 = HEAP32[$0 >> 2] | 0;
   $44 = HEAPU8[$5 >> 0] | 0;
   if (!($44 & 6)) {
    $$1$i$i = $41;
    $63 = HEAP32[$42 + 8 >> 2] | 0;
   } else {
    if (!($44 & 2)) $$0$i$i = $41; else {
     $52 = $41 - (HEAP32[$7 >> 2] | 0) | 0;
     _luaD_hook($L, 1, -1);
     $$0$i$i = (HEAP32[$7 >> 2] | 0) + $52 | 0;
    }
    $56 = HEAP32[$42 + 8 >> 2] | 0;
    HEAP32[$6 >> 2] = HEAP32[$56 + 28 >> 2];
    $$1$i$i = $$0$i$i;
    $63 = $56;
   }
   $60 = HEAP32[$42 >> 2] | 0;
   $62 = HEAP16[$42 + 16 >> 1] | 0;
   HEAP32[$0 >> 2] = $63;
   L25 : do if (!($62 << 16 >> 16)) $res$1$lcssa$i$i = $60; else {
    $$25$i$i = $$1$i$i;
    $i$03$i$i = $62 << 16 >> 16;
    $res$04$i$i = $60;
    while (1) {
     if ($$25$i$i >>> 0 >= (HEAP32[$4 >> 2] | 0) >>> 0) {
      $i$03$i$i$lcssa = $i$03$i$i;
      $res$04$i$i$lcssa = $res$04$i$i;
      break;
     }
     $70 = $res$04$i$i + 16 | 0;
     $71 = $$25$i$i;
     $76 = HEAP32[$71 + 4 >> 2] | 0;
     $77 = $res$04$i$i;
     HEAP32[$77 >> 2] = HEAP32[$71 >> 2];
     HEAP32[$77 + 4 >> 2] = $76;
     HEAP32[$res$04$i$i + 8 >> 2] = HEAP32[$$25$i$i + 8 >> 2];
     $i$03$i$i = $i$03$i$i + -1 | 0;
     if (!$i$03$i$i) {
      $res$1$lcssa$i$i = $70;
      break L25;
     } else {
      $$25$i$i = $$25$i$i + 16 | 0;
      $res$04$i$i = $70;
     }
    }
    if (($i$03$i$i$lcssa | 0) > 0) {
     $i$11$i$i = $i$03$i$i$lcssa;
     $res$12$i$i = $res$04$i$i$lcssa;
     while (1) {
      HEAP32[$res$12$i$i + 8 >> 2] = 0;
      if (($i$11$i$i | 0) > 1) {
       $i$11$i$i = $i$11$i$i + -1 | 0;
       $res$12$i$i = $res$12$i$i + 16 | 0;
      } else break;
     }
     $res$1$lcssa$i$i = $res$04$i$i$lcssa + ($i$03$i$i$lcssa << 4) | 0;
    } else $res$1$lcssa$i$i = $res$04$i$i$lcssa;
   } while (0);
   HEAP32[$4 >> 2] = $res$1$lcssa$i$i;
  } else {
   _luaV_finishOp($L);
   _luaV_execute($L);
  }
  $10 = HEAP32[$0 >> 2] | 0;
 } while (($10 | 0) != ($2 | 0));
 return;
}

function _g_read($L, $f, $first) {
 $L = $L | 0;
 $f = $f | 0;
 $first = $first | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $10 = 0, $12 = 0, $16 = 0, $21 = 0, $27 = 0, $34 = 0, $41 = 0, $46 = 0, $48 = 0, $6 = 0, $7 = 0, $b$i1 = 0, $n$04 = 0, $n$04$lcssa = 0, $n$1 = 0, $rlen$01$i = 0, $success$1 = 0, $success$2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer = sp + 1040 | 0;
 $b$i1 = sp;
 $0 = _lua_gettop($L) | 0;
 _clearerr($f | 0);
 L1 : do if (($0 | 0) == 1) {
  $n$1 = $first + 1 | 0;
  $success$2 = _read_line($L, $f, 1) | 0;
 } else {
  _luaL_checkstack($L, $0 + 19 | 0, 7552);
  $6 = $b$i1 + 8 | 0;
  $7 = $b$i1 + 8 | 0;
  $48 = $0 + -2 | 0;
  $n$04 = $first;
  L3 : while (1) {
   do if ((_lua_type($L, $n$04) | 0) == 3) {
    $10 = _lua_tointegerx($L, $n$04, 0) | 0;
    if (!$10) {
     $12 = _getc($f | 0) | 0;
     _ungetc($12 | 0, $f | 0) | 0;
     _lua_pushlstring($L, 0, 0) | 0;
     $success$1 = ($12 | 0) != -1 & 1;
     break;
    } else {
     _luaL_buffinit($L, $b$i1);
     $16 = _fread(_luaL_prepbuffsize($b$i1, $10) | 0, 1, $10 | 0, $f | 0) | 0;
     HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $16;
     _luaL_pushresult($b$i1);
     $success$1 = ($16 | 0) != 0 & 1;
     break;
    }
   } else {
    $21 = _lua_tolstring($L, $n$04, 0) | 0;
    if (!$21) label = 10; else if ((HEAP8[$21 >> 0] | 0) != 42) label = 10;
    if ((label | 0) == 10) {
     label = 0;
     _luaL_argerror($L, $n$04, 7576) | 0;
    }
    $27 = HEAP8[$21 + 1 >> 0] | 0;
    if (($27 | 0) == 76) {
     $success$1 = _read_line($L, $f, 0) | 0;
     break;
    } else if (($27 | 0) == 97) {
     _luaL_buffinit($L, $b$i1);
     $34 = _fread(_luaL_prepbuffsize($b$i1, 1024) | 0, 1, 1024, $f | 0) | 0;
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $34;
     if ($34 >>> 0 >= 1024) {
      $rlen$01$i = 1024;
      do {
       $rlen$01$i = $rlen$01$i << ($rlen$01$i >>> 0 < 1073741824 & 1);
       $41 = _fread(_luaL_prepbuffsize($b$i1, $rlen$01$i) | 0, 1, $rlen$01$i | 0, $f | 0) | 0;
       HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + $41;
      } while ($41 >>> 0 >= $rlen$01$i >>> 0);
     }
     _luaL_pushresult($b$i1);
     $success$1 = 1;
     break;
    } else if (($27 | 0) == 110) {
     HEAP32[$vararg_buffer >> 2] = $b$i1;
     if ((_fscanf($f | 0, 7592, $vararg_buffer | 0) | 0) == 1) {
      _lua_pushnumber($L, +HEAPF64[$b$i1 >> 3]);
      $$0$i = 1;
     } else {
      _lua_pushnil($L);
      $$0$i = 0;
     }
     $success$1 = $$0$i;
     break;
    } else if (($27 | 0) == 108) {
     $success$1 = _read_line($L, $f, 1) | 0;
     break;
    } else {
     $n$04$lcssa = $n$04;
     break L3;
    }
   } while (0);
   $46 = $n$04 + 1 | 0;
   if (($success$1 | 0) != 0 & ($48 | 0) != 0) {
    $48 = $48 + -1 | 0;
    $n$04 = $46;
   } else {
    $n$1 = $46;
    $success$2 = $success$1;
    break L1;
   }
  }
  $$0 = _luaL_argerror($L, $n$04$lcssa, 7600) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 if (_ferror($f | 0) | 0) {
  $$0 = _luaL_fileresult($L, 0, 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$success$2) {
  _lua_settop($L, -2);
  _lua_pushnil($L);
 }
 $$0 = $n$1 - $first | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _resume($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $$0$i = 0, $$1$i = 0, $$25$i = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $28 = 0, $3 = 0, $35 = 0, $38 = 0, $44 = 0, $48 = 0, $5 = 0, $53 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $70 = 0, $71 = 0, $firstArg$0 = 0, $i$03$i = 0, $i$03$i$lcssa = 0, $i$11$i = 0, $res$04$i = 0, $res$04$i$lcssa = 0, $res$1$lcssa$i = 0, $res$12$i = 0;
 $2 = $L + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if ((HEAPU16[$L + 38 >> 1] | 0) > 199) _resume_error($L, 728, $ud);
 $5 = $L + 6 | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 << 24 >> 24)) {
  if (($3 | 0) != ($L + 72 | 0)) _resume_error($L, 936, $ud);
  if (_luaD_precall($L, $ud + -16 | 0, -1) | 0) return;
  _luaV_execute($L);
  return;
 } else if ($6 << 24 >> 24 == 1) {
  HEAP8[$5 >> 0] = 0;
  $12 = $L + 28 | 0;
  HEAP32[$3 >> 2] = (HEAP32[$12 >> 2] | 0) + (HEAP32[$3 + 20 >> 2] | 0);
  $17 = $3 + 18 | 0;
  $18 = HEAP8[$17 >> 0] | 0;
  if (!($18 & 1)) {
   $22 = HEAP32[$3 + 28 >> 2] | 0;
   if (!$22) {
    $38 = $3;
    $firstArg$0 = $ud;
   } else {
    HEAP8[$3 + 37 >> 0] = 1;
    HEAP8[$17 >> 0] = $18 & 255 | 8;
    $28 = FUNCTION_TABLE_ii[$22 & 255]($L) | 0;
    $38 = HEAP32[$2 >> 2] | 0;
    $firstArg$0 = (HEAP32[$L + 8 >> 2] | 0) + (0 - $28 << 4) | 0;
   }
   $35 = HEAPU8[$L + 40 >> 0] | 0;
   if (!($35 & 6)) {
    $$1$i = $firstArg$0;
    $56 = HEAP32[$38 + 8 >> 2] | 0;
   } else {
    if (!($35 & 2)) $$0$i = $firstArg$0; else {
     $44 = $firstArg$0 - (HEAP32[$12 >> 2] | 0) | 0;
     _luaD_hook($L, 1, -1);
     $$0$i = (HEAP32[$12 >> 2] | 0) + $44 | 0;
    }
    $48 = HEAP32[$38 + 8 >> 2] | 0;
    HEAP32[$L + 20 >> 2] = HEAP32[$48 + 28 >> 2];
    $$1$i = $$0$i;
    $56 = $48;
   }
   $53 = HEAP32[$38 >> 2] | 0;
   $55 = HEAP16[$38 + 16 >> 1] | 0;
   HEAP32[$2 >> 2] = $56;
   $57 = $L + 8 | 0;
   L27 : do if (!($55 << 16 >> 16)) $res$1$lcssa$i = $53; else {
    $$25$i = $$1$i;
    $i$03$i = $55 << 16 >> 16;
    $res$04$i = $53;
    while (1) {
     if ($$25$i >>> 0 >= (HEAP32[$57 >> 2] | 0) >>> 0) {
      $i$03$i$lcssa = $i$03$i;
      $res$04$i$lcssa = $res$04$i;
      break;
     }
     $64 = $res$04$i + 16 | 0;
     $65 = $$25$i;
     $70 = HEAP32[$65 + 4 >> 2] | 0;
     $71 = $res$04$i;
     HEAP32[$71 >> 2] = HEAP32[$65 >> 2];
     HEAP32[$71 + 4 >> 2] = $70;
     HEAP32[$res$04$i + 8 >> 2] = HEAP32[$$25$i + 8 >> 2];
     $i$03$i = $i$03$i + -1 | 0;
     if (!$i$03$i) {
      $res$1$lcssa$i = $64;
      break L27;
     } else {
      $$25$i = $$25$i + 16 | 0;
      $res$04$i = $64;
     }
    }
    if (($i$03$i$lcssa | 0) > 0) {
     $i$11$i = $i$03$i$lcssa;
     $res$12$i = $res$04$i$lcssa;
     while (1) {
      HEAP32[$res$12$i + 8 >> 2] = 0;
      if (($i$11$i | 0) > 1) {
       $i$11$i = $i$11$i + -1 | 0;
       $res$12$i = $res$12$i + 16 | 0;
      } else break;
     }
     $res$1$lcssa$i = $res$04$i$lcssa + ($i$03$i$lcssa << 4) | 0;
    } else $res$1$lcssa$i = $res$04$i$lcssa;
   } while (0);
   HEAP32[$57 >> 2] = $res$1$lcssa$i;
  } else _luaV_execute($L);
  _unroll($L, 0);
  return;
 } else _resume_error($L, 5984, $ud);
}

function _new_localvar($ls, $name) {
 $ls = $ls | 0;
 $name = $name | 0;
 var $1 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $21 = 0, $3 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $oldsize$01$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 48 >> 2] | 0;
 $3 = HEAP32[$ls + 64 >> 2] | 0;
 $4 = HEAP32[$1 >> 2] | 0;
 $5 = $4 + 60 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $7 = $1 + 44 | 0;
 if ((HEAP16[$7 >> 1] | 0) < ($6 | 0)) {
  $17 = $6;
  $20 = HEAP32[$4 + 24 >> 2] | 0;
 } else {
  $13 = $4 + 24 | 0;
  $15 = _luaM_growaux_(HEAP32[$ls + 52 >> 2] | 0, HEAP32[$13 >> 2] | 0, $5, 12, 32767, 2880) | 0;
  HEAP32[$13 >> 2] = $15;
  $17 = HEAP32[$5 >> 2] | 0;
  $20 = $15;
 }
 if (($6 | 0) < ($17 | 0)) {
  $oldsize$01$i = $6;
  do {
   HEAP32[$20 + ($oldsize$01$i * 12 | 0) >> 2] = 0;
   $oldsize$01$i = $oldsize$01$i + 1 | 0;
  } while (($oldsize$01$i | 0) != ($17 | 0));
 }
 $21 = HEAP16[$7 >> 1] | 0;
 HEAP32[$20 + (($21 << 16 >> 16) * 12 | 0) >> 2] = $name;
 if (!(HEAP8[$name + 5 >> 0] & 3)) $35 = $21; else if (!(HEAP8[$4 + 5 >> 0] & 4)) $35 = $21; else {
  _luaC_barrier_(HEAP32[$ls + 52 >> 2] | 0, $4, $name);
  $35 = HEAP16[$7 >> 1] | 0;
 }
 HEAP16[$7 >> 1] = $35 + 1 << 16 >> 16;
 $36 = $3 + 4 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 if (($37 + 1 - (HEAP32[$1 + 40 >> 2] | 0) | 0) > 200) {
  $43 = $1 + 12 | 0;
  $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 52 >> 2] | 0;
  $49 = HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2] | 0;
  if (!$49) {
   $52 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2880;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 200;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $52;
   $53 = _luaO_pushfstring($46, 2480, $vararg_buffer1) | 0;
   $54 = HEAP32[$43 >> 2] | 0;
   _luaX_syntaxerror($54, $53);
  }
  HEAP32[$vararg_buffer >> 2] = $49;
  $52 = _luaO_pushfstring($46, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2880;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 200;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $52;
  $53 = _luaO_pushfstring($46, 2480, $vararg_buffer1) | 0;
  $54 = HEAP32[$43 >> 2] | 0;
  _luaX_syntaxerror($54, $53);
 }
 $56 = $3 + 8 | 0;
 if (($37 + 2 | 0) > (HEAP32[$56 >> 2] | 0)) {
  $62 = _luaM_growaux_(HEAP32[$ls + 52 >> 2] | 0, HEAP32[$3 >> 2] | 0, $56, 2, 2147483645, 2880) | 0;
  HEAP32[$3 >> 2] = $62;
  $64 = HEAP32[$36 >> 2] | 0;
  $66 = $62;
  $63 = $64 + 1 | 0;
  HEAP32[$36 >> 2] = $63;
  $65 = $66 + ($64 << 1) | 0;
  HEAP16[$65 >> 1] = $35;
  STACKTOP = sp;
  return;
 } else {
  $64 = $37;
  $66 = HEAP32[$3 >> 2] | 0;
  $63 = $64 + 1 | 0;
  HEAP32[$36 >> 2] = $63;
  $65 = $66 + ($64 << 1) | 0;
  HEAP16[$65 >> 1] = $35;
  STACKTOP = sp;
  return;
 }
}

function _suffixedexp($ls, $v) {
 $ls = $ls | 0;
 $v = $v | 0;
 var $$pre$phi2Z2D = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $key = 0, $key$i$i = 0, $key1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp + 72 | 0;
 $key$i$i = sp + 48 | 0;
 $key = sp + 24 | 0;
 $key1 = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $ls + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $ls + 16 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 do if (($5 | 0) == 288) {
  $16 = $ls + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  _luaX_next($ls);
  $18 = HEAP32[$0 >> 2] | 0;
  if (!(_singlevaraux($18, $17, $v, 1) | 0)) {
   _singlevaraux($18, HEAP32[$ls + 72 >> 2] | 0, $v, 1) | 0;
   $23 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $17) | 0;
   HEAP32[$key$i$i + 16 >> 2] = -1;
   HEAP32[$key$i$i + 20 >> 2] = -1;
   HEAP32[$key$i$i >> 2] = 4;
   HEAP32[$key$i$i + 8 >> 2] = $23;
   _luaK_indexed($18, $v, $key$i$i);
  }
  $$pre$phi2Z2D = $16;
 } else if (($5 | 0) == 40) {
  _luaX_next($ls);
  _subexpr($ls, $v, 0) | 0;
  if ((HEAP32[$4 >> 2] | 0) == 41) {
   _luaX_next($ls);
   _luaK_dischargevars(HEAP32[$0 >> 2] | 0, $v);
   $$pre$phi2Z2D = $ls + 24 | 0;
   break;
  }
  if ((HEAP32[$2 >> 2] | 0) == ($3 | 0)) _error_expected($ls, 41); else {
   $11 = HEAP32[$ls + 52 >> 2] | 0;
   $12 = _luaX_token2str($ls, 41) | 0;
   $13 = _luaX_token2str($ls, 40) | 0;
   HEAP32[$vararg_buffer >> 2] = $12;
   HEAP32[$vararg_buffer + 4 >> 2] = $13;
   HEAP32[$vararg_buffer + 8 >> 2] = $3;
   _luaX_syntaxerror($ls, _luaO_pushfstring($11, 2528, $vararg_buffer) | 0);
  }
 } else _luaX_syntaxerror($ls, 2744); while (0);
 $27 = $key1 + 16 | 0;
 $28 = $key1 + 20 | 0;
 $29 = $key1 + 8 | 0;
 L15 : while (1) switch (HEAP32[$4 >> 2] | 0) {
 case 91:
  {
   _luaK_exp2anyregup($1, $v);
   _luaX_next($ls);
   _subexpr($ls, $key, 0) | 0;
   _luaK_exp2val(HEAP32[$0 >> 2] | 0, $key);
   if ((HEAP32[$4 >> 2] | 0) != 93) {
    label = 15;
    break L15;
   }
   _luaX_next($ls);
   _luaK_indexed($1, $v, $key);
   continue L15;
   break;
  }
 case 123:
 case 289:
 case 40:
  {
   _luaK_exp2nextreg($1, $v);
   _funcargs($ls, $v, $3);
   continue L15;
   break;
  }
 case 58:
  {
   _luaX_next($ls);
   if ((HEAP32[$4 >> 2] | 0) != 288) {
    label = 18;
    break L15;
   }
   $36 = HEAP32[$$pre$phi2Z2D >> 2] | 0;
   _luaX_next($ls);
   $37 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $36) | 0;
   HEAP32[$27 >> 2] = -1;
   HEAP32[$28 >> 2] = -1;
   HEAP32[$key1 >> 2] = 4;
   HEAP32[$29 >> 2] = $37;
   _luaK_self($1, $v, $key1);
   _funcargs($ls, $v, $3);
   continue L15;
   break;
  }
 case 46:
  {
   _fieldsel($ls, $v);
   continue L15;
   break;
  }
 default:
  {
   label = 21;
   break L15;
  }
 }
 if ((label | 0) == 15) _error_expected($ls, 93); else if ((label | 0) == 18) _error_expected($ls, 288); else if ((label | 0) == 21) {
  STACKTOP = sp;
  return;
 }
}

function _skip_sep($ls) {
 $ls = $ls | 0;
 var $$lcssa = 0, $$lcssa25 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $7 = 0, $count$0$lcssa = 0, $count$011 = 0, $not$ = 0, label = 0;
 $0 = HEAP32[$ls >> 2] | 0;
 $1 = $ls + 60 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $2 + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = $2 + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 do if (($4 + 1 | 0) >>> 0 > $7 >>> 0) {
  if ($7 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
  $10 = $7 << 1;
  $13 = HEAP32[$ls + 52 >> 2] | 0;
  if (($10 | 0) == -2) _luaM_toobig($13); else {
   $15 = _luaM_realloc_($13, HEAP32[$2 >> 2] | 0, $7, $10) | 0;
   HEAP32[$2 >> 2] = $15;
   HEAP32[$6 >> 2] = $10;
   $18 = HEAP32[$3 >> 2] | 0;
   $20 = $15;
   break;
  }
 } else {
  $18 = $4;
  $20 = HEAP32[$2 >> 2] | 0;
 } while (0);
 HEAP32[$3 >> 2] = $18 + 1;
 HEAP8[$20 + $18 >> 0] = $0;
 $21 = $ls + 56 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 $23 = HEAP32[$22 >> 2] | 0;
 HEAP32[$22 >> 2] = $23 + -1;
 if (!$23) $32 = _luaZ_fill($22) | 0; else {
  $26 = $22 + 4 | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  HEAP32[$26 >> 2] = $27 + 1;
  $32 = HEAPU8[$27 >> 0] | 0;
 }
 HEAP32[$ls >> 2] = $32;
 if (($32 | 0) != 61) {
  $$lcssa = $32;
  $count$0$lcssa = 0;
  $not$ = ($$lcssa | 0) != ($0 | 0);
  $65 = $not$ << 31 >> 31;
  $66 = $65 ^ $count$0$lcssa;
  return $66 | 0;
 }
 $34 = $ls + 52 | 0;
 $count$011 = 0;
 while (1) {
  $35 = HEAP32[$1 >> 2] | 0;
  $36 = $35 + 4 | 0;
  $37 = HEAP32[$36 >> 2] | 0;
  $39 = $35 + 8 | 0;
  $40 = HEAP32[$39 >> 2] | 0;
  if (($37 + 1 | 0) >>> 0 > $40 >>> 0) {
   if ($40 >>> 0 > 2147483645) {
    label = 16;
    break;
   }
   $43 = $40 << 1;
   $45 = HEAP32[$34 >> 2] | 0;
   if (($43 | 0) == -2) {
    $$lcssa25 = $45;
    label = 18;
    break;
   }
   $47 = _luaM_realloc_($45, HEAP32[$35 >> 2] | 0, $40, $43) | 0;
   HEAP32[$35 >> 2] = $47;
   HEAP32[$39 >> 2] = $43;
   $49 = HEAP32[$36 >> 2] | 0;
   $51 = $47;
  } else {
   $49 = $37;
   $51 = HEAP32[$35 >> 2] | 0;
  }
  HEAP32[$36 >> 2] = $49 + 1;
  HEAP8[$51 + $49 >> 0] = 61;
  $52 = HEAP32[$21 >> 2] | 0;
  $53 = HEAP32[$52 >> 2] | 0;
  HEAP32[$52 >> 2] = $53 + -1;
  if (!$53) $62 = _luaZ_fill($52) | 0; else {
   $56 = $52 + 4 | 0;
   $57 = HEAP32[$56 >> 2] | 0;
   HEAP32[$56 >> 2] = $57 + 1;
   $62 = HEAPU8[$57 >> 0] | 0;
  }
  HEAP32[$ls >> 2] = $62;
  $63 = $count$011 + 1 | 0;
  if (($62 | 0) == 61) $count$011 = $63; else {
   $$lcssa = $62;
   $count$0$lcssa = $63;
   label = 24;
   break;
  }
 }
 if ((label | 0) == 16) _lexerror($ls, 1264, 0); else if ((label | 0) == 18) _luaM_toobig($$lcssa25); else if ((label | 0) == 24) {
  $not$ = ($$lcssa | 0) != ($0 | 0);
  $65 = $not$ << 31 >> 31;
  $66 = $65 ^ $count$0$lcssa;
  return $66 | 0;
 }
 return 0;
}

function _os_date($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $b = 0, $buff = 0, $cc = 0, $s$0 = 0, $s$1 = 0, $stm$0 = 0, $t = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264 | 0;
 $vararg_buffer = sp;
 $t = sp + 1048 | 0;
 $cc = sp + 1256 | 0;
 $b = sp + 8 | 0;
 $buff = sp + 1056 | 0;
 $0 = _luaL_optlstring($L, 1, 8824, 0) | 0;
 if ((_lua_type($L, 2) | 0) < 1) $6 = _time(0) | 0; else $6 = ~~+_luaL_checknumber($L, 2);
 HEAP32[$t >> 2] = $6;
 if ((HEAP8[$0 >> 0] | 0) == 33) {
  $s$0 = $0 + 1 | 0;
  $stm$0 = _gmtime($t | 0) | 0;
 } else {
  $s$0 = $0;
  $stm$0 = _localtime($t | 0) | 0;
 }
 if (!$stm$0) {
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 }
 if (!(_strcmp($s$0, 8832) | 0)) {
  _lua_createtable($L, 0, 9);
  _lua_pushinteger($L, HEAP32[$stm$0 >> 2] | 0);
  _lua_setfield($L, -2, 8624);
  _lua_pushinteger($L, HEAP32[$stm$0 + 4 >> 2] | 0);
  _lua_setfield($L, -2, 8632);
  _lua_pushinteger($L, HEAP32[$stm$0 + 8 >> 2] | 0);
  _lua_setfield($L, -2, 8640);
  _lua_pushinteger($L, HEAP32[$stm$0 + 12 >> 2] | 0);
  _lua_setfield($L, -2, 8648);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 16 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 8696);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 20 >> 2] | 0) + 1900 | 0);
  _lua_setfield($L, -2, 8704);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 24 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 8840);
  _lua_pushinteger($L, (HEAP32[$stm$0 + 28 >> 2] | 0) + 1 | 0);
  _lua_setfield($L, -2, 8848);
  $35 = HEAP32[$stm$0 + 32 >> 2] | 0;
  if (($35 | 0) < 0) {
   STACKTOP = sp;
   return 1;
  }
  _lua_pushboolean($L, $35);
  _lua_setfield($L, -2, 8712);
  STACKTOP = sp;
  return 1;
 }
 HEAP8[$cc >> 0] = 37;
 _luaL_buffinit($L, $b);
 $37 = $b + 8 | 0;
 $38 = $b + 4 | 0;
 $39 = $cc + 1 | 0;
 $40 = $cc + 2 | 0;
 $s$1 = $s$0;
 while (1) {
  $41 = HEAP8[$s$1 >> 0] | 0;
  if (!($41 << 24 >> 24)) break; else if ($41 << 24 >> 24 != 37) {
   $42 = HEAP32[$37 >> 2] | 0;
   if ($42 >>> 0 < (HEAP32[$38 >> 2] | 0) >>> 0) {
    $47 = $42;
    $50 = $41;
   } else {
    _luaL_prepbuffsize($b, 1) | 0;
    $47 = HEAP32[$37 >> 2] | 0;
    $50 = HEAP8[$s$1 >> 0] | 0;
   }
   HEAP32[$37 >> 2] = $47 + 1;
   HEAP8[(HEAP32[$b >> 2] | 0) + $47 >> 0] = $50;
   $s$1 = $s$1 + 1 | 0;
   continue;
  }
  $51 = $s$1 + 1 | 0;
  $52 = $s$1 + 2 | 0;
  $53 = HEAP8[$51 >> 0] | 0;
  if (!($53 << 24 >> 24)) label = 20; else if (!(_memchr(8856, $53 << 24 >> 24, 23) | 0)) label = 20; else {
   HEAP8[$39 >> 0] = $53;
   HEAP8[$40 >> 0] = 0;
   $$0$i = $52;
  }
  if ((label | 0) == 20) {
   label = 0;
   HEAP32[$vararg_buffer >> 2] = $51;
   _luaL_argerror($L, 1, _lua_pushfstring($L, 8880, $vararg_buffer) | 0) | 0;
   $$0$i = $51;
  }
  _luaL_addlstring($b, $buff, _strftime($buff | 0, 200, $cc | 0, $stm$0 | 0) | 0);
  $s$1 = $$0$i;
 }
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function _luaL_loadfilex($L, $filename, $mode) {
 $L = $L | 0;
 $filename = $filename | 0;
 $mode = $mode | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $18 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $37 = 0, $39 = 0, $40 = 0, $44 = 0, $46 = 0, $5 = 0, $c = 0, $lf = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088 | 0;
 $vararg_buffer11 = sp + 40 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $lf = sp + 56 | 0;
 $c = sp + 52 | 0;
 $1 = (_lua_gettop($L) | 0) + 1 | 0;
 if (!$filename) {
  _lua_pushlstring($L, 4152, 6) | 0;
  HEAP32[$lf + 4 >> 2] = HEAP32[_stdin >> 2];
 } else {
  HEAP32[$vararg_buffer >> 2] = $filename;
  _lua_pushfstring($L, 4160, $vararg_buffer) | 0;
  $5 = _fopen($filename | 0, 11144) | 0;
  HEAP32[$lf + 4 >> 2] = $5;
  if (!$5) {
   $10 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   $12 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
   HEAP32[$vararg_buffer1 >> 2] = 7680;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $12;
   HEAP32[$vararg_buffer1 + 8 >> 2] = $10;
   _lua_pushfstring($L, 4168, $vararg_buffer1) | 0;
   _lua_remove($L, $1);
   $$0 = 7;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 if (_skipcomment($lf, $c) | 0) {
  $15 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $15 + 1;
  HEAP8[$lf + 8 + $15 >> 0] = 10;
 }
 $18 = HEAP32[$c >> 2] | 0;
 $20 = ($filename | 0) != 0;
 do if ($20 & ($18 | 0) == 27) {
  $21 = $lf + 4 | 0;
  $23 = _freopen($filename | 0, 4192, HEAP32[$21 >> 2] | 0) | 0;
  HEAP32[$21 >> 2] = $23;
  if ($23) {
   _skipcomment($lf, $c) | 0;
   $30 = HEAP32[$c >> 2] | 0;
   break;
  }
  $27 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  $29 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
  HEAP32[$vararg_buffer6 >> 2] = 4200;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $29;
  HEAP32[$vararg_buffer6 + 8 >> 2] = $27;
  _lua_pushfstring($L, 4168, $vararg_buffer6) | 0;
  _lua_remove($L, $1);
  $$0 = 7;
  STACKTOP = sp;
  return $$0 | 0;
 } else $30 = $18; while (0);
 if (($30 | 0) != -1) {
  $33 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $33 + 1;
  HEAP8[$lf + 8 + $33 >> 0] = $30;
 }
 $37 = _lua_load($L, 19, $lf, _lua_tolstring($L, -1, 0) | 0, $mode) | 0;
 $39 = HEAP32[$lf + 4 >> 2] | 0;
 $40 = _ferror($39 | 0) | 0;
 if ($20) _fclose($39 | 0) | 0;
 if (!$40) {
  _lua_remove($L, $1);
  $$0 = $37;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_settop($L, $1);
  $44 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
  $46 = (_lua_tolstring($L, $1, 0) | 0) + 1 | 0;
  HEAP32[$vararg_buffer11 >> 2] = 7288;
  HEAP32[$vararg_buffer11 + 4 >> 2] = $46;
  HEAP32[$vararg_buffer11 + 8 >> 2] = $44;
  _lua_pushfstring($L, 4168, $vararg_buffer11) | 0;
  _lua_remove($L, $1);
  $$0 = 7;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _discharge2reg($fs, $e, $reg) {
 $fs = $fs | 0;
 $e = $e | 0;
 $reg = $reg | 0;
 var $$from$i = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $17 = 0, $19 = 0, $2 = 0, $4 = 0, $43 = 0, $45 = 0, $53 = 0.0, $57 = 0, $60 = 0, $61 = 0, $63 = 0, $71 = 0, $76 = 0, $88 = 0, $95 = 0, $n$0$i = 0, $o$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $o$i = sp;
 _luaK_dischargevars($fs, $e);
 $1 = HEAP32[$e >> 2] | 0;
 L1 : do switch ($1 | 0) {
 case 1:
  {
   $2 = $reg + 1 | 0;
   $4 = HEAP32[$fs + 20 >> 2] | 0;
   do if (($4 | 0) > (HEAP32[$fs + 24 >> 2] | 0)) {
    $12 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + ($4 + -1 << 2) | 0;
    $13 = HEAP32[$12 >> 2] | 0;
    if (($13 & 63 | 0) == 4) {
     $17 = $13 >>> 6 & 255;
     $19 = $17 + ($13 >>> 23) | 0;
     if (($17 | 0) > ($reg | 0) | ($19 + 1 | 0) < ($reg | 0)) if (($17 | 0) < ($reg | 0) | ($17 | 0) > ($2 | 0)) break;
     $$from$i = ($17 | 0) < ($reg | 0) ? $17 : $reg;
     HEAP32[$12 >> 2] = $$from$i << 6 & 16320 | $13 & 8372287 | (($19 | 0) > ($reg | 0) ? $19 : $reg) - $$from$i << 23;
     break L1;
    }
   } while (0);
   _luaK_code($fs, $reg << 6 | 4) | 0;
   break;
  }
 case 4:
  {
   $43 = HEAP32[$e + 8 >> 2] | 0;
   $45 = $reg << 6;
   if (($43 | 0) < 262144) {
    _luaK_code($fs, $45 | $43 << 14 | 1) | 0;
    break L1;
   } else {
    _luaK_code($fs, $45 | 2) | 0;
    _luaK_code($fs, $43 << 6 | 39) | 0;
    break L1;
   }
   break;
  }
 case 11:
  {
   $88 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e + 8 >> 2] << 2) | 0;
   HEAP32[$88 >> 2] = HEAP32[$88 >> 2] & -16321 | $reg << 6 & 16320;
   break;
  }
 case 2:
 case 3:
  {
   _luaK_code($fs, $reg << 6 | (($1 | 0) == 2 & 1) << 23 | 3) | 0;
   break;
  }
 case 5:
  {
   $53 = +HEAPF64[$e + 8 >> 3];
   HEAPF64[$0 >> 3] = $53;
   $57 = HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0;
   HEAPF64[$o$i >> 3] = $53;
   HEAP32[$o$i + 8 >> 2] = 3;
   if ($53 != $53 | 0.0 != 0.0 | $53 == 0.0) {
    $60 = $57 + 8 | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    HEAP32[$60 >> 2] = $61 + 16;
    $63 = _luaS_newlstr($57, $0, 8) | 0;
    HEAP32[$61 >> 2] = $63;
    HEAP32[$61 + 8 >> 2] = HEAPU8[$63 + 4 >> 0] | 0 | 64;
    $71 = _addk($fs, (HEAP32[$60 >> 2] | 0) + -16 | 0, $o$i) | 0;
    HEAP32[$60 >> 2] = (HEAP32[$60 >> 2] | 0) + -16;
    $n$0$i = $71;
   } else $n$0$i = _addk($fs, $o$i, $o$i) | 0;
   $76 = $reg << 6;
   if (($n$0$i | 0) < 262144) {
    _luaK_code($fs, $76 | $n$0$i << 14 | 1) | 0;
    break L1;
   } else {
    _luaK_code($fs, $76 | 2) | 0;
    _luaK_code($fs, $n$0$i << 6 | 39) | 0;
    break L1;
   }
   break;
  }
 case 6:
  {
   $95 = HEAP32[$e + 8 >> 2] | 0;
   if (($95 | 0) != ($reg | 0)) _luaK_code($fs, $95 << 23 | $reg << 6) | 0;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 } while (0);
 HEAP32[$e + 8 >> 2] = $reg;
 HEAP32[$e >> 2] = 6;
 STACKTOP = sp;
 return;
}

function _luaV_arith($L, $ra, $rb, $rc, $op) {
 $L = $L | 0;
 $ra = $ra | 0;
 $rb = $rb | 0;
 $rc = $rc | 0;
 $op = $op | 0;
 var $$0$i$ph = 0, $$in = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $14 = 0, $18 = 0, $29 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $48 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $63 = 0, $64 = 0, $70 = 0, $72 = 0, $77 = 0, $78 = 0, $93 = 0, $95 = 0, $96 = 0, $97 = 0, $num$i1 = 0, $tempb = 0, $tm$01$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $num$i1 = sp + 16 | 0;
 $tempb = sp;
 $0 = $rb + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($1 | 0) == 3) {
  $$0$i$ph = $rb;
  label = 6;
 } else if (($1 & 15 | 0) == 4) {
  $5 = HEAP32[$rb >> 2] | 0;
  if (_luaO_str2d($5 + 16 | 0, HEAP32[$5 + 12 >> 2] | 0, $num$i1) | 0) {
   HEAPF64[$tempb >> 3] = +HEAPF64[$num$i1 >> 3];
   HEAP32[$tempb + 8 >> 2] = 3;
   $$0$i$ph = $tempb;
   label = 6;
   break;
  }
 } while (0);
 L7 : do if ((label | 0) == 6) {
  $14 = HEAP32[$rc + 8 >> 2] | 0;
  do if (($14 | 0) == 3) $$in = $rc; else {
   if (($14 & 15 | 0) == 4) {
    $18 = HEAP32[$rc >> 2] | 0;
    if (_luaO_str2d($18 + 16 | 0, HEAP32[$18 + 12 >> 2] | 0, $num$i1) | 0) {
     $$in = $num$i1;
     break;
    }
   }
   break L7;
  } while (0);
  HEAPF64[$ra >> 3] = +_luaO_arith($op + -6 | 0, +HEAPF64[$$0$i$ph >> 3], +HEAPF64[$$in >> 3]);
  HEAP32[$ra + 8 >> 2] = 3;
  STACKTOP = sp;
  return;
 } while (0);
 $29 = _luaT_gettmbyobj($L, $rb, $op) | 0;
 if (!(HEAP32[$29 + 8 >> 2] | 0)) {
  $33 = _luaT_gettmbyobj($L, $rc, $op) | 0;
  if (!(HEAP32[$33 + 8 >> 2] | 0)) _luaG_aritherror($L, $rb, $rc); else $tm$01$i = $33;
 } else $tm$01$i = $29;
 $35 = $L + 28 | 0;
 $39 = $ra - (HEAP32[$35 >> 2] | 0) | 0;
 $40 = $L + 8 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $41 + 16;
 $43 = $tm$01$i;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $49 = $41;
 HEAP32[$49 >> 2] = HEAP32[$43 >> 2];
 HEAP32[$49 + 4 >> 2] = $48;
 HEAP32[$41 + 8 >> 2] = HEAP32[$tm$01$i + 8 >> 2];
 $56 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $56 + 16;
 $58 = $rb;
 $63 = HEAP32[$58 + 4 >> 2] | 0;
 $64 = $56;
 HEAP32[$64 >> 2] = HEAP32[$58 >> 2];
 HEAP32[$64 + 4 >> 2] = $63;
 HEAP32[$56 + 8 >> 2] = HEAP32[$0 >> 2];
 $70 = HEAP32[$40 >> 2] | 0;
 HEAP32[$40 >> 2] = $70 + 16;
 $72 = $rc;
 $77 = HEAP32[$72 + 4 >> 2] | 0;
 $78 = $70;
 HEAP32[$78 >> 2] = HEAP32[$72 >> 2];
 HEAP32[$78 + 4 >> 2] = $77;
 HEAP32[$70 + 8 >> 2] = HEAP32[$rc + 8 >> 2];
 _luaD_call($L, (HEAP32[$40 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
 $93 = HEAP32[$35 >> 2] | 0;
 $95 = HEAP32[$40 >> 2] | 0;
 $96 = $95 + -16 | 0;
 HEAP32[$40 >> 2] = $96;
 $97 = $96;
 $102 = HEAP32[$97 + 4 >> 2] | 0;
 $103 = $93 + $39 | 0;
 HEAP32[$103 >> 2] = HEAP32[$97 >> 2];
 HEAP32[$103 + 4 >> 2] = $102;
 HEAP32[$93 + ($39 + 8) >> 2] = HEAP32[$95 + -8 >> 2];
 STACKTOP = sp;
 return;
}

function _sweeplist($L, $p, $count) {
 $L = $L | 0;
 $p = $p | 0;
 $count = $count | 0;
 var $$ = 0, $$0 = 0, $$01$be = 0, $$01$lcssa = 0, $$0111 = 0, $$112 = 0, $$3 = 0, $$4 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $39 = 0, $4 = 0, $5 = 0, $62 = 0, $8 = 0, $not$ = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAPU8[$1 + 60 >> 0] | 0;
 $5 = $4 ^ 3;
 $8 = (HEAP8[$1 + 62 >> 0] | 0) == 2;
 $$ = $8 ? 255 : 184;
 $$3 = $8 ? 64 : $4 & 3;
 $$4 = $8 ? 64 : 0;
 $10 = HEAP32[$p >> 2] | 0;
 $11 = ($10 | 0) == 0;
 L1 : do if (($count | 0) != 0 & ($11 ^ 1)) {
  $$0111 = $p;
  $$112 = $count + -1 | 0;
  $15 = $10;
  L3 : while (1) {
   $14 = $15 + 5 | 0;
   $17 = HEAPU8[$14 >> 0] | 0;
   L5 : do if (!(($17 ^ 3) & $5)) {
    HEAP32[$$0111 >> 2] = HEAP32[$15 >> 2];
    switch (HEAPU8[$15 + 4 >> 0] | 0) {
    case 20:
     break;
    case 8:
     {
      _luaE_freethread($L, $15);
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 5:
     {
      _luaH_free($L, $15);
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 10:
     {
      _luaF_freeupval($L, $15);
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 6:
     {
      _luaM_realloc_($L, $15, (HEAPU8[$15 + 6 >> 0] << 2) + 16 | 0, 0) | 0;
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 38:
     {
      _luaM_realloc_($L, $15, (HEAPU8[$15 + 6 >> 0] << 4) + 16 | 0, 0) | 0;
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 4:
     {
      $39 = (HEAP32[$0 >> 2] | 0) + 28 | 0;
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + -1;
      break;
     }
    case 9:
     {
      _luaF_freeproto($L, $15);
      $$01$be = $$0111;
      break L5;
      break;
     }
    case 7:
     {
      _luaM_realloc_($L, $15, (HEAP32[$15 + 16 >> 2] | 0) + 24 | 0, 0) | 0;
      $$01$be = $$0111;
      break L5;
      break;
     }
    default:
     {
      $$01$be = $$0111;
      break L5;
     }
    }
    _luaM_realloc_($L, $15, (HEAP32[$15 + 12 >> 2] | 0) + 17 | 0, 0) | 0;
    $$01$be = $$0111;
   } else {
    if ($17 & $$4) {
     $$0 = 0;
     break L3;
    }
    if ((HEAP8[$15 + 4 >> 0] | 0) == 8) if (HEAP32[$15 + 28 >> 2] | 0) {
     _sweeplist($L, $15 + 56 | 0, -3) | 0;
     _luaE_freeCI($15);
     if ((HEAP8[(HEAP32[$0 >> 2] | 0) + 62 >> 0] | 0) != 1) _luaD_shrinkstack($15);
    }
    HEAP8[$14 >> 0] = $17 & $$ | $$3;
    $$01$be = $15;
   } while (0);
   $15 = HEAP32[$$01$be >> 2] | 0;
   $62 = ($15 | 0) == 0;
   $not$ = $62 ^ 1;
   if (!(($$112 | 0) != 0 & $not$)) {
    $$01$lcssa = $$01$be;
    $$lcssa = $62;
    break L1;
   } else {
    $$0111 = $$01$be;
    $$112 = ($not$ << 31 >> 31) + $$112 | 0;
   }
  }
  return $$0 | 0;
 } else {
  $$01$lcssa = $p;
  $$lcssa = $11;
 } while (0);
 $$0 = $$lcssa ? 0 : $$01$lcssa;
 return $$0 | 0;
}

function _luaK_patchlist($fs, $list, $target) {
 $fs = $fs | 0;
 $list = $list | 0;
 $target = $target | 0;
 var $$0$i$i$i = 0, $$0$i$i1 = 0, $$02$i = 0, $$lcssa = 0, $$lcssa10 = 0, $11 = 0, $16 = 0, $26 = 0, $27 = 0, $29 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $48 = 0, $58 = 0, $6 = 0, $8 = 0, $9 = 0, $fs$idx$val$idx$val$i$i = 0, $fs$idx$val$idx$val$i$pre = 0, $list$0$i$i = 0, $list$0$i$i$lcssa = 0, $storemerge = 0, label = 0, $$02$i$looptemp = 0;
 if ((HEAP32[$fs + 20 >> 2] | 0) == ($target | 0)) {
  HEAP32[$fs + 24 >> 2] = $target;
  $4 = $fs + 28 | 0;
  if (($list | 0) == -1) return;
  $6 = HEAP32[$4 >> 2] | 0;
  if (($6 | 0) == -1) {
   HEAP32[$4 >> 2] = $list;
   return;
  }
  $fs$idx$val$idx$val$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
  $list$0$i$i = $6;
  while (1) {
   $8 = $fs$idx$val$idx$val$i$i + ($list$0$i$i << 2) | 0;
   $9 = HEAP32[$8 >> 2] | 0;
   $11 = ($9 >>> 14) + -131071 | 0;
   $$0$i$i$i = ($11 | 0) == -1 ? -1 : $list$0$i$i + 1 + $11 | 0;
   if (($$0$i$i$i | 0) == -1) {
    $$lcssa = $8;
    $$lcssa10 = $9;
    $list$0$i$i$lcssa = $list$0$i$i;
    break;
   } else $list$0$i$i = $$0$i$i$i;
  }
  $16 = ~$list$0$i$i$lcssa + $list | 0;
  if (((($16 | 0) > -1 ? $16 : 0 - $16 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
  HEAP32[$$lcssa >> 2] = ($16 << 14) + 2147467264 | $$lcssa10 & 16383;
  return;
 }
 if (($list | 0) == -1) return;
 $fs$idx$val$idx$val$i$pre = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $$02$i = $list;
 while (1) {
  $26 = $fs$idx$val$idx$val$i$pre + ($$02$i << 2) | 0;
  $27 = HEAP32[$26 >> 2] | 0;
  $29 = ($27 >>> 14) + -131071 | 0;
  $$02$i$looptemp = $$02$i;
  $$02$i = ($29 | 0) == -1 ? -1 : $$02$i + 1 + $29 | 0;
  if (($$02$i$looptemp | 0) > 0) {
   $34 = $fs$idx$val$idx$val$i$pre + ($$02$i$looptemp + -1 << 2) | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   if ((HEAP8[2216 + ($35 & 63) >> 0] | 0) < 0) {
    $$0$i$i1 = $34;
    $41 = $35;
   } else label = 14;
  } else label = 14;
  if ((label | 0) == 14) {
   label = 0;
   $$0$i$i1 = $26;
   $41 = $27;
  }
  if (($41 & 63 | 0) == 28) {
   HEAP32[$$0$i$i1 >> 2] = $41 & 8372224 | $41 >>> 23 << 6 | 27;
   $48 = ~$$02$i$looptemp + $target | 0;
   if (((($48 | 0) > -1 ? $48 : 0 - $48 | 0) | 0) > 131071) {
    label = 17;
    break;
   }
   $storemerge = HEAP32[$26 >> 2] & 16383 | ($48 << 14) + 2147467264;
  } else {
   $58 = ~$$02$i$looptemp + $target | 0;
   if (((($58 | 0) > -1 ? $58 : 0 - $58 | 0) | 0) > 131071) {
    label = 20;
    break;
   }
   $storemerge = $27 & 16383 | ($58 << 14) + 2147467264;
  }
  HEAP32[$26 >> 2] = $storemerge;
  if (($$02$i | 0) == -1) {
   label = 23;
   break;
  }
 }
 if ((label | 0) == 17) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else if ((label | 0) == 20) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16); else if ((label | 0) == 23) return;
}

function _db_getinfo($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ar = 0, $options$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 4 | 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 | 2;
 $5 = _luaL_optlstring($L, $3, 6696, 0) | 0;
 $6 = $4 + 1 | 0;
 do if (!(_lua_isnumber($L, $6) | 0)) {
  if ((_lua_type($L, $6) | 0) == 6) {
   HEAP32[$vararg_buffer >> 2] = $5;
   _lua_pushfstring($L, 6704, $vararg_buffer) | 0;
   $14 = _lua_tolstring($L, -1, 0) | 0;
   _lua_pushvalue($L, $6);
   _lua_xmove($L, $$0$i, 1);
   $options$0 = $14;
   break;
  }
  $$0 = _luaL_argerror($L, $6, 6712) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (!(_lua_getstack($$0$i, _lua_tointegerx($L, $6, 0) | 0, $ar) | 0)) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else $options$0 = $5; while (0);
 if (!(_lua_getinfo($$0$i, $options$0, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $3, 7576) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_createtable($L, 0, 2);
 if (_strchr($options$0, 83) | 0) {
  _lua_pushstring($L, HEAP32[$ar + 16 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 6744);
  _lua_pushstring($L, $ar + 36 | 0) | 0;
  _lua_setfield($L, -2, 6752);
  _lua_pushinteger($L, HEAP32[$ar + 24 >> 2] | 0);
  _lua_setfield($L, -2, 6768);
  _lua_pushinteger($L, HEAP32[$ar + 28 >> 2] | 0);
  _lua_setfield($L, -2, 6784);
  _lua_pushstring($L, HEAP32[$ar + 12 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 6800);
 }
 if (_strchr($options$0, 108) | 0) {
  _lua_pushinteger($L, HEAP32[$ar + 20 >> 2] | 0);
  _lua_setfield($L, -2, 6808);
 }
 if (_strchr($options$0, 117) | 0) {
  _lua_pushinteger($L, HEAPU8[$ar + 32 >> 0] | 0);
  _lua_setfield($L, -2, 6824);
  _lua_pushinteger($L, HEAPU8[$ar + 33 >> 0] | 0);
  _lua_setfield($L, -2, 6832);
  _lua_pushboolean($L, HEAP8[$ar + 34 >> 0] | 0);
  _lua_setfield($L, -2, 6840);
 }
 if (_strchr($options$0, 110) | 0) {
  _lua_pushstring($L, HEAP32[$ar + 4 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 6856);
  _lua_pushstring($L, HEAP32[$ar + 8 >> 2] | 0) | 0;
  _lua_setfield($L, -2, 6864);
 }
 if (_strchr($options$0, 116) | 0) {
  _lua_pushboolean($L, HEAP8[$ar + 35 >> 0] | 0);
  _lua_setfield($L, -2, 6880);
 }
 if (_strchr($options$0, 76) | 0) {
  if (($$0$i | 0) == ($L | 0)) {
   _lua_pushvalue($L, -2);
   _lua_remove($L, -3);
  } else _lua_xmove($$0$i, $L, 1);
  _lua_setfield($L, -2, 6896);
 }
 if (!(_strchr($options$0, 102) | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($$0$i | 0) == ($L | 0)) {
  _lua_pushvalue($L, -2);
  _lua_remove($L, -3);
 } else _lua_xmove($$0$i, $L, 1);
 _lua_setfield($L, -2, 6912);
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaC_fullgc($L, $isemergency) {
 $L = $L | 0;
 $isemergency = $isemergency | 0;
 var $$lcssa = 0, $$lcssa19 = 0, $$op$i = 0, $$pre = 0, $$pre13 = 0, $0 = 0, $1 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $32 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $57 = 0, $6 = 0, $66 = 0, $67 = 0, $69 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 62 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = ($isemergency | 0) != 0;
 if ($4) {
  HEAP8[$2 >> 0] = 1;
  label = 6;
 } else {
  HEAP8[$2 >> 0] = 0;
  $5 = $1 + 104 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) label = 6; else {
   $9 = $6;
   do {
    $8 = $9 + 5 | 0;
    HEAP8[$8 >> 0] = HEAPU8[$8 >> 0] & 191;
    _GCTM($L, 1);
    $9 = HEAP32[$5 >> 2] | 0;
   } while (($9 | 0) != 0);
   if ((HEAP8[$2 >> 0] | 0) == 2) label = 7; else label = 6;
  }
 }
 if ((label | 0) == 6) if ((HEAPU8[$1 + 61 >> 0] | 0) < 2) label = 7;
 if ((label | 0) == 7) {
  $20 = HEAP32[$0 >> 2] | 0;
  HEAP8[$20 + 61 >> 0] = 2;
  HEAP32[$20 + 64 >> 2] = 0;
  $23 = $20 + 72 | 0;
  do $24 = _sweeplist($L, $23, 1) | 0; while (($24 | 0) == ($23 | 0));
  $$lcssa19 = $24;
  HEAP32[$20 + 80 >> 2] = $$lcssa19;
  $27 = $20 + 68 | 0;
  do $28 = _sweeplist($L, $27, 1) | 0; while (($28 | 0) == ($27 | 0));
  $$lcssa = $28;
  HEAP32[$20 + 76 >> 2] = $$lcssa;
 }
 $31 = HEAP32[$0 >> 2] | 0;
 $32 = $31 + 61 | 0;
 if ((HEAP8[$32 >> 0] | 0) == 5) {
  $38 = $31;
  $40 = 5;
 } else {
  do _singlestep($L) | 0; while ((HEAP8[$32 >> 0] | 0) != 5);
  $$pre = HEAP32[$0 >> 2] | 0;
  $38 = $$pre;
  $40 = HEAP8[$$pre + 61 >> 0] | 0;
 }
 $37 = $38 + 61 | 0;
 if (!(1 << ($40 & 255) & -33)) {
  do _singlestep($L) | 0; while ((1 << HEAPU8[$37 >> 0] & -33 | 0) == 0);
  $$pre13 = HEAP32[$0 >> 2] | 0;
  $50 = $$pre13;
  $51 = HEAP8[$$pre13 + 61 >> 0] | 0;
 } else {
  $50 = $38;
  $51 = $40;
 }
 $49 = $50 + 61 | 0;
 if ($51 << 24 >> 24 != 5) do _singlestep($L) | 0; while ((HEAP8[$49 >> 0] | 0) != 5);
 if ($3 << 24 >> 24 == 2) {
  $57 = (HEAP32[$0 >> 2] | 0) + 61 | 0;
  if (HEAP8[$57 >> 0] | 0) do _singlestep($L) | 0; while ((HEAP8[$57 >> 0] | 0) != 0);
 }
 HEAP8[$2 >> 0] = $3;
 $66 = (HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) | 0;
 $67 = ($66 | 0) / 100 | 0;
 $69 = HEAP32[$1 + 156 >> 2] | 0;
 $$op$i = Math_imul($69, 0 - $67 | 0) | 0;
 _luaE_setdebt($1, (($69 | 0) < (2147483644 / ($67 | 0) | 0 | 0) ? $$op$i : -2147483644) + $66 | 0);
 if ($4) return;
 $75 = (HEAP32[$0 >> 2] | 0) + 104 | 0;
 $76 = HEAP32[$75 >> 2] | 0;
 if (!$76) return; else $79 = $76;
 do {
  $78 = $79 + 5 | 0;
  HEAP8[$78 >> 0] = HEAPU8[$78 >> 0] & 191;
  _GCTM($L, 1);
  $79 = HEAP32[$75 >> 2] | 0;
 } while (($79 | 0) != 0);
 return;
}

function _lua_setupvalue($L, $funcindex, $n) {
 $L = $L | 0;
 $funcindex = $funcindex | 0;
 $n = $n | 0;
 var $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$cast = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $32 = 0, $4 = 0, $42 = 0, $44 = 0, $49 = 0, $51 = 0, $53 = 0, $57 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $71 = 0, $72 = 0, $79 = 0, $84 = 0, $89 = 0, $90 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($funcindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($funcindex << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($funcindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($funcindex << 4) | 0;
   break;
  }
  if (($funcindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $funcindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 63;
 do if (($31 | 0) == 6) {
  $42 = HEAP32[$$0$i >> 2] | 0;
  $44 = HEAP32[$42 + 12 >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAP32[$44 + 40 >> 2] | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  $49 = $n + -1 | 0;
  $51 = HEAP32[$42 + 16 + ($49 << 2) >> 2] | 0;
  $53 = HEAP32[$51 + 8 >> 2] | 0;
  $$cast = $51;
  $57 = HEAP32[(HEAP32[$44 + 28 >> 2] | 0) + ($49 << 3) >> 2] | 0;
  if (!$57) {
   $$0$i16 = 10072;
   $63 = $53;
   $89 = $$cast;
  } else {
   $$0$i16 = $57 + 16 | 0;
   $63 = $53;
   $89 = $$cast;
  }
 } else if (($31 | 0) == 38) {
  $32 = HEAP32[$$0$i >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAPU8[$32 + 6 >> 0] | 0 | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $$0$i16 = 10072;
   $63 = $32 + 16 + ($n + -1 << 4) | 0;
   $89 = $32;
   break;
  }
 } else {
  $$0$i12 = 0;
  return $$0$i12 | 0;
 } while (0);
 $60 = $L + 8 | 0;
 $61 = HEAP32[$60 >> 2] | 0;
 $62 = $61 + -16 | 0;
 HEAP32[$60 >> 2] = $62;
 $66 = $62;
 $71 = HEAP32[$66 + 4 >> 2] | 0;
 $72 = $63;
 HEAP32[$72 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$72 + 4 >> 2] = $71;
 HEAP32[$63 + 8 >> 2] = HEAP32[$61 + -8 >> 2];
 $79 = HEAP32[$60 >> 2] | 0;
 if (!(HEAP32[$79 + 8 >> 2] & 64)) {
  $$0$i12 = $$0$i16;
  return $$0$i12 | 0;
 }
 $84 = HEAP32[$79 >> 2] | 0;
 if (!(HEAP8[$84 + 5 >> 0] & 3)) {
  $$0$i12 = $$0$i16;
  return $$0$i12 | 0;
 }
 $90 = $89;
 if (!(HEAP8[$90 + 5 >> 0] & 4)) {
  $$0$i12 = $$0$i16;
  return $$0$i12 | 0;
 }
 _luaC_barrier_($L, $90, $84);
 $$0$i12 = $$0$i16;
 return $$0$i12 | 0;
}

function _lexerror($ls, $msg, $token) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 $token = $token | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $41 = 0, $44 = 0, $6 = 0, $7 = 0, $9 = 0, $buff = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer15 = sp + 48 | 0;
 $vararg_buffer12 = sp + 40 | 0;
 $vararg_buffer9 = sp + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $buff = sp + 56 | 0;
 _luaO_chunkid($buff, (HEAP32[$ls + 68 >> 2] | 0) + 16 | 0, 60);
 $3 = $ls + 52 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $6 = HEAP32[$ls + 4 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = $buff;
 HEAP32[$vararg_buffer + 4 >> 2] = $6;
 HEAP32[$vararg_buffer + 8 >> 2] = $msg;
 $7 = _luaO_pushfstring($4, 1512, $vararg_buffer) | 0;
 if (!$token) {
  $44 = HEAP32[$3 >> 2] | 0;
  _luaD_throw($44, 3);
 }
 $9 = HEAP32[$3 >> 2] | 0;
 do if (($token + -287 | 0) >>> 0 < 3) {
  $10 = $ls + 60 | 0;
  $11 = HEAP32[$10 >> 2] | 0;
  $12 = $11 + 4 | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  $15 = $11 + 8 | 0;
  $16 = HEAP32[$15 >> 2] | 0;
  do if (($13 + 1 | 0) >>> 0 > $16 >>> 0) {
   if ($16 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
   $19 = $16 << 1;
   if (($19 | 0) == -2) _luaM_toobig($9); else {
    $22 = _luaM_realloc_($9, HEAP32[$11 >> 2] | 0, $16, $19) | 0;
    HEAP32[$11 >> 2] = $22;
    HEAP32[$15 >> 2] = $19;
    $24 = HEAP32[$12 >> 2] | 0;
    $26 = $22;
    break;
   }
  } else {
   $24 = $13;
   $26 = HEAP32[$11 >> 2] | 0;
  } while (0);
  HEAP32[$12 >> 2] = $24 + 1;
  HEAP8[$26 + $24 >> 0] = 0;
  $27 = HEAP32[$3 >> 2] | 0;
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[HEAP32[$10 >> 2] >> 2];
  $$0$i = _luaO_pushfstring($27, 1184, $vararg_buffer3) | 0;
 } else {
  if (($token | 0) >= 257) {
   $41 = HEAP32[1024 + ($token + -257 << 2) >> 2] | 0;
   if (($token | 0) >= 286) {
    $$0$i = $41;
    break;
   }
   HEAP32[$vararg_buffer12 >> 2] = $41;
   $$0$i = _luaO_pushfstring($9, 1184, $vararg_buffer12) | 0;
   break;
  }
  if (!(HEAP8[136 + ($token + 1) >> 0] & 4)) {
   HEAP32[$vararg_buffer9 >> 2] = $token;
   $$0$i = _luaO_pushfstring($9, 1168, $vararg_buffer9) | 0;
   break;
  } else {
   HEAP32[$vararg_buffer6 >> 2] = $token;
   $$0$i = _luaO_pushfstring($9, 1160, $vararg_buffer6) | 0;
   break;
  }
 } while (0);
 HEAP32[$vararg_buffer15 >> 2] = $7;
 HEAP32[$vararg_buffer15 + 4 >> 2] = $$0$i;
 _luaO_pushfstring($9, 1528, $vararg_buffer15) | 0;
 $44 = HEAP32[$3 >> 2] | 0;
 _luaD_throw($44, 3);
}

function _newupvalue($fs, $name, $v) {
 $fs = $fs | 0;
 $name = $name | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $11 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $5 = 0, $57 = 0, $58 = 0, $59 = 0, $8 = 0, $oldsize$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$fs >> 2] | 0;
 $1 = $0 + 40 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = $fs + 47 | 0;
 $5 = HEAPU8[$3 >> 0] | 0;
 if (($5 + 1 | 0) >>> 0 > 255) {
  $8 = $fs + 12 | 0;
  $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] | 0;
  $13 = HEAP32[$0 + 64 >> 2] | 0;
  if (!$13) {
   $16 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2976;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 255;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $16;
   $17 = _luaO_pushfstring($11, 2480, $vararg_buffer1) | 0;
   $18 = HEAP32[$8 >> 2] | 0;
   _luaX_syntaxerror($18, $17);
  }
  HEAP32[$vararg_buffer >> 2] = $13;
  $16 = _luaO_pushfstring($11, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2976;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 255;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $16;
  $17 = _luaO_pushfstring($11, 2480, $vararg_buffer1) | 0;
  $18 = HEAP32[$8 >> 2] | 0;
  _luaX_syntaxerror($18, $17);
 }
 if (($5 | 0) < ($2 | 0)) $28 = $2; else {
  $24 = $0 + 28 | 0;
  HEAP32[$24 >> 2] = _luaM_growaux_(HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0, HEAP32[$24 >> 2] | 0, $1, 8, 255, 2976) | 0;
  $28 = HEAP32[$1 >> 2] | 0;
 }
 $30 = HEAP32[$0 + 28 >> 2] | 0;
 if (($2 | 0) < ($28 | 0)) {
  $oldsize$01 = $2;
  do {
   HEAP32[$30 + ($oldsize$01 << 3) >> 2] = 0;
   $oldsize$01 = $oldsize$01 + 1 | 0;
  } while (($oldsize$01 | 0) < ($28 | 0));
 }
 $37 = HEAP8[$3 >> 0] | 0;
 $38 = $37 & 255;
 HEAP8[$30 + ($38 << 3) + 4 >> 0] = (HEAP32[$v >> 2] | 0) == 7 & 1;
 HEAP8[$30 + ($38 << 3) + 5 >> 0] = HEAP32[$v + 8 >> 2];
 HEAP32[$30 + ($38 << 3) >> 2] = $name;
 if (!(HEAP8[$name + 5 >> 0] & 3)) {
  $58 = $37;
  $57 = $58 + 1 << 24 >> 24;
  HEAP8[$3 >> 0] = $57;
  $59 = $58 & 255;
  STACKTOP = sp;
  return $59 | 0;
 }
 if (!(HEAP8[$0 + 5 >> 0] & 4)) {
  $58 = $37;
  $57 = $58 + 1 << 24 >> 24;
  HEAP8[$3 >> 0] = $57;
  $59 = $58 & 255;
  STACKTOP = sp;
  return $59 | 0;
 }
 _luaC_barrier_(HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0, $0, $name);
 $58 = HEAP8[$3 >> 0] | 0;
 $57 = $58 + 1 << 24 >> 24;
 HEAP8[$3 >> 0] = $57;
 $59 = $58 & 255;
 STACKTOP = sp;
 return $59 | 0;
}

function _luaH_get($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $24 = 0.0, $26 = 0, $27 = 0.0, $29 = 0, $3 = 0, $40 = 0, $42 = 0, $i$1$i$i = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $n$0$i1 = 0, $n$0$i1$lcssa = 0, $n1$0 = 0, $n1$0$lcssa = 0, $u$sroa$0 = 0, $u$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $u$sroa$0$i$i = sp + 8 | 0;
 $u$sroa$0 = sp;
 $0 = $key + 8 | 0;
 $2 = HEAP32[$0 >> 2] & 63;
 if (($2 | 0) == 3) {
  $24 = +HEAPF64[$key >> 3];
  HEAPF64[$u$sroa$0 >> 3] = $24 + 6755399441055744.0;
  $26 = HEAP32[$u$sroa$0 >> 2] | 0;
  $27 = +($26 | 0);
  if ($27 == $24) {
   $29 = $26 + -1 | 0;
   if ($29 >>> 0 < (HEAP32[$t + 28 >> 2] | 0) >>> 0) {
    $$0 = (HEAP32[$t + 12 >> 2] | 0) + ($29 << 4) | 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAPF64[$u$sroa$0$i$i >> 3] = $27 + 1.0;
   $40 = (HEAP32[$u$sroa$0$i$i + 4 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i >> 2] | 0) | 0;
   if (($40 | 0) < 0) {
    $42 = 0 - $40 | 0;
    $i$1$i$i = ($40 | 0) == ($42 | 0) ? 0 : $42;
   } else $i$1$i$i = $40;
   $n$0$i1 = (HEAP32[$t + 16 >> 2] | 0) + ((($i$1$i$i | 0) % ((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
   while (1) {
    if ((HEAP32[$n$0$i1 + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i1 + 16 >> 3] == $27) {
     $n$0$i1$lcssa = $n$0$i1;
     break;
    }
    $n$0$i1 = HEAP32[$n$0$i1 + 28 >> 2] | 0;
    if (!$n$0$i1) {
     $$0 = 1832;
     label = 22;
     break;
    }
   }
   if ((label | 0) == 22) {
    STACKTOP = sp;
    return $$0 | 0;
   }
   $$0 = $n$0$i1$lcssa;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if (!$2) {
  $$0 = 1832;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($2 | 0) == 4) {
  $3 = HEAP32[$key >> 2] | 0;
  $n$0$i = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & HEAP32[$3 + 8 >> 2]) << 5) | 0;
  while (1) {
   if ((HEAP32[$n$0$i + 24 >> 2] | 0) == 68) if ((HEAP32[$n$0$i + 16 >> 2] | 0) == ($3 | 0)) {
    $n$0$i$lcssa = $n$0$i;
    break;
   }
   $n$0$i = HEAP32[$n$0$i + 28 >> 2] | 0;
   if (!$n$0$i) {
    $$0 = 1832;
    label = 22;
    break;
   }
  }
  if ((label | 0) == 22) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  $$0 = $n$0$i$lcssa;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $n1$0 = _mainposition($t, $key) | 0;
 while (1) {
  if ((HEAP32[$n1$0 + 24 >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) if (_luaV_equalobj_(0, $n1$0 + 16 | 0, $key) | 0) {
   $n1$0$lcssa = $n1$0;
   break;
  }
  $n1$0 = HEAP32[$n1$0 + 28 >> 2] | 0;
  if (!$n1$0) {
   $$0 = 1832;
   label = 22;
   break;
  }
 }
 if ((label | 0) == 22) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = $n1$0$lcssa;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_newthread($L) {
 $L = $L | 0;
 var $0 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $30 = 0, $33 = 0, $34 = 0, $5 = 0, $6 = 0, $7 = 0, $77 = 0;
 $0 = $L + 12 | 0;
 if ((HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaC_newobj($L, 8, 112, 0, 0) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 8 >> 2] = 72;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 16;
 HEAP32[$5 + 12 >> 2] = HEAP32[$0 >> 2];
 $13 = $5 + 28 | 0;
 HEAP32[$13 >> 2] = 0;
 $14 = $5 + 16 | 0;
 HEAP32[$14 >> 2] = 0;
 $15 = $5 + 32 | 0;
 HEAP32[$15 >> 2] = 0;
 HEAP32[$5 + 64 >> 2] = 0;
 HEAP16[$5 + 38 >> 1] = 0;
 $18 = $5 + 52 | 0;
 HEAP32[$18 >> 2] = 0;
 $19 = $5 + 40 | 0;
 HEAP8[$19 >> 0] = 0;
 $20 = $5 + 44 | 0;
 HEAP32[$20 >> 2] = 0;
 HEAP8[$5 + 41 >> 0] = 1;
 HEAP32[$5 + 56 >> 2] = 0;
 HEAP16[$5 + 36 >> 1] = 1;
 HEAP8[$5 + 6 >> 0] = 0;
 HEAP32[$5 + 68 >> 2] = 0;
 HEAP8[$19 >> 0] = HEAP8[$L + 40 >> 0] | 0;
 $30 = HEAP32[$L + 44 >> 2] | 0;
 HEAP32[$20 >> 2] = $30;
 HEAP32[$18 >> 2] = HEAP32[$L + 52 >> 2];
 HEAP32[$5 + 48 >> 2] = $30;
 $33 = _luaM_realloc_($L, 0, 0, 640) | 0;
 HEAP32[$13 >> 2] = $33;
 HEAP32[$15 >> 2] = 40;
 $34 = $33 + 8 | 0;
 HEAP32[$34 >> 2] = 0;
 HEAP32[$33 + 24 >> 2] = 0;
 HEAP32[$33 + 40 >> 2] = 0;
 HEAP32[$33 + 56 >> 2] = 0;
 HEAP32[$33 + 72 >> 2] = 0;
 HEAP32[$33 + 88 >> 2] = 0;
 HEAP32[$33 + 104 >> 2] = 0;
 HEAP32[$33 + 120 >> 2] = 0;
 HEAP32[$33 + 136 >> 2] = 0;
 HEAP32[$33 + 152 >> 2] = 0;
 HEAP32[$33 + 168 >> 2] = 0;
 HEAP32[$33 + 184 >> 2] = 0;
 HEAP32[$33 + 200 >> 2] = 0;
 HEAP32[$33 + 216 >> 2] = 0;
 HEAP32[$33 + 232 >> 2] = 0;
 HEAP32[$33 + 248 >> 2] = 0;
 HEAP32[$33 + 264 >> 2] = 0;
 HEAP32[$33 + 280 >> 2] = 0;
 HEAP32[$33 + 296 >> 2] = 0;
 HEAP32[$33 + 312 >> 2] = 0;
 HEAP32[$33 + 328 >> 2] = 0;
 HEAP32[$33 + 344 >> 2] = 0;
 HEAP32[$33 + 360 >> 2] = 0;
 HEAP32[$33 + 376 >> 2] = 0;
 HEAP32[$33 + 392 >> 2] = 0;
 HEAP32[$33 + 408 >> 2] = 0;
 HEAP32[$33 + 424 >> 2] = 0;
 HEAP32[$33 + 440 >> 2] = 0;
 HEAP32[$33 + 456 >> 2] = 0;
 HEAP32[$33 + 472 >> 2] = 0;
 HEAP32[$33 + 488 >> 2] = 0;
 HEAP32[$33 + 504 >> 2] = 0;
 HEAP32[$33 + 520 >> 2] = 0;
 HEAP32[$33 + 536 >> 2] = 0;
 HEAP32[$33 + 552 >> 2] = 0;
 HEAP32[$33 + 568 >> 2] = 0;
 HEAP32[$33 + 584 >> 2] = 0;
 HEAP32[$33 + 600 >> 2] = 0;
 HEAP32[$33 + 616 >> 2] = 0;
 HEAP32[$33 + 632 >> 2] = 0;
 HEAP32[$5 + 24 >> 2] = $33 + 560;
 $77 = $5 + 72 | 0;
 HEAP32[$5 + 80 >> 2] = 0;
 HEAP32[$5 + 84 >> 2] = 0;
 HEAP8[$5 + 90 >> 0] = 0;
 HEAP32[$77 >> 2] = $33;
 HEAP32[$5 + 8 >> 2] = $33 + 16;
 HEAP32[$34 >> 2] = 0;
 HEAP32[$5 + 76 >> 2] = $33 + 336;
 HEAP32[$14 >> 2] = $77;
 return $5 | 0;
}

function _luaC_forcestep($L) {
 $L = $L | 0;
 var $$$i = 0, $$op$i$i = 0, $$op$i$i2 = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $13 = 0, $19 = 0, $21 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $38 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $5 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $69 = 0, $9 = 0, $debt$0$i = 0, $i$07 = 0, label = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 do if ((HEAP8[$1 + 62 >> 0] | 0) == 2) {
  $5 = $1 + 20 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  do if (!$6) {
   _luaC_fullgc($L, 0);
   $9 = HEAP32[$1 + 8 >> 2] | 0;
   $11 = HEAP32[$1 + 12 >> 2] | 0;
   HEAP32[$5 >> 2] = $11 + $9;
   $29 = $11;
   $30 = $9;
  } else {
   $13 = $1 + 61 | 0;
   if ((HEAP8[$13 >> 0] | 0) != 5) do _singlestep($L) | 0; while ((HEAP8[$13 >> 0] | 0) != 5);
   HEAP8[$13 >> 0] = 0;
   $19 = HEAP32[$1 + 8 >> 2] | 0;
   $21 = HEAP32[$1 + 12 >> 2] | 0;
   if (($21 + $19 | 0) >>> 0 > (Math_imul(HEAP32[$1 + 160 >> 2] | 0, ($6 >>> 0) / 100 | 0) | 0) >>> 0) {
    HEAP32[$5 >> 2] = 0;
    $29 = $21;
    $30 = $19;
    break;
   } else {
    HEAP32[$5 >> 2] = $6;
    $29 = $21;
    $30 = $19;
    break;
   }
  } while (0);
  $28 = $30 + $29 | 0;
  $31 = ($28 | 0) / 100 | 0;
  $33 = HEAP32[$1 + 156 >> 2] | 0;
  $$op$i$i = Math_imul($33, 0 - $31 | 0) | 0;
  _luaE_setdebt($1, (($33 | 0) < (2147483644 / ($31 | 0) | 0 | 0) ? $$op$i$i : -2147483644) + $28 | 0);
  $$pre$phiZ2D = $1 + 61 | 0;
 } else {
  $38 = $1 + 12 | 0;
  $41 = HEAP32[$1 + 164 >> 2] | 0;
  $$$i = ($41 | 0) < 40 ? 40 : $41;
  $44 = ((HEAP32[$38 >> 2] | 0) / 200 | 0) + 1 | 0;
  $47 = Math_imul($44, $$$i) | 0;
  $48 = $1 + 61 | 0;
  $debt$0$i = ($44 | 0) < (2147483644 / ($$$i | 0) | 0 | 0) ? $47 : 2147483644;
  do {
   $debt$0$i = $debt$0$i - (_singlestep($L) | 0) | 0;
   $53 = (HEAP8[$48 >> 0] | 0) == 5;
   if (($debt$0$i | 0) <= -1600) {
    label = 13;
    break;
   }
  } while (!$53);
  if ((label | 0) == 13) if (!$53) {
   _luaE_setdebt($1, (($debt$0$i | 0) / ($$$i | 0) | 0) * 200 | 0);
   $$pre$phiZ2D = $48;
   break;
  }
  $56 = (HEAP32[$1 + 20 >> 2] | 0) / 100 | 0;
  $58 = HEAP32[$1 + 156 >> 2] | 0;
  $$op$i$i2 = Math_imul($58, 0 - $56 | 0) | 0;
  _luaE_setdebt($1, (HEAP32[$38 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) + (($58 | 0) < (2147483644 / ($56 | 0) | 0 | 0) ? $$op$i$i2 : -2147483644) | 0);
  $$pre$phiZ2D = $48;
 } while (0);
 $69 = $1 + 104 | 0;
 if (!(HEAP32[$69 >> 2] | 0)) return; else $i$07 = 0;
 while (1) {
  if (($i$07 | 0) >= 4) if ((HEAP8[$$pre$phiZ2D >> 0] | 0) != 5) {
   label = 20;
   break;
  }
  _GCTM($L, 1);
  if (!(HEAP32[$69 >> 2] | 0)) {
   label = 20;
   break;
  } else $i$07 = $i$07 + 1 | 0;
 }
 if ((label | 0) == 20) return;
}

function _luaV_finishOp($L) {
 $L = $L | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0, $53 = 0, $54 = 0, $57 = 0, $61 = 0, $63 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $89 = 0, $9 = 0, $90 = 0, $res$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = $1 + 24 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $1 + 28 | 0;
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + -4 >> 2] | 0;
 $8 = $7 & 63;
 switch ($8 | 0) {
 case 34:
  {
   HEAP32[$L + 8 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 case 24:
 case 25:
 case 26:
  {
   $28 = $L + 8 | 0;
   $29 = HEAP32[$28 >> 2] | 0;
   $31 = HEAP32[$29 + -8 >> 2] | 0;
   if (!$31) $38 = 1; else if (($31 | 0) == 1) $38 = (HEAP32[$29 + -16 >> 2] | 0) == 0; else $38 = 0;
   $37 = $38 & 1;
   $39 = $37 ^ 1;
   HEAP32[$28 >> 2] = $29 + -16;
   if (($8 | 0) == 26) {
    $47 = (HEAP32[(_luaT_gettmbyobj($L, $3 + ($7 >>> 23 << 4) | 0, 14) | 0) + 8 >> 2] | 0) == 0;
    $res$0 = $47 ? $37 : $39;
   } else $res$0 = $39;
   if (($res$0 | 0) == ($7 >>> 6 & 255 | 0)) return;
   HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 4;
   return;
  }
 case 22:
  {
   $53 = $L + 8 | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   $57 = $54 + -32 | 0;
   $61 = $57 - ($3 + ($7 >>> 23 << 4)) | 0;
   $63 = $54 + -16 | 0;
   $68 = HEAP32[$63 + 4 >> 2] | 0;
   $69 = $54 + -48 | 0;
   HEAP32[$69 >> 2] = HEAP32[$63 >> 2];
   HEAP32[$69 + 4 >> 2] = $68;
   HEAP32[$54 + -40 >> 2] = HEAP32[$54 + -8 >> 2];
   if (($61 | 0) > 16) {
    HEAP32[$53 >> 2] = $57;
    _luaV_concat($L, $61 >> 4);
   }
   $78 = HEAP32[$53 >> 2] | 0;
   $80 = HEAP32[$2 >> 2] | 0;
   $82 = $7 >>> 6 & 255;
   $84 = $78 + -16 | 0;
   $89 = HEAP32[$84 + 4 >> 2] | 0;
   $90 = $80 + ($82 << 4) | 0;
   HEAP32[$90 >> 2] = HEAP32[$84 >> 2];
   HEAP32[$90 + 4 >> 2] = $89;
   HEAP32[$80 + ($82 << 4) + 8 >> 2] = HEAP32[$78 + -8 >> 2];
   HEAP32[$53 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 case 12:
 case 7:
 case 6:
 case 21:
 case 19:
 case 18:
 case 17:
 case 16:
 case 15:
 case 14:
 case 13:
  {
   $9 = $L + 8 | 0;
   $10 = HEAP32[$9 >> 2] | 0;
   $11 = $10 + -16 | 0;
   HEAP32[$9 >> 2] = $11;
   $13 = $7 >>> 6 & 255;
   $15 = $11;
   $20 = HEAP32[$15 + 4 >> 2] | 0;
   $21 = $3 + ($13 << 4) | 0;
   HEAP32[$21 >> 2] = HEAP32[$15 >> 2];
   HEAP32[$21 + 4 >> 2] = $20;
   HEAP32[$3 + ($13 << 4) + 8 >> 2] = HEAP32[$10 + -8 >> 2];
   return;
  }
 case 29:
  {
   if (!($7 & 8372224)) return;
   HEAP32[$L + 8 >> 2] = HEAP32[$1 + 4 >> 2];
   return;
  }
 default:
  return;
 }
}

function _luaG_typeerror($L, $o, $op) {
 $L = $L | 0;
 $o = $o | 0;
 $op = $op | 0;
 var $$0$i$i = 0, $1 = 0, $13 = 0, $15 = 0, $17 = 0, $28 = 0, $32 = 0, $34 = 0, $40 = 0, $54 = 0, $56 = 0, $7 = 0, $i$02$i = 0, $i$02$i$lcssa = 0, $kind$06 = 0, $name = 0, $p$01$i = 0, $vararg_buffer = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer = sp;
 $name = sp + 24 | 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 HEAP32[$name >> 2] = 0;
 $7 = HEAP32[3136 + ((HEAP32[$o + 8 >> 2] & 15) + 1 << 2) >> 2] | 0;
 L1 : do if (HEAP8[$1 + 18 >> 0] & 1) {
  $13 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0;
  $15 = HEAP8[$13 + 6 >> 0] | 0;
  L3 : do if ($15 << 24 >> 24) {
   $17 = $15 & 255;
   $i$02$i = 0;
   while (1) {
    if ((HEAP32[(HEAP32[$13 + 16 + ($i$02$i << 2) >> 2] | 0) + 8 >> 2] | 0) == ($o | 0)) {
     $i$02$i$lcssa = $i$02$i;
     break;
    }
    $i$02$i = $i$02$i + 1 | 0;
    if (($i$02$i | 0) >= ($17 | 0)) break L3;
   }
   $28 = HEAP32[(HEAP32[(HEAP32[$13 + 12 >> 2] | 0) + 28 >> 2] | 0) + ($i$02$i$lcssa << 3) >> 2] | 0;
   $$0$i$i = ($28 | 0) == 0 ? 11136 : $28 + 16 | 0;
   HEAP32[$name >> 2] = $$0$i$i;
   $56 = $$0$i$i;
   $kind$06 = 504;
   HEAP32[$vararg_buffer >> 2] = $op;
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   HEAP32[$vararg_ptr1 >> 2] = $kind$06;
   $vararg_ptr2 = $vararg_buffer + 8 | 0;
   HEAP32[$vararg_ptr2 >> 2] = $56;
   $vararg_ptr3 = $vararg_buffer + 12 | 0;
   HEAP32[$vararg_ptr3 >> 2] = $7;
   _luaG_runerror($L, 512, $vararg_buffer);
  } while (0);
  $32 = HEAP32[$1 + 24 >> 2] | 0;
  $34 = HEAP32[$1 + 4 >> 2] | 0;
  if ($32 >>> 0 < $34 >>> 0) {
   $p$01$i = $32;
   while (1) {
    if (($p$01$i | 0) == ($o | 0)) break;
    $p$01$i = $p$01$i + 16 | 0;
    if ($p$01$i >>> 0 >= $34 >>> 0) break L1;
   }
   $40 = HEAP32[$13 + 12 >> 2] | 0;
   $54 = _getobjname($40, ((HEAP32[$1 + 28 >> 2] | 0) - (HEAP32[$40 + 12 >> 2] | 0) >> 2) + -1 | 0, $o - $32 >> 4, $name) | 0;
   if ($54) {
    $56 = HEAP32[$name >> 2] | 0;
    $kind$06 = $54;
    HEAP32[$vararg_buffer >> 2] = $op;
    $vararg_ptr1 = $vararg_buffer + 4 | 0;
    HEAP32[$vararg_ptr1 >> 2] = $kind$06;
    $vararg_ptr2 = $vararg_buffer + 8 | 0;
    HEAP32[$vararg_ptr2 >> 2] = $56;
    $vararg_ptr3 = $vararg_buffer + 12 | 0;
    HEAP32[$vararg_ptr3 >> 2] = $7;
    _luaG_runerror($L, 512, $vararg_buffer);
   }
  }
 } while (0);
 HEAP32[$vararg_buffer4 >> 2] = $op;
 HEAP32[$vararg_buffer4 + 4 >> 2] = $7;
 _luaG_runerror($L, 552, $vararg_buffer4);
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if ($4 & ($src & 3 | 0) != 0) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa44 = $$019;
    $s$0$lcssa43 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if ($13 & ($8 & 3 | 0) != 0) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa44 = $$0$lcssa;
  $s$0$lcssa43 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa44;
   $s$2 = $s$0$lcssa43;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa44 >>> 0 > 3) {
    $$110 = $$0$lcssa44;
    $w$011 = $s$0$lcssa43;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
      $$110$lcssa = $$110;
      $w$011$lcssa = $w$011;
      break;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      label = 11;
      break L11;
     }
    }
    $$24 = $$110$lcssa;
    $s$15 = $w$011$lcssa;
   } else {
    $$1$lcssa = $$0$lcssa44;
    $w$0$lcssa = $s$0$lcssa43;
    label = 11;
   } while (0);
   if ((label | 0) == 11) if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
    break;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
   }
   while (1) {
    if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
     $$3 = $$24;
     $s$2 = $s$15;
     break L8;
    }
    $32 = $s$15 + 1 | 0;
    $$24 = $$24 + -1 | 0;
    if (!$$24) {
     $$3 = 0;
     $s$2 = $32;
     break;
    } else $s$15 = $32;
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}

function _luaS_newlstr($L, $str, $l) {
 $L = $L | 0;
 $str = $str | 0;
 $l = $l | 0;
 var $$0 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $37 = 0, $40 = 0, $49 = 0, $5 = 0, $55 = 0, $58 = 0, $60 = 0, $64 = 0, $7 = 0, $73 = 0, $75 = 0, $79 = 0, $h$0$lcssa$i$i = 0, $h$02$i$i = 0, $l1$01$i$i = 0, $o$03$i = 0, $o$04$i = 0, $o$04$i$lcssa = 0;
 if ($l >>> 0 >= 41) {
  if (($l + 1 | 0) >>> 0 > 4294967277) _luaM_toobig($L);
  $73 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 56 >> 2] | 0;
  $75 = _luaC_newobj($L, 20, $l + 17 | 0, 0, 0) | 0;
  HEAP32[$75 + 12 >> 2] = $l;
  HEAP32[$75 + 8 >> 2] = $73;
  HEAP8[$75 + 6 >> 0] = 0;
  $79 = $75 + 16 | 0;
  _memcpy($79 | 0, $str | 0, $l | 0) | 0;
  HEAP8[$79 + $l >> 0] = 0;
  $$0 = $75;
  return $$0 | 0;
 }
 $2 = HEAP32[$L + 12 >> 2] | 0;
 $5 = HEAP32[$2 + 56 >> 2] ^ $l;
 $7 = ($l >>> 5) + 1 | 0;
 if ($7 >>> 0 > $l >>> 0) $h$0$lcssa$i$i = $5; else {
  $h$02$i$i = $5;
  $l1$01$i$i = $l;
  while (1) {
   $17 = ($h$02$i$i << 5) + ($h$02$i$i >>> 2) + (HEAPU8[$str + ($l1$01$i$i + -1) >> 0] | 0) ^ $h$02$i$i;
   $l1$01$i$i = $l1$01$i$i - $7 | 0;
   if ($l1$01$i$i >>> 0 < $7 >>> 0) {
    $h$0$lcssa$i$i = $17;
    break;
   } else $h$02$i$i = $17;
  }
 }
 $20 = $2 + 32 | 0;
 $21 = HEAP32[$20 >> 2] | 0;
 $24 = $2 + 24 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $o$03$i = HEAP32[$25 + (($21 + -1 & $h$0$lcssa$i$i) << 2) >> 2] | 0;
 L12 : do if ($o$03$i) {
  $o$04$i = $o$03$i;
  while (1) {
   if (($h$0$lcssa$i$i | 0) == (HEAP32[$o$04$i + 8 >> 2] | 0)) if ((HEAP32[$o$04$i + 12 >> 2] | 0) == ($l | 0)) if (!(_memcmp($str, $o$04$i + 16 | 0, $l) | 0)) {
    $o$04$i$lcssa = $o$04$i;
    break;
   }
   $o$04$i = HEAP32[$o$04$i >> 2] | 0;
   if (!$o$04$i) break L12;
  }
  $37 = $o$04$i$lcssa + 5 | 0;
  $40 = (HEAPU8[$37 >> 0] | 0) ^ 3;
  if (((HEAPU8[$2 + 60 >> 0] | 0) ^ 3) & $40) {
   $$0 = $o$04$i$lcssa;
   return $$0 | 0;
  }
  HEAP8[$37 >> 0] = $40;
  $$0 = $o$04$i$lcssa;
  return $$0 | 0;
 } while (0);
 $49 = $2 + 28 | 0;
 if (($21 | 0) < 1073741823 ? (HEAP32[$49 >> 2] | 0) >>> 0 >= $21 >>> 0 : 0) {
  _luaS_resize($L, $21 << 1);
  $55 = HEAP32[$20 >> 2] | 0;
  $58 = HEAP32[$24 >> 2] | 0;
 } else {
  $55 = $21;
  $58 = $25;
 }
 $60 = _luaC_newobj($L, 4, $l + 17 | 0, $58 + (($55 + -1 & $h$0$lcssa$i$i) << 2) | 0, 0) | 0;
 HEAP32[$60 + 12 >> 2] = $l;
 HEAP32[$60 + 8 >> 2] = $h$0$lcssa$i$i;
 HEAP8[$60 + 6 >> 0] = 0;
 $64 = $60 + 16 | 0;
 _memcpy($64 | 0, $str | 0, $l | 0) | 0;
 HEAP8[$64 + $l >> 0] = 0;
 HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
 $$0 = $60;
 return $$0 | 0;
}

function _funcargs($ls, $f, $line) {
 $ls = $ls | 0;
 $f = $f | 0;
 $line = $line | 0;
 var $0 = 0, $1 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $args = 0, $nparams$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer = sp + 24 | 0;
 $args = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $ls + 16 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) == 289) {
  $21 = _luaK_stringK($1, HEAP32[$ls + 24 >> 2] | 0) | 0;
  HEAP32[$args + 16 >> 2] = -1;
  HEAP32[$args + 20 >> 2] = -1;
  HEAP32[$args >> 2] = 4;
  HEAP32[$args + 8 >> 2] = $21;
  _luaX_next($ls);
 } else if (($3 | 0) == 40) {
  _luaX_next($ls);
  if ((HEAP32[$2 >> 2] | 0) == 41) HEAP32[$args >> 2] = 0; else {
   _subexpr($ls, $args, 0) | 0;
   if ((HEAP32[$2 >> 2] | 0) == 44) do {
    _luaX_next($ls);
    _luaK_exp2nextreg(HEAP32[$0 >> 2] | 0, $args);
    _subexpr($ls, $args, 0) | 0;
   } while ((HEAP32[$2 >> 2] | 0) == 44);
   _luaK_setreturns($1, $args, -1);
   if ((HEAP32[$2 >> 2] | 0) != 41) if ((HEAP32[$ls + 4 >> 2] | 0) == ($line | 0)) _error_expected($ls, 41); else {
    $15 = HEAP32[$ls + 52 >> 2] | 0;
    $16 = _luaX_token2str($ls, 41) | 0;
    $17 = _luaX_token2str($ls, 40) | 0;
    HEAP32[$vararg_buffer >> 2] = $16;
    HEAP32[$vararg_buffer + 4 >> 2] = $17;
    HEAP32[$vararg_buffer + 8 >> 2] = $line;
    _luaX_syntaxerror($ls, _luaO_pushfstring($15, 2528, $vararg_buffer) | 0);
   }
  }
  _luaX_next($ls);
 } else if (($3 | 0) == 123) _constructor($ls, $args); else _luaX_syntaxerror($ls, 2768);
 $25 = $f + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $27 = HEAP32[$args >> 2] | 0;
 if (($27 | 0) == 13 | ($27 | 0) == 12) {
  $nparams$0 = 0;
  $31 = _luaK_codeABC($1, 29, $26, $nparams$0, 2) | 0;
  $32 = $f + 16 | 0;
  HEAP32[$32 >> 2] = -1;
  $33 = $f + 20 | 0;
  HEAP32[$33 >> 2] = -1;
  HEAP32[$f >> 2] = 12;
  HEAP32[$25 >> 2] = $31;
  _luaK_fixline($1, $line);
  $34 = $26 + 1 | 0;
  $35 = $34 & 255;
  $36 = $1 + 48 | 0;
  HEAP8[$36 >> 0] = $35;
  STACKTOP = sp;
  return;
 } else if ($27) _luaK_exp2nextreg($1, $args);
 $nparams$0 = (HEAPU8[$1 + 48 >> 0] | 0) - $26 | 0;
 $31 = _luaK_codeABC($1, 29, $26, $nparams$0, 2) | 0;
 $32 = $f + 16 | 0;
 HEAP32[$32 >> 2] = -1;
 $33 = $f + 20 | 0;
 HEAP32[$33 >> 2] = -1;
 HEAP32[$f >> 2] = 12;
 HEAP32[$25 >> 2] = $31;
 _luaK_fixline($1, $line);
 $34 = $26 + 1 | 0;
 $35 = $34 & 255;
 $36 = $1 + 48 | 0;
 HEAP8[$36 >> 0] = $35;
 STACKTOP = sp;
 return;
}

function _recfield($ls, $cc) {
 $ls = $ls | 0;
 $cc = $cc | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $3 = 0, $35 = 0, $39 = 0, $4 = 0, $7 = 0, $key = 0, $val = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer1 = sp + 56 | 0;
 $vararg_buffer = sp + 48 | 0;
 $key = sp + 24 | 0;
 $val = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 48 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $ls + 16 | 0;
 do if ((HEAP32[$4 >> 2] | 0) == 288) {
  $7 = $cc + 28 | 0;
  if ((HEAP32[$7 >> 2] | 0) <= 2147483645) {
   $23 = HEAP32[$ls + 24 >> 2] | 0;
   _luaX_next($ls);
   $24 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $23) | 0;
   HEAP32[$key + 16 >> 2] = -1;
   HEAP32[$key + 20 >> 2] = -1;
   HEAP32[$key >> 2] = 4;
   HEAP32[$key + 8 >> 2] = $24;
   $$pre$phiZ2D = $7;
   break;
  }
  $10 = $1 + 12 | 0;
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 52 >> 2] | 0;
  $16 = HEAP32[(HEAP32[$1 >> 2] | 0) + 64 >> 2] | 0;
  if (!$16) {
   $19 = 2464;
   HEAP32[$vararg_buffer1 >> 2] = 2800;
   $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
   HEAP32[$vararg_ptr4 >> 2] = 2147483645;
   $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
   HEAP32[$vararg_ptr5 >> 2] = $19;
   $20 = _luaO_pushfstring($13, 2480, $vararg_buffer1) | 0;
   $21 = HEAP32[$10 >> 2] | 0;
   _luaX_syntaxerror($21, $20);
  }
  HEAP32[$vararg_buffer >> 2] = $16;
  $19 = _luaO_pushfstring($13, 2440, $vararg_buffer) | 0;
  HEAP32[$vararg_buffer1 >> 2] = 2800;
  $vararg_ptr4 = $vararg_buffer1 + 4 | 0;
  HEAP32[$vararg_ptr4 >> 2] = 2147483645;
  $vararg_ptr5 = $vararg_buffer1 + 8 | 0;
  HEAP32[$vararg_ptr5 >> 2] = $19;
  $20 = _luaO_pushfstring($13, 2480, $vararg_buffer1) | 0;
  $21 = HEAP32[$10 >> 2] | 0;
  _luaX_syntaxerror($21, $20);
 } else {
  _luaX_next($ls);
  _subexpr($ls, $key, 0) | 0;
  _luaK_exp2val(HEAP32[$0 >> 2] | 0, $key);
  if ((HEAP32[$4 >> 2] | 0) == 93) {
   _luaX_next($ls);
   $$pre$phiZ2D = $cc + 28 | 0;
   break;
  } else _error_expected($ls, 93);
 } while (0);
 HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + 1;
 if ((HEAP32[$4 >> 2] | 0) == 61) {
  _luaX_next($ls);
  $35 = _luaK_exp2RK($1, $key) | 0;
  _subexpr($ls, $val, 0) | 0;
  $39 = HEAP32[(HEAP32[$cc + 24 >> 2] | 0) + 8 >> 2] | 0;
  _luaK_codeABC($1, 10, $39, $35, _luaK_exp2RK($1, $val) | 0) | 0;
  HEAP8[$2 >> 0] = $3;
  STACKTOP = sp;
  return;
 } else _error_expected($ls, 61);
}

function _os_time($L) {
 $L = $L | 0;
 var $$ = 0, $$0$i = 0, $$0$i12 = 0, $$0$i16 = 0, $$18 = 0, $10 = 0, $14 = 0, $19 = 0, $25 = 0, $3 = 0, $35 = 0, $6 = 0, $isnum$i14 = 0, $res$0$i2 = 0, $t$0 = 0, $ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $isnum$i14 = sp + 64 | 0;
 $ts = sp + 20 | 0;
 if ((_lua_type($L, 1) | 0) < 1) $t$0 = _time(0) | 0; else {
  _luaL_checktype($L, 1, 5);
  _lua_settop($L, 1);
  _lua_getfield($L, -1, 8624);
  $3 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $$ = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 0 : $3;
  _lua_settop($L, -2);
  HEAP32[$ts >> 2] = $$;
  _lua_getfield($L, -1, 8632);
  $6 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $res$0$i2 = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 0 : $6;
  _lua_settop($L, -2);
  HEAP32[$ts + 4 >> 2] = $res$0$i2;
  _lua_getfield($L, -1, 8640);
  $10 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  $$18 = (HEAP32[$isnum$i14 >> 2] | 0) == 0 ? 12 : $10;
  _lua_settop($L, -2);
  HEAP32[$ts + 8 >> 2] = $$18;
  _lua_getfield($L, -1, 8648);
  $14 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer >> 2] = 8648;
   $$0$i = _luaL_error($L, 8656, $vararg_buffer) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i = $14;
  }
  HEAP32[$ts + 12 >> 2] = $$0$i;
  _lua_getfield($L, -1, 8696);
  $19 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer1 >> 2] = 8696;
   $$0$i12 = _luaL_error($L, 8656, $vararg_buffer1) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i12 = $19;
  }
  HEAP32[$ts + 16 >> 2] = $$0$i12 + -1;
  _lua_getfield($L, -1, 8704);
  $25 = _lua_tointegerx($L, -1, $isnum$i14) | 0;
  if (!(HEAP32[$isnum$i14 >> 2] | 0)) {
   HEAP32[$vararg_buffer4 >> 2] = 8704;
   $$0$i16 = _luaL_error($L, 8656, $vararg_buffer4) | 0;
  } else {
   _lua_settop($L, -2);
   $$0$i16 = $25;
  }
  HEAP32[$ts + 20 >> 2] = $$0$i16 + -1900;
  _lua_getfield($L, -1, 8712);
  if (!(_lua_type($L, -1) | 0)) $35 = -1; else $35 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  HEAP32[$ts + 32 >> 2] = $35;
  $t$0 = _mktime($ts | 0) | 0;
 }
 if (($t$0 | 0) == -1) {
  _lua_pushnil($L);
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushnumber($L, +($t$0 | 0));
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _close_func($ls) {
 $ls = $ls | 0;
 var $1 = 0, $11 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $3 = 0, $31 = 0, $33 = 0, $39 = 0, $4 = 0, $40 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $53 = 0, $56 = 0, $58 = 0, $6 = 0, $65 = 0, $68 = 0, $70 = 0, $83 = 0, $87 = 0, $9 = 0;
 $1 = HEAP32[$ls + 52 >> 2] | 0;
 $2 = $ls + 48 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 _luaK_ret($3, 0, 0);
 _leaveblock($3);
 $5 = $3 + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $9 = $4 + 12 | 0;
 $11 = $4 + 48 | 0;
 HEAP32[$9 >> 2] = _luaM_realloc_($1, HEAP32[$9 >> 2] | 0, HEAP32[$11 >> 2] << 2, $6 << 2) | 0;
 $16 = HEAP32[$5 >> 2] | 0;
 HEAP32[$11 >> 2] = $16;
 if (($16 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $19 = $4 + 20 | 0;
 $21 = $4 + 52 | 0;
 HEAP32[$19 >> 2] = _luaM_realloc_($1, HEAP32[$19 >> 2] | 0, HEAP32[$21 >> 2] << 2, $16 << 2) | 0;
 HEAP32[$21 >> 2] = HEAP32[$5 >> 2];
 $27 = $3 + 32 | 0;
 $28 = HEAP32[$27 >> 2] | 0;
 if (($28 + 1 | 0) >>> 0 > 268435455) _luaM_toobig($1);
 $31 = $4 + 8 | 0;
 $33 = $4 + 44 | 0;
 HEAP32[$31 >> 2] = _luaM_realloc_($1, HEAP32[$31 >> 2] | 0, HEAP32[$33 >> 2] << 4, $28 << 4) | 0;
 HEAP32[$33 >> 2] = HEAP32[$27 >> 2];
 $39 = $3 + 36 | 0;
 $40 = HEAP32[$39 >> 2] | 0;
 if (($40 + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($1);
 $43 = $4 + 16 | 0;
 $45 = $4 + 56 | 0;
 HEAP32[$43 >> 2] = _luaM_realloc_($1, HEAP32[$43 >> 2] | 0, HEAP32[$45 >> 2] << 2, $40 << 2) | 0;
 HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
 $51 = $3 + 44 | 0;
 $53 = HEAP16[$51 >> 1] | 0;
 if (($53 + 1 | 0) >>> 0 > 357913941) _luaM_toobig($1);
 $56 = $4 + 24 | 0;
 $58 = $4 + 60 | 0;
 HEAP32[$56 >> 2] = _luaM_realloc_($1, HEAP32[$56 >> 2] | 0, (HEAP32[$58 >> 2] | 0) * 12 | 0, $53 * 12 | 0) | 0;
 HEAP32[$58 >> 2] = HEAP16[$51 >> 1];
 $65 = $3 + 47 | 0;
 $68 = $4 + 28 | 0;
 $70 = $4 + 40 | 0;
 HEAP32[$68 >> 2] = _luaM_realloc_($1, HEAP32[$68 >> 2] | 0, HEAP32[$70 >> 2] << 3, HEAPU8[$65 >> 0] << 3) | 0;
 HEAP32[$70 >> 2] = HEAPU8[$65 >> 0];
 HEAP32[$2 >> 2] = HEAP32[$3 + 8 >> 2];
 if ((HEAP32[$ls + 16 >> 2] & -2 | 0) == 288) {
  $83 = HEAP32[$ls + 24 >> 2] | 0;
  _luaX_newstring($ls, $83 + 16 | 0, HEAP32[$83 + 12 >> 2] | 0) | 0;
 }
 $87 = $1 + 8 | 0;
 HEAP32[$87 >> 2] = (HEAP32[$87 >> 2] | 0) + -16;
 if ((HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 12 >> 2] | 0) <= 0) return;
 _luaC_step($1);
 return;
}

function _lua_pcallk($L, $nargs, $nresults, $errfunc, $ctx, $k) {
 $L = $L | 0;
 $nargs = $nargs | 0;
 $nresults = $nresults | 0;
 $errfunc = $errfunc | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $$0$i = 0, $17 = 0, $18 = 0, $2 = 0, $22 = 0, $35 = 0, $38 = 0, $5 = 0, $51 = 0, $63 = 0, $65 = 0, $66 = 0, $79 = 0, $81 = 0, $c = 0, $func$0 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!$errfunc) $func$0 = 0; else {
  $2 = HEAP32[$L + 16 >> 2] | 0;
  do if (($errfunc | 0) > 0) {
   $5 = (HEAP32[$2 >> 2] | 0) + ($errfunc << 4) | 0;
   $$0$i = $5 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $5 : 1832;
  } else {
   if (($errfunc | 0) >= -1000999) {
    $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($errfunc << 4) | 0;
    break;
   }
   if (($errfunc | 0) == -1001e3) {
    $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
    break;
   }
   $17 = -1001e3 - $errfunc | 0;
   $18 = HEAP32[$2 >> 2] | 0;
   if ((HEAP32[$18 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
    $22 = HEAP32[$18 >> 2] | 0;
    $$0$i = ($17 | 0) > (HEAPU8[$22 + 6 >> 0] | 0) ? 1832 : $22 + 16 + ($17 + -1 << 4) | 0;
   }
  } while (0);
  $func$0 = $$0$i - (HEAP32[$L + 28 >> 2] | 0) | 0;
 }
 $35 = $L + 8 | 0;
 $38 = (HEAP32[$35 >> 2] | 0) + (~$nargs << 4) | 0;
 HEAP32[$c >> 2] = $38;
 if (!$k) label = 13; else if (!(HEAP16[$L + 36 >> 1] | 0)) {
  $51 = HEAP32[$L + 16 >> 2] | 0;
  HEAP32[$51 + 28 >> 2] = $k;
  HEAP32[$51 + 24 >> 2] = $ctx;
  HEAP32[$51 + 20 >> 2] = $38 - (HEAP32[$L + 28 >> 2] | 0);
  HEAP8[$51 + 36 >> 0] = HEAP8[$L + 41 >> 0] | 0;
  $63 = $L + 68 | 0;
  $65 = $51 + 32 | 0;
  HEAP32[$65 >> 2] = HEAP32[$63 >> 2];
  HEAP32[$63 >> 2] = $func$0;
  $66 = $51 + 18 | 0;
  HEAP8[$66 >> 0] = HEAPU8[$66 >> 0] | 16;
  _luaD_call($L, $38, $nresults, 1);
  HEAP8[$66 >> 0] = HEAPU8[$66 >> 0] & 239;
  HEAP32[$63 >> 2] = HEAP32[$65 >> 2];
  $status$0 = 0;
 } else label = 13;
 if ((label | 0) == 13) {
  HEAP32[$c + 4 >> 2] = $nresults;
  $status$0 = _luaD_pcall($L, 19, $c, $38 - (HEAP32[$L + 28 >> 2] | 0) | 0, $func$0) | 0;
 }
 if (($nresults | 0) != -1) {
  STACKTOP = sp;
  return $status$0 | 0;
 }
 $79 = (HEAP32[$L + 16 >> 2] | 0) + 4 | 0;
 $81 = HEAP32[$35 >> 2] | 0;
 if ((HEAP32[$79 >> 2] | 0) >>> 0 >= $81 >>> 0) {
  STACKTOP = sp;
  return $status$0 | 0;
 }
 HEAP32[$79 >> 2] = $81;
 STACKTOP = sp;
 return $status$0 | 0;
}

function _f_luaopen($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $1 = 0, $2 = 0, $48 = 0, $5 = 0, $57 = 0, $60 = 0, $62 = 0, $64 = 0, $mt$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $mt$i = sp;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = _luaM_realloc_($L, 0, 0, 640) | 0;
 HEAP32[$L + 28 >> 2] = $2;
 HEAP32[$L + 32 >> 2] = 40;
 $5 = $2 + 8 | 0;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$2 + 24 >> 2] = 0;
 HEAP32[$2 + 40 >> 2] = 0;
 HEAP32[$2 + 56 >> 2] = 0;
 HEAP32[$2 + 72 >> 2] = 0;
 HEAP32[$2 + 88 >> 2] = 0;
 HEAP32[$2 + 104 >> 2] = 0;
 HEAP32[$2 + 120 >> 2] = 0;
 HEAP32[$2 + 136 >> 2] = 0;
 HEAP32[$2 + 152 >> 2] = 0;
 HEAP32[$2 + 168 >> 2] = 0;
 HEAP32[$2 + 184 >> 2] = 0;
 HEAP32[$2 + 200 >> 2] = 0;
 HEAP32[$2 + 216 >> 2] = 0;
 HEAP32[$2 + 232 >> 2] = 0;
 HEAP32[$2 + 248 >> 2] = 0;
 HEAP32[$2 + 264 >> 2] = 0;
 HEAP32[$2 + 280 >> 2] = 0;
 HEAP32[$2 + 296 >> 2] = 0;
 HEAP32[$2 + 312 >> 2] = 0;
 HEAP32[$2 + 328 >> 2] = 0;
 HEAP32[$2 + 344 >> 2] = 0;
 HEAP32[$2 + 360 >> 2] = 0;
 HEAP32[$2 + 376 >> 2] = 0;
 HEAP32[$2 + 392 >> 2] = 0;
 HEAP32[$2 + 408 >> 2] = 0;
 HEAP32[$2 + 424 >> 2] = 0;
 HEAP32[$2 + 440 >> 2] = 0;
 HEAP32[$2 + 456 >> 2] = 0;
 HEAP32[$2 + 472 >> 2] = 0;
 HEAP32[$2 + 488 >> 2] = 0;
 HEAP32[$2 + 504 >> 2] = 0;
 HEAP32[$2 + 520 >> 2] = 0;
 HEAP32[$2 + 536 >> 2] = 0;
 HEAP32[$2 + 552 >> 2] = 0;
 HEAP32[$2 + 568 >> 2] = 0;
 HEAP32[$2 + 584 >> 2] = 0;
 HEAP32[$2 + 600 >> 2] = 0;
 HEAP32[$2 + 616 >> 2] = 0;
 HEAP32[$2 + 632 >> 2] = 0;
 HEAP32[$L + 24 >> 2] = $2 + 560;
 $48 = $L + 72 | 0;
 HEAP32[$L + 80 >> 2] = 0;
 HEAP32[$L + 84 >> 2] = 0;
 HEAP8[$L + 90 >> 0] = 0;
 HEAP32[$48 >> 2] = $2;
 HEAP32[$L + 8 >> 2] = $2 + 16;
 HEAP32[$5 >> 2] = 0;
 HEAP32[$L + 76 >> 2] = $2 + 336;
 HEAP32[$L + 16 >> 2] = $48;
 $57 = _luaH_new($L) | 0;
 HEAP32[$1 + 40 >> 2] = $57;
 HEAP32[$1 + 48 >> 2] = 69;
 _luaH_resize($L, $57, 2, 0);
 HEAP32[$mt$i >> 2] = $L;
 $60 = $mt$i + 8 | 0;
 HEAP32[$60 >> 2] = 72;
 _luaH_setint($L, $57, 1, $mt$i);
 HEAP32[$mt$i >> 2] = _luaH_new($L) | 0;
 HEAP32[$60 >> 2] = 69;
 _luaH_setint($L, $57, 2, $mt$i);
 _luaS_resize($L, 32);
 _luaT_init($L);
 _luaX_init($L);
 $62 = _luaS_newlstr($L, 2992, 17) | 0;
 HEAP32[$1 + 180 >> 2] = $62;
 $64 = $62 + 5 | 0;
 HEAP8[$64 >> 0] = HEAPU8[$64 >> 0] | 0 | 32;
 HEAP8[$1 + 63 >> 0] = 1;
 HEAP32[$1 + 176 >> 2] = _lua_version(0) | 0;
 STACKTOP = sp;
 return;
}

function _singlevaraux($fs, $n, $var, $base) {
 $fs = $fs | 0;
 $n = $n | 0;
 $var = $var | 0;
 $base = $base | 0;
 var $$0 = 0, $24 = 0, $25 = 0, $bl$0$i = 0, $bl$0$i$lcssa = 0, $bl$0$in$i = 0, $fs$idx$val$i = 0, $fs$idx$val$i$lcssa = 0, $fs$idx1$i = 0, $fs$idx2$i = 0, $i$0$i = 0, $i$0$i$lcssa17 = 0, $i$0$in$i = 0, $i$01$i = 0, $i$01$i$lcssa = 0, $idx$0 = 0, label = 0;
 if (!$fs) {
  $$0 = 0;
  return $$0 | 0;
 }
 $fs$idx1$i = $fs + 12 | 0;
 $fs$idx2$i = $fs + 40 | 0;
 $i$0$in$i = HEAPU8[$fs + 46 >> 0] | 0;
 while (1) {
  $i$0$i = $i$0$in$i + -1 | 0;
  $fs$idx$val$i = HEAP32[$fs >> 2] | 0;
  if (($i$0$in$i | 0) <= 0) {
   $fs$idx$val$i$lcssa = $fs$idx$val$i;
   break;
  }
  if (!(_luaS_eqstr($n, HEAP32[(HEAP32[$fs$idx$val$i + 24 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$fs$idx1$i >> 2] | 0) + 64 >> 2] >> 2] | 0) + ((HEAP32[$fs$idx2$i >> 2] | 0) + $i$0$i << 1) >> 1] | 0) * 12 | 0) >> 2] | 0) | 0)) $i$0$in$i = $i$0$i; else {
   $i$0$i$lcssa17 = $i$0$i;
   label = 5;
   break;
  }
 }
 if ((label | 0) == 5) {
  HEAP32[$var + 16 >> 2] = -1;
  HEAP32[$var + 20 >> 2] = -1;
  HEAP32[$var >> 2] = 7;
  HEAP32[$var + 8 >> 2] = $i$0$i$lcssa17;
  if ($base) {
   $$0 = 7;
   return $$0 | 0;
  }
  $bl$0$in$i = $fs + 16 | 0;
  while (1) {
   $bl$0$i = HEAP32[$bl$0$in$i >> 2] | 0;
   if ((HEAPU8[$bl$0$i + 8 >> 0] | 0) > ($i$0$i$lcssa17 | 0)) $bl$0$in$i = $bl$0$i; else {
    $bl$0$i$lcssa = $bl$0$i;
    break;
   }
  }
  HEAP8[$bl$0$i$lcssa + 9 >> 0] = 1;
  $$0 = 7;
  return $$0 | 0;
 }
 $24 = HEAP32[$fs$idx$val$i$lcssa + 28 >> 2] | 0;
 $25 = $fs + 47 | 0;
 L17 : do if (!(HEAP8[$25 >> 0] | 0)) label = 13; else {
  $i$01$i = 0;
  while (1) {
   if (_luaS_eqstr(HEAP32[$24 + ($i$01$i << 3) >> 2] | 0, $n) | 0) {
    $i$01$i$lcssa = $i$01$i;
    break;
   }
   $i$01$i = $i$01$i + 1 | 0;
   if (($i$01$i | 0) >= (HEAPU8[$25 >> 0] | 0)) {
    label = 13;
    break L17;
   }
  }
  if (($i$01$i$lcssa | 0) < 0) label = 13; else $idx$0 = $i$01$i$lcssa;
 } while (0);
 do if ((label | 0) == 13) if (!(_singlevaraux(HEAP32[$fs + 8 >> 2] | 0, $n, $var, 0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 } else {
  $idx$0 = _newupvalue($fs, $n, $var) | 0;
  break;
 } while (0);
 HEAP32[$var + 16 >> 2] = -1;
 HEAP32[$var + 20 >> 2] = -1;
 HEAP32[$var >> 2] = 8;
 HEAP32[$var + 8 >> 2] = $idx$0;
 $$0 = 8;
 return $$0 | 0;
}

function _luaD_pcall($L, $func, $u, $old_top, $ef) {
 $L = $L | 0;
 $func = $func | 0;
 $u = $u | 0;
 $old_top = $old_top | 0;
 $ef = $ef | 0;
 var $$$i = 0, $$lim$0$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $29 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0, $44 = 0, $49 = 0, $5 = 0, $56 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $8 = 0, $ci$03$i$i = 0, $lim$0$lcssa$i$i = 0, $lim$02$i$i = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 41 | 0;
 $3 = HEAP8[$2 >> 0] | 0;
 $4 = $L + 36 | 0;
 $5 = HEAP16[$4 >> 1] | 0;
 $6 = $L + 68 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $ef;
 $8 = _luaD_rawrunprotected($L, $func, $u) | 0;
 if (!$8) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 $10 = $L + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $12 = $11 + $old_top | 0;
 _luaF_close($L, $12);
 if (($8 | 0) == 4) {
  $16 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 180 >> 2] | 0;
  HEAP32[$12 >> 2] = $16;
  HEAP32[$11 + ($old_top + 8) >> 2] = HEAPU8[$16 + 4 >> 0] | 0 | 64;
 } else if (($8 | 0) == 6) {
  $22 = _luaS_newlstr($L, 752, 23) | 0;
  HEAP32[$12 >> 2] = $22;
  HEAP32[$11 + ($old_top + 8) >> 2] = HEAPU8[$22 + 4 >> 0] | 0 | 64;
 } else {
  $29 = HEAP32[$L + 8 >> 2] | 0;
  $31 = $29 + -16 | 0;
  $36 = HEAP32[$31 + 4 >> 2] | 0;
  $37 = $12;
  HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$37 + 4 >> 2] = $36;
  HEAP32[$11 + ($old_top + 8) >> 2] = HEAP32[$29 + -8 >> 2];
 }
 $44 = $11 + ($old_top + 16) | 0;
 HEAP32[$L + 8 >> 2] = $44;
 HEAP32[$0 >> 2] = $1;
 HEAP8[$2 >> 0] = $3;
 HEAP16[$4 >> 1] = $5;
 if (!$1) $lim$0$lcssa$i$i = $44; else {
  $ci$03$i$i = $1;
  $lim$02$i$i = $44;
  while (1) {
   $49 = HEAP32[$ci$03$i$i + 4 >> 2] | 0;
   $$lim$0$i$i = $lim$02$i$i >>> 0 < $49 >>> 0 ? $49 : $lim$02$i$i;
   $ci$03$i$i = HEAP32[$ci$03$i$i + 8 >> 2] | 0;
   if (!$ci$03$i$i) {
    $lim$0$lcssa$i$i = $$lim$0$i$i;
    break;
   } else $lim$02$i$i = $$lim$0$i$i;
  }
 }
 $56 = $lim$0$lcssa$i$i - (HEAP32[$10 >> 2] | 0) | 0;
 $58 = ($56 >> 4) + 1 | 0;
 $61 = (($58 | 0) / 8 | 0) + 10 + $58 | 0;
 $$$i = ($61 | 0) > 1e6 ? 1e6 : $61;
 if (($56 | 0) > 15999984) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 if (($$$i | 0) >= (HEAP32[$L + 32 >> 2] | 0)) {
  HEAP32[$6 >> 2] = $7;
  return $8 | 0;
 }
 _luaD_reallocstack($L, $$$i);
 HEAP32[$6 >> 2] = $7;
 return $8 | 0;
}

function _GCTM($L, $propagateerrors) {
 $L = $L | 0;
 $propagateerrors = $propagateerrors | 0;
 var $1 = 0, $2 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $44 = 0, $45 = 0, $5 = 0, $51 = 0, $53 = 0, $58 = 0, $59 = 0, $65 = 0, $7 = 0, $72 = 0, $76 = 0, $84 = 0, $9 = 0, $status$0 = 0, $v = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer = sp + 16 | 0;
 $v = sp;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $1 + 104 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = HEAP32[$3 >> 2];
 $5 = $1 + 68 | 0;
 HEAP32[$3 >> 2] = HEAP32[$5 >> 2];
 HEAP32[$5 >> 2] = $3;
 $7 = $3 + 5 | 0;
 $9 = HEAPU8[$7 >> 0] | 0;
 HEAP8[$7 >> 0] = $9 & 239;
 if ((HEAPU8[$1 + 61 >> 0] | 0) >= 2) HEAP8[$7 >> 0] = (HEAPU8[$1 + 60 >> 0] | 0) & 3 | $9 & 168;
 HEAP32[$v >> 2] = $3;
 $26 = $v + 8 | 0;
 HEAP32[$26 >> 2] = HEAPU8[$3 + 4 >> 0] | 0 | 64;
 $27 = _luaT_gettmbyobj($L, $v, 2) | 0;
 if (!$27) {
  STACKTOP = sp;
  return;
 }
 $29 = $27 + 8 | 0;
 if ((HEAP32[$29 >> 2] & 15 | 0) != 6) {
  STACKTOP = sp;
  return;
 }
 $33 = $L + 41 | 0;
 $34 = HEAP8[$33 >> 0] | 0;
 $35 = $1 + 63 | 0;
 $36 = HEAP8[$35 >> 0] | 0;
 HEAP8[$33 >> 0] = 0;
 HEAP8[$35 >> 0] = 0;
 $37 = $L + 8 | 0;
 $38 = HEAP32[$37 >> 2] | 0;
 $39 = $27;
 $44 = HEAP32[$39 + 4 >> 2] | 0;
 $45 = $38;
 HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$45 + 4 >> 2] = $44;
 HEAP32[$38 + 8 >> 2] = HEAP32[$29 >> 2];
 $51 = HEAP32[$37 >> 2] | 0;
 $53 = $v;
 $58 = HEAP32[$53 + 4 >> 2] | 0;
 $59 = $51 + 16 | 0;
 HEAP32[$59 >> 2] = HEAP32[$53 >> 2];
 HEAP32[$59 + 4 >> 2] = $58;
 HEAP32[$51 + 24 >> 2] = HEAP32[$26 >> 2];
 $65 = HEAP32[$37 >> 2] | 0;
 HEAP32[$37 >> 2] = $65 + 32;
 $72 = _luaD_pcall($L, 23, 0, $65 - (HEAP32[$L + 28 >> 2] | 0) | 0, 0) | 0;
 HEAP8[$33 >> 0] = $34;
 HEAP8[$35 >> 0] = $36;
 if (!(($propagateerrors | 0) != 0 & ($72 | 0) != 0)) {
  STACKTOP = sp;
  return;
 }
 if (($72 | 0) != 2) {
  $status$0 = $72;
  _luaD_throw($L, $status$0);
 }
 $76 = HEAP32[$37 >> 2] | 0;
 if ((HEAP32[$76 + -8 >> 2] & 15 | 0) == 4) $84 = (HEAP32[$76 + -16 >> 2] | 0) + 16 | 0; else $84 = 976;
 HEAP32[$vararg_buffer >> 2] = $84;
 _luaO_pushfstring($L, 992, $vararg_buffer) | 0;
 $status$0 = 5;
 _luaD_throw($L, $status$0);
}

function _lua_topointer($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $38 = 0, $4 = 0, $50 = 0, $51 = 0, $55 = 0, $65 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = ($idx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 switch (HEAP32[$$0$i + 8 >> 2] & 63 | 0) {
 case 22:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 8:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 2:
 case 7:
  {
   do if ($2) {
    $38 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
    $$0$i$i = $38 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $38 : 1832;
   } else {
    if (($idx | 0) >= -1000999) {
     $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
     break;
    }
    if (($idx | 0) == -1001e3) {
     $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
     break;
    }
    $50 = -1001e3 - $idx | 0;
    $51 = HEAP32[$1 >> 2] | 0;
    if ((HEAP32[$51 + 8 >> 2] | 0) == 22) $$0$i$i = 1832; else {
     $55 = HEAP32[$51 >> 2] | 0;
     $$0$i$i = ($50 | 0) > (HEAPU8[$55 + 6 >> 0] | 0 | 0) ? 1832 : $55 + 16 + ($50 + -1 << 4) | 0;
    }
   } while (0);
   $65 = HEAP32[$$0$i$i + 8 >> 2] & 15;
   if (($65 | 0) == 7) {
    $$0 = (HEAP32[$$0$i$i >> 2] | 0) + 24 | 0;
    return $$0 | 0;
   } else if (($65 | 0) == 2) {
    $$0 = HEAP32[$$0$i$i >> 2] | 0;
    return $$0 | 0;
   } else {
    $$0 = 0;
    return $$0 | 0;
   }
   break;
  }
 case 6:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 38:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 case 5:
  {
   $$0 = HEAP32[$$0$i >> 2] | 0;
   return $$0 | 0;
  }
 default:
  {
   $$0 = 0;
   return $$0 | 0;
  }
 }
 return 0;
}

function _lua_newstate($f, $ud) {
 $f = $f | 0;
 $ud = $ud | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $24 = 0, $32 = 0, $36 = 0, $44 = 0, $buff$i = 0, $h$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buff$i = sp + 8 | 0;
 $h$i = sp;
 $0 = FUNCTION_TABLE_iiiii[$f & 31]($ud, 0, 8, 400) | 0;
 if (!$0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $0 + 112 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP8[$0 + 4 >> 0] = 8;
 HEAP8[$0 + 172 >> 0] = 33;
 HEAP8[$0 + 5 >> 0] = 1;
 HEAP8[$0 + 174 >> 0] = 0;
 HEAP32[$0 + 12 >> 2] = $2;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP16[$0 + 38 >> 1] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP8[$0 + 40 >> 0] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP8[$0 + 41 >> 0] = 1;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP16[$0 + 36 >> 1] = 1;
 HEAP8[$0 + 6 >> 0] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$2 >> 2] = $f;
 HEAP32[$0 + 116 >> 2] = $ud;
 HEAP32[$0 + 284 >> 2] = $0;
 $24 = _time(0) | 0;
 HEAP32[$h$i >> 2] = $24;
 HEAP32[$buff$i >> 2] = $0;
 HEAP32[$buff$i + 4 >> 2] = $h$i;
 HEAP32[$buff$i + 8 >> 2] = 1832;
 HEAP32[$buff$i + 12 >> 2] = 18;
 HEAP32[$0 + 168 >> 2] = _luaS_hash($buff$i, 16, $24) | 0;
 $32 = $0 + 224 | 0;
 HEAP32[$0 + 240 >> 2] = $32;
 HEAP32[$0 + 244 >> 2] = $32;
 HEAP8[$0 + 175 >> 0] = 0;
 $36 = $0 + 132 | 0;
 HEAP32[$0 + 160 >> 2] = 0;
 HEAP32[$0 + 256 >> 2] = 0;
 HEAP32[$0 + 264 >> 2] = 0;
 HEAP32[$0 + 280 >> 2] = 0;
 HEAP32[$0 + 288 >> 2] = 0;
 HEAP32[$36 >> 2] = 0;
 HEAP32[$36 + 4 >> 2] = 0;
 HEAP32[$36 + 8 >> 2] = 0;
 HEAP32[$36 + 12 >> 2] = 0;
 HEAP8[$0 + 173 >> 0] = 5;
 $44 = $0 + 120 | 0;
 dest = $0 + 180 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$44 >> 2] = 400;
 HEAP32[$0 + 124 >> 2] = 0;
 HEAP32[$0 + 268 >> 2] = 200;
 HEAP32[$0 + 272 >> 2] = 200;
 HEAP32[$0 + 276 >> 2] = 200;
 dest = $0 + 364 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (!(_luaD_rawrunprotected($0, 24, 0) | 0)) {
  $$0 = $0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _close_state($0);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaU_undump($L, $Z, $buff, $name) {
 $L = $L | 0;
 $Z = $Z | 0;
 $buff = $buff | 0;
 $name = $name | 0;
 var $0 = 0, $15 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $39 = 0, $40 = 0, $41 = 0, $43 = 0, $45 = 0, $47 = 0, $S = 0, $cl$0 = 0, $h$i = 0, $s$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $h$i = sp + 16 | 0;
 $s$i = sp + 34 | 0;
 $S = sp;
 $0 = HEAP8[$name >> 0] | 0;
 if ($0 << 24 >> 24 == 61 | $0 << 24 >> 24 == 64) HEAP32[$S + 12 >> 2] = $name + 1; else if ($0 << 24 >> 24 == 27) HEAP32[$S + 12 >> 2] = 3456; else HEAP32[$S + 12 >> 2] = $name;
 HEAP32[$S >> 2] = $L;
 HEAP32[$S + 4 >> 2] = $Z;
 HEAP32[$S + 8 >> 2] = $buff;
 HEAP32[$h$i >> 2] = 1635077147;
 HEAP8[$h$i + 4 >> 0] = 82;
 HEAP8[$h$i + 5 >> 0] = 0;
 HEAP8[$h$i + 6 >> 0] = 1;
 HEAP8[$h$i + 7 >> 0] = 4;
 HEAP8[$h$i + 8 >> 0] = 4;
 HEAP8[$h$i + 9 >> 0] = 4;
 HEAP8[$h$i + 10 >> 0] = 8;
 $15 = $h$i + 12 | 0;
 HEAP8[$h$i + 11 >> 0] = 0;
 HEAP8[$15 >> 0] = HEAP8[3472] | 0;
 HEAP8[$15 + 1 >> 0] = HEAP8[3473] | 0;
 HEAP8[$15 + 2 >> 0] = HEAP8[3474] | 0;
 HEAP8[$15 + 3 >> 0] = HEAP8[3475] | 0;
 HEAP8[$15 + 4 >> 0] = HEAP8[3476] | 0;
 HEAP8[$15 + 5 >> 0] = HEAP8[3477] | 0;
 HEAP8[$s$i >> 0] = 27;
 if (_luaZ_read($Z, $s$i + 1 | 0, 17) | 0) _error($S, 3480);
 if (!(_memcmp($h$i, $s$i, 18) | 0)) {
  $27 = _luaF_newLclosure($L, 1) | 0;
  $28 = $L + 8 | 0;
  $29 = HEAP32[$28 >> 2] | 0;
  HEAP32[$29 >> 2] = $27;
  HEAP32[$29 + 8 >> 2] = 70;
  $32 = (HEAP32[$28 >> 2] | 0) + 16 | 0;
  HEAP32[$28 >> 2] = $32;
  if (((HEAP32[$L + 24 >> 2] | 0) - $32 | 0) < 16) _luaD_growstack($L, 0);
  $39 = _luaF_newproto($L) | 0;
  $40 = $27 + 12 | 0;
  HEAP32[$40 >> 2] = $39;
  _LoadFunction($S, $39);
  $41 = HEAP32[$40 >> 2] | 0;
  $43 = HEAP32[$41 + 40 >> 2] | 0;
  if (($43 | 0) == 1) {
   $cl$0 = $27;
   STACKTOP = sp;
   return $cl$0 | 0;
  }
  $45 = _luaF_newLclosure($L, $43) | 0;
  HEAP32[$45 + 12 >> 2] = $41;
  $47 = HEAP32[$28 >> 2] | 0;
  HEAP32[$47 + -16 >> 2] = $45;
  HEAP32[$47 + -8 >> 2] = 70;
  $cl$0 = $45;
  STACKTOP = sp;
  return $cl$0 | 0;
 }
 if (_memcmp($h$i, $s$i, 4) | 0) _error($S, 3496);
 if (_memcmp($h$i, $s$i, 6) | 0) _error($S, 3504);
 if (!(_memcmp($h$i, $s$i, 12) | 0)) _error($S, 3544); else _error($S, 3528);
 return 0;
}

function _codecomp($fs, $op, $cond, $e1, $e2) {
 $fs = $fs | 0;
 $op = $op | 0;
 $cond = $cond | 0;
 $e1 = $e1 | 0;
 $e2 = $e2 | 0;
 var $$0$i$i$i$i = 0, $$lcssa = 0, $$lcssa9 = 0, $0 = 0, $1 = 0, $12 = 0, $18 = 0, $25 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $42 = 0, $44 = 0, $49 = 0, $5 = 0, $58 = 0, $59 = 0, $fs$idx$val$idx$val$i$i$i = 0, $list$0$i$i$i = 0, $list$0$i$i$i$lcssa = 0, $or$cond = 0;
 $0 = _luaK_exp2RK($fs, $e1) | 0;
 $1 = _luaK_exp2RK($fs, $e2) | 0;
 if ((HEAP32[$e2 >> 2] | 0) == 6) {
  $5 = HEAP32[$e2 + 8 >> 2] | 0;
  if (!($5 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($5 | 0)) {
   $12 = $fs + 48 | 0;
   HEAP8[$12 >> 0] = (HEAP8[$12 >> 0] | 0) + -1 << 24 >> 24;
  }
 }
 if ((HEAP32[$e1 >> 2] | 0) == 6) {
  $18 = HEAP32[$e1 + 8 >> 2] | 0;
  if (!($18 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($18 | 0)) {
   $25 = $fs + 48 | 0;
   HEAP8[$25 >> 0] = (HEAP8[$25 >> 0] | 0) + -1 << 24 >> 24;
  }
 }
 $or$cond = ($op | 0) != 24 & ($cond | 0) == 0;
 _luaK_code($fs, ($or$cond ? 64 : $cond << 6) | $op | ($or$cond ? $1 : $0) << 23 | ($or$cond ? $0 : $1) << 14) | 0;
 $36 = $fs + 28 | 0;
 $37 = HEAP32[$36 >> 2] | 0;
 HEAP32[$36 >> 2] = -1;
 $38 = _luaK_code($fs, 2147450903) | 0;
 if (($37 | 0) == -1) {
  $59 = $38;
  $58 = $e1 + 8 | 0;
  HEAP32[$58 >> 2] = $59;
  HEAP32[$e1 >> 2] = 10;
  return;
 }
 if (($38 | 0) == -1) {
  $59 = $37;
  $58 = $e1 + 8 | 0;
  HEAP32[$58 >> 2] = $59;
  HEAP32[$e1 >> 2] = 10;
  return;
 }
 $fs$idx$val$idx$val$i$i$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0$i$i$i = $38;
 while (1) {
  $41 = $fs$idx$val$idx$val$i$i$i + ($list$0$i$i$i << 2) | 0;
  $42 = HEAP32[$41 >> 2] | 0;
  $44 = ($42 >>> 14) + -131071 | 0;
  $$0$i$i$i$i = ($44 | 0) == -1 ? -1 : $list$0$i$i$i + 1 + $44 | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   $$lcssa = $41;
   $$lcssa9 = $42;
   $list$0$i$i$i$lcssa = $list$0$i$i$i;
   break;
  } else $list$0$i$i$i = $$0$i$i$i$i;
 }
 $49 = $37 + ~$list$0$i$i$i$lcssa | 0;
 if (((($49 | 0) > -1 ? $49 : 0 - $49 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = ($49 << 14) + 2147467264 | $$lcssa9 & 16383;
 $59 = $38;
 $58 = $e1 + 8 | 0;
 HEAP32[$58 >> 2] = $59;
 HEAP32[$e1 >> 2] = 10;
 return;
}

function _luaD_poscall($L, $firstResult) {
 $L = $L | 0;
 $firstResult = $firstResult | 0;
 var $$0 = 0, $$1 = 0, $$25 = 0, $0 = 0, $1 = 0, $13 = 0, $17 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $53 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$11 = 0, $res$04 = 0, $res$04$lcssa = 0, $res$1$lcssa = 0, $res$12 = 0, label = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAPU8[$L + 40 >> 0] | 0;
 if (!($4 & 6)) {
  $$1 = $firstResult;
  $26 = HEAP32[$1 + 8 >> 2] | 0;
 } else {
  if (!($4 & 2)) $$0 = $firstResult; else {
   $9 = $L + 28 | 0;
   $13 = $firstResult - (HEAP32[$9 >> 2] | 0) | 0;
   _luaD_hook($L, 1, -1);
   $$0 = (HEAP32[$9 >> 2] | 0) + $13 | 0;
  }
  $17 = HEAP32[$1 + 8 >> 2] | 0;
  HEAP32[$L + 20 >> 2] = HEAP32[$17 + 28 >> 2];
  $$1 = $$0;
  $26 = $17;
 }
 $22 = HEAP32[$1 >> 2] | 0;
 $24 = HEAP16[$1 + 16 >> 1] | 0;
 $25 = $24 << 16 >> 16;
 HEAP32[$0 >> 2] = $26;
 $27 = $L + 8 | 0;
 if (!($24 << 16 >> 16)) {
  $res$1$lcssa = $22;
  HEAP32[$27 >> 2] = $res$1$lcssa;
  $53 = $25 + 1 | 0;
  return $53 | 0;
 } else {
  $$25 = $$1;
  $i$03 = $25;
  $res$04 = $22;
 }
 while (1) {
  if ($$25 >>> 0 >= (HEAP32[$27 >> 2] | 0) >>> 0) {
   $i$03$lcssa = $i$03;
   $res$04$lcssa = $res$04;
   break;
  }
  $33 = $res$04 + 16 | 0;
  $34 = $$25;
  $39 = HEAP32[$34 + 4 >> 2] | 0;
  $40 = $res$04;
  HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$40 + 4 >> 2] = $39;
  HEAP32[$res$04 + 8 >> 2] = HEAP32[$$25 + 8 >> 2];
  $i$03 = $i$03 + -1 | 0;
  if (!$i$03) {
   $res$1$lcssa = $33;
   label = 12;
   break;
  } else {
   $$25 = $$25 + 16 | 0;
   $res$04 = $33;
  }
 }
 if ((label | 0) == 12) {
  HEAP32[$27 >> 2] = $res$1$lcssa;
  $53 = $25 + 1 | 0;
  return $53 | 0;
 }
 if (($i$03$lcssa | 0) > 0) {
  $i$11 = $i$03$lcssa;
  $res$12 = $res$04$lcssa;
 } else {
  $res$1$lcssa = $res$04$lcssa;
  HEAP32[$27 >> 2] = $res$1$lcssa;
  $53 = $25 + 1 | 0;
  return $53 | 0;
 }
 while (1) {
  HEAP32[$res$12 + 8 >> 2] = 0;
  if (($i$11 | 0) > 1) {
   $i$11 = $i$11 + -1 | 0;
   $res$12 = $res$12 + 16 | 0;
  } else break;
 }
 $res$1$lcssa = $res$04$lcssa + ($i$03$lcssa << 4) | 0;
 HEAP32[$27 >> 2] = $res$1$lcssa;
 $53 = $25 + 1 | 0;
 return $53 | 0;
}

function _lua_gc($L, $what, $data) {
 $L = $L | 0;
 $what = $what | 0;
 $data = $data | 0;
 var $$ = 0, $1 = 0, $22 = 0, $24 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $debt$0 = 0, $res$0 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 do switch ($what | 0) {
 case 3:
  {
   $res$0 = ((HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) | 0) >>> 10;
   return $res$0 | 0;
  }
 case 2:
  {
   _luaC_fullgc($L, 0);
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 8:
  {
   $36 = $1 + 160 | 0;
   $37 = HEAP32[$36 >> 2] | 0;
   HEAP32[$36 >> 2] = $data;
   $res$0 = $37;
   return $res$0 | 0;
  }
 case 10:
  {
   _luaC_changemode($L, 2);
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 11:
  {
   _luaC_changemode($L, 0);
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 4:
  {
   $res$0 = (HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0) & 1023;
   return $res$0 | 0;
  }
 case 6:
  {
   $34 = $1 + 156 | 0;
   $35 = HEAP32[$34 >> 2] | 0;
   HEAP32[$34 >> 2] = $data;
   $res$0 = $35;
   return $res$0 | 0;
  }
 case 7:
  {
   $38 = $1 + 164 | 0;
   $39 = HEAP32[$38 >> 2] | 0;
   HEAP32[$38 >> 2] = $data;
   $res$0 = $39;
   return $res$0 | 0;
  }
 case 1:
  {
   _luaE_setdebt($1, 0);
   HEAP8[$1 + 63 >> 0] = 1;
   $res$0 = 0;
   return $res$0 | 0;
  }
 case 9:
  {
   $res$0 = HEAPU8[$1 + 63 >> 0] | 0;
   return $res$0 | 0;
  }
 case 5:
  {
   if ((HEAP8[$1 + 62 >> 0] | 0) == 2) {
    $22 = (HEAP32[$1 + 20 >> 2] | 0) == 0 & 1;
    _luaC_forcestep($L);
    $res$0 = $22;
    return $res$0 | 0;
   }
   $24 = ($data << 10) + -1600 | 0;
   if (!(HEAP8[$1 + 63 >> 0] | 0)) {
    $debt$0 = $24;
    _luaE_setdebt($1, $debt$0);
    _luaC_forcestep($L);
    $31 = $1 + 61 | 0;
    $32 = HEAP8[$31 >> 0] | 0;
    $33 = $32 << 24 >> 24 == 5;
    $$ = $33 & 1;
    return $$ | 0;
   }
   $debt$0 = (HEAP32[$1 + 12 >> 2] | 0) + $24 | 0;
   _luaE_setdebt($1, $debt$0);
   _luaC_forcestep($L);
   $31 = $1 + 61 | 0;
   $32 = HEAP8[$31 >> 0] | 0;
   $33 = $32 << 24 >> 24 == 5;
   $$ = $33 & 1;
   return $$ | 0;
  }
 case 0:
  {
   HEAP8[$1 + 63 >> 0] = 0;
   $res$0 = 0;
   return $res$0 | 0;
  }
 default:
  {
   $res$0 = -1;
   return $res$0 | 0;
  }
 } while (0);
 return 0;
}

function _luaV_objlen($L, $ra, $rb) {
 $L = $L | 0;
 $ra = $ra | 0;
 $rb = $rb | 0;
 var $0 = 0, $15 = 0, $2 = 0, $25 = 0, $29 = 0, $3 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $42 = 0, $43 = 0, $5 = 0, $50 = 0, $52 = 0, $57 = 0, $58 = 0, $64 = 0, $66 = 0, $71 = 0, $72 = 0, $86 = 0, $88 = 0, $89 = 0, $90 = 0, $95 = 0, $96 = 0, $tm$0 = 0;
 $0 = $rb + 8 | 0;
 $2 = HEAP32[$0 >> 2] & 15;
 do if (($2 | 0) == 5) {
  $3 = HEAP32[$rb >> 2] | 0;
  $5 = HEAP32[$3 + 8 >> 2] | 0;
  if ($5) if (!(HEAP8[$5 + 6 >> 0] & 16)) {
   $15 = _luaT_gettm($5, 4, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 200 >> 2] | 0) | 0;
   if ($15) {
    $tm$0 = $15;
    break;
   }
  }
  HEAPF64[$ra >> 3] = +(_luaH_getn($3) | 0);
  HEAP32[$ra + 8 >> 2] = 3;
  return;
 } else if (($2 | 0) == 4) {
  HEAPF64[$ra >> 3] = +((HEAP32[(HEAP32[$rb >> 2] | 0) + 12 >> 2] | 0) >>> 0);
  HEAP32[$ra + 8 >> 2] = 3;
  return;
 } else {
  $25 = _luaT_gettmbyobj($L, $rb, 4) | 0;
  if (!(HEAP32[$25 + 8 >> 2] | 0)) _luaG_typeerror($L, $rb, 3672); else $tm$0 = $25;
 } while (0);
 $29 = $L + 28 | 0;
 $33 = $ra - (HEAP32[$29 >> 2] | 0) | 0;
 $34 = $L + 8 | 0;
 $35 = HEAP32[$34 >> 2] | 0;
 HEAP32[$34 >> 2] = $35 + 16;
 $37 = $tm$0;
 $42 = HEAP32[$37 + 4 >> 2] | 0;
 $43 = $35;
 HEAP32[$43 >> 2] = HEAP32[$37 >> 2];
 HEAP32[$43 + 4 >> 2] = $42;
 HEAP32[$35 + 8 >> 2] = HEAP32[$tm$0 + 8 >> 2];
 $50 = HEAP32[$34 >> 2] | 0;
 HEAP32[$34 >> 2] = $50 + 16;
 $52 = $rb;
 $57 = HEAP32[$52 + 4 >> 2] | 0;
 $58 = $50;
 HEAP32[$58 >> 2] = HEAP32[$52 >> 2];
 HEAP32[$58 + 4 >> 2] = $57;
 HEAP32[$50 + 8 >> 2] = HEAP32[$0 >> 2];
 $64 = HEAP32[$34 >> 2] | 0;
 HEAP32[$34 >> 2] = $64 + 16;
 $66 = $rb;
 $71 = HEAP32[$66 + 4 >> 2] | 0;
 $72 = $64;
 HEAP32[$72 >> 2] = HEAP32[$66 >> 2];
 HEAP32[$72 + 4 >> 2] = $71;
 HEAP32[$64 + 8 >> 2] = HEAP32[$0 >> 2];
 _luaD_call($L, (HEAP32[$34 >> 2] | 0) + -48 | 0, 1, (HEAPU8[(HEAP32[$L + 16 >> 2] | 0) + 18 >> 0] | 0) & 1);
 $86 = HEAP32[$29 >> 2] | 0;
 $88 = HEAP32[$34 >> 2] | 0;
 $89 = $88 + -16 | 0;
 HEAP32[$34 >> 2] = $89;
 $90 = $89;
 $95 = HEAP32[$90 + 4 >> 2] | 0;
 $96 = $86 + $33 | 0;
 HEAP32[$96 >> 2] = HEAP32[$90 >> 2];
 HEAP32[$96 + 4 >> 2] = $95;
 HEAP32[$86 + ($33 + 8) >> 2] = HEAP32[$88 + -8 >> 2];
 return;
}

function _lua_getupvalue($L, $funcindex, $n) {
 $L = $L | 0;
 $funcindex = $funcindex | 0;
 $n = $n | 0;
 var $$0$i = 0, $$0$i12 = 0, $$0$i15 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $48 = 0, $52 = 0, $56 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $69 = 0, $70 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($funcindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($funcindex << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($funcindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($funcindex << 4) | 0;
   break;
  }
  if (($funcindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $funcindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 63;
 do if (($31 | 0) == 38) {
  $32 = HEAP32[$$0$i >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAPU8[$32 + 6 >> 0] | 0 | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  } else {
   $$0$i15 = 10072;
   $59 = $32 + 16 + ($n + -1 << 4) | 0;
   break;
  }
 } else if (($31 | 0) == 6) {
  $41 = HEAP32[$$0$i >> 2] | 0;
  $43 = HEAP32[$41 + 12 >> 2] | 0;
  if (($n | 0) <= 0) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  if ((HEAP32[$43 + 40 >> 2] | 0) < ($n | 0)) {
   $$0$i12 = 0;
   return $$0$i12 | 0;
  }
  $48 = $n + -1 | 0;
  $52 = HEAP32[(HEAP32[$41 + 16 + ($48 << 2) >> 2] | 0) + 8 >> 2] | 0;
  $56 = HEAP32[(HEAP32[$43 + 28 >> 2] | 0) + ($48 << 3) >> 2] | 0;
  if (!$56) {
   $$0$i15 = 10072;
   $59 = $52;
  } else {
   $$0$i15 = $56 + 16 | 0;
   $59 = $52;
  }
 } else {
  $$0$i12 = 0;
  return $$0$i12 | 0;
 } while (0);
 $61 = $L + 8 | 0;
 $62 = HEAP32[$61 >> 2] | 0;
 $64 = $59;
 $69 = HEAP32[$64 + 4 >> 2] | 0;
 $70 = $62;
 HEAP32[$70 >> 2] = HEAP32[$64 >> 2];
 HEAP32[$70 + 4 >> 2] = $69;
 HEAP32[$62 + 8 >> 2] = HEAP32[$59 + 8 >> 2];
 HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 16;
 $$0$i12 = $$0$i15;
 return $$0$i12 | 0;
}

function _lua_setmetatable($L, $objindex) {
 $L = $L | 0;
 $objindex = $objindex | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $38 = 0, $4 = 0, $46 = 0, $59 = 0, $68 = 0, $69 = 0, $mt$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($objindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($objindex << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($objindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($objindex << 4) | 0;
   break;
  }
  if (($objindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $objindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (!(HEAP32[$30 + -8 >> 2] | 0)) $mt$0 = 0; else $mt$0 = HEAP32[$30 + -16 >> 2] | 0;
 $38 = HEAP32[$$0$i + 8 >> 2] & 15;
 if (($38 | 0) == 7) {
  HEAP32[(HEAP32[$$0$i >> 2] | 0) + 8 >> 2] = $mt$0;
  if (!$mt$0) {
   $68 = HEAP32[$29 >> 2] | 0;
   $69 = $68 + -16 | 0;
   HEAP32[$29 >> 2] = $69;
   return 1;
  }
  if (HEAP8[$mt$0 + 5 >> 0] & 3) {
   $59 = HEAP32[$$0$i >> 2] | 0;
   if (HEAP8[$59 + 5 >> 0] & 4) _luaC_barrier_($L, $59, $mt$0);
  }
  _luaC_checkfinalizer($L, HEAP32[$$0$i >> 2] | 0, $mt$0);
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -16 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 } else if (($38 | 0) == 5) {
  HEAP32[(HEAP32[$$0$i >> 2] | 0) + 8 >> 2] = $mt$0;
  if (!$mt$0) {
   $68 = HEAP32[$29 >> 2] | 0;
   $69 = $68 + -16 | 0;
   HEAP32[$29 >> 2] = $69;
   return 1;
  }
  if (HEAP8[$mt$0 + 5 >> 0] & 3) {
   $46 = HEAP32[$$0$i >> 2] | 0;
   if (HEAP8[$46 + 5 >> 0] & 4) _luaC_barrierback_($L, $46);
  }
  _luaC_checkfinalizer($L, HEAP32[$$0$i >> 2] | 0, $mt$0);
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -16 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 } else {
  HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 252 + ($38 << 2) >> 2] = $mt$0;
  $68 = HEAP32[$29 >> 2] | 0;
  $69 = $68 + -16 | 0;
  HEAP32[$29 >> 2] = $69;
  return 1;
 }
 return 0;
}

function _lua_getlocal($L, $ar, $n) {
 $L = $L | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $$0$i$ph = 0, $$in$i = 0, $$ph = 0, $12 = 0, $19 = 0, $2 = 0, $25 = 0, $38 = 0, $42 = 0, $52 = 0, $69 = 0, $70 = 0, $71 = 0, $76 = 0, $77 = 0, $base$02$i = 0, $base$03$i = 0, $name$0 = 0, $name$1$i = 0, label = 0;
 if (!$ar) {
  $2 = HEAP32[$L + 8 >> 2] | 0;
  if ((HEAP32[$2 + -8 >> 2] | 0) != 70) {
   $name$0 = 0;
   return $name$0 | 0;
  }
  $name$0 = _luaF_getlocalname(HEAP32[(HEAP32[$2 + -16 >> 2] | 0) + 12 >> 2] | 0, $n, 0) | 0;
  return $name$0 | 0;
 }
 $12 = HEAP32[$ar + 96 >> 2] | 0;
 do if (!(HEAP8[$12 + 18 >> 0] & 1)) {
  $base$02$i = (HEAP32[$12 >> 2] | 0) + 16 | 0;
  label = 10;
 } else {
  if (($n | 0) >= 0) {
   $38 = HEAP32[$12 + 24 >> 2] | 0;
   $42 = HEAP32[(HEAP32[HEAP32[$12 >> 2] >> 2] | 0) + 12 >> 2] | 0;
   $52 = _luaF_getlocalname($42, $n, ((HEAP32[$12 + 28 >> 2] | 0) - (HEAP32[$42 + 12 >> 2] | 0) >> 2) + -1 | 0) | 0;
   if (!$52) {
    $base$02$i = $38;
    label = 10;
    break;
   } else {
    $base$03$i = $38;
    $name$1$i = $52;
    label = 14;
    break;
   }
  }
  $19 = HEAP32[$12 >> 2] | 0;
  $25 = HEAPU8[(HEAP32[(HEAP32[$19 >> 2] | 0) + 12 >> 2] | 0) + 76 >> 0] | 0;
  if ((((HEAP32[$12 + 24 >> 2] | 0) - $19 >> 4) - $25 | 0) > (0 - $n | 0)) {
   $$0$i$ph = 416;
   $$ph = $19 + ($25 - $n << 4) | 0;
   break;
  } else {
   $name$0 = 0;
   return $name$0 | 0;
  }
 } while (0);
 if ((label | 0) == 10) {
  if ((HEAP32[$L + 16 >> 2] | 0) == ($12 | 0)) $$in$i = $L + 8 | 0; else $$in$i = HEAP32[$12 + 12 >> 2] | 0;
  if (($n | 0) > 0 ? ((HEAP32[$$in$i >> 2] | 0) - $base$02$i >> 4 | 0) >= ($n | 0) : 0) {
   $base$03$i = $base$02$i;
   $name$1$i = 400;
   label = 14;
  } else {
   $name$0 = 0;
   return $name$0 | 0;
  }
 }
 if ((label | 0) == 14) {
  $$0$i$ph = $name$1$i;
  $$ph = $base$03$i + ($n + -1 << 4) | 0;
 }
 $69 = $L + 8 | 0;
 $70 = HEAP32[$69 >> 2] | 0;
 $71 = $$ph;
 $76 = HEAP32[$71 + 4 >> 2] | 0;
 $77 = $70;
 HEAP32[$77 >> 2] = HEAP32[$71 >> 2];
 HEAP32[$77 + 4 >> 2] = $76;
 HEAP32[$70 + 8 >> 2] = HEAP32[$$ph + 8 >> 2];
 HEAP32[$69 >> 2] = (HEAP32[$69 >> 2] | 0) + 16;
 $name$0 = $$0$i$ph;
 return $name$0 | 0;
}

function _lua_setlocal($L, $ar, $n) {
 $L = $L | 0;
 $ar = $ar | 0;
 $n = $n | 0;
 var $$0$i$ph = 0, $$0$i1 = 0, $$in$i = 0, $$ph = 0, $1 = 0, $14 = 0, $27 = 0, $31 = 0, $41 = 0, $59 = 0, $61 = 0, $66 = 0, $67 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $base$02$i = 0, $base$03$i = 0, $name$1$i = 0, label = 0;
 $1 = HEAP32[$ar + 96 >> 2] | 0;
 do if (!(HEAP8[$1 + 18 >> 0] & 1)) {
  $base$02$i = (HEAP32[$1 >> 2] | 0) + 16 | 0;
  label = 7;
 } else {
  if (($n | 0) >= 0) {
   $27 = HEAP32[$1 + 24 >> 2] | 0;
   $31 = HEAP32[(HEAP32[HEAP32[$1 >> 2] >> 2] | 0) + 12 >> 2] | 0;
   $41 = _luaF_getlocalname($31, $n, ((HEAP32[$1 + 28 >> 2] | 0) - (HEAP32[$31 + 12 >> 2] | 0) >> 2) + -1 | 0) | 0;
   if (!$41) {
    $base$02$i = $27;
    label = 7;
    break;
   } else {
    $base$03$i = $27;
    $name$1$i = $41;
    label = 11;
    break;
   }
  }
  $8 = HEAP32[$1 >> 2] | 0;
  $14 = HEAPU8[(HEAP32[(HEAP32[$8 >> 2] | 0) + 12 >> 2] | 0) + 76 >> 0] | 0;
  if ((((HEAP32[$1 + 24 >> 2] | 0) - $8 >> 4) - $14 | 0) > (0 - $n | 0)) {
   $$0$i$ph = 416;
   $$ph = $8 + ($14 - $n << 4) | 0;
   break;
  } else {
   $$0$i1 = 0;
   $74 = $L + 8 | 0;
   $75 = HEAP32[$74 >> 2] | 0;
   $76 = $75 + -16 | 0;
   HEAP32[$74 >> 2] = $76;
   return $$0$i1 | 0;
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$L + 16 >> 2] | 0) == ($1 | 0)) $$in$i = $L + 8 | 0; else $$in$i = HEAP32[$1 + 12 >> 2] | 0;
  if (($n | 0) > 0 ? ((HEAP32[$$in$i >> 2] | 0) - $base$02$i >> 4 | 0) >= ($n | 0) : 0) {
   $base$03$i = $base$02$i;
   $name$1$i = 400;
   label = 11;
  } else {
   $$0$i1 = 0;
   $74 = $L + 8 | 0;
   $75 = HEAP32[$74 >> 2] | 0;
   $76 = $75 + -16 | 0;
   HEAP32[$74 >> 2] = $76;
   return $$0$i1 | 0;
  }
 }
 if ((label | 0) == 11) {
  $$0$i$ph = $name$1$i;
  $$ph = $base$03$i + ($n + -1 << 4) | 0;
 }
 $59 = HEAP32[$L + 8 >> 2] | 0;
 $61 = $59 + -16 | 0;
 $66 = HEAP32[$61 + 4 >> 2] | 0;
 $67 = $$ph;
 HEAP32[$67 >> 2] = HEAP32[$61 >> 2];
 HEAP32[$67 + 4 >> 2] = $66;
 HEAP32[$$ph + 8 >> 2] = HEAP32[$59 + -8 >> 2];
 $$0$i1 = $$0$i$ph;
 $74 = $L + 8 | 0;
 $75 = HEAP32[$74 >> 2] | 0;
 $76 = $75 + -16 | 0;
 HEAP32[$74 >> 2] = $76;
 return $$0$i1 | 0;
}

function _lua_compare($L, $index1, $index2, $op) {
 $L = $L | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 $op = $op | 0;
 var $$0$i = 0, $$0$i3 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $66 = 0, $i$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($index1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($index1 << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($index1 | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($index1 << 4) | 0;
   break;
  }
  if (($index1 | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $index1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 do if (($index2 | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($index2 << 4) | 0;
  $$0$i3 = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 1832;
 } else {
  if (($index2 | 0) >= -1000999) {
   $$0$i3 = (HEAP32[$L + 8 >> 2] | 0) + ($index2 << 4) | 0;
   break;
  }
  if (($index2 | 0) == -1001e3) {
   $$0$i3 = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $43 = -1001e3 - $index2 | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 8 >> 2] | 0) == 22) {
   $i$0 = 0;
   return $i$0 | 0;
  } else {
   $48 = HEAP32[$44 >> 2] | 0;
   $$0$i3 = ($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0) ? 1832 : $48 + 16 + ($43 + -1 << 4) | 0;
   break;
  }
 } while (0);
 if (!(($$0$i | 0) != 1832 & ($$0$i3 | 0) != 1832)) {
  $i$0 = 0;
  return $i$0 | 0;
 }
 if (!$op) {
  if ((HEAP32[$$0$i + 8 >> 2] | 0) == (HEAP32[$$0$i3 + 8 >> 2] | 0)) $66 = (_luaV_equalobj_($L, $$0$i, $$0$i3) | 0) != 0; else $66 = 0;
  $i$0 = $66 & 1;
  return $i$0 | 0;
 } else if (($op | 0) == 1) {
  $i$0 = _luaV_lessthan($L, $$0$i, $$0$i3) | 0;
  return $i$0 | 0;
 } else if (($op | 0) == 2) {
  $i$0 = _luaV_lessequal($L, $$0$i, $$0$i3) | 0;
  return $i$0 | 0;
 } else {
  $i$0 = 0;
  return $i$0 | 0;
 }
 return 0;
}

function _mainposition($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $10 = 0, $23 = 0, $24 = 0, $30 = 0, $34 = 0, $8 = 0, $i$1$i = 0, $u$sroa$0$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $u$sroa$0$i = sp;
 switch (HEAP32[$key + 8 >> 2] & 63 | 0) {
 case 1:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[$key >> 2]) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 22:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 3:
  {
   HEAPF64[$u$sroa$0$i >> 3] = +HEAPF64[$key >> 3] + 1.0;
   $8 = (HEAP32[$u$sroa$0$i + 4 >> 2] | 0) + (HEAP32[$u$sroa$0$i >> 2] | 0) | 0;
   if (($8 | 0) < 0) {
    $10 = 0 - $8 | 0;
    $i$1$i = ($8 | 0) == ($10 | 0) ? 0 : $10;
   } else $i$1$i = $8;
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((($i$1$i | 0) % ((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1 | 0) | 0) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 4:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[(HEAP32[$key >> 2] | 0) + 8 >> 2]) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 2:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 case 20:
  {
   $23 = HEAP32[$key >> 2] | 0;
   $24 = $23 + 6 | 0;
   if (!(HEAP8[$24 >> 0] | 0)) {
    $30 = $23 + 8 | 0;
    HEAP32[$30 >> 2] = _luaS_hash($23 + 16 | 0, HEAP32[$23 + 12 >> 2] | 0, HEAP32[$30 >> 2] | 0) | 0;
    HEAP8[$24 >> 0] = 1;
    $34 = HEAP32[$key >> 2] | 0;
   } else $34 = $23;
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << HEAPU8[$t + 7 >> 0]) + -1 & HEAP32[$34 + 8 >> 2]) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 default:
  {
   $$0 = (HEAP32[$t + 16 >> 2] | 0) + ((((HEAP32[$key >> 2] | 0) >>> 0) % (((1 << HEAPU8[$t + 7 >> 0]) + -1 | 1) >>> 0) | 0) << 5) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 return 0;
}

function _addk($fs, $key, $v) {
 $fs = $fs | 0;
 $key = $key | 0;
 $v = $v | 0;
 var $$0 = 0, $13 = 0, $15 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $34 = 0, $36 = 0, $41 = 0, $46 = 0, $47 = 0, $51 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $oldsize$01 = 0, $u$sroa$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $u$sroa$0 = sp;
 $3 = HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0;
 $6 = _luaH_set($3, HEAP32[$fs + 4 >> 2] | 0, $key) | 0;
 $7 = HEAP32[$fs >> 2] | 0;
 $8 = $6 + 8 | 0;
 if ((HEAP32[$8 >> 2] | 0) == 3) {
  HEAPF64[$u$sroa$0 >> 3] = +HEAPF64[$6 >> 3] + 6755399441055744.0;
  $13 = HEAP32[$u$sroa$0 >> 2] | 0;
  $15 = HEAP32[$7 + 8 >> 2] | 0;
  if ((HEAP32[$15 + ($13 << 4) + 8 >> 2] | 0) == (HEAP32[$v + 8 >> 2] | 0)) if (_luaV_equalobj_(0, $15 + ($13 << 4) | 0, $v) | 0) {
   $$0 = $13;
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 $24 = $7 + 44 | 0;
 $25 = HEAP32[$24 >> 2] | 0;
 $26 = $fs + 32 | 0;
 $27 = HEAP32[$26 >> 2] | 0;
 HEAPF64[$6 >> 3] = +($27 | 0);
 HEAP32[$8 >> 2] = 3;
 if (($27 | 0) < ($25 | 0)) $34 = $25; else {
  $30 = $7 + 8 | 0;
  HEAP32[$30 >> 2] = _luaM_growaux_($3, HEAP32[$30 >> 2] | 0, $24, 16, 67108863, 112) | 0;
  $34 = HEAP32[$24 >> 2] | 0;
 }
 $36 = HEAP32[$7 + 8 >> 2] | 0;
 if (($25 | 0) < ($34 | 0)) {
  $oldsize$01 = $25;
  do {
   HEAP32[$36 + ($oldsize$01 << 4) + 8 >> 2] = 0;
   $oldsize$01 = $oldsize$01 + 1 | 0;
  } while (($oldsize$01 | 0) < ($34 | 0));
 }
 $41 = $v;
 $46 = HEAP32[$41 + 4 >> 2] | 0;
 $47 = $36 + ($27 << 4) | 0;
 HEAP32[$47 >> 2] = HEAP32[$41 >> 2];
 HEAP32[$47 + 4 >> 2] = $46;
 $51 = $v + 8 | 0;
 HEAP32[$36 + ($27 << 4) + 8 >> 2] = HEAP32[$51 >> 2];
 HEAP32[$26 >> 2] = (HEAP32[$26 >> 2] | 0) + 1;
 if (!(HEAP32[$51 >> 2] & 64)) {
  $$0 = $27;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $59 = HEAP32[$v >> 2] | 0;
 if (!(HEAP8[$59 + 5 >> 0] & 3)) {
  $$0 = $27;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$7 + 5 >> 0] & 4)) {
  $$0 = $27;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _luaC_barrier_($3, $7, $59);
 $$0 = $27;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_copy($L, $fromidx, $toidx) {
 $L = $L | 0;
 $fromidx = $fromidx | 0;
 $toidx = $toidx | 0;
 var $$0$i = 0, $$0$i2 = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $56 = 0, $61 = 0, $62 = 0, $66 = 0, $73 = 0, $80 = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (($fromidx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fromidx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($fromidx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($fromidx << 4) | 0;
   break;
  }
  if (($fromidx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $fromidx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 do if (($toidx | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($toidx << 4) | 0;
  $$0$i2 = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 1832;
 } else {
  if (($toidx | 0) >= -1000999) {
   $$0$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($toidx << 4) | 0;
   break;
  }
  if (($toidx | 0) == -1001e3) {
   $$0$i2 = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $43 = -1001e3 - $toidx | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 8 >> 2] | 0) == 22) $$0$i2 = 1832; else {
   $48 = HEAP32[$44 >> 2] | 0;
   $$0$i2 = ($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0) ? 1832 : $48 + 16 + ($43 + -1 << 4) | 0;
  }
 } while (0);
 $56 = $$0$i;
 $61 = HEAP32[$56 + 4 >> 2] | 0;
 $62 = $$0$i2;
 HEAP32[$62 >> 2] = HEAP32[$56 >> 2];
 HEAP32[$62 + 4 >> 2] = $61;
 $66 = $$0$i + 8 | 0;
 HEAP32[$$0$i2 + 8 >> 2] = HEAP32[$66 >> 2];
 if (($toidx | 0) >= -1001e3) return;
 if (!(HEAP32[$66 >> 2] & 64)) return;
 $73 = HEAP32[$$0$i >> 2] | 0;
 if (!(HEAP8[$73 + 5 >> 0] & 3)) return;
 $80 = HEAP32[HEAP32[HEAP32[$0 >> 2] >> 2] >> 2] | 0;
 if (!(HEAP8[$80 + 5 >> 0] & 4)) return;
 _luaC_barrier_($L, $80, $73);
 return;
}

function _lua_tolstring($L, $idx, $len) {
 $L = $L | 0;
 $idx = $idx | 0;
 $len = $len | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $36 = 0, $4 = 0, $41 = 0, $43 = 0, $54 = 0, $55 = 0, $59 = 0, $68 = 0, $72 = 0, $o$0 = 0;
 $0 = $L + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = ($idx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 do if ((HEAP32[$$0$i + 8 >> 2] & 15 | 0) == 4) $o$0 = $$0$i; else {
  if (!(_luaV_tostring($L, $$0$i) | 0)) {
   if (!$len) {
    $$0 = 0;
    return $$0 | 0;
   }
   HEAP32[$len >> 2] = 0;
   $$0 = 0;
   return $$0 | 0;
  }
  $36 = $L + 12 | 0;
  if ((HEAP32[(HEAP32[$36 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
  $41 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $43 = (HEAP32[$41 >> 2] | 0) + ($idx << 4) | 0;
   $o$0 = $43 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $43 : 1832;
   break;
  }
  if (($idx | 0) >= -1000999) {
   $o$0 = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $o$0 = (HEAP32[$36 >> 2] | 0) + 40 | 0;
   break;
  }
  $54 = -1001e3 - $idx | 0;
  $55 = HEAP32[$41 >> 2] | 0;
  if ((HEAP32[$55 + 8 >> 2] | 0) == 22) $o$0 = 1832; else {
   $59 = HEAP32[$55 >> 2] | 0;
   $o$0 = ($54 | 0) > (HEAPU8[$59 + 6 >> 0] | 0 | 0) ? 1832 : $59 + 16 + ($54 + -1 << 4) | 0;
  }
 } while (0);
 if (!$len) $72 = HEAP32[$o$0 >> 2] | 0; else {
  $68 = HEAP32[$o$0 >> 2] | 0;
  HEAP32[$len >> 2] = HEAP32[$68 + 12 >> 2];
  $72 = $68;
 }
 $$0 = $72 + 16 | 0;
 return $$0 | 0;
}

function _luaM_growaux_($L, $block, $size, $size_elems, $limit, $what) {
 $L = $L | 0;
 $block = $block | 0;
 $size = $size | 0;
 $size_elems = $size_elems | 0;
 $limit = $limit | 0;
 $what = $what | 0;
 var $$neg$i = 0, $0 = 0, $10 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $9 = 0, $newblock$1$i = 0, $newsize$0 = 0, $osize$op$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$size >> 2] | 0;
 if (($0 | 0) < (($limit | 0) / 2 | 0 | 0)) {
  $4 = $0 << 1;
  $newsize$0 = ($4 | 0) < 4 ? 4 : $4;
 } else if (($0 | 0) < ($limit | 0)) $newsize$0 = $limit; else {
  HEAP32[$vararg_buffer >> 2] = $what;
  HEAP32[$vararg_buffer + 4 >> 2] = $limit;
  _luaG_runerror($L, 1760, $vararg_buffer);
 }
 if (($newsize$0 + 1 | 0) >>> 0 > (4294967293 / ($size_elems >>> 0) | 0) >>> 0) _luaM_toobig($L);
 $9 = Math_imul($0, $size_elems) | 0;
 $10 = Math_imul($newsize$0, $size_elems) | 0;
 $12 = HEAP32[$L + 12 >> 2] | 0;
 $13 = ($block | 0) != 0;
 $15 = $12 + 4 | 0;
 $17 = FUNCTION_TABLE_iiiii[HEAP32[$12 >> 2] & 31](HEAP32[$15 >> 2] | 0, $block, $9, $10) | 0;
 if (!(($10 | 0) != 0 & ($17 | 0) == 0)) {
  $newblock$1$i = $17;
  $27 = $12 + 12 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $osize$op$i = 0 - $9 | 0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = $$neg$i + $10 | 0;
  $30 = $29 + $28 | 0;
  HEAP32[$27 >> 2] = $30;
  HEAP32[$size >> 2] = $newsize$0;
  STACKTOP = sp;
  return $newblock$1$i | 0;
 }
 if (!(HEAP8[$12 + 63 >> 0] | 0)) _luaD_throw($L, 4);
 _luaC_fullgc($L, 1);
 $25 = FUNCTION_TABLE_iiiii[HEAP32[$12 >> 2] & 31](HEAP32[$15 >> 2] | 0, $block, $9, $10) | 0;
 if (!$25) _luaD_throw($L, 4); else {
  $newblock$1$i = $25;
  $27 = $12 + 12 | 0;
  $28 = HEAP32[$27 >> 2] | 0;
  $osize$op$i = 0 - $9 | 0;
  $$neg$i = $13 ? $osize$op$i : 0;
  $29 = $$neg$i + $10 | 0;
  $30 = $29 + $28 | 0;
  HEAP32[$27 >> 2] = $30;
  HEAP32[$size >> 2] = $newsize$0;
  STACKTOP = sp;
  return $newblock$1$i | 0;
 }
 return 0;
}

function _codearith($fs, $op, $e1, $e2, $line) {
 $fs = $fs | 0;
 $op = $op | 0;
 $e1 = $e1 | 0;
 $e2 = $e2 | 0;
 $line = $line | 0;
 var $19 = 0.0, $22 = 0, $26 = 0, $28 = 0, $32 = 0, $39 = 0, $45 = 0, $52 = 0, $58 = 0, $65 = 0, $71 = 0, $78 = 0;
 if ((HEAP32[$e1 >> 2] | 0) == 5) if ((HEAP32[$e1 + 16 >> 2] | 0) == -1) if ((HEAP32[$e1 + 20 >> 2] | 0) == -1) if ((HEAP32[$e2 >> 2] | 0) == 5) if ((HEAP32[$e2 + 16 >> 2] | 0) == -1) if ((HEAP32[$e2 + 20 >> 2] | 0) == -1) {
  $19 = +HEAPF64[$e2 + 8 >> 3];
  if (!(($op & -2 | 0) == 16 & $19 == 0.0)) {
   $22 = $e1 + 8 | 0;
   HEAPF64[$22 >> 3] = +_luaO_arith($op + -13 | 0, +HEAPF64[$22 >> 3], $19);
   return;
  }
 }
 if (($op | 0) == 19 | ($op | 0) == 21) $28 = 0; else $28 = _luaK_exp2RK($fs, $e2) | 0;
 $26 = _luaK_exp2RK($fs, $e1) | 0;
 if (($26 | 0) > ($28 | 0)) {
  if ((HEAP32[$e1 >> 2] | 0) == 6) {
   $32 = HEAP32[$e1 + 8 >> 2] | 0;
   if (!($32 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($32 | 0)) {
    $39 = $fs + 48 | 0;
    HEAP8[$39 >> 0] = (HEAP8[$39 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  if ((HEAP32[$e2 >> 2] | 0) == 6) {
   $45 = HEAP32[$e2 + 8 >> 2] | 0;
   if (!($45 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($45 | 0)) {
    $52 = $fs + 48 | 0;
    HEAP8[$52 >> 0] = (HEAP8[$52 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
 } else {
  if ((HEAP32[$e2 >> 2] | 0) == 6) {
   $58 = HEAP32[$e2 + 8 >> 2] | 0;
   if (!($58 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($58 | 0)) {
    $65 = $fs + 48 | 0;
    HEAP8[$65 >> 0] = (HEAP8[$65 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  if ((HEAP32[$e1 >> 2] | 0) == 6) {
   $71 = HEAP32[$e1 + 8 >> 2] | 0;
   if (!($71 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($71 | 0)) {
    $78 = $fs + 48 | 0;
    HEAP8[$78 >> 0] = (HEAP8[$78 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
 }
 HEAP32[$e1 + 8 >> 2] = _luaK_code($fs, $28 << 14 | $op | $26 << 23) | 0;
 HEAP32[$e1 >> 2] = 11;
 HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 20 >> 2] | 0) + ((HEAP32[$fs + 20 >> 2] | 0) + -1 << 2) >> 2] = $line;
 return;
}

function _luaK_exp2RK($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0 = 0, $0 = 0, $21 = 0, $23 = 0, $24 = 0.0, $28 = 0, $31 = 0, $32 = 0, $34 = 0, $42 = 0, $46 = 0, $6 = 0, $n$0$i = 0, $o$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $o$i1 = sp;
 if ((HEAP32[$e + 16 >> 2] | 0) == (HEAP32[$e + 20 >> 2] | 0)) _luaK_dischargevars($fs, $e); else _luaK_exp2anyreg($fs, $e) | 0;
 $6 = HEAP32[$e >> 2] | 0;
 switch ($6 | 0) {
 case 5:
  {
   $23 = $e + 8 | 0;
   $24 = +HEAPF64[$23 >> 3];
   HEAPF64[$0 >> 3] = $24;
   $28 = HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0;
   HEAPF64[$o$i1 >> 3] = $24;
   HEAP32[$o$i1 + 8 >> 2] = 3;
   if ($24 != $24 | 0.0 != 0.0 | $24 == 0.0) {
    $31 = $28 + 8 | 0;
    $32 = HEAP32[$31 >> 2] | 0;
    HEAP32[$31 >> 2] = $32 + 16;
    $34 = _luaS_newlstr($28, $0, 8) | 0;
    HEAP32[$32 >> 2] = $34;
    HEAP32[$32 + 8 >> 2] = HEAPU8[$34 + 4 >> 0] | 0 | 64;
    $42 = _addk($fs, (HEAP32[$31 >> 2] | 0) + -16 | 0, $o$i1) | 0;
    HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + -16;
    $n$0$i = $42;
   } else $n$0$i = _addk($fs, $o$i1, $o$i1) | 0;
   HEAP32[$23 >> 2] = $n$0$i;
   HEAP32[$e >> 2] = 4;
   $46 = $n$0$i;
   label = 15;
   break;
  }
 case 1:
 case 3:
 case 2:
  {
   if ((HEAP32[$fs + 32 >> 2] | 0) < 256) {
    if (($6 | 0) == 1) {
     HEAP32[$o$i1 + 8 >> 2] = 0;
     HEAP32[$0 >> 2] = HEAP32[$fs + 4 >> 2];
     HEAP32[$0 + 8 >> 2] = 69;
     $21 = _addk($fs, $0, $o$i1) | 0;
    } else {
     HEAP32[$0 >> 2] = ($6 | 0) == 2 & 1;
     HEAP32[$0 + 8 >> 2] = 1;
     $21 = _addk($fs, $0, $0) | 0;
    }
    HEAP32[$e + 8 >> 2] = $21;
    HEAP32[$e >> 2] = 4;
    $$0 = $21 | 256;
    STACKTOP = sp;
    return $$0 | 0;
   }
   break;
  }
 case 4:
  {
   $46 = HEAP32[$e + 8 >> 2] | 0;
   label = 15;
   break;
  }
 default:
  {}
 }
 if ((label | 0) == 15) if (($46 | 0) < 256) {
  $$0 = $46 | 256;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaK_exp2anyreg($fs, $e) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _log10($x) {
 $x = +$x;
 var $$0 = 0.0, $0 = 0, $1 = 0, $14 = 0, $20 = 0, $26 = 0, $27 = 0.0, $29 = 0.0, $3 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $49 = 0, $50 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $65 = 0.0, $70 = 0, $hx$0 = 0, $k$0 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $3 = ($1 | 0) < 0;
 do if ($3 | $1 >>> 0 < 1048576) {
  if (($0 | 0) == 0 & ($1 & 2147483647 | 0) == 0) {
   $$0 = -1.0 / ($x * $x);
   return +$$0;
  }
  if (!$3) {
   HEAPF64[tempDoublePtr >> 3] = $x * 18014398509481984.0;
   $14 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
   $26 = HEAP32[tempDoublePtr >> 2] | 0;
   $70 = $14;
   $hx$0 = $14;
   $k$0 = -1077;
   break;
  }
  $$0 = ($x - $x) / 0.0;
  return +$$0;
 } else {
  if ($1 >>> 0 > 2146435071) {
   $$0 = $x;
   return +$$0;
  }
  if (($0 | 0) == 0 & 0 == 0 & ($1 | 0) == 1072693248) {
   $$0 = 0.0;
   return +$$0;
  } else {
   $26 = $0;
   $70 = $1;
   $hx$0 = $1;
   $k$0 = -1023;
  }
 } while (0);
 $20 = $hx$0 + 614242 | 0;
 HEAP32[tempDoublePtr >> 2] = $26;
 HEAP32[tempDoublePtr + 4 >> 2] = ($20 & 1048575) + 1072079006;
 $27 = +HEAPF64[tempDoublePtr >> 3] + -1.0;
 $29 = $27 * ($27 * .5);
 $31 = $27 / ($27 + 2.0);
 $32 = $31 * $31;
 $33 = $32 * $32;
 HEAPF64[tempDoublePtr >> 3] = $27 - $29;
 $49 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAP32[tempDoublePtr >> 2] = 0;
 HEAP32[tempDoublePtr + 4 >> 2] = $49;
 $50 = +HEAPF64[tempDoublePtr >> 3];
 $55 = $31 * ($29 + ($33 * ($33 * ($33 * .15313837699209373 + .22222198432149784) + .3999999999940942) + $32 * ($33 * ($33 * ($33 * .14798198605116586 + .1818357216161805) + .2857142874366239) + .6666666666666735))) + ($27 - $50 - $29);
 $56 = $50 * .4342944818781689;
 $57 = +($k$0 + ($20 >>> 20) | 0);
 $58 = $57 * .30102999566361177;
 $65 = $58 + $56;
 $$0 = $65 + ($56 + ($58 - $65) + ($55 * .4342944818781689 + ($57 * 3.694239077158931e-13 + ($50 + $55) * 2.5082946711645275e-11)));
 return +$$0;
}

function _lua_upvaluejoin($L, $fidx1, $n1, $fidx2, $n2) {
 $L = $L | 0;
 $fidx1 = $fidx1 | 0;
 $n1 = $n1 | 0;
 $fidx2 = $fidx2 | 0;
 $n2 = $n2 | 0;
 var $$0$i$i = 0, $$0$i$i2 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $31 = 0, $34 = 0, $4 = 0, $46 = 0, $47 = 0, $51 = 0, $61 = 0, $63 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($fidx1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fidx1 << 4) | 0;
  $$0$i$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($fidx1 | 0) >= -1000999) {
   $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx1 << 4) | 0;
   break;
  }
  if (($fidx1 | 0) == -1001e3) {
   $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $fidx1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = HEAP32[$$0$i$i >> 2] | 0;
 $31 = $29 + 16 + ($n1 + -1 << 2) | 0;
 do if (($fidx2 | 0) > 0) {
  $34 = (HEAP32[$1 >> 2] | 0) + ($fidx2 << 4) | 0;
  $$0$i$i2 = $34 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $34 : 1832;
 } else {
  if (($fidx2 | 0) >= -1000999) {
   $$0$i$i2 = (HEAP32[$L + 8 >> 2] | 0) + ($fidx2 << 4) | 0;
   break;
  }
  if (($fidx2 | 0) == -1001e3) {
   $$0$i$i2 = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $46 = -1001e3 - $fidx2 | 0;
  $47 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$47 + 8 >> 2] | 0) == 22) $$0$i$i2 = 1832; else {
   $51 = HEAP32[$47 >> 2] | 0;
   $$0$i$i2 = ($46 | 0) > (HEAPU8[$51 + 6 >> 0] | 0 | 0) ? 1832 : $51 + 16 + ($46 + -1 << 4) | 0;
  }
 } while (0);
 $61 = (HEAP32[$$0$i$i2 >> 2] | 0) + 16 + ($n2 + -1 << 2) | 0;
 HEAP32[$31 >> 2] = HEAP32[$61 >> 2];
 $63 = HEAP32[$61 >> 2] | 0;
 if (!(HEAP8[$63 + 5 >> 0] & 3)) return;
 if (!(HEAP8[$29 + 5 >> 0] & 4)) return;
 _luaC_barrier_($L, $29, $63);
 return;
}

function _lua_rawsetp($L, $idx, $p) {
 $L = $L | 0;
 $idx = $idx | 0;
 $p = $p | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $59 = 0, $64 = 0, $65 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 HEAP32[$k >> 2] = $p;
 HEAP32[$k + 8 >> 2] = 2;
 $30 = $L + 8 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 $34 = _luaH_set($L, HEAP32[$$0$i >> 2] | 0, $k) | 0;
 $35 = $31 + -16 | 0;
 $40 = HEAP32[$35 + 4 >> 2] | 0;
 $41 = $34;
 HEAP32[$41 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$41 + 4 >> 2] = $40;
 HEAP32[$34 + 8 >> 2] = HEAP32[$31 + -8 >> 2];
 $48 = HEAP32[$30 >> 2] | 0;
 if (!(HEAP32[$48 + -8 >> 2] & 64)) {
  $65 = $48;
  $64 = $65 + -16 | 0;
  HEAP32[$30 >> 2] = $64;
  STACKTOP = sp;
  return;
 }
 if (!(HEAP8[(HEAP32[$48 + -16 >> 2] | 0) + 5 >> 0] & 3)) {
  $65 = $48;
  $64 = $65 + -16 | 0;
  HEAP32[$30 >> 2] = $64;
  STACKTOP = sp;
  return;
 }
 $59 = HEAP32[$$0$i >> 2] | 0;
 if (!(HEAP8[$59 + 5 >> 0] & 4)) {
  $65 = $48;
  $64 = $65 + -16 | 0;
  HEAP32[$30 >> 2] = $64;
  STACKTOP = sp;
  return;
 }
 _luaC_barrierback_($L, $59);
 $65 = HEAP32[$30 >> 2] | 0;
 $64 = $65 + -16 | 0;
 HEAP32[$30 >> 2] = $64;
 STACKTOP = sp;
 return;
}

function _luaO_chunkid($out, $source, $bufflen) {
 $out = $out | 0;
 $source = $source | 0;
 $bufflen = $bufflen | 0;
 var $$0 = 0, $$l$0 = 0, $$sum3$pn = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $21 = 0, $3 = 0, $4 = 0, $l$0 = 0, dest = 0, src = 0, stop = 0;
 $0 = _strlen($source | 0) | 0;
 $1 = HEAP8[$source >> 0] | 0;
 if ($1 << 24 >> 24 == 64) if ($0 >>> 0 > $bufflen >>> 0) {
  HEAP8[$out >> 0] = HEAP8[2184] | 0;
  HEAP8[$out + 1 >> 0] = HEAP8[2185] | 0;
  HEAP8[$out + 2 >> 0] = HEAP8[2186] | 0;
  _memcpy($out + 3 | 0, $source + (4 - $bufflen + $0) | 0, $bufflen + -3 | 0) | 0;
  return;
 } else {
  _memcpy($out | 0, $source + 1 | 0, $0 | 0) | 0;
  return;
 } else if ($1 << 24 >> 24 == 61) {
  $3 = $source + 1 | 0;
  if ($0 >>> 0 > $bufflen >>> 0) {
   $4 = $bufflen + -1 | 0;
   _memcpy($out | 0, $3 | 0, $4 | 0) | 0;
   HEAP8[$out + $4 >> 0] = 0;
   return;
  } else {
   _memcpy($out | 0, $3 | 0, $0 | 0) | 0;
   return;
  }
 } else {
  $12 = _strchr($source, 10) | 0;
  dest = $out;
  src = 2192;
  stop = dest + 9 | 0;
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $13 = $out + 9 | 0;
  $14 = $bufflen + -15 | 0;
  $16 = ($12 | 0) == 0;
  if ($0 >>> 0 < $14 >>> 0 & $16) {
   _memcpy($13 | 0, $source | 0, $0 | 0) | 0;
   $$sum3$pn = $0 + 9 | 0;
  } else {
   $l$0 = $16 ? $0 : $12 - $source | 0;
   $$l$0 = $l$0 >>> 0 > $14 >>> 0 ? $14 : $l$0;
   _memcpy($13 | 0, $source | 0, $$l$0 | 0) | 0;
   $21 = $out + ($$l$0 + 9) | 0;
   HEAP8[$21 >> 0] = HEAP8[2184] | 0;
   HEAP8[$21 + 1 >> 0] = HEAP8[2185] | 0;
   HEAP8[$21 + 2 >> 0] = HEAP8[2186] | 0;
   $$sum3$pn = $$l$0 + 12 | 0;
  }
  $$0 = $out + $$sum3$pn | 0;
  HEAP8[$$0 >> 0] = HEAP8[2208] | 0;
  HEAP8[$$0 + 1 >> 0] = HEAP8[2209] | 0;
  HEAP8[$$0 + 2 >> 0] = HEAP8[2210] | 0;
  return;
 }
}

function _luaS_resize($L, $newsize) {
 $L = $L | 0;
 $newsize = $newsize | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $i$12 = 0, $p$01 = 0, $p$01$looptemp = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $1 + 24 | 0;
 _luaC_runtilstate($L, -5);
 $3 = $1 + 32 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 if (($4 | 0) < ($newsize | 0)) {
  if (($newsize + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($L);
  $14 = _luaM_realloc_($L, HEAP32[$2 >> 2] | 0, $4 << 2, $newsize << 2) | 0;
  HEAP32[$2 >> 2] = $14;
  $15 = HEAP32[$3 >> 2] | 0;
  if (($15 | 0) < ($newsize | 0)) {
   HEAP32[$14 + ($15 << 2) >> 2] = 0;
   $18 = $15 + 1 | 0;
   if (($18 | 0) == ($newsize | 0)) $6 = $15; else {
    $20 = $18;
    do {
     HEAP32[(HEAP32[$2 >> 2] | 0) + ($20 << 2) >> 2] = 0;
     $20 = $20 + 1 | 0;
    } while (($20 | 0) != ($newsize | 0));
    $6 = $15;
   }
  } else $6 = $15;
 } else $6 = $4;
 if (($6 | 0) > 0) {
  $8 = $newsize + -1 | 0;
  $i$12 = 0;
  do {
   $23 = (HEAP32[$2 >> 2] | 0) + ($i$12 << 2) | 0;
   $24 = HEAP32[$23 >> 2] | 0;
   HEAP32[$23 >> 2] = 0;
   if ($24) {
    $p$01 = $24;
    do {
     $p$01$looptemp = $p$01;
     $p$01 = HEAP32[$p$01 >> 2] | 0;
     $31 = (HEAP32[$2 >> 2] | 0) + ((HEAP32[$p$01$looptemp + 8 >> 2] & $8) << 2) | 0;
     HEAP32[$p$01$looptemp >> 2] = HEAP32[$31 >> 2];
     HEAP32[$31 >> 2] = $p$01$looptemp;
     $33 = $p$01$looptemp + 5 | 0;
     HEAP8[$33 >> 0] = (HEAPU8[$33 >> 0] | 0) & 191;
    } while (($p$01 | 0) != 0);
   }
   $i$12 = $i$12 + 1 | 0;
  } while (($i$12 | 0) < ($6 | 0));
 }
 if (($6 | 0) <= ($newsize | 0)) {
  HEAP32[$3 >> 2] = $newsize;
  return;
 }
 if (($newsize + 1 | 0) >>> 0 > 1073741823) _luaM_toobig($L);
 HEAP32[$2 >> 2] = _luaM_realloc_($L, HEAP32[$2 >> 2] | 0, $6 << 2, $newsize << 2) | 0;
 HEAP32[$3 >> 2] = $newsize;
 return;
}

function _luaD_rawrunprotected($L, $f, $ud) {
 $L = $L | 0;
 $f = $f | 0;
 $ud = $ud | 0;
 var $$reg2mem22$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $lj = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 _setjmpTableSize = 4;
 _setjmpTable = _malloc(40) | 0;
 HEAP32[_setjmpTable >> 2] = 0;
 $lj = sp;
 $0 = $L + 38 | 0;
 $1 = HEAP16[$0 >> 1] | 0;
 $2 = $lj + 160 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $L + 64 | 0;
 HEAP32[$lj >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $lj;
 _setjmpTable = _saveSetjmp($lj + 4 | 0, 1, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
 _setjmpTableSize = tempRet0;
 __THREW__ = 0;
 $6 = __THREW__;
 __THREW__ = 0;
 if (($6 | 0) != 0 & (threwValue | 0) != 0) {
  $7 = _testSetjmp(HEAP32[$6 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
  if (!$7) _longjmp($6 | 0, threwValue | 0);
  tempRet0 = threwValue;
 } else $7 = -1;
 if (($7 | 0) == 1) $$reg2mem22$0 = tempRet0; else $$reg2mem22$0 = 0;
 while (1) {
  if ($$reg2mem22$0) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f | 0, $L | 0, $ud | 0);
  $10 = __THREW__;
  __THREW__ = 0;
  if (($10 | 0) != 0 & (threwValue | 0) != 0) {
   $11 = _testSetjmp(HEAP32[$10 >> 2] | 0, _setjmpTable | 0, _setjmpTableSize | 0) | 0;
   if (!$11) _longjmp($10 | 0, threwValue | 0);
   tempRet0 = threwValue;
  } else $11 = -1;
  if (($11 | 0) == 1) $$reg2mem22$0 = tempRet0; else break;
 }
 if ((label | 0) == 6) {
  $13 = HEAP32[$lj >> 2] | 0;
  HEAP32[$3 >> 2] = $13;
  HEAP16[$0 >> 1] = $1;
  $14 = HEAP32[$2 >> 2] | 0;
  _free(_setjmpTable | 0);
  STACKTOP = sp;
  return $14 | 0;
 }
 $13 = HEAP32[$lj >> 2] | 0;
 HEAP32[$3 >> 2] = $13;
 HEAP16[$0 >> 1] = $1;
 $14 = HEAP32[$2 >> 2] | 0;
 _free(_setjmpTable | 0);
 STACKTOP = sp;
 return $14 | 0;
}

function _luaB_tonumber($L) {
 $L = $L | 0;
 var $10 = 0, $11 = 0, $12 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $26 = 0, $30 = 0.0, $31 = 0, $5 = 0, $7 = 0, $8 = 0, $isnum = 0, $l = 0, $n1$0 = 0.0, $n1$1 = 0.0, $neg$0 = 0, $s$0 = 0, $s$1 = 0, $s$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum = sp + 4 | 0;
 $l = sp;
 do if ((_lua_type($L, 2) | 0) < 1) {
  $2 = +_lua_tonumberx($L, 1, $isnum);
  if (!(HEAP32[$isnum >> 2] | 0)) {
   _luaL_checkany($L, 1);
   break;
  }
  _lua_pushnumber($L, $2);
  STACKTOP = sp;
  return 1;
 } else {
  $5 = _luaL_checklstring($L, 1, $l) | 0;
  $7 = $5 + (HEAP32[$l >> 2] | 0) | 0;
  $8 = _luaL_checkinteger($L, 2) | 0;
  if (($8 + -2 | 0) >>> 0 >= 35) _luaL_argerror($L, 2, 5e3) | 0;
  $10 = _strspn($5, 5024) | 0;
  $11 = $5 + $10 | 0;
  $12 = HEAP8[$11 >> 0] | 0;
  if ($12 << 24 >> 24 == 45) {
   $neg$0 = 1;
   $s$0 = $5 + ($10 + 1) | 0;
  } else if ($12 << 24 >> 24 == 43) {
   $neg$0 = 0;
   $s$0 = $5 + ($10 + 1) | 0;
  } else {
   $neg$0 = 0;
   $s$0 = $11;
  }
  if (_isalnum(HEAPU8[$s$0 >> 0] | 0) | 0) {
   $19 = +($8 | 0);
   $n1$0 = 0.0;
   $s$1 = $s$0;
   while (1) {
    $20 = HEAP8[$s$1 >> 0] | 0;
    $21 = $20 & 255;
    if (($21 + -48 | 0) >>> 0 < 10) $26 = ($20 << 24 >> 24) + -48 | 0; else $26 = (_toupper($21) | 0) + -55 | 0;
    if (($26 | 0) >= ($8 | 0)) {
     $n1$1 = $n1$0;
     $s$2 = $s$1;
     break;
    }
    $30 = $19 * $n1$0 + +($26 | 0);
    $31 = $s$1 + 1 | 0;
    if (!(_isalnum(HEAPU8[$31 >> 0] | 0) | 0)) {
     $n1$1 = $30;
     $s$2 = $31;
     break;
    } else {
     $n1$0 = $30;
     $s$1 = $31;
    }
   }
   if (($s$2 + (_strspn($s$2, 5024) | 0) | 0) == ($7 | 0)) {
    _lua_pushnumber($L, ($neg$0 | 0) != 0 ? -$n1$1 : $n1$1);
    STACKTOP = sp;
    return 1;
   }
  }
 } while (0);
 _lua_pushnil($L);
 STACKTOP = sp;
 return 1;
}

function _lua_upvalueid($L, $fidx, $n) {
 $L = $L | 0;
 $fidx = $fidx | 0;
 $n = $n | 0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $1 = 0, $16 = 0, $17 = 0, $2 = 0, $21 = 0, $31 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $50 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 $2 = ($fidx | 0) > 0;
 do if ($2) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($fidx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($fidx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx << 4) | 0;
   break;
  }
  if (($fidx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $fidx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 63;
 if (($31 | 0) == 6) {
  do if ($2) {
   $33 = (HEAP32[$1 >> 2] | 0) + ($fidx << 4) | 0;
   $$0$i$i = $33 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $33 : 1832;
  } else {
   if (($fidx | 0) >= -1000999) {
    $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($fidx << 4) | 0;
    break;
   }
   if (($fidx | 0) == -1001e3) {
    $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
    break;
   }
   $45 = -1001e3 - $fidx | 0;
   $46 = HEAP32[$1 >> 2] | 0;
   if ((HEAP32[$46 + 8 >> 2] | 0) == 22) $$0$i$i = 1832; else {
    $50 = HEAP32[$46 >> 2] | 0;
    $$0$i$i = ($45 | 0) > (HEAPU8[$50 + 6 >> 0] | 0 | 0) ? 1832 : $50 + 16 + ($45 + -1 << 4) | 0;
   }
  } while (0);
  $$0 = HEAP32[(HEAP32[$$0$i$i >> 2] | 0) + 16 + ($n + -1 << 2) >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 38) {
  $$0 = (HEAP32[$$0$i >> 2] | 0) + 16 + ($n + -1 << 4) | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _lua_rawequal($L, $index1, $index2) {
 $L = $L | 0;
 $index1 = $index1 | 0;
 $index2 = $index2 | 0;
 var $$0$i = 0, $$0$i3 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $43 = 0, $44 = 0, $48 = 0, $66 = 0, $67 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($index1 | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($index1 << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($index1 | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($index1 << 4) | 0;
   break;
  }
  if (($index1 | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $index1 | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 do if (($index2 | 0) > 0) {
  $31 = (HEAP32[$1 >> 2] | 0) + ($index2 << 4) | 0;
  $$0$i3 = $31 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $31 : 1832;
 } else {
  if (($index2 | 0) >= -1000999) {
   $$0$i3 = (HEAP32[$L + 8 >> 2] | 0) + ($index2 << 4) | 0;
   break;
  }
  if (($index2 | 0) == -1001e3) {
   $$0$i3 = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $43 = -1001e3 - $index2 | 0;
  $44 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$44 + 8 >> 2] | 0) == 22) {
   $67 = 0;
   return $67 | 0;
  } else {
   $48 = HEAP32[$44 >> 2] | 0;
   $$0$i3 = ($43 | 0) > (HEAPU8[$48 + 6 >> 0] | 0 | 0) ? 1832 : $48 + 16 + ($43 + -1 << 4) | 0;
   break;
  }
 } while (0);
 if (!(($$0$i | 0) != 1832 & ($$0$i3 | 0) != 1832)) {
  $67 = 0;
  return $67 | 0;
 }
 if ((HEAP32[$$0$i + 8 >> 2] | 0) == (HEAP32[$$0$i3 + 8 >> 2] | 0)) $66 = (_luaV_equalobj_(0, $$0$i, $$0$i3) | 0) != 0; else $66 = 0;
 $67 = $66 & 1;
 return $67 | 0;
}

function _closegoto($ls, $g, $label) {
 $ls = $ls | 0;
 $g = $g | 0;
 $label = $label | 0;
 var $$lcssa3 = 0, $1 = 0, $19 = 0, $24 = 0, $25 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $5 = 0, $7 = 0, $i$04 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 48 >> 2] | 0;
 $3 = HEAP32[$ls + 64 >> 2] | 0;
 $4 = $3 + 12 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $7 = HEAP8[$5 + ($g << 4) + 12 >> 0] | 0;
 if (($7 & 255) < (HEAPU8[$label + 12 >> 0] | 0)) {
  $19 = HEAP32[$ls + 52 >> 2] | 0;
  $24 = HEAP32[$5 + ($g << 4) + 8 >> 2] | 0;
  $25 = (HEAP32[(HEAP32[(HEAP32[$1 >> 2] | 0) + 24 >> 2] | 0) + ((HEAP16[(HEAP32[HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 64 >> 2] >> 2] | 0) + ((HEAP32[$1 + 40 >> 2] | 0) + ($7 & 255) << 1) >> 1] | 0) * 12 | 0) >> 2] | 0) + 16 | 0;
  HEAP32[$vararg_buffer >> 2] = (HEAP32[$5 + ($g << 4) >> 2] | 0) + 16;
  HEAP32[$vararg_buffer + 4 >> 2] = $24;
  HEAP32[$vararg_buffer + 8 >> 2] = $25;
  _semerror($ls, _luaO_pushfstring($19, 2368, $vararg_buffer) | 0);
 }
 _luaK_patchlist($1, HEAP32[$5 + ($g << 4) + 4 >> 2] | 0, HEAP32[$label + 4 >> 2] | 0);
 $31 = $3 + 16 | 0;
 $33 = (HEAP32[$31 >> 2] | 0) + -1 | 0;
 if (($33 | 0) > ($g | 0)) $i$04 = $g; else {
  $$lcssa3 = $33;
  HEAP32[$31 >> 2] = $$lcssa3;
  STACKTOP = sp;
  return;
 }
 do {
  $35 = HEAP32[$4 >> 2] | 0;
  $36 = $35 + ($i$04 << 4) | 0;
  $i$04 = $i$04 + 1 | 0;
  $38 = $35 + ($i$04 << 4) | 0;
  HEAP32[$36 >> 2] = HEAP32[$38 >> 2];
  HEAP32[$36 + 4 >> 2] = HEAP32[$38 + 4 >> 2];
  HEAP32[$36 + 8 >> 2] = HEAP32[$38 + 8 >> 2];
  HEAP32[$36 + 12 >> 2] = HEAP32[$38 + 12 >> 2];
  $40 = (HEAP32[$31 >> 2] | 0) + -1 | 0;
 } while (($i$04 | 0) < ($40 | 0));
 $$lcssa3 = $40;
 HEAP32[$31 >> 2] = $$lcssa3;
 STACKTOP = sp;
 return;
}

function _reallymarkobject($g, $o) {
 $g = $g | 0;
 $o = $o | 0;
 var $0 = 0, $12 = 0, $19 = 0, $28 = 0, $29 = 0, $34 = 0, $40 = 0, $42 = 0, $45 = 0, $48 = 0, $51 = 0, $54 = 0, $61 = 0, $size$0 = 0;
 $0 = $o + 5 | 0;
 HEAP8[$0 >> 0] = (HEAPU8[$0 >> 0] | 0) & 252;
 switch (HEAPU8[$o + 4 >> 0] | 0 | 0) {
 case 10:
  {
   $28 = $o + 8 | 0;
   $29 = HEAP32[$28 >> 2] | 0;
   if (!(HEAP32[$29 + 8 >> 2] & 64)) $40 = $29; else {
    $34 = HEAP32[$29 >> 2] | 0;
    if (!(HEAP8[$34 + 5 >> 0] & 3)) $40 = $29; else {
     _reallymarkobject($g, $34);
     $40 = HEAP32[$28 >> 2] | 0;
    }
   }
   if (($40 | 0) == ($o + 16 | 0)) $size$0 = 32; else return;
   break;
  }
 case 9:
  {
   $54 = $g + 84 | 0;
   HEAP32[$o + 72 >> 2] = HEAP32[$54 >> 2];
   HEAP32[$54 >> 2] = $o;
   return;
  }
 case 6:
  {
   $42 = $g + 84 | 0;
   HEAP32[$o + 8 >> 2] = HEAP32[$42 >> 2];
   HEAP32[$42 >> 2] = $o;
   return;
  }
 case 20:
 case 4:
  {
   $size$0 = (HEAP32[$o + 12 >> 2] | 0) + 17 | 0;
   break;
  }
 case 5:
  {
   $48 = $g + 84 | 0;
   HEAP32[$o + 24 >> 2] = HEAP32[$48 >> 2];
   HEAP32[$48 >> 2] = $o;
   return;
  }
 case 38:
  {
   $45 = $g + 84 | 0;
   HEAP32[$o + 8 >> 2] = HEAP32[$45 >> 2];
   HEAP32[$45 >> 2] = $o;
   return;
  }
 case 7:
  {
   $12 = HEAP32[$o + 8 >> 2] | 0;
   if ($12) if (HEAP8[$12 + 5 >> 0] & 3) _reallymarkobject($g, $12);
   $19 = HEAP32[$o + 12 >> 2] | 0;
   if ($19) if (HEAP8[$19 + 5 >> 0] & 3) _reallymarkobject($g, $19);
   $size$0 = (HEAP32[$o + 16 >> 2] | 0) + 24 | 0;
   break;
  }
 case 8:
  {
   $51 = $g + 84 | 0;
   HEAP32[$o + 60 >> 2] = HEAP32[$51 >> 2];
   HEAP32[$51 >> 2] = $o;
   return;
  }
 default:
  return;
 }
 HEAP8[$0 >> 0] = HEAPU8[$0 >> 0] | 0 | 4;
 $61 = $g + 16 | 0;
 HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + $size$0;
 return;
}

function _luaH_setint($L, $t, $key, $value) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 $value = $value | 0;
 var $$0$i = 0, $$pre$phiZ2D = 0.0, $0 = 0, $12 = 0, $14 = 0, $39 = 0, $44 = 0, $45 = 0, $7 = 0.0, $cell$0 = 0, $i$1$i$i = 0, $k = 0, $n$0$i = 0, $n$0$i$lcssa = 0, $u$sroa$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $u$sroa$0$i$i = sp + 16 | 0;
 $k = sp;
 $0 = $key + -1 | 0;
 L1 : do if ($0 >>> 0 < (HEAP32[$t + 28 >> 2] | 0) >>> 0) {
  $$0$i = (HEAP32[$t + 12 >> 2] | 0) + ($0 << 4) | 0;
  label = 10;
 } else {
  $7 = +($key | 0);
  HEAPF64[$u$sroa$0$i$i >> 3] = $7 + 1.0;
  $12 = (HEAP32[$u$sroa$0$i$i + 4 >> 2] | 0) + (HEAP32[$u$sroa$0$i$i >> 2] | 0) | 0;
  if (($12 | 0) < 0) {
   $14 = 0 - $12 | 0;
   $i$1$i$i = ($12 | 0) == ($14 | 0) ? 0 : $14;
  } else $i$1$i$i = $12;
  $n$0$i = (HEAP32[$t + 16 >> 2] | 0) + ((($i$1$i$i | 0) % ((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
  while (1) {
   if ((HEAP32[$n$0$i + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0$i + 16 >> 3] == $7) {
    $n$0$i$lcssa = $n$0$i;
    break;
   }
   $n$0$i = HEAP32[$n$0$i + 28 >> 2] | 0;
   if (!$n$0$i) {
    $$pre$phiZ2D = $7;
    label = 12;
    break L1;
   }
  }
  $$0$i = $n$0$i$lcssa;
  label = 10;
 } while (0);
 if ((label | 0) == 10) if (($$0$i | 0) == 1832) {
  $$pre$phiZ2D = +($key | 0);
  label = 12;
 } else $cell$0 = $$0$i;
 if ((label | 0) == 12) {
  HEAPF64[$k >> 3] = $$pre$phiZ2D;
  HEAP32[$k + 8 >> 2] = 3;
  $cell$0 = _luaH_newkey($L, $t, $k) | 0;
 }
 $39 = $value;
 $44 = HEAP32[$39 + 4 >> 2] | 0;
 $45 = $cell$0;
 HEAP32[$45 >> 2] = HEAP32[$39 >> 2];
 HEAP32[$45 + 4 >> 2] = $44;
 HEAP32[$cell$0 + 8 >> 2] = HEAP32[$value + 8 >> 2];
 STACKTOP = sp;
 return;
}

function _lua_rawset($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $40 = 0, $41 = 0, $48 = 0, $50 = 0, $65 = 0, $66 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $34 = _luaH_set($L, HEAP32[$$0$i >> 2] | 0, $30 + -32 | 0) | 0;
 $35 = $30 + -16 | 0;
 $40 = HEAP32[$35 + 4 >> 2] | 0;
 $41 = $34;
 HEAP32[$41 >> 2] = HEAP32[$35 >> 2];
 HEAP32[$41 + 4 >> 2] = $40;
 HEAP32[$34 + 8 >> 2] = HEAP32[$30 + -8 >> 2];
 $48 = HEAP32[$$0$i >> 2] | 0;
 HEAP8[$48 + 6 >> 0] = 0;
 $50 = HEAP32[$29 >> 2] | 0;
 if (!(HEAP32[$50 + -8 >> 2] & 64)) {
  $66 = $50;
  $65 = $66 + -32 | 0;
  HEAP32[$29 >> 2] = $65;
  return;
 }
 if (!(HEAP8[(HEAP32[$50 + -16 >> 2] | 0) + 5 >> 0] & 3)) {
  $66 = $50;
  $65 = $66 + -32 | 0;
  HEAP32[$29 >> 2] = $65;
  return;
 }
 if (!(HEAP8[$48 + 5 >> 0] & 4)) {
  $66 = $50;
  $65 = $66 + -32 | 0;
  HEAP32[$29 >> 2] = $65;
  return;
 }
 _luaC_barrierback_($L, $48);
 $66 = HEAP32[$29 >> 2] | 0;
 $65 = $66 + -32 | 0;
 HEAP32[$29 >> 2] = $65;
 return;
}

function _luaD_hook($L, $event, $line) {
 $L = $L | 0;
 $event = $event | 0;
 $line = $line | 0;
 var $$$$i = 0, $$$i = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $24 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $39 = 0, $40 = 0, $45 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 4 | 0;
 $1 = HEAP32[$L + 52 >> 2] | 0;
 if (!$1) {
  STACKTOP = sp;
  return;
 }
 $3 = $L + 41 | 0;
 if (!(HEAP8[$3 >> 0] | 0)) {
  STACKTOP = sp;
  return;
 }
 $7 = HEAP32[$L + 16 >> 2] | 0;
 $8 = $L + 8 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $L + 28 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $11;
 $14 = $9 - $13 | 0;
 $15 = $7 + 4 | 0;
 $18 = (HEAP32[$15 >> 2] | 0) - $13 | 0;
 HEAP32[$ar >> 2] = $event;
 HEAP32[$ar + 20 >> 2] = $line;
 HEAP32[$ar + 96 >> 2] = $7;
 $24 = $9;
 do if (((HEAP32[$L + 24 >> 2] | 0) - $24 | 0) < 336) {
  $28 = HEAP32[$L + 32 >> 2] | 0;
  if (($28 | 0) > 1e6) _luaD_throw($L, 6);
  $33 = ($24 - $11 >> 4) + 25 | 0;
  $34 = $28 << 1;
  $$$i = ($34 | 0) > 1e6 ? 1e6 : $34;
  $$$$i = ($$$i | 0) < ($33 | 0) ? $33 : $$$i;
  if (($$$$i | 0) > 1e6) {
   _luaD_reallocstack($L, 1000200);
   _luaG_runerror($L, 4984, $vararg_buffer);
  } else {
   _luaD_reallocstack($L, $$$$i);
   $39 = HEAP32[$8 >> 2] | 0;
   break;
  }
 } else $39 = $9; while (0);
 HEAP32[$15 >> 2] = $39 + 320;
 HEAP8[$3 >> 0] = 0;
 $40 = $7 + 18 | 0;
 HEAP8[$40 >> 0] = HEAPU8[$40 >> 0] | 2;
 FUNCTION_TABLE_vii[$1 & 31]($L, $ar);
 HEAP8[$3 >> 0] = 1;
 $45 = HEAP32[$10 >> 2] | 0;
 HEAP32[$15 >> 2] = $45 + $18;
 HEAP32[$8 >> 2] = $45 + $14;
 HEAP8[$40 >> 0] = HEAPU8[$40 >> 0] & 253;
 STACKTOP = sp;
 return;
}

function _gmatch_aux($L) {
 $L = $L | 0;
 var $$$i = 0, $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $i$02$i = 0, $lp = 0, $ls = 0, $ms = 0, $src$04 = 0, $src$04$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 $ms = sp + 8 | 0;
 $ls = sp + 4 | 0;
 $lp = sp;
 $0 = _lua_tolstring($L, -1001001, $ls) | 0;
 $1 = _lua_tolstring($L, -1001002, $lp) | 0;
 $2 = $ms + 16 | 0;
 HEAP32[$2 >> 2] = $L;
 HEAP32[$ms >> 2] = 200;
 HEAP32[$ms + 4 >> 2] = $0;
 $4 = HEAP32[$ls >> 2] | 0;
 $6 = $ms + 8 | 0;
 HEAP32[$6 >> 2] = $0 + $4;
 HEAP32[$ms + 12 >> 2] = $1 + (HEAP32[$lp >> 2] | 0);
 $10 = _lua_tointegerx($L, -1001003, 0) | 0;
 if (($10 | 0) > ($4 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $13 = $ms + 20 | 0;
 $src$04 = $0 + $10 | 0;
 while (1) {
  HEAP32[$13 >> 2] = 0;
  $14 = _match($ms, $src$04, $1) | 0;
  if ($14) {
   $$lcssa = $14;
   $src$04$lcssa = $src$04;
   break;
  }
  $src$04 = $src$04 + 1 | 0;
  if ($src$04 >>> 0 > (HEAP32[$6 >> 2] | 0) >>> 0) {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushinteger($L, $$lcssa - $0 + (($$lcssa | 0) == ($src$04$lcssa | 0) & 1) | 0);
 _lua_replace($L, -1001003);
 $21 = HEAP32[$13 >> 2] | 0;
 $$$i = ($src$04$lcssa | 0) != 0 & ($21 | 0) == 0 ? 1 : $21;
 _luaL_checkstack(HEAP32[$2 >> 2] | 0, $$$i, 9200);
 if (($$$i | 0) > 0) $i$02$i = 0; else {
  $$0 = $$$i;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do {
  _push_onecapture($ms, $i$02$i, $src$04$lcssa, $$lcssa);
  $i$02$i = $i$02$i + 1 | 0;
 } while (($i$02$i | 0) != ($$$i | 0));
 $$0 = $$$i;
 STACKTOP = sp;
 return $$0 | 0;
}

function _f_parser($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $cl$0 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$ud >> 2] | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (!$1) $10 = _luaZ_fill($0) | 0; else {
  $4 = $0 + 4 | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $5 + 1;
  $10 = HEAPU8[$5 >> 0] | 0;
 }
 $13 = HEAP32[$ud + 52 >> 2] | 0;
 $14 = ($13 | 0) == 0;
 if (($10 | 0) == 27) {
  if (!$14) if (!(_strchr($13, 98) | 0)) {
   HEAP32[$vararg_buffer >> 2] = 920;
   HEAP32[$vararg_buffer + 4 >> 2] = $13;
   _luaO_pushfstring($L, 872, $vararg_buffer) | 0;
   _luaD_throw($L, 3);
  }
  $cl$0 = _luaU_undump($L, HEAP32[$ud >> 2] | 0, $ud + 4 | 0, HEAP32[$ud + 56 >> 2] | 0) | 0;
 } else {
  if (!$14) if (!(_strchr($13, 116) | 0)) {
   HEAP32[$vararg_buffer2 >> 2] = 928;
   HEAP32[$vararg_buffer2 + 4 >> 2] = $13;
   _luaO_pushfstring($L, 872, $vararg_buffer2) | 0;
   _luaD_throw($L, 3);
  }
  $cl$0 = _luaY_parser($L, HEAP32[$ud >> 2] | 0, $ud + 4 | 0, $ud + 16 | 0, HEAP32[$ud + 56 >> 2] | 0, $10) | 0;
 }
 $30 = $cl$0 + 6 | 0;
 if (!(HEAP8[$30 >> 0] | 0)) {
  STACKTOP = sp;
  return;
 }
 $33 = $cl$0 + 16 | 0;
 $34 = $cl$0 + 5 | 0;
 $i$02 = 0;
 do {
  $35 = _luaF_newupval($L) | 0;
  HEAP32[$33 + ($i$02 << 2) >> 2] = $35;
  if (HEAP8[$35 + 5 >> 0] & 3) if (HEAP8[$34 >> 0] & 4) _luaC_barrier_($L, $cl$0, $35);
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) < (HEAPU8[$30 >> 0] | 0));
 STACKTOP = sp;
 return;
}

function _luaC_freeallobjects($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $3 = 0, $33 = 0, $36 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $i$02 = 0, $lastnext$0$i = 0, $lastnext$0$i$lcssa = 0, $lastnext$13$i = 0, $lastnext$13$i$phi = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $lastnext$0$i = $1 + 104 | 0;
 while (1) {
  $3 = HEAP32[$lastnext$0$i >> 2] | 0;
  if (!$3) {
   $lastnext$0$i$lcssa = $lastnext$0$i;
   break;
  } else $lastnext$0$i = $3;
 }
 $5 = $1 + 72 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (!$6) $19 = $1; else {
  $9 = $6;
  $lastnext$13$i = $lastnext$0$i$lcssa;
  while (1) {
   $8 = $9 + 5 | 0;
   HEAP8[$8 >> 0] = HEAPU8[$8 >> 0] | 0 | 8;
   HEAP32[$5 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$9 >> 2] = HEAP32[$lastnext$13$i >> 2];
   HEAP32[$lastnext$13$i >> 2] = $9;
   $16 = HEAP32[$5 >> 2] | 0;
   if (!$16) break; else {
    $lastnext$13$i$phi = $9;
    $9 = $16;
    $lastnext$13$i = $lastnext$13$i$phi;
   }
  }
  $19 = HEAP32[$0 >> 2] | 0;
 }
 $18 = $19 + 104 | 0;
 $20 = HEAP32[$18 >> 2] | 0;
 if ($20) {
  $23 = $20;
  do {
   $22 = $23 + 5 | 0;
   HEAP8[$22 >> 0] = (HEAPU8[$22 >> 0] | 0) & 191;
   _GCTM($L, 0);
   $23 = HEAP32[$18 >> 2] | 0;
  } while (($23 | 0) != 0);
 }
 HEAP8[$1 + 60 >> 0] = 3;
 HEAP8[$1 + 62 >> 0] = 0;
 _sweeplist($L, $5, -3) | 0;
 _sweeplist($L, $1 + 68 | 0, -3) | 0;
 $33 = $1 + 32 | 0;
 if ((HEAP32[$33 >> 2] | 0) <= 0) return;
 $36 = $1 + 24 | 0;
 $i$02 = 0;
 do {
  _sweeplist($L, (HEAP32[$36 >> 2] | 0) + ($i$02 << 2) | 0, -3) | 0;
  $i$02 = $i$02 + 1 | 0;
 } while (($i$02 | 0) < (HEAP32[$33 >> 2] | 0));
 return;
}

function _str_rep($L) {
 $L = $L | 0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $26 = 0, $4 = 0, $5 = 0, $6 = 0, $b = 0, $l = 0, $lsep = 0, $p$0$be = 0, $p$01 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer = sp;
 $l = sp + 1052 | 0;
 $lsep = sp + 1048 | 0;
 $b = sp + 8 | 0;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = _luaL_optlstring($L, 3, 10072, $lsep) | 0;
 if (($1 | 0) < 1) {
  _lua_pushlstring($L, 10072, 0) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $4 = HEAP32[$l >> 2] | 0;
 $5 = HEAP32[$lsep >> 2] | 0;
 $6 = $5 + $4 | 0;
 if ($6 >>> 0 >= $4 >>> 0) if ($6 >>> 0 < (2147483647 / ($1 >>> 0) | 0) >>> 0) {
  $14 = (Math_imul($5, $1 + -1 | 0) | 0) + (Math_imul($4, $1) | 0) | 0;
  $15 = _luaL_buffinitsize($L, $b, $14) | 0;
  _memcpy($15 | 0, $0 | 0, HEAP32[$l >> 2] | 0) | 0;
  if (($1 | 0) > 1) {
   $$in = $1;
   $p$01 = $15;
   while (1) {
    $$in = $$in + -1 | 0;
    $19 = HEAP32[$l >> 2] | 0;
    $20 = $p$01 + $19 | 0;
    $21 = HEAP32[$lsep >> 2] | 0;
    if (!$21) {
     $26 = $19;
     $p$0$be = $20;
    } else {
     _memcpy($20 | 0, $2 | 0, $21 | 0) | 0;
     $26 = HEAP32[$l >> 2] | 0;
     $p$0$be = $p$01 + ((HEAP32[$lsep >> 2] | 0) + $19) | 0;
    }
    _memcpy($p$0$be | 0, $0 | 0, $26 | 0) | 0;
    if (($$in | 0) <= 1) break; else $p$01 = $p$0$be;
   }
  }
  _luaL_pushresultsize($b, $14);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_error($L, 9152, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaD_reallocstack($L, $newsize) {
 $L = $L | 0;
 $newsize = $newsize | 0;
 var $0 = 0, $1 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $3 = 0, $32 = 0, $47 = 0, $8 = 0, $ci$01$i = 0, $ci$02$i = 0, $lim$01 = 0, $up$03$i = 0, $up$04$i = 0;
 $0 = $L + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 32 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($newsize + 1 | 0) >>> 0 > 268435455) _luaM_toobig($L);
 $8 = _luaM_realloc_($L, $1, $3 << 4, $newsize << 4) | 0;
 HEAP32[$0 >> 2] = $8;
 if (($3 | 0) < ($newsize | 0)) {
  $lim$01 = $3;
  do {
   HEAP32[$8 + ($lim$01 << 4) + 8 >> 2] = 0;
   $lim$01 = $lim$01 + 1 | 0;
  } while (($lim$01 | 0) != ($newsize | 0));
 }
 HEAP32[$2 >> 2] = $newsize;
 HEAP32[$L + 24 >> 2] = $8 + ($newsize + -5 << 4);
 $14 = $L + 8 | 0;
 $17 = $1;
 HEAP32[$14 >> 2] = $8 + ((HEAP32[$14 >> 2] | 0) - $17 >> 4 << 4);
 $up$03$i = HEAP32[$L + 56 >> 2] | 0;
 if ($up$03$i) {
  $up$04$i = $up$03$i;
  do {
   $23 = $up$04$i + 8 | 0;
   HEAP32[$23 >> 2] = $8 + ((HEAP32[$23 >> 2] | 0) - $17 >> 4 << 4);
   $up$04$i = HEAP32[$up$04$i >> 2] | 0;
  } while (($up$04$i | 0) != 0);
 }
 $ci$01$i = HEAP32[$L + 16 >> 2] | 0;
 if (!$ci$01$i) return; else $ci$02$i = $ci$01$i;
 do {
  $32 = $ci$02$i + 4 | 0;
  HEAP32[$32 >> 2] = $8 + ((HEAP32[$32 >> 2] | 0) - $17 >> 4 << 4);
  HEAP32[$ci$02$i >> 2] = $8 + ((HEAP32[$ci$02$i >> 2] | 0) - $17 >> 4 << 4);
  if (HEAP8[$ci$02$i + 18 >> 0] & 1) {
   $47 = $ci$02$i + 24 | 0;
   HEAP32[$47 >> 2] = $8 + ((HEAP32[$47 >> 2] | 0) - $17 >> 4 << 4);
  }
  $ci$02$i = HEAP32[$ci$02$i + 8 >> 2] | 0;
 } while (($ci$02$i | 0) != 0);
 return;
}

function _lua_remove($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$lcssa1 = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $48 = 0, $50 = 0, $p$0$ph = 0, $p$02 = 0, $p$02$phi = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $p$0$ph = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $p$0$ph = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $p$0$ph = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $p$0$ph = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $p$0$ph = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $p$0$ph + 16 | 0;
 $30 = $L + 8 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 if ($29 >>> 0 < $31 >>> 0) {
  $33 = $29;
  $p$02 = $p$0$ph;
 } else {
  $$lcssa1 = $31;
  $50 = $$lcssa1 + -16 | 0;
  HEAP32[$30 >> 2] = $50;
  return;
 }
 while (1) {
  $34 = $33;
  $39 = HEAP32[$34 + 4 >> 2] | 0;
  $40 = $p$02;
  HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
  HEAP32[$40 + 4 >> 2] = $39;
  HEAP32[$p$02 + 8 >> 2] = HEAP32[$p$02 + 24 >> 2];
  $47 = $33 + 16 | 0;
  $48 = HEAP32[$30 >> 2] | 0;
  if ($47 >>> 0 < $48 >>> 0) {
   $p$02$phi = $33;
   $33 = $47;
   $p$02 = $p$02$phi;
  } else {
   $$lcssa1 = $48;
   break;
  }
 }
 $50 = $$lcssa1 + -16 | 0;
 HEAP32[$30 >> 2] = $50;
 return;
}

function _strspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$028 = 0, $$03 = 0, $$03$lcssa = 0, $$1$lcssa = 0, $$16 = 0, $0 = 0, $11 = 0, $14 = 0, $18 = 0, $24 = 0, $33 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $byteset = sp;
 HEAP32[$byteset >> 2] = 0;
 HEAP32[$byteset + 4 >> 2] = 0;
 HEAP32[$byteset + 8 >> 2] = 0;
 HEAP32[$byteset + 12 >> 2] = 0;
 HEAP32[$byteset + 16 >> 2] = 0;
 HEAP32[$byteset + 20 >> 2] = 0;
 HEAP32[$byteset + 24 >> 2] = 0;
 HEAP32[$byteset + 28 >> 2] = 0;
 $0 = HEAP8[$c >> 0] | 0;
 if (!($0 << 24 >> 24)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(HEAP8[$c + 1 >> 0] | 0)) {
  $$03 = $s;
  while (1) if ((HEAP8[$$03 >> 0] | 0) == $0 << 24 >> 24) $$03 = $$03 + 1 | 0; else {
   $$03$lcssa = $$03;
   break;
  }
  $$0 = $$03$lcssa - $s | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$028 = $c;
  $14 = $0;
 }
 do {
  $18 = $byteset + ((($14 & 255) >>> 5 & 255) << 2) | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] | 1 << ($14 & 31);
  $$028 = $$028 + 1 | 0;
  $14 = HEAP8[$$028 >> 0] | 0;
 } while ($14 << 24 >> 24 != 0);
 $11 = HEAP8[$s >> 0] | 0;
 L12 : do if (!($11 << 24 >> 24)) $$1$lcssa = $s; else {
  $$16 = $s;
  $24 = $11;
  while (1) {
   if (!(HEAP32[$byteset + ((($24 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($24 & 31))) {
    $$1$lcssa = $$16;
    break L12;
   }
   $33 = $$16 + 1 | 0;
   $24 = HEAP8[$33 >> 0] | 0;
   if (!($24 << 24 >> 24)) {
    $$1$lcssa = $33;
    break;
   } else $$16 = $33;
  }
 } while (0);
 $$0 = $$1$lcssa - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _searchpath($L, $name, $path, $sep, $dirsep) {
 $L = $L | 0;
 $name = $name | 0;
 $path = $path | 0;
 $sep = $sep | 0;
 $dirsep = $dirsep | 0;
 var $$0 = 0, $$0$i = 0, $$01$ph = 0, $$lcssa = 0, $$lcssa12 = 0, $14 = 0, $15 = 0, $3 = 0, $5 = 0, $l$0$i = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer = sp;
 $msg = sp + 8 | 0;
 _luaL_buffinit($L, $msg);
 if (!(HEAP8[$sep >> 0] | 0)) $$01$ph = $name; else $$01$ph = _luaL_gsub($L, $name, $sep, $dirsep) | 0;
 $$0$i = $path;
 while (1) {
  $3 = HEAP8[$$0$i >> 0] | 0;
  if ($3 << 24 >> 24 == 59) {
   $$0$i = $$0$i + 1 | 0;
   continue;
  } else if (!($3 << 24 >> 24)) {
   label = 12;
   break;
  }
  $5 = _strchr($$0$i, 59) | 0;
  if (!$5) $l$0$i = $$0$i + (_strlen($$0$i | 0) | 0) | 0; else $l$0$i = $5;
  _lua_pushlstring($L, $$0$i, $l$0$i - $$0$i | 0) | 0;
  if (!$l$0$i) {
   label = 12;
   break;
  }
  $14 = _luaL_gsub($L, _lua_tolstring($L, -1, 0) | 0, 11136, $$01$ph) | 0;
  _lua_remove($L, -2);
  $15 = _fopen($14 | 0, 11144) | 0;
  if ($15) {
   $$lcssa = $14;
   $$lcssa12 = $15;
   label = 10;
   break;
  }
  HEAP32[$vararg_buffer >> 2] = $14;
  _lua_pushfstring($L, 11152, $vararg_buffer) | 0;
  _lua_remove($L, -2);
  _luaL_addvalue($msg);
  $$0$i = $l$0$i;
 }
 if ((label | 0) == 10) {
  _fclose($$lcssa12 | 0) | 0;
  $$0 = $$lcssa;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 12) {
  _luaL_pushresult($msg);
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _lua_setuservalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $45 = 0, $50 = 0, $51 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if (!(HEAP32[$30 + -8 >> 2] | 0)) {
  HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] = 0;
  $51 = $30;
  $50 = $51 + -16 | 0;
  HEAP32[$29 >> 2] = $50;
  return;
 }
 $36 = $30 + -16 | 0;
 HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] = HEAP32[$36 >> 2];
 $40 = HEAP32[$36 >> 2] | 0;
 if (!(HEAP8[$40 + 5 >> 0] & 3)) {
  $51 = $30;
  $50 = $51 + -16 | 0;
  HEAP32[$29 >> 2] = $50;
  return;
 }
 $45 = HEAP32[$$0$i >> 2] | 0;
 if (!(HEAP8[$45 + 5 >> 0] & 4)) {
  $51 = $30;
  $50 = $51 + -16 | 0;
  HEAP32[$29 >> 2] = $50;
  return;
 }
 _luaC_barrier_($L, $45, $40);
 $51 = HEAP32[$29 >> 2] | 0;
 $50 = $51 + -16 | 0;
 HEAP32[$29 >> 2] = $50;
 return;
}

function _lua_insert($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0, $47 = 0, $48 = 0, $53 = 0, $54 = 0, $q$01 = 0, $q$01$looptemp = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 if ($30 >>> 0 > $$0$i >>> 0) {
  $q$01 = $30;
  do {
   $q$01$looptemp = $q$01;
   $q$01 = $q$01 + -16 | 0;
   $33 = $q$01;
   $38 = HEAP32[$33 + 4 >> 2] | 0;
   $39 = $q$01$looptemp;
   HEAP32[$39 >> 2] = HEAP32[$33 >> 2];
   HEAP32[$39 + 4 >> 2] = $38;
   HEAP32[$q$01$looptemp + 8 >> 2] = HEAP32[$q$01$looptemp + -8 >> 2];
  } while ($q$01 >>> 0 > $$0$i >>> 0);
  $47 = HEAP32[$29 >> 2] | 0;
 } else $47 = $30;
 $48 = $47;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 $54 = $$0$i;
 HEAP32[$54 >> 2] = HEAP32[$48 >> 2];
 HEAP32[$54 + 4 >> 2] = $53;
 HEAP32[$$0$i + 8 >> 2] = HEAP32[$47 + 8 >> 2];
 return;
}

function _ll_require($L) {
 $L = $L | 0;
 var $0 = 0, $7 = 0, $i$0$i = 0, $msg$i = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $msg$i = sp + 16 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_settop($L, 1);
 _lua_getfield($L, -1001e3, 10672);
 _lua_getfield($L, 2, $0);
 if (_lua_toboolean($L, -1) | 0) {
  STACKTOP = sp;
  return 1;
 }
 _lua_settop($L, -2);
 _luaL_buffinit($L, $msg$i);
 _lua_getfield($L, -1001001, 10336);
 if ((_lua_type($L, 3) | 0) == 5) $i$0$i = 1; else {
  _luaL_error($L, 10736, sp) | 0;
  $i$0$i = 1;
 }
 while (1) {
  _lua_rawgeti($L, 3, $i$0$i);
  if (!(_lua_type($L, -1) | 0)) {
   _lua_settop($L, -2);
   _luaL_pushresult($msg$i);
   $7 = _lua_tolstring($L, -1, 0) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $0;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $7;
   _luaL_error($L, 10776, $vararg_buffer1) | 0;
  }
  _lua_pushstring($L, $0) | 0;
  _lua_callk($L, 1, 2, 0, 0);
  if ((_lua_type($L, -2) | 0) == 6) break;
  if (!(_lua_isstring($L, -2) | 0)) _lua_settop($L, -3); else {
   _lua_settop($L, -2);
   _luaL_addvalue($msg$i);
  }
  $i$0$i = $i$0$i + 1 | 0;
 }
 _lua_pushstring($L, $0) | 0;
 _lua_insert($L, -2);
 _lua_callk($L, 2, 1, 0, 0);
 if (_lua_type($L, -1) | 0) _lua_setfield($L, 2, $0);
 _lua_getfield($L, 2, $0);
 if (_lua_type($L, -1) | 0) {
  STACKTOP = sp;
  return 1;
 }
 _lua_pushboolean($L, 1);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, 2, $0);
 STACKTOP = sp;
 return 1;
}

function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $f + 48 | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  $6 = $f + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $internal_buf;
  $8 = $f + 28 | 0;
  HEAP32[$8 >> 2] = $internal_buf;
  $9 = $f + 20 | 0;
  HEAP32[$9 >> 2] = $internal_buf;
  HEAP32[$2 >> 2] = 80;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $internal_buf + 80;
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  if (!$7) $ret$1 = $12; else {
   FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   $ret$1 = $$;
  }
 } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $$0 = $ret$1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_tounsignedx($L, $idx, $isnum) {
 $L = $L | 0;
 $idx = $idx | 0;
 $isnum = $isnum | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $36 = 0, $4 = 0, $n = 0, $o$0 = 0, $u$sroa$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $n = sp + 8 | 0;
 $u$sroa$0 = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 8 >> 2] | 0) == 3) $o$0 = $$0$i; else {
  $32 = _luaV_tonumber($$0$i, $n) | 0;
  if (!$32) {
   if (!$isnum) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$isnum >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $o$0 = $32;
 }
 HEAPF64[$u$sroa$0 >> 3] = +HEAPF64[$o$0 >> 3] + 6755399441055744.0;
 $36 = HEAP32[$u$sroa$0 >> 2] | 0;
 if (!$isnum) {
  $$0 = $36;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$isnum >> 2] = 1;
 $$0 = $36;
 STACKTOP = sp;
 return $$0 | 0;
}

function _searcher_Croot($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer6 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _strchr($0, 46) | 0;
 if (!$1) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushlstring($L, $0, $1 - $0 | 0) | 0;
 $6 = _lua_tolstring($L, -1, 0) | 0;
 _lua_getfield($L, -1001001, 10536);
 $7 = _lua_tolstring($L, -1, 0) | 0;
 if (!$7) {
  HEAP32[$vararg_buffer >> 2] = 10536;
  _luaL_error($L, 10928, $vararg_buffer) | 0;
 }
 $9 = _searchpath($L, $6, $7, 12096, 10960) | 0;
 if (!$9) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $11 = _loadfunc($L, $9, $0) | 0;
 if (($11 | 0) == 2) {
  HEAP32[$vararg_buffer6 >> 2] = $0;
  HEAP32[$vararg_buffer6 + 4 >> 2] = $9;
  _lua_pushfstring($L, 11016, $vararg_buffer6) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (!$11) {
  _lua_pushstring($L, $9) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $12 = _lua_tolstring($L, 1, 0) | 0;
  $13 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $12;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $9;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $13;
  $$0 = _luaL_error($L, 10968, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _lua_rawseti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $33 = 0, $4 = 0, $44 = 0, $49 = 0, $50 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = $L + 8 | 0;
 _luaH_setint($L, HEAP32[$$0$i >> 2] | 0, $n, (HEAP32[$30 >> 2] | 0) + -16 | 0);
 $33 = HEAP32[$30 >> 2] | 0;
 if (!(HEAP32[$33 + -8 >> 2] & 64)) {
  $50 = $33;
  $49 = $50 + -16 | 0;
  HEAP32[$30 >> 2] = $49;
  return;
 }
 if (!(HEAP8[(HEAP32[$33 + -16 >> 2] | 0) + 5 >> 0] & 3)) {
  $50 = $33;
  $49 = $50 + -16 | 0;
  HEAP32[$30 >> 2] = $49;
  return;
 }
 $44 = HEAP32[$$0$i >> 2] | 0;
 if (!(HEAP8[$44 + 5 >> 0] & 4)) {
  $50 = $33;
  $49 = $50 + -16 | 0;
  HEAP32[$30 >> 2] = $49;
  return;
 }
 _luaC_barrierback_($L, $44);
 $50 = HEAP32[$30 >> 2] | 0;
 $49 = $50 + -16 | 0;
 HEAP32[$30 >> 2] = $49;
 return;
}

function ___strchrnul($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $11 = 0, $15 = 0, $16 = 0, $22 = 0, $23 = 0, $29 = 0, $36 = 0, $37 = 0, $5 = 0, $8 = 0, $w$0$lcssa = 0, $w$08 = 0;
 $0 = $c & 255;
 if (!$0) {
  $$0 = $s + (_strlen($s | 0) | 0) | 0;
  return $$0 | 0;
 }
 L5 : do if (!($s & 3)) $$02$lcssa = $s; else {
  $5 = $c & 255;
  $$0211 = $s;
  while (1) {
   $8 = HEAP8[$$0211 >> 0] | 0;
   if ($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 == $5 << 24 >> 24) {
    $$0 = $$0211;
    break;
   }
   $11 = $$0211 + 1 | 0;
   if (!($11 & 3)) {
    $$02$lcssa = $11;
    break L5;
   } else $$0211 = $11;
  }
  return $$0 | 0;
 } while (0);
 $15 = Math_imul($0, 16843009) | 0;
 $16 = HEAP32[$$02$lcssa >> 2] | 0;
 L12 : do if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
  $23 = $16;
  $w$08 = $$02$lcssa;
  while (1) {
   $22 = $23 ^ $15;
   if (($22 & -2139062144 ^ -2139062144) & $22 + -16843009) {
    $w$0$lcssa = $w$08;
    break L12;
   }
   $29 = $w$08 + 4 | 0;
   $23 = HEAP32[$29 >> 2] | 0;
   if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009) {
    $w$0$lcssa = $29;
    break;
   } else $w$08 = $29;
  }
 } else $w$0$lcssa = $$02$lcssa; while (0);
 $36 = $c & 255;
 $$1 = $w$0$lcssa;
 while (1) {
  $37 = HEAP8[$$1 >> 0] | 0;
  if ($37 << 24 >> 24 == 0 ? 1 : $37 << 24 >> 24 == $36 << 24 >> 24) {
   $$0 = $$1;
   break;
  } else $$1 = $$1 + 1 | 0;
 }
 return $$0 | 0;
}

function _luaF_close($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $1 = 0, $2 = 0, $23 = 0, $26 = 0, $3 = 0, $32 = 0, $35 = 0, $41 = 0, $42 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $L + 56 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (!$3) return;
 $5 = $1 + 60 | 0;
 $6 = $1 + 68 | 0;
 $8 = $3;
 while (1) {
  $7 = $8 + 8 | 0;
  $9 = HEAP32[$7 >> 2] | 0;
  if ($9 >>> 0 < $level >>> 0) {
   label = 10;
   break;
  }
  HEAP32[$2 >> 2] = HEAP32[$8 >> 2];
  if (!(((HEAPU8[$5 >> 0] | 0) ^ 3) & ((HEAPU8[$8 + 5 >> 0] | 0) ^ 3))) {
   if (($9 | 0) != ($8 + 16 | 0)) {
    $23 = $8 + 16 | 0;
    $26 = HEAP32[$23 + 4 >> 2] | 0;
    HEAP32[$26 + 16 >> 2] = HEAP32[$23 >> 2];
    HEAP32[(HEAP32[$23 >> 2] | 0) + 16 + 4 >> 2] = $26;
   }
   _luaM_realloc_($L, $8, 32, 0) | 0;
  } else {
   $32 = $8 + 16 | 0;
   $35 = HEAP32[$32 + 4 >> 2] | 0;
   HEAP32[$35 + 16 >> 2] = HEAP32[$32 >> 2];
   HEAP32[(HEAP32[$32 >> 2] | 0) + 16 + 4 >> 2] = $35;
   $41 = $8 + 16 | 0;
   $42 = $9;
   $47 = HEAP32[$42 + 4 >> 2] | 0;
   $48 = $41;
   HEAP32[$48 >> 2] = HEAP32[$42 >> 2];
   HEAP32[$48 + 4 >> 2] = $47;
   HEAP32[$8 + 24 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$7 >> 2] = $41;
   HEAP32[$8 >> 2] = HEAP32[$6 >> 2];
   HEAP32[$6 >> 2] = $8;
   _luaC_checkupvalcolor($1, $8);
  }
  $8 = HEAP32[$2 >> 2] | 0;
  if (!$8) {
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return;
}

function _str_byte($L) {
 $L = $L | 0;
 var $$ = 0, $$0 = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $8 = 0, $9 = 0, $i$03 = 0, $l = 0, $pose$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_optinteger($L, 2, 1) | 0;
 $2 = HEAP32[$l >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, $$0$i) | 0;
 $9 = HEAP32[$l >> 2] | 0;
 if (($8 | 0) > -1) $$0$i1 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i1 = 0; else $$0$i1 = $8 + 1 + $9 | 0;
 $$ = ($$0$i | 0) == 0 ? 1 : $$0$i;
 $pose$0 = $$0$i1 >>> 0 > $9 >>> 0 ? $9 : $$0$i1;
 if ($pose$0 >>> 0 < $$ >>> 0) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $19 = $pose$0 - $$ + 1 | 0;
 if (($pose$0 | 0) == -1) {
  $$0 = _luaL_error($L, 9928, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _luaL_checkstack($L, $19, 9928);
 if (($19 | 0) <= 0) {
  $$0 = $19;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $23 = $$ + -1 | 0;
 $28 = ($9 >>> 0 > $$0$i1 >>> 0 ? $$0$i1 : $9) + 1 - ($$0$i >>> 0 > 1 ? $$0$i : 1) | 0;
 $i$03 = 0;
 do {
  _lua_pushinteger($L, HEAPU8[$0 + ($23 + $i$03) >> 0] | 0);
  $i$03 = $i$03 + 1 | 0;
 } while (($i$03 | 0) != ($28 | 0));
 $$0 = $19;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_argerror($L, $narg, $extramsg) {
 $L = $L | 0;
 $narg = $narg | 0;
 $extramsg = $extramsg | 0;
 var $$0 = 0, $$01 = 0, $12 = 0, $13 = 0, $18 = 0, $19 = 0, $7 = 0, $ar = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer6 = sp + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $ar = sp + 28 | 0;
 if (!(_lua_getstack($L, 0, $ar) | 0)) {
  HEAP32[$vararg_buffer >> 2] = $narg;
  HEAP32[$vararg_buffer + 4 >> 2] = $extramsg;
  $$0 = _luaL_error($L, 3936, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_getinfo($L, 10176, $ar) | 0;
 if (!(_strcmp(HEAP32[$ar + 8 >> 2] | 0, 3960) | 0)) {
  $7 = $narg + -1 | 0;
  if (!$7) {
   HEAP32[$vararg_buffer2 >> 2] = HEAP32[$ar + 4 >> 2];
   HEAP32[$vararg_buffer2 + 4 >> 2] = $extramsg;
   $$0 = _luaL_error($L, 3968, $vararg_buffer2) | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $$01 = $7;
 } else $$01 = $narg;
 $12 = $ar + 4 | 0;
 $13 = HEAP32[$12 >> 2] | 0;
 if (!$13) {
  if (!(_pushglobalfuncname($L, $ar) | 0)) $18 = 11136; else $18 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$12 >> 2] = $18;
  $19 = $18;
 } else $19 = $13;
 HEAP32[$vararg_buffer6 >> 2] = $$01;
 HEAP32[$vararg_buffer6 + 4 >> 2] = $19;
 HEAP32[$vararg_buffer6 + 8 >> 2] = $extramsg;
 $$0 = _luaL_error($L, 4e3, $vararg_buffer6) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _strcspn($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $$0 = 0, $$027 = 0, $$03$lcssa = 0, $$035 = 0, $0 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $32 = 0, $byteset = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $byteset = sp;
 $0 = HEAP8[$c >> 0] | 0;
 if ($0 << 24 >> 24) if (HEAP8[$c + 1 >> 0] | 0) {
  HEAP32[$byteset >> 2] = 0;
  HEAP32[$byteset + 4 >> 2] = 0;
  HEAP32[$byteset + 8 >> 2] = 0;
  HEAP32[$byteset + 12 >> 2] = 0;
  HEAP32[$byteset + 16 >> 2] = 0;
  HEAP32[$byteset + 20 >> 2] = 0;
  HEAP32[$byteset + 24 >> 2] = 0;
  HEAP32[$byteset + 28 >> 2] = 0;
  $$027 = $c;
  $13 = $0;
  do {
   $17 = $byteset + ((($13 & 255) >>> 5 & 255) << 2) | 0;
   HEAP32[$17 >> 2] = HEAP32[$17 >> 2] | 1 << ($13 & 31);
   $$027 = $$027 + 1 | 0;
   $13 = HEAP8[$$027 >> 0] | 0;
  } while ($13 << 24 >> 24 != 0);
  $10 = HEAP8[$s >> 0] | 0;
  L7 : do if (!($10 << 24 >> 24)) $$03$lcssa = $s; else {
   $$035 = $s;
   $23 = $10;
   while (1) {
    if (HEAP32[$byteset + ((($23 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($23 & 31)) {
     $$03$lcssa = $$035;
     break L7;
    }
    $32 = $$035 + 1 | 0;
    $23 = HEAP8[$32 >> 0] | 0;
    if (!($23 << 24 >> 24)) {
     $$03$lcssa = $32;
     break;
    } else $$035 = $32;
   }
  } while (0);
  $$0 = $$03$lcssa - $s | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = (___strchrnul($s, $0 << 24 >> 24) | 0) - $s | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_dischargevars($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $1 = 0, $15 = 0, $22 = 0, $26 = 0, $35 = 0, $49 = 0, $6 = 0, $8 = 0, $op$0 = 0;
 switch (HEAP32[$e >> 2] | 0) {
 case 9:
  {
   $6 = $e + 8 | 0;
   $8 = HEAP16[$6 >> 1] | 0;
   if (!($8 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0) <= ($8 | 0)) {
    $15 = $fs + 48 | 0;
    HEAP8[$15 >> 0] = (HEAP8[$15 >> 0] | 0) + -1 << 24 >> 24;
   }
   $22 = HEAP8[$6 + 2 >> 0] | 0;
   if ((HEAP8[$6 + 3 >> 0] | 0) == 7) if ((HEAPU8[$fs + 46 >> 0] | 0) > ($22 & 255)) $op$0 = 7; else {
    $26 = $fs + 48 | 0;
    HEAP8[$26 >> 0] = (HEAP8[$26 >> 0] | 0) + -1 << 24 >> 24;
    $op$0 = 7;
   } else $op$0 = 6;
   HEAP32[$6 >> 2] = _luaK_code($fs, ($22 & 255) << 23 | $op$0 | $8 << 14) | 0;
   HEAP32[$e >> 2] = 11;
   return;
  }
 case 7:
  {
   HEAP32[$e >> 2] = 6;
   return;
  }
 case 13:
  {
   $49 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e + 8 >> 2] << 2) | 0;
   HEAP32[$49 >> 2] = HEAP32[$49 >> 2] & 8388607 | 16777216;
   HEAP32[$e >> 2] = 11;
   return;
  }
 case 12:
  {
   HEAP32[$e >> 2] = 6;
   $35 = $e + 8 | 0;
   HEAP32[$35 >> 2] = (HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$35 >> 2] << 2) >> 2] | 0) >>> 6 & 255;
   return;
  }
 case 8:
  {
   $1 = $e + 8 | 0;
   HEAP32[$1 >> 2] = _luaK_code($fs, HEAP32[$1 >> 2] << 23 | 5) | 0;
   HEAP32[$e >> 2] = 11;
   return;
  }
 default:
  return;
 }
}

function _lua_getmetatable($L, $objindex) {
 $L = $L | 0;
 $objindex = $objindex | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $mt$0 = 0, $mt$0$in = 0, $res$0 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($objindex | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($objindex << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($objindex | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($objindex << 4) | 0;
   break;
  }
  if (($objindex | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $objindex | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 15;
 if (($31 | 0) == 5) $mt$0$in = (HEAP32[$$0$i >> 2] | 0) + 8 | 0; else if (($31 | 0) == 7) $mt$0$in = (HEAP32[$$0$i >> 2] | 0) + 8 | 0; else $mt$0$in = (HEAP32[$L + 12 >> 2] | 0) + 252 + ($31 << 2) | 0;
 $mt$0 = HEAP32[$mt$0$in >> 2] | 0;
 if (!$mt$0) {
  $res$0 = 0;
  return $res$0 | 0;
 }
 $40 = $L + 8 | 0;
 $41 = HEAP32[$40 >> 2] | 0;
 HEAP32[$41 >> 2] = $mt$0;
 HEAP32[$41 + 8 >> 2] = 69;
 HEAP32[$40 >> 2] = (HEAP32[$40 >> 2] | 0) + 16;
 $res$0 = 1;
 return $res$0 | 0;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $12 = 0, $14 = 0, $15 = 0, $21 = 0, $26 = 0, $27 = 0, $31 = 0, $36 = 0, $41 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) >= 0) {
   $9 = HEAP32[$0 >> 2] | 0;
   $$phi$trans$insert = $f + 8 | 0;
   if (!$9) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0;
    $26 = $$pre;
    $41 = $$pre;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0;
    $14 = HEAP32[$f + 4 >> 2] | 0;
    $15 = $12;
    $21 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    if (($15 - $14 | 0) > ($21 | 0)) {
     HEAP32[$f + 100 >> 2] = $14 + $21;
     $27 = $12;
    } else {
     $26 = $15;
     $41 = $12;
     label = 9;
    }
   }
   if ((label | 0) == 9) {
    HEAP32[$f + 100 >> 2] = $26;
    $27 = $41;
   }
   $$pre4 = HEAP32[$f + 4 >> 2] | 0;
   if ($27) {
    $31 = $f + 108 | 0;
    HEAP32[$31 >> 2] = $27 + 1 - $$pre4 + (HEAP32[$31 >> 2] | 0);
   }
   $36 = $$pre4 + -1 | 0;
   if ((HEAPU8[$36 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6;
    return $$0 | 0;
   }
   HEAP8[$36 >> 0] = $6;
   $$0 = $6;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 100 >> 2] = 0;
 $$0 = -1;
 return $$0 | 0;
}

function _modf($x, $iptr) {
 $x = +$x;
 $iptr = $iptr | 0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 $5 = $4 + -1023 | 0;
 if (($5 | 0) > 51) {
  HEAPF64[$iptr >> 3] = $x;
  if (!(($0 | 0) == 0 & ($1 & 1048575 | 0) == 0 | ($5 | 0) != 1024)) {
   $$0 = $x;
   return +$$0;
  }
  HEAP32[tempDoublePtr >> 2] = 0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2147483648;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 }
 if ($4 >>> 0 < 1023) {
  $16 = $iptr;
  HEAP32[$16 >> 2] = 0;
  HEAP32[$16 + 4 >> 2] = $1 & -2147483648;
  $$0 = $x;
  return +$$0;
 }
 $20 = _bitshift64Lshr(-1, 1048575, $5 | 0) | 0;
 $21 = tempRet0;
 if (($20 & $0 | 0) == 0 & ($21 & $1 | 0) == 0) {
  HEAPF64[$iptr >> 3] = $x;
  HEAP32[tempDoublePtr >> 2] = 0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2147483648;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 } else {
  $31 = $0 & ~$20;
  $32 = $1 & ~$21;
  HEAP32[tempDoublePtr >> 2] = $31;
  HEAP32[tempDoublePtr + 4 >> 2] = $32;
  $33 = +HEAPF64[tempDoublePtr >> 3];
  $34 = $iptr;
  HEAP32[$34 >> 2] = $31;
  HEAP32[$34 + 4 >> 2] = $32;
  $$0 = $x - $33;
  return +$$0;
 }
 return +(0.0);
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$lcssa10 = 0, $i$1 = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) if (!(___towrite($f) | 0)) {
  $7 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $$0 = 0;
  return $$0 | 0;
 } else $7 = $1; while (0);
 $5 = $f + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($7 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
  return $$0 | 0;
 }
 L11 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
  $i$0 = $l;
  while (1) {
   if (!$i$0) {
    $$01 = $l;
    $$02 = $s;
    $29 = $6;
    $i$1 = 0;
    break L11;
   }
   $19 = $i$0 + -1 | 0;
   if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
    $i$0$lcssa10 = $i$0;
    break;
   } else $i$0 = $19;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0$lcssa10) | 0) >>> 0 < $i$0$lcssa10 >>> 0) {
   $$0 = $i$0$lcssa10;
   return $$0 | 0;
  } else {
   $$01 = $l - $i$0$lcssa10 | 0;
   $$02 = $s + $i$0$lcssa10 | 0;
   $29 = HEAP32[$5 >> 2] | 0;
   $i$1 = $i$0$lcssa10;
   break;
  }
 } else {
  $$01 = $l;
  $$02 = $s;
  $29 = $6;
  $i$1 = 0;
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01;
 $$0 = $i$1 + $$01 | 0;
 return $$0 | 0;
}

function _db_sethook($L) {
 $L = $L | 0;
 var $$$i = 0, $$0$i = 0, $10 = 0, $13 = 0, $16 = 0, $3 = 0, $4 = 0, $8 = 0, $count$0 = 0, $func$0 = 0, $mask$0 = 0, $mask$1$$i = 0, $mask$1$i = 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 if ((_lua_type($L, $3) | 0) < 1) {
  _lua_settop($L, $3);
  $count$0 = 0;
  $func$0 = 0;
  $mask$0 = 0;
 } else {
  $8 = _luaL_checklstring($L, $4 | 2, 0) | 0;
  _luaL_checktype($L, $3, 6);
  $10 = _luaL_optinteger($L, $4 + 3 | 0, 0) | 0;
  $$$i = (_strchr($8, 99) | 0) != 0 & 1;
  $13 = (_strchr($8, 114) | 0) == 0;
  $mask$1$i = $13 ? $$$i : $$$i | 2;
  $16 = (_strchr($8, 108) | 0) == 0;
  $mask$1$$i = $16 ? $mask$1$i : $mask$1$i | 4;
  $count$0 = $10;
  $func$0 = 25;
  $mask$0 = ($10 | 0) > 0 ? $mask$1$$i | 8 : $mask$1$$i;
 }
 if (_luaL_getsubtable($L, -1001e3, 6504) | 0) {
  _lua_pushthread($$0$i) | 0;
  _lua_xmove($$0$i, $L, 1);
  _lua_pushvalue($L, $3);
  _lua_rawset($L, -3);
  _lua_sethook($$0$i, $func$0, $mask$0, $count$0) | 0;
  return 0;
 }
 _lua_pushstring($L, 6512) | 0;
 _lua_setfield($L, -2, 6520);
 _lua_pushvalue($L, -1);
 _lua_setmetatable($L, -2) | 0;
 _lua_pushthread($$0$i) | 0;
 _lua_xmove($$0$i, $L, 1);
 _lua_pushvalue($L, $3);
 _lua_rawset($L, -3);
 _lua_sethook($$0$i, $func$0, $mask$0, $count$0) | 0;
 return 0;
}

function _lua_replace($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $15 = 0, $16 = 0, $2 = 0, $20 = 0, $28 = 0, $3 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $45 = 0, $52 = 0, $7 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + -16 | 0;
 $3 = $L + 16 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $7 = (HEAP32[$4 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $7 >>> 0 < $1 >>> 0 ? $7 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = $1 + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $15 = -1001e3 - $idx | 0;
  $16 = HEAP32[$4 >> 2] | 0;
  if ((HEAP32[$16 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $20 = HEAP32[$16 >> 2] | 0;
   $$0$i = ($15 | 0) > (HEAPU8[$20 + 6 >> 0] | 0 | 0) ? 1832 : $20 + 16 + ($15 + -1 << 4) | 0;
  }
 } while (0);
 $28 = $2;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $$0$i;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 $38 = $1 + -8 | 0;
 HEAP32[$$0$i + 8 >> 2] = HEAP32[$38 >> 2];
 if (($idx | 0) < -1001e3) if (HEAP32[$38 >> 2] & 64) {
  $45 = HEAP32[$2 >> 2] | 0;
  if (HEAP8[$45 + 5 >> 0] & 3) {
   $52 = HEAP32[HEAP32[HEAP32[$3 >> 2] >> 2] >> 2] | 0;
   if (HEAP8[$52 + 5 >> 0] & 4) _luaC_barrier_($L, $52, $45);
  }
 }
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -16;
 return;
}

function _close_state($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $next$01$i$i = 0, $next$01$i$i$looptemp = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $L + 28 | 0;
 _luaF_close($L, HEAP32[$2 >> 2] | 0);
 _luaC_freeallobjects($L);
 $4 = HEAP32[$0 >> 2] | 0;
 _luaM_realloc_($L, HEAP32[$4 + 24 >> 2] | 0, HEAP32[$4 + 32 >> 2] << 2, 0) | 0;
 $10 = $1 + 144 | 0;
 $12 = $1 + 152 | 0;
 HEAP32[$10 >> 2] = _luaM_realloc_($L, HEAP32[$10 >> 2] | 0, HEAP32[$12 >> 2] | 0, 0) | 0;
 HEAP32[$12 >> 2] = 0;
 $15 = HEAP32[$2 >> 2] | 0;
 if (!$15) {
  $29 = HEAP32[$1 >> 2] | 0;
  $30 = $1 + 4 | 0;
  $31 = HEAP32[$30 >> 2] | 0;
  FUNCTION_TABLE_iiiii[$29 & 31]($31, $L, 400, 0) | 0;
  return;
 }
 HEAP32[$L + 16 >> 2] = $L + 72;
 $19 = $L + 84 | 0;
 $20 = HEAP32[$19 >> 2] | 0;
 HEAP32[$19 >> 2] = 0;
 if (!$20) $28 = $15; else {
  $next$01$i$i = $20;
  do {
   $next$01$i$i$looptemp = $next$01$i$i;
   $next$01$i$i = HEAP32[$next$01$i$i + 12 >> 2] | 0;
   _luaM_realloc_($L, $next$01$i$i$looptemp, 40, 0) | 0;
  } while (($next$01$i$i | 0) != 0);
  $28 = HEAP32[$2 >> 2] | 0;
 }
 _luaM_realloc_($L, $28, HEAP32[$L + 32 >> 2] << 4, 0) | 0;
 $29 = HEAP32[$1 >> 2] | 0;
 $30 = $1 + 4 | 0;
 $31 = HEAP32[$30 >> 2] | 0;
 FUNCTION_TABLE_iiiii[$29 & 31]($31, $L, 400, 0) | 0;
 return;
}

function _luaL_setfuncs($L, $l, $nup) {
 $L = $L | 0;
 $l = $l | 0;
 $nup = $nup | 0;
 var $12 = 0, $13 = 0, $18 = 0, $21 = 0, $22 = 0, $25 = 0, $6 = 0, $7 = 0, $9 = 0, $i$01$us = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _luaL_checkversion_($L, 502.0);
 if (!(_lua_checkstack($L, $nup + 20 | 0) | 0)) {
  HEAP32[$vararg_buffer >> 2] = 4464;
  _luaL_error($L, 4104, $vararg_buffer) | 0;
 }
 if (!(HEAP32[$l >> 2] | 0)) {
  $25 = ~$nup;
  _lua_settop($L, $25);
  STACKTOP = sp;
  return;
 }
 $6 = -2 - $nup | 0;
 $7 = 0 - $nup | 0;
 if (($nup | 0) > 0) {
  $12 = $l;
  $9 = $l;
 } else {
  $18 = $l;
  $21 = $l;
  while (1) {
   _lua_pushcclosure($L, HEAP32[$18 + 4 >> 2] | 0, $nup);
   _lua_setfield($L, $6, HEAP32[$21 >> 2] | 0);
   $22 = $18 + 8 | 0;
   if (!(HEAP32[$22 >> 2] | 0)) break; else {
    $18 = $22;
    $21 = $22;
   }
  }
  $25 = ~$nup;
  _lua_settop($L, $25);
  STACKTOP = sp;
  return;
 }
 while (1) {
  $i$01$us = 0;
  do {
   _lua_pushvalue($L, $7);
   $i$01$us = $i$01$us + 1 | 0;
  } while (($i$01$us | 0) != ($nup | 0));
  _lua_pushcclosure($L, HEAP32[$9 + 4 >> 2] | 0, $nup);
  _lua_setfield($L, $6, HEAP32[$12 >> 2] | 0);
  $13 = $9 + 8 | 0;
  if (!(HEAP32[$13 >> 2] | 0)) break; else {
   $12 = $13;
   $9 = $13;
  }
 }
 $25 = ~$nup;
 _lua_settop($L, $25);
 STACKTOP = sp;
 return;
}

function _lua_tointegerx($L, $idx, $isnum) {
 $L = $L | 0;
 $idx = $idx | 0;
 $isnum = $isnum | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $35 = 0, $4 = 0, $n = 0, $o$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 8 >> 2] | 0) == 3) $o$0 = $$0$i; else {
  $32 = _luaV_tonumber($$0$i, $n) | 0;
  if (!$32) {
   if (!$isnum) {
    $$0 = 0;
    STACKTOP = sp;
    return $$0 | 0;
   }
   HEAP32[$isnum >> 2] = 0;
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $o$0 = $32;
 }
 $35 = ~~+HEAPF64[$o$0 >> 3];
 if (!$isnum) {
  $$0 = $35;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$isnum >> 2] = 1;
 $$0 = $35;
 STACKTOP = sp;
 return $$0 | 0;
}

function _tconcat($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $7 = 0, $b = 0, $i$02 = 0, $lsep = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 $b = sp + 24 | 0;
 $lsep = sp + 16 | 0;
 $0 = _luaL_optlstring($L, 2, 10072, $lsep) | 0;
 _luaL_checktype($L, 1, 5);
 $1 = _luaL_optinteger($L, 3, 1) | 0;
 if ((_lua_type($L, 4) | 0) < 1) $7 = _luaL_len($L, 1) | 0; else $7 = _luaL_checkinteger($L, 4) | 0;
 _luaL_buffinit($L, $b);
 if (($1 | 0) < ($7 | 0)) {
  $i$02 = $1;
  do {
   _lua_rawgeti($L, 1, $i$02);
   if (!(_lua_isstring($L, -1) | 0)) {
    HEAP32[$vararg_buffer >> 2] = _lua_typename($L, _lua_type($L, -1) | 0) | 0;
    HEAP32[$vararg_buffer + 4 >> 2] = $i$02;
    _luaL_error($L, 10224, $vararg_buffer) | 0;
   }
   _luaL_addvalue($b);
   _luaL_addlstring($b, $0, HEAP32[$lsep >> 2] | 0);
   $i$02 = $i$02 + 1 | 0;
  } while (($i$02 | 0) != ($7 | 0));
 } else if (($1 | 0) != ($7 | 0)) {
  _luaL_pushresult($b);
  STACKTOP = sp;
  return 1;
 }
 _lua_rawgeti($L, 1, $7);
 if (!(_lua_isstring($L, -1) | 0)) {
  HEAP32[$vararg_buffer2 >> 2] = _lua_typename($L, _lua_type($L, -1) | 0) | 0;
  HEAP32[$vararg_buffer2 + 4 >> 2] = $7;
  _luaL_error($L, 10224, $vararg_buffer2) | 0;
 }
 _luaL_addvalue($b);
 _luaL_pushresult($b);
 STACKTOP = sp;
 return 1;
}

function _luaK_infix($fs, $op, $v) {
 $fs = $fs | 0;
 $op = $op | 0;
 $v = $v | 0;
 var $$pre$phi$i$iZ2D = 0, $10 = 0, $13 = 0, $16 = 0, $18 = 0, $25 = 0, $3 = 0;
 switch ($op | 0) {
 case 14:
  {
   _luaK_goiffalse($fs, $v);
   return;
  }
 case 5:
 case 4:
 case 3:
 case 2:
 case 1:
 case 0:
  {
   if ((HEAP32[$v >> 2] | 0) == 5) if ((HEAP32[$v + 16 >> 2] | 0) == -1) if ((HEAP32[$v + 20 >> 2] | 0) == -1) return;
   _luaK_exp2RK($fs, $v) | 0;
   return;
  }
 case 6:
  {
   _luaK_dischargevars($fs, $v);
   if ((HEAP32[$v >> 2] | 0) == 6) {
    $3 = HEAP32[$v + 8 >> 2] | 0;
    if (!($3 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($3 | 0)) {
     $10 = $fs + 48 | 0;
     HEAP8[$10 >> 0] = (HEAP8[$10 >> 0] | 0) + -1 << 24 >> 24;
    }
   }
   $13 = $fs + 48 | 0;
   $16 = (HEAPU8[$13 >> 0] | 0) + 1 | 0;
   $18 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
   do if ($16 >>> 0 > (HEAPU8[$18 >> 0] | 0) >>> 0) if ($16 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
    $25 = $16 & 255;
    HEAP8[$18 >> 0] = $25;
    $$pre$phi$i$iZ2D = $25;
    break;
   } else $$pre$phi$i$iZ2D = $16 & 255; while (0);
   HEAP8[$13 >> 0] = $$pre$phi$i$iZ2D;
   _exp2reg($fs, $v, ($$pre$phi$i$iZ2D & 255) + -1 | 0);
   return;
  }
 case 13:
  {
   _luaK_goiftrue($fs, $v);
   return;
  }
 default:
  {
   _luaK_exp2RK($fs, $v) | 0;
   return;
  }
 }
}

function _luaL_addvalue($B) {
 $B = $B | 0;
 var $$$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 4 | 0;
 $0 = $B + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = _lua_tolstring($1, -1, $l) | 0;
 $4 = $B + 16 | 0;
 if ((HEAP32[$B >> 2] | 0) != ($4 | 0)) _lua_insert($1, -2);
 $6 = HEAP32[$l >> 2] | 0;
 $7 = HEAP32[$0 >> 2] | 0;
 $8 = $B + 4 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $10 = $B + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 if (($9 - $11 | 0) >>> 0 < $6 >>> 0) {
  $14 = $9 << 1;
  $$$i$i = ($14 - $11 | 0) >>> 0 < $6 >>> 0 ? $11 + $6 | 0 : $14;
  if ($$$i$i >>> 0 < $11 >>> 0 | ($$$i$i - $11 | 0) >>> 0 < $6 >>> 0) _luaL_error($7, 4128, $vararg_buffer) | 0;
  $21 = _lua_newuserdata($7, $$$i$i) | 0;
  _memcpy($21 | 0, HEAP32[$B >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0;
  if ((HEAP32[$B >> 2] | 0) != ($4 | 0)) _lua_remove($7, -2);
  HEAP32[$B >> 2] = $21;
  HEAP32[$8 >> 2] = $$$i$i;
  $27 = $21;
  $28 = HEAP32[$10 >> 2] | 0;
 } else {
  $27 = HEAP32[$B >> 2] | 0;
  $28 = $11;
 }
 _memcpy($27 + $28 | 0, $2 | 0, $6 | 0) | 0;
 HEAP32[$10 >> 2] = (HEAP32[$10 >> 2] | 0) + $6;
 _lua_remove($1, (HEAP32[$B >> 2] | 0) != ($4 | 0) ? -2 : -1);
 STACKTOP = sp;
 return;
}

function _ll_module($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $3 = 0, $4 = 0, $ar$i = 0, $i$01$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 4 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _lua_gettop($L) | 0;
 _luaL_pushmodule($L, $0, 1);
 _lua_getfield($L, -1, 10808);
 $3 = (_lua_type($L, -1) | 0) == 0;
 _lua_settop($L, -2);
 if ($3) {
  _lua_pushvalue($L, -1);
  _lua_setfield($L, -2, 10816);
  _lua_pushstring($L, $0) | 0;
  _lua_setfield($L, -2, 10808);
  $4 = _strrchr($0, 46) | 0;
  _lua_pushlstring($L, $0, (($4 | 0) == 0 ? $0 : $4 + 1 | 0) - $0 | 0) | 0;
  _lua_setfield($L, -2, 10824);
 }
 _lua_pushvalue($L, -1);
 if (!(_lua_getstack($L, 1, $ar$i) | 0)) label = 6; else if (!(_lua_getinfo($L, 10840, $ar$i) | 0)) label = 6; else if (_lua_iscfunction($L, -1) | 0) label = 6;
 if ((label | 0) == 6) _luaL_error($L, 10848, $vararg_buffer) | 0;
 _lua_pushvalue($L, -2);
 _lua_setupvalue($L, -2, 1) | 0;
 _lua_settop($L, -2);
 if (($1 | 0) < 2) {
  STACKTOP = sp;
  return 1;
 } else $i$01$i = 2;
 while (1) {
  if ((_lua_type($L, $i$01$i) | 0) == 6) {
   _lua_pushvalue($L, $i$01$i);
   _lua_pushvalue($L, -2);
   _lua_callk($L, 1, 0, 0, 0);
  }
  if (($i$01$i | 0) == ($1 | 0)) break; else $i$01$i = $i$01$i + 1 | 0;
 }
 STACKTOP = sp;
 return 1;
}

function _findlabel($ls, $g) {
 $ls = $ls | 0;
 $g = $g | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa23 = 0, $0 = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $i$04 = 0, $i$04$lcssa = 0, label = 0;
 $0 = $ls + 48 | 0;
 $3 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0;
 $5 = HEAP32[$ls + 64 >> 2] | 0;
 $7 = HEAP32[$5 + 12 >> 2] | 0;
 $8 = $3 + 4 | 0;
 $10 = HEAP16[$8 >> 1] | 0;
 $11 = $5 + 28 | 0;
 if (($10 | 0) >= (HEAP32[$11 >> 2] | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $14 = $5 + 24 | 0;
 $15 = $7 + ($g << 4) | 0;
 $i$04 = $10;
 while (1) {
  $16 = HEAP32[$14 >> 2] | 0;
  $17 = $16 + ($i$04 << 4) | 0;
  if (_luaS_eqstr(HEAP32[$17 >> 2] | 0, HEAP32[$15 >> 2] | 0) | 0) {
   $$lcssa = $16;
   $$lcssa23 = $17;
   $i$04$lcssa = $i$04;
   break;
  }
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) >= (HEAP32[$11 >> 2] | 0)) {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return $$0 | 0;
 $25 = HEAP8[$$lcssa + ($i$04$lcssa << 4) + 12 >> 0] | 0;
 do if ((HEAPU8[$7 + ($g << 4) + 12 >> 0] | 0) > ($25 & 255)) {
  if (!(HEAP8[$3 + 9 >> 0] | 0)) if ((HEAP32[$11 >> 2] | 0) <= (HEAP16[$8 >> 1] | 0)) break;
  _luaK_patchclose(HEAP32[$0 >> 2] | 0, HEAP32[$7 + ($g << 4) + 4 >> 2] | 0, $25 & 255);
 } while (0);
 _closegoto($ls, $g, $$lcssa23);
 $$0 = 1;
 return $$0 | 0;
}

function _lua_load($L, $reader, $data, $chunkname, $mode) {
 $L = $L | 0;
 $reader = $reader | 0;
 $data = $data | 0;
 $chunkname = $chunkname | 0;
 $mode = $mode | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $24 = 0, $25 = 0, $29 = 0, $35 = 0, $40 = 0, $6 = 0, $z = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $z = sp;
 _luaZ_init($L, $z, $reader, $data);
 $1 = _luaD_protectedparser($L, $z, ($chunkname | 0) == 0 ? 11136 : $chunkname, $mode) | 0;
 if ($1) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $6 = HEAP32[(HEAP32[$L + 8 >> 2] | 0) + -16 >> 2] | 0;
 if ((HEAP8[$6 + 6 >> 0] | 0) != 1) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $14 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 40 >> 2] | 0, 2) | 0;
 $15 = $6 + 16 | 0;
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 8 >> 2] | 0;
 $19 = $14;
 $24 = HEAP32[$19 + 4 >> 2] | 0;
 $25 = $18;
 HEAP32[$25 >> 2] = HEAP32[$19 >> 2];
 HEAP32[$25 + 4 >> 2] = $24;
 $29 = $14 + 8 | 0;
 HEAP32[$18 + 8 >> 2] = HEAP32[$29 >> 2];
 if (!(HEAP32[$29 >> 2] & 64)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $35 = HEAP32[$14 >> 2] | 0;
 if (!(HEAP8[$35 + 5 >> 0] & 3)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 $40 = HEAP32[$15 >> 2] | 0;
 if (!(HEAP8[$40 + 5 >> 0] & 4)) {
  STACKTOP = sp;
  return $1 | 0;
 }
 _luaC_barrier_($L, $40, $35);
 STACKTOP = sp;
 return $1 | 0;
}

function _luaD_protectedparser($L, $z, $name, $mode) {
 $L = $L | 0;
 $z = $z | 0;
 $name = $name | 0;
 $mode = $mode | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $22 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $p = sp;
 $0 = $L + 36 | 0;
 HEAP16[$0 >> 1] = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP32[$p >> 2] = $z;
 HEAP32[$p + 56 >> 2] = $name;
 HEAP32[$p + 52 >> 2] = $mode;
 $5 = $p + 16 | 0;
 HEAP32[$5 >> 2] = 0;
 $6 = $p + 24 | 0;
 HEAP32[$6 >> 2] = 0;
 $7 = $p + 28 | 0;
 HEAP32[$7 >> 2] = 0;
 $8 = $p + 36 | 0;
 HEAP32[$8 >> 2] = 0;
 $9 = $p + 40 | 0;
 HEAP32[$9 >> 2] = 0;
 $10 = $p + 48 | 0;
 HEAP32[$10 >> 2] = 0;
 $11 = $p + 4 | 0;
 HEAP32[$11 >> 2] = 0;
 $12 = $p + 12 | 0;
 HEAP32[$12 >> 2] = 0;
 $22 = _luaD_pcall($L, 22, $p, (HEAP32[$L + 8 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0) | 0, HEAP32[$L + 68 >> 2] | 0) | 0;
 HEAP32[$11 >> 2] = _luaM_realloc_($L, HEAP32[$11 >> 2] | 0, HEAP32[$12 >> 2] | 0, 0) | 0;
 HEAP32[$12 >> 2] = 0;
 _luaM_realloc_($L, HEAP32[$5 >> 2] | 0, HEAP32[$6 >> 2] << 1, 0) | 0;
 _luaM_realloc_($L, HEAP32[$7 >> 2] | 0, HEAP32[$8 >> 2] << 4, 0) | 0;
 _luaM_realloc_($L, HEAP32[$9 >> 2] | 0, HEAP32[$10 >> 2] << 4, 0) | 0;
 HEAP16[$0 >> 1] = (HEAP16[$0 >> 1] | 0) + -1 << 16 >> 16;
 STACKTOP = sp;
 return $22 | 0;
}

function _luaZ_read($z, $b, $n) {
 $z = $z | 0;
 $b = $b | 0;
 $n = $n | 0;
 var $$$01 = 0, $$0 = 0, $$015 = 0, $$024 = 0, $1 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size$i = sp;
 if (!$n) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $1 = $z + 16 | 0;
 $2 = $z + 8 | 0;
 $3 = $z + 12 | 0;
 $4 = $z + 4 | 0;
 $$015 = $n;
 $$024 = $b;
 $5 = HEAP32[$z >> 2] | 0;
 while (1) {
  if (!$5) {
   $10 = FUNCTION_TABLE_iiii[HEAP32[$2 >> 2] & 31](HEAP32[$1 >> 2] | 0, HEAP32[$3 >> 2] | 0, $size$i) | 0;
   $12 = HEAP32[$size$i >> 2] | 0;
   if (($10 | 0) == 0 | ($12 | 0) == 0) {
    $$0 = $$015;
    label = 8;
    break;
   }
   HEAP32[$z >> 2] = $12;
   HEAP32[$4 >> 2] = $10;
   $15 = $12;
   $16 = $10;
  } else {
   $15 = $5;
   $16 = HEAP32[$4 >> 2] | 0;
  }
  $$$01 = $$015 >>> 0 > $15 >>> 0 ? $15 : $$015;
  _memcpy($$024 | 0, $16 | 0, $$$01 | 0) | 0;
  $5 = (HEAP32[$z >> 2] | 0) - $$$01 | 0;
  HEAP32[$z >> 2] = $5;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $$$01;
  if (($$015 | 0) == ($$$01 | 0)) {
   $$0 = 0;
   label = 8;
   break;
  } else {
   $$015 = $$015 - $$$01 | 0;
   $$024 = $$024 + $$$01 | 0;
  }
 }
 if ((label | 0) == 8) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaF_findupval($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $$0$in = 0, $$lcssa13 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $21 = 0, $23 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $6 = 0, $7 = 0, $pp$0$lcssa = 0, $pp$03 = 0, $pp$03$phi = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $L + 56 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 L1 : do if (!$3) $pp$0$lcssa = $2; else {
  $6 = $3;
  $pp$03 = $2;
  while (1) {
   $7 = HEAP32[$6 + 8 >> 2] | 0;
   if ($7 >>> 0 < $level >>> 0) {
    $pp$0$lcssa = $pp$03;
    break L1;
   }
   if (($7 | 0) == ($level | 0)) {
    $$lcssa13 = $6;
    break;
   }
   $21 = HEAP32[$6 >> 2] | 0;
   if (!$21) {
    $pp$0$lcssa = $6;
    break L1;
   } else {
    $pp$03$phi = $6;
    $6 = $21;
    $pp$03 = $pp$03$phi;
   }
  }
  $10 = $$lcssa13 + 5 | 0;
  $13 = (HEAPU8[$10 >> 0] | 0) ^ 3;
  if (((HEAPU8[$1 + 60 >> 0] | 0) ^ 3) & $13) {
   $$0$in = $$lcssa13;
   return $$0$in | 0;
  }
  HEAP8[$10 >> 0] = $13;
  $$0$in = $$lcssa13;
  return $$0$in | 0;
 } while (0);
 $23 = _luaC_newobj($L, 10, 32, $pp$0$lcssa, 0) | 0;
 HEAP32[$23 + 8 >> 2] = $level;
 $26 = $23 + 16 | 0;
 HEAP32[$26 >> 2] = $1 + 112;
 $28 = $1 + 128 + 4 | 0;
 $29 = HEAP32[$28 >> 2] | 0;
 HEAP32[$26 + 4 >> 2] = $29;
 HEAP32[$29 + 16 >> 2] = $23;
 HEAP32[$28 >> 2] = $23;
 $$0$in = $23;
 return $$0$in | 0;
}

function _lua_pushcclosure($L, $fn, $n) {
 $L = $L | 0;
 $fn = $fn | 0;
 $n = $n | 0;
 var $$in = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $11 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $24 = 0, $25 = 0, $33 = 0, $35 = 0, $36 = 0, $9 = 0;
 if (!$n) {
  $1 = $L + 8 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 >> 2] = $fn;
  HEAP32[$2 + 8 >> 2] = 22;
  $$pre$phiZ2D = $1;
  $35 = HEAP32[$$pre$phiZ2D >> 2] | 0;
  $36 = $35 + 16 | 0;
  HEAP32[$$pre$phiZ2D >> 2] = $36;
  return;
 }
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $9 = _luaF_newCclosure($L, $n) | 0;
 HEAP32[$9 + 12 >> 2] = $fn;
 $11 = $L + 8 | 0;
 $14 = (HEAP32[$11 >> 2] | 0) + (0 - $n << 4) | 0;
 HEAP32[$11 >> 2] = $14;
 $$in = $n;
 $17 = $14;
 while (1) {
  $$in = $$in + -1 | 0;
  $19 = $17 + ($$in << 4) | 0;
  $24 = HEAP32[$19 + 4 >> 2] | 0;
  $25 = $9 + 16 + ($$in << 4) | 0;
  HEAP32[$25 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$25 + 4 >> 2] = $24;
  HEAP32[$9 + 16 + ($$in << 4) + 8 >> 2] = HEAP32[$17 + ($$in << 4) + 8 >> 2];
  $33 = HEAP32[$11 >> 2] | 0;
  if (!$$in) {
   $$lcssa = $33;
   break;
  } else $17 = $33;
 }
 HEAP32[$$lcssa >> 2] = $9;
 HEAP32[$$lcssa + 8 >> 2] = 102;
 $$pre$phiZ2D = $11;
 $35 = HEAP32[$$pre$phiZ2D >> 2] | 0;
 $36 = $35 + 16 | 0;
 HEAP32[$$pre$phiZ2D >> 2] = $36;
 return;
}

function _lua_rawgetp($L, $idx, $p) {
 $L = $L | 0;
 $idx = $idx | 0;
 $p = $p | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $k = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $k = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 HEAP32[$k >> 2] = $p;
 HEAP32[$k + 8 >> 2] = 2;
 $31 = _luaH_get(HEAP32[$$0$i >> 2] | 0, $k) | 0;
 $32 = $L + 8 | 0;
 $33 = HEAP32[$32 >> 2] | 0;
 $34 = $31;
 $39 = HEAP32[$34 + 4 >> 2] | 0;
 $40 = $33;
 HEAP32[$40 >> 2] = HEAP32[$34 >> 2];
 HEAP32[$40 + 4 >> 2] = $39;
 HEAP32[$33 + 8 >> 2] = HEAP32[$31 + 8 >> 2];
 HEAP32[$32 >> 2] = (HEAP32[$32 >> 2] | 0) + 16;
 STACKTOP = sp;
 return;
}

function _lua_tonumberx($L, $idx, $isnum) {
 $L = $L | 0;
 $idx = $idx | 0;
 $isnum = $isnum | 0;
 var $$0 = 0.0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $4 = 0, $n = 0, $o$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 8 >> 2] | 0) == 3) $o$0 = $$0$i; else {
  $32 = _luaV_tonumber($$0$i, $n) | 0;
  if (!$32) {
   if (!$isnum) {
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   HEAP32[$isnum >> 2] = 0;
   $$0 = 0.0;
   STACKTOP = sp;
   return +$$0;
  } else $o$0 = $32;
 }
 if ($isnum) HEAP32[$isnum >> 2] = 1;
 $$0 = +HEAPF64[$o$0 >> 3];
 STACKTOP = sp;
 return +$$0;
}

function _luaK_exp2anyreg($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$0 = 0, $$pre$phi$i$iZ2D = 0, $17 = 0, $24 = 0, $27 = 0, $30 = 0, $32 = 0, $39 = 0, $7 = 0, $8 = 0;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 6) {
  $7 = $e + 8 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$e + 16 >> 2] | 0) == (HEAP32[$e + 20 >> 2] | 0)) {
   $$0 = $8;
   return $$0 | 0;
  }
  if (($8 | 0) >= (HEAPU8[$fs + 46 >> 0] | 0 | 0)) {
   _exp2reg($fs, $e, $8);
   $$0 = HEAP32[$7 >> 2] | 0;
   return $$0 | 0;
  }
 }
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 6) {
  $17 = HEAP32[$e + 8 >> 2] | 0;
  if (!($17 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($17 | 0)) {
   $24 = $fs + 48 | 0;
   HEAP8[$24 >> 0] = (HEAP8[$24 >> 0] | 0) + -1 << 24 >> 24;
  }
 }
 $27 = $fs + 48 | 0;
 $30 = (HEAPU8[$27 >> 0] | 0) + 1 | 0;
 $32 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
 do if ($30 >>> 0 > (HEAPU8[$32 >> 0] | 0) >>> 0) if ($30 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
  $39 = $30 & 255;
  HEAP8[$32 >> 0] = $39;
  $$pre$phi$i$iZ2D = $39;
  break;
 } else $$pre$phi$i$iZ2D = $30 & 255; while (0);
 HEAP8[$27 >> 0] = $$pre$phi$i$iZ2D;
 _exp2reg($fs, $e, ($$pre$phi$i$iZ2D & 255) + -1 | 0);
 $$0 = HEAP32[$e + 8 >> 2] | 0;
 return $$0 | 0;
}

function _lua_getuservalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $$sink = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] | 0;
 $33 = $L + 8 | 0;
 $34 = HEAP32[$33 >> 2] | 0;
 if (!$31) {
  $$sink = 0;
  $35 = $34 + 8 | 0;
  HEAP32[$35 >> 2] = $$sink;
  $36 = HEAP32[$33 >> 2] | 0;
  $37 = $36 + 16 | 0;
  HEAP32[$33 >> 2] = $37;
  return;
 }
 HEAP32[$34 >> 2] = $31;
 $$sink = 69;
 $35 = $34 + 8 | 0;
 HEAP32[$35 >> 2] = $$sink;
 $36 = HEAP32[$33 >> 2] | 0;
 $37 = $36 + 16 | 0;
 HEAP32[$33 >> 2] = $37;
 return;
}

function _skipcomment($lf, $cp) {
 $lf = $lf | 0;
 $cp = $cp | 0;
 var $$0 = 0, $$0$i = 0, $0 = 0, $12 = 0, $19 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, label = 0;
 HEAP32[$lf >> 2] = 0;
 $0 = $lf + 4 | 0;
 $2 = _getc(HEAP32[$0 >> 2] | 0) | 0;
 do if (($2 | 0) == 239) {
  $3 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $3 + 1;
  HEAP8[$lf + 8 + $3 >> 0] = -17;
  $7 = _getc(HEAP32[$0 >> 2] | 0) | 0;
  if (($7 | 0) == -1) {
   label = 5;
   break;
  } else if (($7 | 0) != 187) {
   $$0$i = $7;
   break;
  }
  $8 = HEAP32[$lf >> 2] | 0;
  HEAP32[$lf >> 2] = $8 + 1;
  HEAP8[$lf + 8 + $8 >> 0] = -69;
  $12 = _getc(HEAP32[$0 >> 2] | 0) | 0;
  if (($12 | 0) == -1) {
   label = 5;
   break;
  } else if (($12 | 0) != 191) {
   $$0$i = $12;
   break;
  }
  HEAP8[(HEAP32[$lf >> 2] | 0) + ($lf + 8) >> 0] = -65;
  HEAP32[$lf >> 2] = 0;
  $$0$i = _getc(HEAP32[$0 >> 2] | 0) | 0;
 } else if (($2 | 0) == -1) label = 5; else $$0$i = $2; while (0);
 if ((label | 0) == 5) {
  HEAP32[$cp >> 2] = -1;
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$cp >> 2] = $$0$i;
 if (($$0$i | 0) != 35) {
  $$0 = 0;
  return $$0 | 0;
 }
 do $19 = _getc(HEAP32[$0 >> 2] | 0) | 0; while (!(($19 | 0) == 10 | ($19 | 0) == -1));
 HEAP32[$cp >> 2] = _getc(HEAP32[$0 >> 2] | 0) | 0;
 $$0 = 1;
 return $$0 | 0;
}

function _io_lines($L) {
 $L = $L | 0;
 var $10 = 0, $11 = 0, $15 = 0, $8 = 0, $9 = 0, $toclose$0 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, 1) | 0) == -1) _lua_pushnil($L);
 if (!(_lua_type($L, 1) | 0)) {
  _lua_getfield($L, -1001e3, 7176);
  _lua_replace($L, 1);
  if (HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) + 4 >> 2] | 0) {
   $toclose$0 = 0;
   _aux_lines($L, $toclose$0);
   STACKTOP = sp;
   return 1;
  }
  _luaL_error($L, 7368, $vararg_buffer) | 0;
  $toclose$0 = 0;
  _aux_lines($L, $toclose$0);
  STACKTOP = sp;
  return 1;
 } else {
  $8 = _luaL_checklstring($L, 1, 0) | 0;
  $9 = _lua_newuserdata($L, 8) | 0;
  $10 = $9 + 4 | 0;
  HEAP32[$10 >> 2] = 0;
  _luaL_setmetatable($L, 7088);
  HEAP32[$9 >> 2] = 0;
  HEAP32[$10 >> 2] = 165;
  $11 = _fopen($8 | 0, 11144) | 0;
  HEAP32[$9 >> 2] = $11;
  if (!$11) {
   $15 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   HEAP32[$vararg_buffer1 >> 2] = $8;
   HEAP32[$vararg_buffer1 + 4 >> 2] = $15;
   _luaL_error($L, 7808, $vararg_buffer1) | 0;
  }
  _lua_replace($L, 1);
  $toclose$0 = 1;
  _aux_lines($L, $toclose$0);
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _io_readline($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $21 = 0, $22 = 0, $i$01 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $0 = _lua_touserdata($L, -1001001) | 0;
 $1 = _lua_tointegerx($L, -1001002, 0) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  $$0 = _luaL_error($L, 7640, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_settop($L, 1);
 if (($1 | 0) >= 1) {
  $i$01 = 1;
  while (1) {
   _lua_pushvalue($L, -1001003 - $i$01 | 0);
   if (($i$01 | 0) == ($1 | 0)) break; else $i$01 = $i$01 + 1 | 0;
  }
 }
 $10 = _g_read($L, HEAP32[$0 >> 2] | 0, 2) | 0;
 if (_lua_type($L, 0 - $10 | 0) | 0) {
  $$0 = $10;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (($10 | 0) > 1) {
  HEAP32[$vararg_buffer1 >> 2] = _lua_tolstring($L, 1 - $10 | 0, 0) | 0;
  $$0 = _luaL_error($L, 7664, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_toboolean($L, -1001003) | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_settop($L, 0);
 _lua_pushvalue($L, -1001001);
 $21 = (_luaL_checkudata($L, 1, 7088) | 0) + 4 | 0;
 $22 = HEAP32[$21 >> 2] | 0;
 HEAP32[$21 >> 2] = 0;
 FUNCTION_TABLE_ii[$22 & 255]($L) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f;
 src = 11424;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01 = $s;
  $$02 = $n;
 }
 $5 = -2 - $$01 | 0;
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
 HEAP32[$f + 48 >> 2] = $$$02;
 $8 = $f + 20 | 0;
 HEAP32[$8 >> 2] = $$01;
 HEAP32[$f + 44 >> 2] = $$01;
 $10 = $$01 + $$$02 | 0;
 $11 = $f + 16 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$f + 28 >> 2] = $10;
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0;
 if (!$$$02) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$8 >> 2] | 0;
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_addstring($B, $s) {
 $B = $B | 0;
 $s = $s | 0;
 var $$$i$i = 0, $0 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _strlen($s | 0) | 0;
 $2 = HEAP32[$B + 12 >> 2] | 0;
 $3 = $B + 4 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 $5 = $B + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($4 - $6 | 0) >>> 0 >= $0 >>> 0) {
  $23 = HEAP32[$B >> 2] | 0;
  $24 = $6;
  $22 = $23 + $24 | 0;
  _memcpy($22 | 0, $s | 0, $0 | 0) | 0;
  $25 = HEAP32[$5 >> 2] | 0;
  $26 = $25 + $0 | 0;
  HEAP32[$5 >> 2] = $26;
  STACKTOP = sp;
  return;
 }
 $9 = $4 << 1;
 $$$i$i = ($9 - $6 | 0) >>> 0 < $0 >>> 0 ? $6 + $0 | 0 : $9;
 if ($$$i$i >>> 0 < $6 >>> 0 | ($$$i$i - $6 | 0) >>> 0 < $0 >>> 0) _luaL_error($2, 4128, sp) | 0;
 $16 = _lua_newuserdata($2, $$$i$i) | 0;
 _memcpy($16 | 0, HEAP32[$B >> 2] | 0, HEAP32[$5 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) != ($B + 16 | 0)) _lua_remove($2, -2);
 HEAP32[$B >> 2] = $16;
 HEAP32[$3 >> 2] = $$$i$i;
 $23 = $16;
 $24 = HEAP32[$5 >> 2] | 0;
 $22 = $23 + $24 | 0;
 _memcpy($22 | 0, $s | 0, $0 | 0) | 0;
 $25 = HEAP32[$5 >> 2] | 0;
 $26 = $25 + $0 | 0;
 HEAP32[$5 >> 2] = $26;
 STACKTOP = sp;
 return;
}

function _luaK_setreturns($fs, $e, $nresults) {
 $fs = $fs | 0;
 $e = $e | 0;
 $nresults = $nresults | 0;
 var $$pre$phi$iZ2D = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $25 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $41 = 0, $6 = 0;
 $0 = HEAP32[$e >> 2] | 0;
 if (($0 | 0) == 12) {
  $6 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e + 8 >> 2] << 2) | 0;
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -8372225 | ($nresults << 14) + 16384 & 8372224;
  return;
 } else if (($0 | 0) == 13) {
  $13 = $e + 8 | 0;
  $15 = HEAP32[$fs >> 2] | 0;
  $17 = HEAP32[$15 + 12 >> 2] | 0;
  $18 = $17 + (HEAP32[$13 >> 2] << 2) | 0;
  HEAP32[$18 >> 2] = HEAP32[$18 >> 2] & 8388607 | ($nresults << 23) + 8388608;
  $25 = $17 + (HEAP32[$13 >> 2] << 2) | 0;
  $28 = $fs + 48 | 0;
  $30 = HEAPU8[$28 >> 0] | 0;
  HEAP32[$25 >> 2] = $30 << 6 | HEAP32[$25 >> 2] & -16321;
  $33 = $30 + 1 | 0;
  $34 = $15 + 78 | 0;
  do if ($33 >>> 0 > (HEAPU8[$34 >> 0] | 0) >>> 0) if ($33 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
   $41 = $33 & 255;
   HEAP8[$34 >> 0] = $41;
   $$pre$phi$iZ2D = $41;
   break;
  } else $$pre$phi$iZ2D = $33 & 255; while (0);
  HEAP8[$28 >> 0] = $$pre$phi$iZ2D;
  return;
 } else return;
}

function _luaL_checkoption($L, $narg, $def, $lst) {
 $L = $L | 0;
 $narg = $narg | 0;
 $def = $def | 0;
 $lst = $lst | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (!$def) {
  $2 = _lua_tolstring($L, $narg, 0) | 0;
  if (!$2) {
   $4 = _lua_typename($L, 4) | 0;
   $6 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = $4;
   HEAP32[$vararg_buffer + 4 >> 2] = $6;
   _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
   $11 = 0;
  } else $11 = $2;
 } else $11 = _luaL_optlstring($L, $narg, $def, 0) | 0;
 $8 = HEAP32[$lst >> 2] | 0;
 L6 : do if ($8) {
  $10 = $8;
  $i$02 = 0;
  while (1) {
   if (!(_strcmp($10, $11) | 0)) {
    $$0 = $i$02;
    break;
   }
   $i$02 = $i$02 + 1 | 0;
   $10 = HEAP32[$lst + ($i$02 << 2) >> 2] | 0;
   if (!$10) break L6;
  }
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAP32[$vararg_buffer2 >> 2] = $11;
 $$0 = _luaL_argerror($L, $narg, _lua_pushfstring($L, 4080, $vararg_buffer2) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_self($fs, $e, $key) {
 $fs = $fs | 0;
 $e = $e | 0;
 $key = $key | 0;
 var $$pre$phi$iZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $15 = 0, $16 = 0, $18 = 0, $25 = 0, $36 = 0;
 _luaK_exp2anyreg($fs, $e) | 0;
 $0 = $e + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$e >> 2] | 0) == 6 & ($1 & 256 | 0) == 0) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($1 | 0)) {
  $10 = $fs + 48 | 0;
  HEAP8[$10 >> 0] = (HEAP8[$10 >> 0] | 0) + -1 << 24 >> 24;
 }
 $13 = $fs + 48 | 0;
 $15 = HEAPU8[$13 >> 0] | 0;
 HEAP32[$0 >> 2] = $15;
 HEAP32[$e >> 2] = 6;
 $16 = $15 + 2 | 0;
 $18 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
 do if ($16 >>> 0 > (HEAPU8[$18 >> 0] | 0) >>> 0) if ($16 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48); else {
  $25 = $16 & 255;
  HEAP8[$18 >> 0] = $25;
  $$pre$phi$iZ2D = $25;
  break;
 } else $$pre$phi$iZ2D = $16 & 255; while (0);
 HEAP8[$13 >> 0] = $$pre$phi$iZ2D;
 _luaK_code($fs, $1 << 23 | $15 << 6 | (_luaK_exp2RK($fs, $key) | 0) << 14 | 12) | 0;
 if ((HEAP32[$key >> 2] | 0) != 6) return;
 $36 = HEAP32[$key + 8 >> 2] | 0;
 if ($36 & 256) return;
 if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) > ($36 | 0)) return;
 HEAP8[$13 >> 0] = (HEAP8[$13 >> 0] | 0) + -1 << 24 >> 24;
 return;
}

function _luaL_addlstring($B, $s, $l) {
 $B = $B | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $$$i = 0, $1 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 $2 = $B + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $B + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($3 - $5 | 0) >>> 0 >= $l >>> 0) {
  $22 = HEAP32[$B >> 2] | 0;
  $23 = $5;
  $21 = $22 + $23 | 0;
  _memcpy($21 | 0, $s | 0, $l | 0) | 0;
  $24 = HEAP32[$4 >> 2] | 0;
  $25 = $24 + $l | 0;
  HEAP32[$4 >> 2] = $25;
  STACKTOP = sp;
  return;
 }
 $8 = $3 << 1;
 $$$i = ($8 - $5 | 0) >>> 0 < $l >>> 0 ? $5 + $l | 0 : $8;
 if ($$$i >>> 0 < $5 >>> 0 | ($$$i - $5 | 0) >>> 0 < $l >>> 0) _luaL_error($1, 4128, sp) | 0;
 $15 = _lua_newuserdata($1, $$$i) | 0;
 _memcpy($15 | 0, HEAP32[$B >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) != ($B + 16 | 0)) _lua_remove($1, -2);
 HEAP32[$B >> 2] = $15;
 HEAP32[$2 >> 2] = $$$i;
 $22 = $15;
 $23 = HEAP32[$4 >> 2] | 0;
 $21 = $22 + $23 | 0;
 _memcpy($21 | 0, $s | 0, $l | 0) | 0;
 $24 = HEAP32[$4 >> 2] | 0;
 $25 = $24 + $l | 0;
 HEAP32[$4 >> 2] = $25;
 STACKTOP = sp;
 return;
}

function _clearvalues($g, $l, $f) {
 $g = $g | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$06 = 0, $11 = 0, $12 = 0, $20 = 0, $22 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, $n$02 = 0;
 if (($l | 0) == ($f | 0)) return; else $$06 = $l;
 do {
  $5 = $$06 + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $7 = $6 + (1 << (HEAPU8[$$06 + 7 >> 0] | 0) << 5) | 0;
  $8 = $$06 + 28 | 0;
  if ((HEAP32[$8 >> 2] | 0) > 0) {
   $11 = $$06 + 12 | 0;
   $i$01 = 0;
   do {
    $12 = HEAP32[$11 >> 2] | 0;
    if (_iscleared($g, $12 + ($i$01 << 4) | 0) | 0) HEAP32[$12 + ($i$01 << 4) + 8 >> 2] = 0;
    $i$01 = $i$01 + 1 | 0;
   } while (($i$01 | 0) < (HEAP32[$8 >> 2] | 0));
   $20 = HEAP32[$5 >> 2] | 0;
  } else $20 = $6;
  if ($20 >>> 0 < $7 >>> 0) {
   $n$02 = $20;
   do {
    $22 = $n$02 + 8 | 0;
    if (HEAP32[$22 >> 2] | 0) if (_iscleared($g, $n$02) | 0) {
     HEAP32[$22 >> 2] = 0;
     $27 = $n$02 + 24 | 0;
     if (HEAP32[$27 >> 2] & 64) if (HEAP8[(HEAP32[$n$02 + 16 >> 2] | 0) + 5 >> 0] & 3) HEAP32[$27 >> 2] = 11;
    }
    $n$02 = $n$02 + 32 | 0;
   } while ($n$02 >>> 0 < $7 >>> 0);
  }
  $$06 = HEAP32[$$06 + 24 >> 2] | 0;
 } while (($$06 | 0) != ($f | 0));
 return;
}

function _lua_rawlen($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 15;
 if (($31 | 0) == 4) {
  $$0 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 7) {
  $$0 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 16 >> 2] | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 5) {
  $$0 = _luaH_getn(HEAP32[$$0$i >> 2] | 0) | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _lua_rawgeti($L, $idx, $n) {
 $L = $L | 0;
 $idx = $idx | 0;
 $n = $n | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $38 = 0, $39 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = _luaH_getint(HEAP32[$$0$i >> 2] | 0, $n) | 0;
 $31 = $L + 8 | 0;
 $32 = HEAP32[$31 >> 2] | 0;
 $33 = $30;
 $38 = HEAP32[$33 + 4 >> 2] | 0;
 $39 = $32;
 HEAP32[$39 >> 2] = HEAP32[$33 >> 2];
 HEAP32[$39 + 4 >> 2] = $38;
 HEAP32[$32 + 8 >> 2] = HEAP32[$30 + 8 >> 2];
 HEAP32[$31 >> 2] = (HEAP32[$31 >> 2] | 0) + 16;
 return;
}

function _lua_setfield($L, $idx, $k) {
 $L = $L | 0;
 $idx = $idx | 0;
 $k = $k | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $32 = 0, $38 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $30 + 16;
 $32 = _luaS_new($L, $k) | 0;
 HEAP32[$30 >> 2] = $32;
 HEAP32[$30 + 8 >> 2] = HEAPU8[$32 + 4 >> 0] | 0 | 64;
 $38 = HEAP32[$29 >> 2] | 0;
 _luaV_settable($L, $$0$i, $38 + -16 | 0, $38 + -32 | 0);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -32;
 return;
}

function _luaopen_package($L) {
 $L = $L | 0;
 _luaL_getsubtable($L, -1001e3, 10280) | 0;
 _lua_createtable($L, 0, 1);
 _lua_pushcclosure($L, 168, 0);
 _lua_setfield($L, -2, 10288);
 _lua_setmetatable($L, -2) | 0;
 _lua_createtable($L, 0, 3);
 _luaL_setfuncs($L, 10296, 0);
 _lua_createtable($L, 4, 0);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 169, 1);
 _lua_rawseti($L, -2, 1);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 170, 1);
 _lua_rawseti($L, -2, 2);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 171, 1);
 _lua_rawseti($L, -2, 3);
 _lua_pushvalue($L, -2);
 _lua_pushcclosure($L, 172, 1);
 _lua_rawseti($L, -2, 4);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -3, 10328);
 _lua_setfield($L, -2, 10336);
 _setpath($L, 10352, 10360, 10376, 10392);
 _setpath($L, 10536, 10544, 10560, 10576);
 _lua_pushlstring($L, 10648, 10) | 0;
 _lua_setfield($L, -2, 10664);
 _luaL_getsubtable($L, -1001e3, 10672) | 0;
 _lua_setfield($L, -2, 10680);
 _luaL_getsubtable($L, -1001e3, 11352) | 0;
 _lua_setfield($L, -2, 10688);
 _lua_rawgeti($L, -1001e3, 2);
 _lua_pushvalue($L, -2);
 _luaL_setfuncs($L, 10696, 1);
 _lua_settop($L, -2);
 return 1;
}

function _push_onecapture($ms, $i, $s, $e) {
 $ms = $ms | 0;
 $i = $i | 0;
 $s = $s | 0;
 $e = $e | 0;
 var $10 = 0, $12 = 0, $19 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((HEAP32[$ms + 20 >> 2] | 0) <= ($i | 0)) {
  $5 = HEAP32[$ms + 16 >> 2] | 0;
  if (!$i) {
   _lua_pushlstring($5, $s, $e - $s | 0) | 0;
   STACKTOP = sp;
   return;
  } else {
   _luaL_error($5, 9224, $vararg_buffer) | 0;
   STACKTOP = sp;
   return;
  }
 }
 $10 = HEAP32[$ms + 24 + ($i << 3) + 4 >> 2] | 0;
 if (($10 | 0) == -1) {
  $12 = $ms + 16 | 0;
  _luaL_error(HEAP32[$12 >> 2] | 0, 9248, $vararg_buffer1) | 0;
  $28 = HEAP32[$12 >> 2] | 0;
  $29 = HEAP32[$ms + 24 + ($i << 3) >> 2] | 0;
 } else {
  $19 = HEAP32[$ms + 16 >> 2] | 0;
  $21 = HEAP32[$ms + 24 + ($i << 3) >> 2] | 0;
  if (($10 | 0) == -2) {
   _lua_pushinteger($19, $21 + 1 - (HEAP32[$ms + 4 >> 2] | 0) | 0);
   STACKTOP = sp;
   return;
  } else {
   $28 = $19;
   $29 = $21;
  }
 }
 _lua_pushlstring($28, $29, $10) | 0;
 STACKTOP = sp;
 return;
}

function _g_write($L, $f, $arg) {
 $L = $L | 0;
 $f = $f | 0;
 $arg = $arg | 0;
 var $$0 = 0, $$012 = 0, $$in = 0, $$sink = 0, $0 = 0, $10 = 0, $13 = 0, $l = 0, $status$03 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 8 | 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) == ($arg | 0)) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$012 = $arg;
 $$in = $0 - $arg | 0;
 $status$03 = 1;
 while (1) {
  $$in = $$in + -1 | 0;
  if ((_lua_type($L, $$012) | 0) == 3) if (!$status$03) $$sink = 0; else {
   HEAPF64[$vararg_buffer >> 3] = +_lua_tonumberx($L, $$012, 0);
   $$sink = (_fprintf($f | 0, 7400, $vararg_buffer | 0) | 0) > 0;
  } else {
   $10 = _luaL_checklstring($L, $$012, $l) | 0;
   if (!$status$03) $$sink = 0; else {
    $13 = _fwrite($10 | 0, 1, HEAP32[$l >> 2] | 0, $f | 0) | 0;
    $$sink = ($13 | 0) == (HEAP32[$l >> 2] | 0);
   }
  }
  if (!$$in) break; else {
   $$012 = $$012 + 1 | 0;
   $status$03 = $$sink & 1;
  }
 }
 if ($$sink) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_fileresult($L, 0, 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _lua_rawget($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $33 = 0, $34 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = $L + 8 | 0;
 $33 = _luaH_get(HEAP32[$$0$i >> 2] | 0, (HEAP32[$30 >> 2] | 0) + -16 | 0) | 0;
 $34 = HEAP32[$30 >> 2] | 0;
 $36 = $33;
 $41 = HEAP32[$36 + 4 >> 2] | 0;
 $42 = $34 + -16 | 0;
 HEAP32[$42 >> 2] = HEAP32[$36 >> 2];
 HEAP32[$42 + 4 >> 2] = $41;
 HEAP32[$34 + -8 >> 2] = HEAP32[$33 + 8 >> 2];
 return;
}

function _luaK_storevar($fs, $var, $ex) {
 $fs = $fs | 0;
 $var = $var | 0;
 $ex = $ex | 0;
 var $0 = 0, $11 = 0, $16 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $43 = 0, $50 = 0;
 $0 = HEAP32[$var >> 2] | 0;
 if (($0 | 0) == 9) {
  $23 = $var + 8 | 0;
  $27 = (HEAP8[$23 + 3 >> 0] | 0) == 7 ? 10 : 8;
  $28 = _luaK_exp2RK($fs, $ex) | 0;
  _luaK_code($fs, $28 << 14 | $27 | HEAPU8[$23 + 2 >> 0] << 6 | HEAPU16[$23 >> 1] << 23) | 0;
 } else if (($0 | 0) == 8) {
  $16 = _luaK_exp2anyreg($fs, $ex) | 0;
  _luaK_code($fs, $16 << 6 | HEAP32[$var + 8 >> 2] << 23 | 9) | 0;
 } else if (($0 | 0) == 7) {
  if ((HEAP32[$ex >> 2] | 0) == 6) {
   $4 = HEAP32[$ex + 8 >> 2] | 0;
   if (!($4 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0) <= ($4 | 0)) {
    $11 = $fs + 48 | 0;
    HEAP8[$11 >> 0] = (HEAP8[$11 >> 0] | 0) + -1 << 24 >> 24;
   }
  }
  _exp2reg($fs, $ex, HEAP32[$var + 8 >> 2] | 0);
  return;
 }
 if ((HEAP32[$ex >> 2] | 0) != 6) return;
 $43 = HEAP32[$ex + 8 >> 2] | 0;
 if ($43 & 256) return;
 if ((HEAPU8[$fs + 46 >> 0] | 0) > ($43 | 0)) return;
 $50 = $fs + 48 | 0;
 HEAP8[$50 >> 0] = (HEAP8[$50 >> 0] | 0) + -1 << 24 >> 24;
 return;
}

function _luaH_getint($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0, $12 = 0, $14 = 0, $7 = 0.0, $i$1$i = 0, $n$0 = 0, $n$0$lcssa = 0, $u$sroa$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $u$sroa$0$i = sp;
 $0 = $key + -1 | 0;
 if ($0 >>> 0 < (HEAP32[$t + 28 >> 2] | 0) >>> 0) {
  $$0 = (HEAP32[$t + 12 >> 2] | 0) + ($0 << 4) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = +($key | 0);
 HEAPF64[$u$sroa$0$i >> 3] = $7 + 1.0;
 $12 = (HEAP32[$u$sroa$0$i + 4 >> 2] | 0) + (HEAP32[$u$sroa$0$i >> 2] | 0) | 0;
 if (($12 | 0) < 0) {
  $14 = 0 - $12 | 0;
  $i$1$i = ($12 | 0) == ($14 | 0) ? 0 : $14;
 } else $i$1$i = $12;
 $n$0 = (HEAP32[$t + 16 >> 2] | 0) + ((($i$1$i | 0) % ((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 | 1 | 0) | 0) << 5) | 0;
 while (1) {
  if ((HEAP32[$n$0 + 24 >> 2] | 0) == 3) if (+HEAPF64[$n$0 + 16 >> 3] == $7) {
   $n$0$lcssa = $n$0;
   break;
  }
  $n$0 = HEAP32[$n$0 + 28 >> 2] | 0;
  if (!$n$0) {
   $$0 = 1832;
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = $n$0$lcssa;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaC_checkfinalizer($L, $o, $mt) {
 $L = $L | 0;
 $o = $o | 0;
 $mt = $mt | 0;
 var $$lcssa = 0, $1 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $26 = 0, $p$0 = 0, $p$0$lcssa = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $o + 5 | 0;
 if (($mt | 0) == 0 | (HEAP8[$2 >> 0] & 24) != 0) return;
 if (HEAP8[$mt + 6 >> 0] & 4) return;
 if (!(_luaT_gettm($mt, 2, HEAP32[$1 + 192 >> 2] | 0) | 0)) return;
 $13 = $1 + 76 | 0;
 $14 = HEAP32[$13 >> 2] | 0;
 if (($14 | 0) == ($o | 0)) {
  do $16 = _sweeplist($L, $14, 1) | 0; while (($16 | 0) == ($14 | 0));
  $$lcssa = $16;
  HEAP32[$13 >> 2] = $$lcssa;
 }
 $p$0 = $1 + 68 | 0;
 while (1) {
  $19 = HEAP32[$p$0 >> 2] | 0;
  if (($19 | 0) == ($o | 0)) {
   $p$0$lcssa = $p$0;
   break;
  } else $p$0 = $19;
 }
 HEAP32[$p$0$lcssa >> 2] = HEAP32[$o >> 2];
 $22 = $1 + 72 | 0;
 HEAP32[$o >> 2] = HEAP32[$22 >> 2];
 HEAP32[$22 >> 2] = $o;
 $26 = HEAPU8[$2 >> 0] | 0 | 16;
 HEAP8[$2 >> 0] = $26;
 if ((HEAPU8[$1 + 61 >> 0] | 0) < 2) {
  HEAP8[$2 >> 0] = $26 & 191;
  return;
 } else {
  HEAP8[$2 >> 0] = (HEAPU8[$1 + 60 >> 0] | 0) & 3 | $26 & 184;
  return;
 }
}

function _lua_isstring($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $33 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  if ($4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0) $$0$i$i = $4; else {
   $33 = 0;
   $32 = $33 & 1;
   return $32 | 0;
  }
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) {
   $33 = 0;
   $32 = $33 & 1;
   return $32 | 0;
  }
  $21 = HEAP32[$17 >> 2] | 0;
  if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) {
   $33 = 0;
   $32 = $33 & 1;
   return $32 | 0;
  } else $$0$i$i = $21 + 16 + ($16 + -1 << 4) | 0;
 } while (0);
 if (($$0$i$i | 0) == 1832) {
  $33 = 0;
  $32 = $33 & 1;
  return $32 | 0;
 }
 $33 = ((HEAP32[$$0$i$i + 8 >> 2] & 15) + -3 | 0) >>> 0 < 2;
 $32 = $33 & 1;
 return $32 | 0;
}

function _luaopen_io($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 _lua_createtable($L, 0, 11);
 _luaL_setfuncs($L, 6992, 0);
 _luaL_newmetatable($L, 7088) | 0;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -2, 11240);
 _luaL_setfuncs($L, 7096, 0);
 _lua_settop($L, -2);
 $0 = HEAP32[_stdin >> 2] | 0;
 $1 = _lua_newuserdata($L, 8) | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 HEAP32[$1 >> 2] = $0;
 HEAP32[$2 >> 2] = 163;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, 7176);
 _lua_setfield($L, -2, 7192);
 $3 = HEAP32[_stdout >> 2] | 0;
 $4 = _lua_newuserdata($L, 8) | 0;
 $5 = $4 + 4 | 0;
 HEAP32[$5 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 HEAP32[$4 >> 2] = $3;
 HEAP32[$5 >> 2] = 163;
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, 7200);
 _lua_setfield($L, -2, 7216);
 $6 = HEAP32[_stderr >> 2] | 0;
 $7 = _lua_newuserdata($L, 8) | 0;
 $8 = $7 + 4 | 0;
 HEAP32[$8 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 HEAP32[$7 >> 2] = $6;
 HEAP32[$8 >> 2] = 163;
 _lua_setfield($L, -2, 7224);
 return 1;
}

function _g_iofile($L, $f, $mode) {
 $L = $L | 0;
 $f = $f | 0;
 $mode = $mode | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer2 = sp + 8 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, 1) | 0) < 1) {
  _lua_getfield($L, -1001e3, $f);
  STACKTOP = sp;
  return;
 }
 $2 = _lua_tolstring($L, 1, 0) | 0;
 if (!$2) {
  if (!(HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) + 4 >> 2] | 0)) _luaL_error($L, 7368, $vararg_buffer2) | 0;
  _lua_pushvalue($L, 1);
 } else {
  $4 = _lua_newuserdata($L, 8) | 0;
  $5 = $4 + 4 | 0;
  HEAP32[$5 >> 2] = 0;
  _luaL_setmetatable($L, 7088);
  HEAP32[$4 >> 2] = 0;
  HEAP32[$5 >> 2] = 165;
  $6 = _fopen($2 | 0, $mode | 0) | 0;
  HEAP32[$4 >> 2] = $6;
  if (!$6) {
   $10 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
   HEAP32[$vararg_buffer >> 2] = $2;
   HEAP32[$vararg_buffer + 4 >> 2] = $10;
   _luaL_error($L, 7808, $vararg_buffer) | 0;
  }
 }
 _lua_setfield($L, -1001e3, $f);
 _lua_getfield($L, -1001e3, $f);
 STACKTOP = sp;
 return;
}

function _lua_pushvalue($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $36 = 0, $37 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = $$0$i;
 $36 = HEAP32[$31 + 4 >> 2] | 0;
 $37 = $30;
 HEAP32[$37 >> 2] = HEAP32[$31 >> 2];
 HEAP32[$37 + 4 >> 2] = $36;
 HEAP32[$30 + 8 >> 2] = HEAP32[$$0$i + 8 >> 2];
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 16;
 return;
}

function _luaK_jump($fs) {
 $fs = $fs | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa6 = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $22 = 0, $5 = 0, $6 = 0, $8 = 0, $fs$idx$val$idx$val$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0;
 $0 = $fs + 28 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = -1;
 $2 = _luaK_code($fs, 2147450903) | 0;
 if (($1 | 0) == -1) {
  $22 = $2;
  return $22 | 0;
 }
 if (($2 | 0) == -1) {
  $22 = $1;
  return $22 | 0;
 }
 $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0$i = $2;
 while (1) {
  $5 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $8 = ($6 >>> 14) + -131071 | 0;
  $$0$i$i = ($8 | 0) == -1 ? -1 : $list$0$i + 1 + $8 | 0;
  if (($$0$i$i | 0) == -1) {
   $$lcssa = $5;
   $$lcssa6 = $6;
   $list$0$i$lcssa = $list$0$i;
   break;
  } else $list$0$i = $$0$i$i;
 }
 $13 = $1 + ~$list$0$i$lcssa | 0;
 if (((($13 | 0) > -1 ? $13 : 0 - $13 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = ($13 << 14) + 2147467264 | $$lcssa6 & 16383;
 $22 = $2;
 return $22 | 0;
}

function _lua_yieldk($L, $nresults, $ctx, $k) {
 $L = $L | 0;
 $nresults = $nresults | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $$sum = 0, $1 = 0, $25 = 0, $26 = 0, $27 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 if (HEAP16[$L + 36 >> 1] | 0) if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 172 >> 2] | 0) == ($L | 0)) _luaG_runerror($L, 824, $vararg_buffer1); else _luaG_runerror($L, 776, $vararg_buffer);
 HEAP8[$L + 6 >> 0] = 1;
 HEAP32[$1 + 20 >> 2] = (HEAP32[$1 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0);
 if (HEAP8[$1 + 18 >> 0] & 1) {
  STACKTOP = sp;
  return 0;
 }
 HEAP32[$1 + 28 >> 2] = $k;
 if (!$k) {
  $25 = $L + 8 | 0;
  $26 = HEAP32[$25 >> 2] | 0;
  $$sum = ~$nresults;
  $27 = $26 + ($$sum << 4) | 0;
  HEAP32[$1 >> 2] = $27;
  _luaD_throw($L, 1);
 }
 HEAP32[$1 + 24 >> 2] = $ctx;
 $25 = $L + 8 | 0;
 $26 = HEAP32[$25 >> 2] | 0;
 $$sum = ~$nresults;
 $27 = $26 + ($$sum << 4) | 0;
 HEAP32[$1 >> 2] = $27;
 _luaD_throw($L, 1);
 return 0;
}

function _lua_getfield($L, $idx, $k) {
 $L = $L | 0;
 $idx = $idx | 0;
 $k = $k | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $37 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 $31 = _luaS_new($L, $k) | 0;
 HEAP32[$30 >> 2] = $31;
 HEAP32[$30 + 8 >> 2] = HEAPU8[$31 + 4 >> 0] | 0 | 64;
 $37 = HEAP32[$29 >> 2] | 0;
 HEAP32[$29 >> 2] = $37 + 16;
 _luaV_gettable($L, $$0$i, $37, $37);
 return;
}

function _luaG_runerror($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $10 = 0, $12 = 0, $2 = 0, $26 = 0, $30 = 0, $argp = 0, $buff$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $vararg_buffer = sp;
 $buff$i = sp + 32 | 0;
 $argp = sp + 16 | 0;
 HEAP32[$argp >> 2] = $varargs;
 $0 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 $2 = HEAP32[$L + 16 >> 2] | 0;
 if (!(HEAP8[$2 + 18 >> 0] & 1)) _luaG_errormsg($L);
 $10 = HEAP32[(HEAP32[HEAP32[$2 >> 2] >> 2] | 0) + 12 >> 2] | 0;
 $12 = HEAP32[$10 + 20 >> 2] | 0;
 if (!$12) $30 = 0; else $30 = HEAP32[$12 + (((HEAP32[$2 + 28 >> 2] | 0) - (HEAP32[$10 + 12 >> 2] | 0) >> 2) + -1 << 2) >> 2] | 0;
 $26 = HEAP32[$10 + 36 >> 2] | 0;
 if (!$26) {
  HEAP8[$buff$i >> 0] = 63;
  HEAP8[$buff$i + 1 >> 0] = 0;
 } else _luaO_chunkid($buff$i, $26 + 16 | 0, 60);
 HEAP32[$vararg_buffer >> 2] = $buff$i;
 HEAP32[$vararg_buffer + 4 >> 2] = $30;
 HEAP32[$vararg_buffer + 8 >> 2] = $0;
 _luaO_pushfstring($L, 1512, $vararg_buffer) | 0;
 _luaG_errormsg($L);
}

function _lua_xmove($from, $to, $n) {
 $from = $from | 0;
 $to = $to | 0;
 $n = $n | 0;
 var $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0;
 if (($from | 0) == ($to | 0)) return;
 $1 = $from + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = 0 - $n | 0;
 $4 = $2 + ($3 << 4) | 0;
 HEAP32[$1 >> 2] = $4;
 if (($n | 0) <= 0) return;
 $6 = $to + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = $7 + 16;
 $9 = $4;
 $14 = HEAP32[$9 + 4 >> 2] | 0;
 $15 = $7;
 HEAP32[$15 >> 2] = HEAP32[$9 >> 2];
 HEAP32[$15 + 4 >> 2] = $14;
 HEAP32[$7 + 8 >> 2] = HEAP32[$2 + ($3 << 4) + 8 >> 2];
 if (($n | 0) == 1) return; else $23 = 1;
 do {
  $$pre = HEAP32[$1 >> 2] | 0;
  $24 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $24 + 16;
  $26 = $$pre + ($23 << 4) | 0;
  $31 = HEAP32[$26 + 4 >> 2] | 0;
  $32 = $24;
  HEAP32[$32 >> 2] = HEAP32[$26 >> 2];
  HEAP32[$32 + 4 >> 2] = $31;
  HEAP32[$24 + 8 >> 2] = HEAP32[$$pre + ($23 << 4) + 8 >> 2];
  $23 = $23 + 1 | 0;
 } while (($23 | 0) != ($n | 0));
 return;
}

function _luaK_patchtohere($fs, $list) {
 $fs = $fs | 0;
 $list = $list | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$lcssa6 = 0, $10 = 0, $15 = 0, $3 = 0, $5 = 0, $7 = 0, $8 = 0, $fs$idx$val$idx$val$i = 0, $list$0$i = 0, $list$0$i$lcssa = 0;
 HEAP32[$fs + 24 >> 2] = HEAP32[$fs + 20 >> 2];
 $3 = $fs + 28 | 0;
 if (($list | 0) == -1) return;
 $5 = HEAP32[$3 >> 2] | 0;
 if (($5 | 0) == -1) {
  HEAP32[$3 >> 2] = $list;
  return;
 }
 $fs$idx$val$idx$val$i = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0$i = $5;
 while (1) {
  $7 = $fs$idx$val$idx$val$i + ($list$0$i << 2) | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $10 = ($8 >>> 14) + -131071 | 0;
  $$0$i$i = ($10 | 0) == -1 ? -1 : $list$0$i + 1 + $10 | 0;
  if (($$0$i$i | 0) == -1) {
   $$lcssa = $7;
   $$lcssa6 = $8;
   $list$0$i$lcssa = $list$0$i;
   break;
  } else $list$0$i = $$0$i$i;
 }
 $15 = ~$list$0$i$lcssa + $list | 0;
 if (((($15 | 0) > -1 ? $15 : 0 - $15 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = ($15 << 14) + 2147467264 | $$lcssa6 & 16383;
 return;
}

function _luaC_changemode($L, $mode) {
 $L = $L | 0;
 $mode = $mode | 0;
 var $$lcssa = 0, $$lcssa8 = 0, $0 = 0, $1 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $29 = 0, $7 = 0;
 $0 = $L + 12 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 + 62 | 0;
 if ((HEAPU8[$2 >> 0] | 0) == ($mode | 0)) return;
 if (($mode | 0) == 2) {
  $7 = $1 + 61 | 0;
  if (HEAP8[$7 >> 0] | 0) do _singlestep($L) | 0; while ((HEAP8[$7 >> 0] | 0) != 0);
  HEAP32[$1 + 20 >> 2] = (HEAP32[$1 + 12 >> 2] | 0) + (HEAP32[$1 + 8 >> 2] | 0);
  HEAP8[$2 >> 0] = 2;
  return;
 }
 HEAP8[$2 >> 0] = 0;
 HEAP8[$1 + 61 >> 0] = 2;
 HEAP32[$1 + 64 >> 2] = 0;
 $20 = $1 + 72 | 0;
 do $21 = _sweeplist($L, $20, 1) | 0; while (($21 | 0) == ($20 | 0));
 $$lcssa8 = $21;
 HEAP32[$1 + 80 >> 2] = $$lcssa8;
 $24 = $1 + 68 | 0;
 do $25 = _sweeplist($L, $24, 1) | 0; while (($25 | 0) == ($24 | 0));
 $$lcssa = $25;
 HEAP32[$1 + 76 >> 2] = $$lcssa;
 $29 = (HEAP32[$0 >> 2] | 0) + 61 | 0;
 if (1 << HEAPU8[$29 >> 0] & -29) return;
 do _singlestep($L) | 0; while ((1 << HEAPU8[$29 >> 0] & -29 | 0) == 0);
 return;
}

function _lua_isnumber($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $34 = 0, $35 = 0, $4 = 0, $n = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $n = sp;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 8 >> 2] | 0) == 3) {
  $35 = 1;
  $34 = $35 & 1;
  STACKTOP = sp;
  return $34 | 0;
 }
 $35 = (_luaV_tonumber($$0$i, $n) | 0) != 0;
 $34 = $35 & 1;
 STACKTOP = sp;
 return $34 | 0;
}

function _lua_tocfunction($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 8 >> 2] | 0;
 if (($30 | 0) == 102) {
  $$0 = HEAP32[(HEAP32[$$0$i >> 2] | 0) + 12 >> 2] | 0;
  return $$0 | 0;
 } else if (($30 | 0) == 22) {
  $$0 = HEAP32[$$0$i >> 2] | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _markmt($g) {
 $g = $g | 0;
 var $1 = 0, $15 = 0, $22 = 0, $29 = 0, $36 = 0, $43 = 0, $50 = 0, $57 = 0, $8 = 0;
 $1 = HEAP32[$g + 252 >> 2] | 0;
 if ($1) if (HEAP8[$1 + 5 >> 0] & 3) _reallymarkobject($g, $1);
 $8 = HEAP32[$g + 256 >> 2] | 0;
 if ($8) if (HEAP8[$8 + 5 >> 0] & 3) _reallymarkobject($g, $8);
 $15 = HEAP32[$g + 260 >> 2] | 0;
 if ($15) if (HEAP8[$15 + 5 >> 0] & 3) _reallymarkobject($g, $15);
 $22 = HEAP32[$g + 264 >> 2] | 0;
 if ($22) if (HEAP8[$22 + 5 >> 0] & 3) _reallymarkobject($g, $22);
 $29 = HEAP32[$g + 268 >> 2] | 0;
 if ($29) if (HEAP8[$29 + 5 >> 0] & 3) _reallymarkobject($g, $29);
 $36 = HEAP32[$g + 272 >> 2] | 0;
 if ($36) if (HEAP8[$36 + 5 >> 0] & 3) _reallymarkobject($g, $36);
 $43 = HEAP32[$g + 276 >> 2] | 0;
 if ($43) if (HEAP8[$43 + 5 >> 0] & 3) _reallymarkobject($g, $43);
 $50 = HEAP32[$g + 280 >> 2] | 0;
 if ($50) if (HEAP8[$50 + 5 >> 0] & 3) _reallymarkobject($g, $50);
 $57 = HEAP32[$g + 284 >> 2] | 0;
 if (!$57) return;
 if (!(HEAP8[$57 + 5 >> 0] & 3)) return;
 _reallymarkobject($g, $57);
 return;
}

function _db_debug($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256 | 0;
 $vararg_buffer = sp;
 $buffer = sp + 4 | 0;
 $0 = HEAP32[_stderr >> 2] | 0;
 _fwrite(6936, 11, 1, $0 | 0) | 0;
 _fflush($0 | 0) | 0;
 $1 = HEAP32[_stdin >> 2] | 0;
 if (!(_fgets($buffer | 0, 250, $1 | 0) | 0)) {
  STACKTOP = sp;
  return 0;
 }
 while (1) {
  if (!(_strcmp($buffer, 6952) | 0)) {
   label = 7;
   break;
  }
  if (!(_luaL_loadbufferx($L, $buffer, _strlen($buffer | 0) | 0, 6960, 0) | 0)) {
   if (_lua_pcallk($L, 0, 0, 0, 0, 0) | 0) label = 5;
  } else label = 5;
  if ((label | 0) == 5) {
   label = 0;
   HEAP32[$vararg_buffer >> 2] = _lua_tolstring($L, -1, 0) | 0;
   _fprintf($0 | 0, 6984, $vararg_buffer | 0) | 0;
   _fflush($0 | 0) | 0;
  }
  _lua_settop($L, 0);
  _fwrite(6936, 11, 1, $0 | 0) | 0;
  _fflush($0 | 0) | 0;
  if (!(_fgets($buffer | 0, 250, $1 | 0) | 0)) {
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) {
  STACKTOP = sp;
  return 0;
 }
 return 0;
}

function _luaD_call($L, $func, $nResults, $allowyield) {
 $L = $L | 0;
 $func = $func | 0;
 $nResults = $nResults | 0;
 $allowyield = $allowyield | 0;
 var $0 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = $L + 38 | 0;
 $2 = (HEAP16[$0 >> 1] | 0) + 1 << 16 >> 16;
 HEAP16[$0 >> 1] = $2;
 if (($2 & 65535) > 199) {
  if ($2 << 16 >> 16 == 200) _luaG_runerror($L, 728, $vararg_buffer);
  if (($2 & 65535) > 224) _luaD_throw($L, 6);
 }
 $6 = ($allowyield | 0) != 0;
 if (!$6) {
  $7 = $L + 36 | 0;
  HEAP16[$7 >> 1] = (HEAP16[$7 >> 1] | 0) + 1 << 16 >> 16;
 }
 if (!(_luaD_precall($L, $func, $nResults) | 0)) _luaV_execute($L);
 if ($6) {
  $15 = HEAP16[$0 >> 1] | 0;
  $16 = $15 + -1 << 16 >> 16;
  HEAP16[$0 >> 1] = $16;
  STACKTOP = sp;
  return;
 }
 $12 = $L + 36 | 0;
 HEAP16[$12 >> 1] = (HEAP16[$12 >> 1] | 0) + -1 << 16 >> 16;
 $15 = HEAP16[$0 >> 1] | 0;
 $16 = $15 + -1 << 16 >> 16;
 HEAP16[$0 >> 1] = $16;
 STACKTOP = sp;
 return;
}

function _lua_touserdata($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = HEAP32[$$0$i + 8 >> 2] & 15;
 if (($31 | 0) == 7) {
  $$0 = (HEAP32[$$0$i >> 2] | 0) + 24 | 0;
  return $$0 | 0;
 } else if (($31 | 0) == 2) {
  $$0 = HEAP32[$$0$i >> 2] | 0;
  return $$0 | 0;
 } else {
  $$0 = 0;
  return $$0 | 0;
 }
 return 0;
}

function _lua_toboolean($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 8 >> 2] | 0;
 if (!$30) {
  $35 = 0;
  $34 = $35 & 1;
  return $34 | 0;
 }
 if (($30 | 0) != 1) {
  $35 = 1;
  $34 = $35 & 1;
  return $34 | 0;
 }
 $35 = (HEAP32[$$0$i >> 2] | 0) != 0;
 $34 = $35 & 1;
 return $34 | 0;
}

function _lua_checkstack($L, $size) {
 $L = $L | 0;
 $size = $size | 0;
 var $0 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0, $6 = 0, $8 = 0, $res$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $size;
 $2 = HEAP32[$L + 16 >> 2] | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 $8 = $6;
 do if (((HEAP32[$L + 24 >> 2] | 0) - $8 >> 4 | 0) > ($size | 0)) {
  $25 = $6;
  $26 = $size;
 } else {
  if ((($8 - (HEAP32[$L + 28 >> 2] | 0) >> 4) + 5 | 0) > (1e6 - $size | 0)) {
   $res$01 = 0;
   STACKTOP = sp;
   return $res$01 | 0;
  }
  if (!(_luaD_rawrunprotected($L, 18, $0) | 0)) {
   $25 = HEAP32[$5 >> 2] | 0;
   $26 = HEAP32[$0 >> 2] | 0;
   break;
  } else {
   $res$01 = 0;
   STACKTOP = sp;
   return $res$01 | 0;
  }
 } while (0);
 $22 = $2 + 4 | 0;
 $24 = $25 + ($26 << 4) | 0;
 if ((HEAP32[$22 >> 2] | 0) >>> 0 >= $24 >>> 0) {
  $res$01 = 1;
  STACKTOP = sp;
  return $res$01 | 0;
 }
 HEAP32[$22 >> 2] = $24;
 $res$01 = 1;
 STACKTOP = sp;
 return $res$01 | 0;
}

function _luaX_token2str($ls, $token) {
 $ls = $ls | 0;
 $token = $token | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer4 = sp + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 if (($token | 0) >= 257) {
  $12 = HEAP32[1024 + ($token + -257 << 2) >> 2] | 0;
  if (($token | 0) >= 286) {
   $$0 = $12;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $15 = HEAP32[$ls + 52 >> 2] | 0;
  HEAP32[$vararg_buffer4 >> 2] = $12;
  $$0 = _luaO_pushfstring($15, 1184, $vararg_buffer4) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = HEAP32[$ls + 52 >> 2] | 0;
 if (!(HEAP8[136 + ($token + 1) >> 0] & 4)) {
  HEAP32[$vararg_buffer1 >> 2] = $token;
  $$0 = _luaO_pushfstring($7, 1168, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  HEAP32[$vararg_buffer >> 2] = $token;
  $$0 = _luaO_pushfstring($7, 1160, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_findtable($L, $idx, $fname, $szhint) {
 $L = $L | 0;
 $idx = $idx | 0;
 $fname = $fname | 0;
 $szhint = $szhint | 0;
 var $$0 = 0, $$01 = 0, $$01$lcssa = 0, $1 = 0, $7 = 0, $e$0 = 0, label = 0;
 if (!$idx) $$01 = $fname; else {
  _lua_pushvalue($L, $idx);
  $$01 = $fname;
 }
 while (1) {
  $1 = _strchr($$01, 46) | 0;
  if (!$1) $e$0 = $$01 + (_strlen($$01 | 0) | 0) | 0; else $e$0 = $1;
  $7 = $e$0 - $$01 | 0;
  _lua_pushlstring($L, $$01, $7) | 0;
  _lua_rawget($L, -2);
  if (!(_lua_type($L, -1) | 0)) {
   _lua_settop($L, -2);
   _lua_createtable($L, 0, (HEAP8[$e$0 >> 0] | 0) == 46 ? 1 : $szhint);
   _lua_pushlstring($L, $$01, $7) | 0;
   _lua_pushvalue($L, -2);
   _lua_settable($L, -4);
  } else if ((_lua_type($L, -1) | 0) != 5) {
   $$01$lcssa = $$01;
   break;
  }
  _lua_remove($L, -2);
  if ((HEAP8[$e$0 >> 0] | 0) == 46) $$01 = $e$0 + 1 | 0; else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label | 0) == 10) return $$0 | 0;
 _lua_settop($L, -3);
 $$0 = $$01$lcssa;
 return $$0 | 0;
}

function _db_gethook($L) {
 $L = $L | 0;
 var $$0$i = 0, $3 = 0, $4 = 0, $buff = 0, $i$0$i = 0, $i$1$i = 0, $i$2$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buff = sp;
 if ((_lua_type($L, 1) | 0) == 8) $$0$i = _lua_tothread($L, 1) | 0; else $$0$i = $L;
 $3 = _lua_gethookmask($$0$i) | 0;
 $4 = _lua_gethook($$0$i) | 0;
 if (($4 | 0) != 0 & ($4 | 0) != 25) _lua_pushlstring($L, 6920, 13) | 0; else {
  _luaL_getsubtable($L, -1001e3, 6504) | 0;
  _lua_pushthread($$0$i) | 0;
  _lua_xmove($$0$i, $L, 1);
  _lua_rawget($L, -2);
  _lua_remove($L, -2);
 }
 if (!($3 & 1)) $i$0$i = 0; else {
  HEAP8[$buff >> 0] = 99;
  $i$0$i = 1;
 }
 if (!($3 & 2)) $i$1$i = $i$0$i; else {
  HEAP8[$buff + $i$0$i >> 0] = 114;
  $i$1$i = $i$0$i + 1 | 0;
 }
 if (!($3 & 4)) $i$2$i = $i$1$i; else {
  HEAP8[$buff + $i$1$i >> 0] = 108;
  $i$2$i = $i$1$i + 1 | 0;
 }
 HEAP8[$buff + $i$2$i >> 0] = 0;
 _lua_pushstring($L, $buff) | 0;
 _lua_pushinteger($L, _lua_gethookcount($$0$i) | 0);
 STACKTOP = sp;
 return 3;
}

function _lua_next($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $33 = 0, $35 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = $L + 8 | 0;
 $33 = _luaH_next($L, HEAP32[$$0$i >> 2] | 0, (HEAP32[$30 >> 2] | 0) + -16 | 0) | 0;
 $35 = HEAP32[$30 >> 2] | 0;
 HEAP32[$30 >> 2] = ($33 | 0) == 0 ? $35 + -16 | 0 : $35 + 16 | 0;
 return $33 | 0;
}

function _db_upvaluejoin($L) {
 $L = $L | 0;
 var $0 = 0, $6 = 0, $ar$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar$i1 = sp;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 _lua_pushvalue($L, 1);
 _lua_getinfo($L, 6640, $ar$i1) | 0;
 if (($0 | 0) > 0) {
  if (($0 | 0) > (HEAPU8[$ar$i1 + 32 >> 0] | 0 | 0)) label = 3;
 } else label = 3;
 if ((label | 0) == 3) _luaL_argerror($L, 2, 6648) | 0;
 $6 = _luaL_checkinteger($L, 4) | 0;
 _luaL_checktype($L, 3, 6);
 _lua_pushvalue($L, 3);
 _lua_getinfo($L, 6640, $ar$i1) | 0;
 if (($6 | 0) > 0) {
  if (($6 | 0) > (HEAPU8[$ar$i1 + 32 >> 0] | 0 | 0)) label = 6;
 } else label = 6;
 if ((label | 0) == 6) _luaL_argerror($L, 4, 6648) | 0;
 if (_lua_iscfunction($L, 1) | 0) _luaL_argerror($L, 1, 6672) | 0;
 if (!(_lua_iscfunction($L, 3) | 0)) {
  _lua_upvaluejoin($L, 1, $0, 3, $6);
  STACKTOP = sp;
  return 0;
 }
 _luaL_argerror($L, 3, 6672) | 0;
 _lua_upvaluejoin($L, 1, $0, 3, $6);
 STACKTOP = sp;
 return 0;
}

function _searcher_Lua($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001001, 10352);
 $1 = _lua_tolstring($L, -1, 0) | 0;
 if (!$1) {
  HEAP32[$vararg_buffer >> 2] = 10352;
  _luaL_error($L, 10928, $vararg_buffer) | 0;
 }
 $3 = _searchpath($L, $0, $1, 12096, 10960) | 0;
 if (!$3) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_luaL_loadfilex($L, $3, 0) | 0)) {
  _lua_pushstring($L, $3) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $7 = _lua_tolstring($L, 1, 0) | 0;
  $8 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $7;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $3;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $8;
  $$0 = _luaL_error($L, 10968, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _searcher_C($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $3 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001001, 10536);
 $1 = _lua_tolstring($L, -1, 0) | 0;
 if (!$1) {
  HEAP32[$vararg_buffer >> 2] = 10536;
  _luaL_error($L, 10928, $vararg_buffer) | 0;
 }
 $3 = _searchpath($L, $0, $1, 12096, 10960) | 0;
 if (!$3) {
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_loadfunc($L, $3, $0) | 0)) {
  _lua_pushstring($L, $3) | 0;
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $7 = _lua_tolstring($L, 1, 0) | 0;
  $8 = _lua_tolstring($L, -1, 0) | 0;
  HEAP32[$vararg_buffer1 >> 2] = $7;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $3;
  HEAP32[$vararg_buffer1 + 8 >> 2] = $8;
  $$0 = _luaL_error($L, 10968, $vararg_buffer1) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaK_exp2nextreg($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $$pre$phi$iZ2D = 0, $10 = 0, $13 = 0, $16 = 0, $18 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 _luaK_dischargevars($fs, $e);
 if ((HEAP32[$e >> 2] | 0) == 6) {
  $3 = HEAP32[$e + 8 >> 2] | 0;
  if (!($3 & 256)) if ((HEAPU8[$fs + 46 >> 0] | 0 | 0) <= ($3 | 0)) {
   $10 = $fs + 48 | 0;
   HEAP8[$10 >> 0] = (HEAP8[$10 >> 0] | 0) + -1 << 24 >> 24;
  }
 }
 $13 = $fs + 48 | 0;
 $16 = (HEAPU8[$13 >> 0] | 0) + 1 | 0;
 $18 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
 if ($16 >>> 0 <= (HEAPU8[$18 >> 0] | 0) >>> 0) {
  $$pre$phi$iZ2D = $16 & 255;
  HEAP8[$13 >> 0] = $$pre$phi$iZ2D;
  $26 = $$pre$phi$iZ2D & 255;
  $27 = $26 + -1 | 0;
  _exp2reg($fs, $e, $27);
  return;
 }
 if ($16 >>> 0 > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48);
 $25 = $16 & 255;
 HEAP8[$18 >> 0] = $25;
 $$pre$phi$iZ2D = $25;
 HEAP8[$13 >> 0] = $$pre$phi$iZ2D;
 $26 = $$pre$phi$iZ2D & 255;
 $27 = $26 + -1 | 0;
 _exp2reg($fs, $e, $27);
 return;
}

function _luaF_getlocalname($f, $local_number, $pc) {
 $f = $f | 0;
 $local_number = $local_number | 0;
 $pc = $pc | 0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $1 = 0, $11 = 0, $4 = 0, $i$04 = 0, $i$04$lcssa11 = 0, label = 0;
 $1 = HEAP32[$f + 60 >> 2] | 0;
 if (($1 | 0) <= 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $4 = HEAP32[$f + 24 >> 2] | 0;
 $$013 = $local_number;
 $i$04 = 0;
 while (1) {
  if ((HEAP32[$4 + ($i$04 * 12 | 0) + 4 >> 2] | 0) > ($pc | 0)) {
   $$0 = 0;
   label = 8;
   break;
  }
  if ((HEAP32[$4 + ($i$04 * 12 | 0) + 8 >> 2] | 0) > ($pc | 0)) {
   $11 = $$013 + -1 | 0;
   if (!$11) {
    $i$04$lcssa11 = $i$04;
    label = 6;
    break;
   } else $$1 = $11;
  } else $$1 = $$013;
  $i$04 = $i$04 + 1 | 0;
  if (($i$04 | 0) >= ($1 | 0)) {
   $$0 = 0;
   label = 8;
   break;
  } else $$013 = $$1;
 }
 if ((label | 0) == 6) {
  $$0 = (HEAP32[$4 + ($i$04$lcssa11 * 12 | 0) >> 2] | 0) + 16 | 0;
  return $$0 | 0;
 } else if ((label | 0) == 8) return $$0 | 0;
 return 0;
}

function _lua_arith($L, $op) {
 $L = $L | 0;
 $op = $op | 0;
 var $1 = 0, $10 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $32 = 0, $33 = 0, $4 = 0, $9 = 0;
 $1 = $L + 8 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 if (($op | 0) == 6) {
  $4 = $2 + -16 | 0;
  $9 = HEAP32[$4 + 4 >> 2] | 0;
  $10 = $2;
  HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
  HEAP32[$10 + 4 >> 2] = $9;
  HEAP32[$2 + 8 >> 2] = HEAP32[$2 + -8 >> 2];
  $18 = (HEAP32[$1 >> 2] | 0) + 16 | 0;
  HEAP32[$1 >> 2] = $18;
  $20 = $18;
 } else $20 = $2;
 $19 = $20 + -32 | 0;
 $21 = $20 + -16 | 0;
 $22 = $20 + -24 | 0;
 if ((HEAP32[$22 >> 2] | 0) == 3) if ((HEAP32[$20 + -8 >> 2] | 0) == 3) {
  HEAPF64[$19 >> 3] = +_luaO_arith($op, +HEAPF64[$19 >> 3], +HEAPF64[$21 >> 3]);
  HEAP32[$22 >> 2] = 3;
  $32 = HEAP32[$1 >> 2] | 0;
  $33 = $32 + -16 | 0;
  HEAP32[$1 >> 2] = $33;
  return;
 }
 _luaV_arith($L, $19, $19, $21, $op + 6 | 0);
 $32 = HEAP32[$1 >> 2] | 0;
 $33 = $32 + -16 | 0;
 HEAP32[$1 >> 2] = $33;
 return;
}

function _match_class($c, $cl) {
 $c = $c | 0;
 $cl = $cl | 0;
 var $$0 = 0, $16 = 0, $res$0 = 0;
 do switch (_tolower($cl) | 0) {
 case 112:
  {
   $res$0 = _ispunct($c) | 0;
   break;
  }
 case 119:
  {
   $res$0 = _isalnum($c) | 0;
   break;
  }
 case 100:
  {
   $res$0 = ($c + -48 | 0) >>> 0 < 10 & 1;
   break;
  }
 case 97:
  {
   $res$0 = _isalpha($c) | 0;
   break;
  }
 case 122:
  {
   $res$0 = ($c | 0) == 0 & 1;
   break;
  }
 case 115:
  {
   $res$0 = _isspace($c) | 0;
   break;
  }
 case 99:
  {
   $res$0 = _iscntrl($c) | 0;
   break;
  }
 case 108:
  {
   $res$0 = _islower($c) | 0;
   break;
  }
 case 120:
  {
   $res$0 = _isxdigit($c) | 0;
   break;
  }
 case 103:
  {
   $res$0 = _isgraph($c) | 0;
   break;
  }
 case 117:
  {
   $res$0 = _isupper($c) | 0;
   break;
  }
 default:
  {
   $$0 = ($cl | 0) == ($c | 0) & 1;
   return $$0 | 0;
  }
 } while (0);
 $16 = (_islower($cl) | 0) == 0;
 $$0 = $16 ? ($res$0 | 0) == 0 & 1 : $res$0;
 return $$0 | 0;
}

function _lua_type($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $32 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  if ($4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0) $$0$i = $4; else {
   $32 = -1;
   return $32 | 0;
  }
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) {
   $32 = -1;
   return $32 | 0;
  }
  $21 = HEAP32[$17 >> 2] | 0;
  if (($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0)) {
   $32 = -1;
   return $32 | 0;
  } else $$0$i = $21 + 16 + ($16 + -1 << 4) | 0;
 } while (0);
 if (($$0$i | 0) == 1832) {
  $32 = -1;
  return $32 | 0;
 }
 $32 = HEAP32[$$0$i + 8 >> 2] & 15;
 return $32 | 0;
}

function _tinsert($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $i$01 = 0, $pos$0 = 0, $vararg_buffer = 0, label = 0, sp = 0, $i$01$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _luaL_checktype($L, 1, 5);
 $0 = _luaL_len($L, 1) | 0;
 $1 = $0 + 1 | 0;
 $2 = _lua_gettop($L) | 0;
 if (($2 | 0) == 3) label = 2; else if (($2 | 0) == 2) $pos$0 = $1; else {
  $$0 = _luaL_error($L, 10184, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if ((label | 0) == 2) {
  $3 = _luaL_checkinteger($L, 2) | 0;
  if (($3 | 0) < 1 | ($3 | 0) > ($1 | 0)) _luaL_argerror($L, 2, 10120) | 0;
  if (($0 | 0) < ($3 | 0)) $pos$0 = $3; else {
   $i$01 = $1;
   do {
    $i$01$looptemp = $i$01;
    $i$01 = $i$01 + -1 | 0;
    _lua_rawgeti($L, 1, $i$01);
    _lua_rawseti($L, 1, $i$01$looptemp);
   } while (($i$01 | 0) > ($3 | 0));
   $pos$0 = $3;
  }
 }
 _lua_rawseti($L, 1, $pos$0);
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _math_random($L) {
 $L = $L | 0;
 var $$0 = 0, $10 = 0.0, $11 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $3 = +((_rand() | 0) % 2147483647 | 0 | 0) / 2147483647.0;
 $4 = _lua_gettop($L) | 0;
 if (($4 | 0) == 1) {
  $5 = +_luaL_checknumber($L, 1);
  if (!($5 >= 1.0)) _luaL_argerror($L, 1, 8336) | 0;
  _lua_pushnumber($L, +Math_floor(+($3 * $5)) + 1.0);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (($4 | 0) == 2) {
  $10 = +_luaL_checknumber($L, 1);
  $11 = +_luaL_checknumber($L, 2);
  if (!($10 <= $11)) _luaL_argerror($L, 2, 8336) | 0;
  _lua_pushnumber($L, $10 + +Math_floor(+($3 * ($11 - $10 + 1.0))));
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else if (!$4) {
  _lua_pushnumber($L, $3);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 8360, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _findfield($L, $objidx, $level) {
 $L = $L | 0;
 $objidx = $objidx | 0;
 $level = $level | 0;
 var $$0 = 0, $5 = 0, label = 0;
 if (!$level) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ((_lua_type($L, -1) | 0) != 5) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 if (!(_lua_next($L, -2) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $5 = $level + -1 | 0;
 while (1) {
  if ((_lua_type($L, -2) | 0) == 4) {
   if (_lua_rawequal($L, $objidx, -1) | 0) {
    label = 7;
    break;
   }
   if (_findfield($L, $objidx, $5) | 0) {
    label = 9;
    break;
   }
  }
  _lua_settop($L, -2);
  if (!(_lua_next($L, -2) | 0)) {
   $$0 = 0;
   label = 11;
   break;
  }
 }
 if ((label | 0) == 7) {
  _lua_settop($L, -2);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 9) {
  _lua_remove($L, -2);
  _lua_pushlstring($L, 12096, 1) | 0;
  _lua_insert($L, -2);
  _lua_concat($L, 3);
  $$0 = 1;
  return $$0 | 0;
 } else if ((label | 0) == 11) return $$0 | 0;
 return 0;
}

function _luaL_prepbuffsize($B, $sz) {
 $B = $B | 0;
 $sz = $sz | 0;
 var $$ = 0, $1 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 $2 = $B + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $4 = $B + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 if (($3 - $5 | 0) >>> 0 >= $sz >>> 0) {
  $22 = HEAP32[$B >> 2] | 0;
  $23 = $5;
  $21 = $22 + $23 | 0;
  STACKTOP = sp;
  return $21 | 0;
 }
 $8 = $3 << 1;
 $$ = ($8 - $5 | 0) >>> 0 < $sz >>> 0 ? $5 + $sz | 0 : $8;
 if ($$ >>> 0 < $5 >>> 0 | ($$ - $5 | 0) >>> 0 < $sz >>> 0) _luaL_error($1, 4128, sp) | 0;
 $15 = _lua_newuserdata($1, $$) | 0;
 _memcpy($15 | 0, HEAP32[$B >> 2] | 0, HEAP32[$4 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) != ($B + 16 | 0)) _lua_remove($1, -2);
 HEAP32[$B >> 2] = $15;
 HEAP32[$2 >> 2] = $$;
 $22 = $15;
 $23 = HEAP32[$4 >> 2] | 0;
 $21 = $22 + $23 | 0;
 STACKTOP = sp;
 return $21 | 0;
}

function _luaB_load($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $3 = 0, $6 = 0, $9 = 0, $l = 0, $status$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 $0 = _lua_tolstring($L, 1, $l) | 0;
 $1 = _luaL_optlstring($L, 3, 5200, 0) | 0;
 $3 = (_lua_type($L, 4) | 0) != -1;
 if (!$0) {
  $9 = _luaL_optlstring($L, 2, 5208, 0) | 0;
  _luaL_checktype($L, 1, 6);
  _lua_settop($L, 5);
  $status$0 = _lua_load($L, 21, 0, $9, $1) | 0;
 } else {
  $6 = _luaL_optlstring($L, 2, $0, 0) | 0;
  $status$0 = _luaL_loadbufferx($L, $0, HEAP32[$l >> 2] | 0, $6, $1) | 0;
 }
 if ($status$0) {
  _lua_pushnil($L);
  _lua_insert($L, -2);
  $$0$i = 2;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 if (!$3) {
  $$0$i = 1;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _lua_pushvalue($L, $3 ? 4 : 0);
 if (_lua_setupvalue($L, -2, 1) | 0) {
  $$0$i = 1;
  STACKTOP = sp;
  return $$0$i | 0;
 }
 _lua_settop($L, -2);
 $$0$i = 1;
 STACKTOP = sp;
 return $$0$i | 0;
}

function _luaK_concat($fs, $l1, $l2) {
 $fs = $fs | 0;
 $l1 = $l1 | 0;
 $l2 = $l2 | 0;
 var $$0$i = 0, $$lcssa = 0, $$lcssa4 = 0, $1 = 0, $11 = 0, $3 = 0, $4 = 0, $6 = 0, $fs$idx$val$idx$val = 0, $list$0 = 0, $list$0$lcssa = 0;
 if (($l2 | 0) == -1) return;
 $1 = HEAP32[$l1 >> 2] | 0;
 if (($1 | 0) == -1) {
  HEAP32[$l1 >> 2] = $l2;
  return;
 }
 $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $list$0 = $1;
 while (1) {
  $3 = $fs$idx$val$idx$val + ($list$0 << 2) | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $6 = ($4 >>> 14) + -131071 | 0;
  $$0$i = ($6 | 0) == -1 ? -1 : $list$0 + 1 + $6 | 0;
  if (($$0$i | 0) == -1) {
   $$lcssa = $3;
   $$lcssa4 = $4;
   $list$0$lcssa = $list$0;
   break;
  } else $list$0 = $$0$i;
 }
 $11 = ~$list$0$lcssa + $l2 | 0;
 if (((($11 | 0) > -1 ? $11 : 0 - $11 | 0) | 0) > 131071) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 16);
 HEAP32[$$lcssa >> 2] = $$lcssa4 & 16383 | ($11 << 14) + 2147467264;
 return;
}

function _luaD_throw($L, $errcode) {
 $L = $L | 0;
 $errcode = $errcode | 0;
 var $0 = 0, $1 = 0, $11 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $26 = 0, $27 = 0, $38 = 0, $8 = 0, $9 = 0;
 $0 = $L + 64 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1) {
  HEAP32[$1 + 160 >> 2] = $errcode;
  _longjmp((HEAP32[$0 >> 2] | 0) + 4 | 0, 1);
 }
 HEAP8[$L + 6 >> 0] = $errcode;
 $8 = $L + 12 | 0;
 $9 = HEAP32[$8 >> 2] | 0;
 $11 = HEAP32[$9 + 172 >> 2] | 0;
 if (HEAP32[$11 + 64 >> 2] | 0) {
  $16 = HEAP32[$L + 8 >> 2] | 0;
  $18 = $11 + 8 | 0;
  $19 = HEAP32[$18 >> 2] | 0;
  HEAP32[$18 >> 2] = $19 + 16;
  $21 = $16 + -16 | 0;
  $26 = HEAP32[$21 + 4 >> 2] | 0;
  $27 = $19;
  HEAP32[$27 >> 2] = HEAP32[$21 >> 2];
  HEAP32[$27 + 4 >> 2] = $26;
  HEAP32[$19 + 8 >> 2] = HEAP32[$16 + -8 >> 2];
  _luaD_throw(HEAP32[(HEAP32[$8 >> 2] | 0) + 172 >> 2] | 0, $errcode);
 }
 $38 = HEAP32[$9 + 168 >> 2] | 0;
 if (!$38) _abort();
 FUNCTION_TABLE_ii[$38 & 255]($L) | 0;
 _abort();
}

function _db_getlocal($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $5 = _luaL_checkinteger($L, $4 | 2) | 0;
 $6 = $4 + 1 | 0;
 if ((_lua_type($L, $6) | 0) == 6) {
  _lua_pushvalue($L, $6);
  _lua_pushstring($L, _lua_getlocal($L, 0, $5) | 0) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_getstack($$0$i, _luaL_checkinteger($L, $6) | 0, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $6, 6480) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $14 = _lua_getlocal($$0$i, $ar, $5) | 0;
 if (!$14) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_xmove($$0$i, $L, 1);
  _lua_pushstring($L, $14) | 0;
  _lua_pushvalue($L, -2);
  $$0 = 2;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _lua_settable($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 $30 = HEAP32[$29 >> 2] | 0;
 _luaV_settable($L, $$0$i, $30 + -32 | 0, $30 + -16 | 0);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + -32;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _luaL_tolstring($L, $idx, $len) {
 $L = $L | 0;
 $idx = $idx | 0;
 $len = $len | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 do if (!(_luaL_callmeta($L, $idx, 7320) | 0)) {
  $2 = _lua_type($L, $idx) | 0;
  if (($2 | 0) == 4 | ($2 | 0) == 3) {
   _lua_pushvalue($L, $idx);
   break;
  } else if (($2 | 0) == 1) {
   $4 = (_lua_toboolean($L, $idx) | 0) != 0;
   _lua_pushstring($L, $4 ? 4240 : 4248) | 0;
   break;
  } else if (!$2) {
   _lua_pushlstring($L, 4256, 3) | 0;
   break;
  } else {
   $7 = _lua_typename($L, _lua_type($L, $idx) | 0) | 0;
   $8 = _lua_topointer($L, $idx) | 0;
   HEAP32[$vararg_buffer >> 2] = $7;
   HEAP32[$vararg_buffer + 4 >> 2] = $8;
   _lua_pushfstring($L, 4264, $vararg_buffer) | 0;
   break;
  }
 } while (0);
 $9 = _lua_tolstring($L, -1, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _io_open($L) {
 $L = $L | 0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $17 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, label = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _luaL_optlstring($L, 2, 11144, 0) | 0;
 $2 = _lua_newuserdata($L, 8) | 0;
 $3 = $2 + 4 | 0;
 HEAP32[$3 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 HEAP32[$2 >> 2] = 0;
 HEAP32[$3 >> 2] = 165;
 $4 = HEAP8[$1 >> 0] | 0;
 if (!($4 << 24 >> 24)) label = 4; else {
  $7 = $1 + 1 | 0;
  if (!(_memchr(7840, $4 << 24 >> 24, 4) | 0)) label = 4; else {
   $10 = (HEAP8[$7 >> 0] | 0) == 43;
   $$1 = $10 ? $1 + 2 | 0 : $7;
   if (HEAP8[((HEAP8[$$1 >> 0] | 0) == 98 ? $1 + ($10 ? 3 : 2) | 0 : $$1) >> 0] | 0) label = 4;
  }
 }
 if ((label | 0) == 4) _luaL_argerror($L, 2, 7848) | 0;
 $17 = _fopen($0 | 0, $1 | 0) | 0;
 HEAP32[$2 >> 2] = $17;
 if ($17) {
  $20 = 1;
  return $20 | 0;
 }
 $20 = _luaL_fileresult($L, 0, $0) | 0;
 return $20 | 0;
}

function _tanh($x) {
 $x = +$x;
 var $1 = 0, $15 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $__x = 0, $t$0 = 0.0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $2;
 $3 = +HEAPF64[tempDoublePtr >> 3];
 do if ($2 >>> 0 > 1071748074) if ($2 >>> 0 > 1077149696) {
  $t$0 = 1.0 - 0.0 / $3;
  break;
 } else {
  $t$0 = 1.0 - 2.0 / (+_expm1($3 * 2.0) + 2.0);
  break;
 } else {
  if ($2 >>> 0 > 1070618798) {
   $15 = +_expm1($3 * 2.0);
   $t$0 = $15 / ($15 + 2.0);
   break;
  }
  if ($2 >>> 0 > 1048575) {
   $20 = +_expm1($3 * -2.0);
   $t$0 = -$20 / ($20 + 2.0);
   break;
  } else {
   HEAPF32[$__x >> 2] = $3;
   $t$0 = $3;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return +(($1 | 0) < 0 ? -$t$0 : $t$0);
}

function _luaB_print($L) {
 $L = $L | 0;
 var $$0 = 0, $$pre = 0, $0 = 0, $2 = 0, $i$04 = 0, $l = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $l = sp + 4 | 0;
 $0 = _lua_gettop($L) | 0;
 _lua_getglobal($L, 4944);
 $$pre = HEAP32[_stdout >> 2] | 0;
 L1 : do if (($0 | 0) >= 1) {
  $i$04 = 1;
  while (1) {
   _lua_pushvalue($L, -1);
   _lua_pushvalue($L, $i$04);
   _lua_callk($L, 1, 1, 0, 0);
   $2 = _lua_tolstring($L, -1, $l) | 0;
   if (!$2) break;
   if (($i$04 | 0) > 1) _fputc(9, $$pre | 0) | 0;
   _fwrite($2 | 0, 1, HEAP32[$l >> 2] | 0, $$pre | 0) | 0;
   _lua_settop($L, -2);
   if (($i$04 | 0) < ($0 | 0)) $i$04 = $i$04 + 1 | 0; else break L1;
  }
  $$0 = _luaL_error($L, 5144, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _fputc(10, $$pre | 0) | 0;
 _fflush($$pre | 0) | 0;
 $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function _save($ls, $c) {
 $ls = $ls | 0;
 $c = $c | 0;
 var $1 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $9 = 0;
 $1 = HEAP32[$ls + 60 >> 2] | 0;
 $2 = $1 + 4 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $5 = $1 + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($3 + 1 | 0) >>> 0 <= $6 >>> 0) {
  $17 = $3;
  $19 = HEAP32[$1 >> 2] | 0;
  $15 = $c & 255;
  $16 = $17 + 1 | 0;
  HEAP32[$2 >> 2] = $16;
  $18 = $19 + $17 | 0;
  HEAP8[$18 >> 0] = $15;
  return;
 }
 if ($6 >>> 0 > 2147483645) _lexerror($ls, 1264, 0);
 $9 = $6 << 1;
 $12 = HEAP32[$ls + 52 >> 2] | 0;
 if (($9 | 0) == -2) _luaM_toobig($12);
 $14 = _luaM_realloc_($12, HEAP32[$1 >> 2] | 0, $6, $9) | 0;
 HEAP32[$1 >> 2] = $14;
 HEAP32[$5 >> 2] = $9;
 $17 = HEAP32[$2 >> 2] | 0;
 $19 = $14;
 $15 = $c & 255;
 $16 = $17 + 1 | 0;
 HEAP32[$2 >> 2] = $16;
 $18 = $19 + $17 | 0;
 HEAP8[$18 >> 0] = $15;
 return;
}

function _str_sub($L) {
 $L = $L | 0;
 var $$ = 0, $$0$i = 0, $$0$i1 = 0, $0 = 0, $1 = 0, $2 = 0, $8 = 0, $9 = 0, $end$0 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = HEAP32[$l >> 2] | 0;
 if (($1 | 0) > -1) $$0$i = $1; else if ($2 >>> 0 < (0 - $1 | 0) >>> 0) $$0$i = 0; else $$0$i = $1 + 1 + $2 | 0;
 $8 = _luaL_optinteger($L, 3, -1) | 0;
 $9 = HEAP32[$l >> 2] | 0;
 if (($8 | 0) > -1) $$0$i1 = $8; else if ($9 >>> 0 < (0 - $8 | 0) >>> 0) $$0$i1 = 0; else $$0$i1 = $8 + 1 + $9 | 0;
 $$ = ($$0$i | 0) == 0 ? 1 : $$0$i;
 $end$0 = $$0$i1 >>> 0 > $9 >>> 0 ? $9 : $$0$i1;
 if ($end$0 >>> 0 < $$ >>> 0) {
  _lua_pushlstring($L, 10072, 0) | 0;
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushlstring($L, $0 + ($$ + -1) | 0, 1 - $$ + $end$0 | 0) | 0;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaL_optlstring($L, $narg, $def, $len) {
 $L = $L | 0;
 $narg = $narg | 0;
 $def = $def | 0;
 $len = $len | 0;
 var $$0 = 0, $10 = 0, $5 = 0, $6 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, $narg) | 0) >= 1) {
  $6 = _lua_tolstring($L, $narg, $len) | 0;
  if ($6) {
   $$0 = $6;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $8 = _lua_typename($L, 4) | 0;
  $10 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = $8;
  HEAP32[$vararg_buffer + 4 >> 2] = $10;
  _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$len) {
  $$0 = $def;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!$def) $5 = 0; else $5 = _strlen($def | 0) | 0;
 HEAP32[$len >> 2] = $5;
 $$0 = $def;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaG_errormsg($L) {
 $L = $L | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $18 = 0, $19 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $5 = 0;
 $1 = HEAP32[$L + 68 >> 2] | 0;
 if (!$1) _luaD_throw($L, 2);
 $4 = HEAP32[$L + 28 >> 2] | 0;
 $5 = $4 + ($1 + 8) | 0;
 if ((HEAP32[$5 >> 2] & 15 | 0) != 6) _luaD_throw($L, 6);
 $10 = $L + 8 | 0;
 $11 = HEAP32[$10 >> 2] | 0;
 $13 = $11 + -16 | 0;
 $18 = HEAP32[$13 + 4 >> 2] | 0;
 $19 = $11;
 HEAP32[$19 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$19 + 4 >> 2] = $18;
 HEAP32[$11 + 8 >> 2] = HEAP32[$11 + -8 >> 2];
 $26 = HEAP32[$10 >> 2] | 0;
 $28 = $4 + $1 | 0;
 $33 = HEAP32[$28 + 4 >> 2] | 0;
 $34 = $26 + -16 | 0;
 HEAP32[$34 >> 2] = HEAP32[$28 >> 2];
 HEAP32[$34 + 4 >> 2] = $33;
 HEAP32[$26 + -8 >> 2] = HEAP32[$5 >> 2];
 $40 = HEAP32[$10 >> 2] | 0;
 HEAP32[$10 >> 2] = $40 + 16;
 _luaD_call($L, $40 + -16 | 0, 1, 0);
 _luaD_throw($L, 2);
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 if (!$s) {
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  return $$0 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function _lua_tothread($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $33 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 if ((HEAP32[$$0$i + 8 >> 2] | 0) != 72) {
  $33 = 0;
  return $33 | 0;
 }
 $33 = HEAP32[$$0$i >> 2] | 0;
 return $33 | 0;
}

function _lua_len($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $29 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $29 = $L + 8 | 0;
 _luaV_objlen($L, HEAP32[$29 >> 2] | 0, $$0$i);
 HEAP32[$29 >> 2] = (HEAP32[$29 >> 2] | 0) + 16;
 return;
}

function _read_line($L, $f, $chop) {
 $L = $L | 0;
 $f = $f | 0;
 $chop = $chop | 0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $3 = 0, $7 = 0, $8 = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $b = sp;
 _luaL_buffinit($L, $b);
 $0 = _luaL_prepbuffsize($b, 1024) | 0;
 L1 : do if (_fgets($0 | 0, 1024, $f | 0) | 0) {
  $3 = $b + 8 | 0;
  $7 = $0;
  while (1) {
   $8 = _strlen($7 | 0) | 0;
   if ($8) if ((HEAP8[$7 + ($8 + -1) >> 0] | 0) == 10) {
    $$lcssa = $8;
    break;
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + $8;
   $7 = _luaL_prepbuffsize($b, 1024) | 0;
   if (!(_fgets($7 | 0, 1024, $f | 0) | 0)) break L1;
  }
  HEAP32[$3 >> 2] = $$lcssa - $chop + (HEAP32[$3 >> 2] | 0);
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 _luaL_pushresult($b);
 $$0 = (_lua_rawlen($L, -1) | 0) != 0 & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _unpack($L) {
 $L = $L | 0;
 var $$0 = 0, $$in = 0, $0 = 0, $5 = 0, $7 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _luaL_checktype($L, 1, 5);
 $0 = _luaL_optinteger($L, 2, 1) | 0;
 if ((_lua_type($L, 3) | 0) < 1) $5 = _luaL_len($L, 1) | 0; else $5 = _luaL_checkinteger($L, 3) | 0;
 if (($5 | 0) < ($0 | 0)) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $7 = $5 - $0 | 0;
 $8 = $7 + 1 | 0;
 if (($7 | 0) >= 0) if (_lua_checkstack($L, $8) | 0) {
  _lua_rawgeti($L, 1, $0);
  if (($5 | 0) > ($0 | 0)) $$in = $0; else {
   $$0 = $8;
   STACKTOP = sp;
   return $$0 | 0;
  }
  do {
   $$in = $$in + 1 | 0;
   _lua_rawgeti($L, 1, $$in);
  } while (($$in | 0) != ($5 | 0));
  $$0 = $8;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$0 = _luaL_error($L, 10144, $vararg_buffer) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaD_shrinkstack($L) {
 $L = $L | 0;
 var $$ = 0, $$lim$0$i = 0, $1 = 0, $13 = 0, $15 = 0, $18 = 0, $5 = 0, $ci$01$i = 0, $ci$03$i = 0, $lim$0$lcssa$i = 0, $lim$02$i = 0;
 $1 = HEAP32[$L + 8 >> 2] | 0;
 $ci$01$i = HEAP32[$L + 16 >> 2] | 0;
 if (!$ci$01$i) $lim$0$lcssa$i = $1; else {
  $ci$03$i = $ci$01$i;
  $lim$02$i = $1;
  while (1) {
   $5 = HEAP32[$ci$03$i + 4 >> 2] | 0;
   $$lim$0$i = $lim$02$i >>> 0 < $5 >>> 0 ? $5 : $lim$02$i;
   $ci$03$i = HEAP32[$ci$03$i + 8 >> 2] | 0;
   if (!$ci$03$i) {
    $lim$0$lcssa$i = $$lim$0$i;
    break;
   } else $lim$02$i = $$lim$0$i;
  }
 }
 $13 = $lim$0$lcssa$i - (HEAP32[$L + 28 >> 2] | 0) | 0;
 $15 = ($13 >> 4) + 1 | 0;
 $18 = (($15 | 0) / 8 | 0) + 10 + $15 | 0;
 $$ = ($18 | 0) > 1e6 ? 1e6 : $18;
 if (($13 | 0) > 15999984) return;
 if (($$ | 0) >= (HEAP32[$L + 32 >> 2] | 0)) return;
 _luaD_reallocstack($L, $$);
 return;
}

function _loadfunc($L, $filename, $modname) {
 $L = $L | 0;
 $filename = $filename | 0;
 $modname = $modname | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_gsub($L, $modname, 12096, 11048) | 0;
 $1 = _strchr($0, 45) | 0;
 do if (!$1) $$01 = $0; else {
  HEAP32[$vararg_buffer >> 2] = _lua_pushlstring($L, $0, $1 - $0 | 0) | 0;
  $8 = _ll_loadfunc($L, $filename, _lua_pushfstring($L, 11056, $vararg_buffer) | 0) | 0;
  if (($8 | 0) == 2) {
   $$01 = $1 + 1 | 0;
   break;
  } else {
   $$0 = $8;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$01;
 $$0 = _ll_loadfunc($L, $filename, _lua_pushfstring($L, 11056, $vararg_buffer1) | 0) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_checkversion_($L, $ver) {
 $L = $L | 0;
 $ver = +$ver;
 var $0 = 0, $3 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $vararg_buffer4 = sp + 24 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $0 = _lua_version($L) | 0;
 if (($0 | 0) == (_lua_version(0) | 0)) {
  $3 = +HEAPF64[$0 >> 3];
  if ($3 != $ver) {
   HEAPF64[$vararg_buffer1 >> 3] = $ver;
   HEAPF64[$vararg_buffer1 + 8 >> 3] = $3;
   _luaL_error($L, 4336, $vararg_buffer1) | 0;
  }
 } else _luaL_error($L, 4304, $vararg_buffer) | 0;
 _lua_pushnumber($L, -4660.0);
 if ((_lua_tointegerx($L, -1, 0) | 0) == -4660) if ((_lua_tounsignedx($L, -1, 0) | 0) == -4660) {
  _lua_settop($L, -2);
  STACKTOP = sp;
  return;
 }
 _luaL_error($L, 4392, $vararg_buffer4) | 0;
 _lua_settop($L, -2);
 STACKTOP = sp;
 return;
}

function _luaX_setinput($L, $ls, $z, $source, $firstchar) {
 $L = $L | 0;
 $ls = $ls | 0;
 $z = $z | 0;
 $source = $source | 0;
 $firstchar = $firstchar | 0;
 var $1 = 0, $10 = 0, $16 = 0, $17 = 0, $21 = 0, $22 = 0, $8 = 0;
 HEAP8[$ls + 76 >> 0] = 46;
 $1 = $ls + 52 | 0;
 HEAP32[$1 >> 2] = $L;
 HEAP32[$ls >> 2] = $firstchar;
 HEAP32[$ls + 32 >> 2] = 286;
 HEAP32[$ls + 56 >> 2] = $z;
 HEAP32[$ls + 48 >> 2] = 0;
 HEAP32[$ls + 4 >> 2] = 1;
 HEAP32[$ls + 8 >> 2] = 1;
 HEAP32[$ls + 68 >> 2] = $source;
 $8 = _luaS_new($L, 1192) | 0;
 HEAP32[$ls + 72 >> 2] = $8;
 $10 = $8 + 5 | 0;
 HEAP8[$10 >> 0] = HEAPU8[$10 >> 0] | 0 | 32;
 $16 = $ls + 60 | 0;
 $17 = HEAP32[$16 >> 2] | 0;
 $21 = _luaM_realloc_(HEAP32[$1 >> 2] | 0, HEAP32[$17 >> 2] | 0, HEAP32[$17 + 8 >> 2] | 0, 32) | 0;
 $22 = HEAP32[$16 >> 2] | 0;
 HEAP32[$22 >> 2] = $21;
 HEAP32[$22 + 8 >> 2] = 32;
 return;
}

function _lua_getstack($L, $level, $ar) {
 $L = $L | 0;
 $level = $level | 0;
 $ar = $ar | 0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $3 = 0, $6 = 0, $ci$0 = 0, $ci$0$lcssa = 0, $ci$03 = 0, $ci$05 = 0;
 if (($level | 0) < 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $ci$03 = HEAP32[$L + 16 >> 2] | 0;
 $3 = $L + 72 | 0;
 if (($level | 0) > 0 & ($ci$03 | 0) != ($3 | 0)) {
  $$014 = $level;
  $ci$05 = $ci$03;
  while (1) {
   $6 = $$014 + -1 | 0;
   $ci$0 = HEAP32[$ci$05 + 8 >> 2] | 0;
   if (($$014 | 0) > 1 & ($ci$0 | 0) != ($3 | 0)) {
    $$014 = $6;
    $ci$05 = $ci$0;
   } else {
    $$01$lcssa = $6;
    $ci$0$lcssa = $ci$0;
    break;
   }
  }
 } else {
  $$01$lcssa = $level;
  $ci$0$lcssa = $ci$03;
 }
 if (($$01$lcssa | 0) != 0 | ($ci$0$lcssa | 0) == ($3 | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$ar + 96 >> 2] = $ci$0$lcssa;
 $$0 = 1;
 return $$0 | 0;
}

function _lua_iscfunction($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 8 >> 2] | 0;
 return (($30 | 0) == 22 | ($30 | 0) == 102) & 1 | 0;
}

function _lua_gettable($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $31 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $31 = (HEAP32[$L + 8 >> 2] | 0) + -16 | 0;
 _luaV_gettable($L, $$0$i, $31, $31);
 return;
}

function _luaK_nil($fs, $from, $n) {
 $fs = $fs | 0;
 $from = $from | 0;
 $n = $n | 0;
 var $$from = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $3 = 0;
 $0 = $n + $from | 0;
 $1 = $0 + -1 | 0;
 $3 = HEAP32[$fs + 20 >> 2] | 0;
 do if (($3 | 0) > (HEAP32[$fs + 24 >> 2] | 0)) {
  $11 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + ($3 + -1 << 2) | 0;
  $12 = HEAP32[$11 >> 2] | 0;
  if (($12 & 63 | 0) == 4) {
   $16 = $12 >>> 6 & 255;
   $18 = $16 + ($12 >>> 23) | 0;
   if (($16 | 0) > ($from | 0) | ($18 + 1 | 0) < ($from | 0)) if (($16 | 0) < ($from | 0) | ($16 | 0) > ($0 | 0)) break;
   $$from = ($16 | 0) < ($from | 0) ? $16 : $from;
   HEAP32[$11 >> 2] = (($18 | 0) > ($1 | 0) ? $18 : $1) - $$from << 23 | $$from << 6 & 16320 | $12 & 8372287;
   return;
  }
 } while (0);
 _luaK_code($fs, $from << 6 | ($n << 23) + -8388608 | 4) | 0;
 return;
}

function _lua_isuserdata($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $$0$i = 0, $1 = 0, $16 = 0, $17 = 0, $21 = 0, $30 = 0, $4 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 do if (($idx | 0) > 0) {
  $4 = (HEAP32[$1 >> 2] | 0) + ($idx << 4) | 0;
  $$0$i = $4 >>> 0 < (HEAP32[$L + 8 >> 2] | 0) >>> 0 ? $4 : 1832;
 } else {
  if (($idx | 0) >= -1000999) {
   $$0$i = (HEAP32[$L + 8 >> 2] | 0) + ($idx << 4) | 0;
   break;
  }
  if (($idx | 0) == -1001e3) {
   $$0$i = (HEAP32[$L + 12 >> 2] | 0) + 40 | 0;
   break;
  }
  $16 = -1001e3 - $idx | 0;
  $17 = HEAP32[$1 >> 2] | 0;
  if ((HEAP32[$17 + 8 >> 2] | 0) == 22) $$0$i = 1832; else {
   $21 = HEAP32[$17 >> 2] | 0;
   $$0$i = ($16 | 0) > (HEAPU8[$21 + 6 >> 0] | 0 | 0) ? 1832 : $21 + 16 + ($16 + -1 << 4) | 0;
  }
 } while (0);
 $30 = HEAP32[$$0$i + 8 >> 2] | 0;
 return (($30 | 0) == 71 | ($30 | 0) == 2) & 1 | 0;
}

function _cosh($x) {
 $x = +$x;
 var $$0 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $7 = 0.0, $__x = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__x = sp;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $2 = HEAP32[tempDoublePtr + 4 >> 2] & 2147483647;
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $2;
 $3 = +HEAPF64[tempDoublePtr >> 3];
 if ($2 >>> 0 < 1072049730) if ($2 >>> 0 < 1045430272) {
  HEAPF64[$__x >> 3] = $3 + 1329227995784915872903807.0e12;
  $$0 = 1.0;
  STACKTOP = sp;
  return +$$0;
 } else {
  $7 = +_expm1($3);
  $$0 = $7 * $7 / (($7 + 1.0) * 2.0) + 1.0;
  STACKTOP = sp;
  return +$$0;
 } else if ($2 >>> 0 < 1082535490) {
  $14 = +Math_exp(+$3);
  $$0 = ($14 + 1.0 / $14) * .5;
  STACKTOP = sp;
  return +$$0;
 } else {
  $$0 = +___expo2($3);
  STACKTOP = sp;
  return +$$0;
 }
 return +(0.0);
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (($4 | 0) == 2047) {
  $$0 = $x;
  return +$$0;
 } else if (!$4) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709551616.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 }
 return +(0.0);
}

function _luaK_numberK($fs, $r) {
 $fs = $fs | 0;
 $r = +$r;
 var $0 = 0, $10 = 0, $18 = 0, $4 = 0, $7 = 0, $8 = 0, $n$0 = 0, $o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 16 | 0;
 $o = sp;
 HEAPF64[$0 >> 3] = $r;
 $4 = HEAP32[(HEAP32[$fs + 12 >> 2] | 0) + 52 >> 2] | 0;
 HEAPF64[$o >> 3] = $r;
 HEAP32[$o + 8 >> 2] = 3;
 if ($r != $r | 0.0 != 0.0 | $r == 0.0) {
  $7 = $4 + 8 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  HEAP32[$7 >> 2] = $8 + 16;
  $10 = _luaS_newlstr($4, $0, 8) | 0;
  HEAP32[$8 >> 2] = $10;
  HEAP32[$8 + 8 >> 2] = HEAPU8[$10 + 4 >> 0] | 0 | 64;
  $18 = _addk($fs, (HEAP32[$7 >> 2] | 0) + -16 | 0, $o) | 0;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -16;
  $n$0 = $18;
  STACKTOP = sp;
  return $n$0 | 0;
 } else {
  $n$0 = _addk($fs, $o, $o) | 0;
  STACKTOP = sp;
  return $n$0 | 0;
 }
 return 0;
}

function _luaX_newstring($ls, $str, $l) {
 $ls = $ls | 0;
 $str = $str | 0;
 $l = $l | 0;
 var $1 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $ts$0 = 0;
 $1 = HEAP32[$ls + 52 >> 2] | 0;
 $2 = _luaS_newlstr($1, $str, $l) | 0;
 $3 = $1 + 8 | 0;
 $4 = HEAP32[$3 >> 2] | 0;
 HEAP32[$3 >> 2] = $4 + 16;
 HEAP32[$4 >> 2] = $2;
 HEAP32[$4 + 8 >> 2] = HEAPU8[$2 + 4 >> 0] | 0 | 64;
 $17 = _luaH_set($1, HEAP32[(HEAP32[$ls + 48 >> 2] | 0) + 4 >> 2] | 0, (HEAP32[$3 >> 2] | 0) + -16 | 0) | 0;
 $18 = $17 + 8 | 0;
 if (!(HEAP32[$18 >> 2] | 0)) {
  HEAP32[$17 >> 2] = 1;
  HEAP32[$18 >> 2] = 1;
  if ((HEAP32[(HEAP32[$1 + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) {
   _luaC_step($1);
   $ts$0 = $2;
  } else $ts$0 = $2;
 } else $ts$0 = HEAP32[$17 + 16 >> 2] | 0;
 HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -16;
 return $ts$0 | 0;
}

function _luaM_realloc_($L, $block, $osize, $nsize) {
 $L = $L | 0;
 $block = $block | 0;
 $osize = $osize | 0;
 $nsize = $nsize | 0;
 var $1 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $newblock$1 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = ($block | 0) != 0;
 $4 = $1 + 4 | 0;
 $6 = FUNCTION_TABLE_iiiii[HEAP32[$1 >> 2] & 31](HEAP32[$4 >> 2] | 0, $block, $osize, $nsize) | 0;
 if (($nsize | 0) != 0 & ($6 | 0) == 0) {
  if (!(HEAP8[$1 + 63 >> 0] | 0)) _luaD_throw($L, 4);
  _luaC_fullgc($L, 1);
  $14 = FUNCTION_TABLE_iiiii[HEAP32[$1 >> 2] & 31](HEAP32[$4 >> 2] | 0, $block, $osize, $nsize) | 0;
  if (!$14) _luaD_throw($L, 4); else $newblock$1 = $14;
 } else $newblock$1 = $6;
 $16 = $1 + 12 | 0;
 HEAP32[$16 >> 2] = ($2 ? 0 - $osize | 0 : 0) + $nsize + (HEAP32[$16 >> 2] | 0);
 return $newblock$1 | 0;
}

function _luaL_error($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $ar$i = 0, $argp = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $vararg_buffer = sp;
 $ar$i = sp + 24 | 0;
 $argp = sp + 8 | 0;
 HEAP32[$argp >> 2] = $varargs;
 if (_lua_getstack($L, 1, $ar$i) | 0) {
  _lua_getinfo($L, 4032, $ar$i) | 0;
  $3 = HEAP32[$ar$i + 20 >> 2] | 0;
  if (($3 | 0) > 0) {
   HEAP32[$vararg_buffer >> 2] = $ar$i + 36;
   HEAP32[$vararg_buffer + 4 >> 2] = $3;
   _lua_pushfstring($L, 4040, $vararg_buffer) | 0;
   _lua_pushvfstring($L, $fmt, $argp) | 0;
   _lua_concat($L, 2);
   _lua_error($L) | 0;
  }
 }
 _lua_pushlstring($L, 10072, 0) | 0;
 _lua_pushvfstring($L, $fmt, $argp) | 0;
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function _luaB_costatus($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 $0 = _lua_tothread($L, 1) | 0;
 if (!$0) _luaL_argerror($L, 1, 6048) | 0;
 if (($0 | 0) == ($L | 0)) {
  _lua_pushlstring($L, 5920, 7) | 0;
  STACKTOP = sp;
  return 1;
 }
 $3 = _lua_status($0) | 0;
 if (($3 | 0) == 1) {
  _lua_pushlstring($L, 6072, 9) | 0;
  STACKTOP = sp;
  return 1;
 } else if (!$3) {
  do if ((_lua_getstack($0, 0, $ar) | 0) > 0) _lua_pushlstring($L, 6088, 6) | 0; else if (!(_lua_gettop($0) | 0)) {
   _lua_pushlstring($L, 6096, 4) | 0;
   break;
  } else {
   _lua_pushlstring($L, 6072, 9) | 0;
   break;
  } while (0);
  STACKTOP = sp;
  return 1;
 } else {
  _lua_pushlstring($L, 6096, 4) | 0;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaE_freethread($L, $L1) {
 $L = $L | 0;
 $L1 = $L1 | 0;
 var $0 = 0, $15 = 0, $2 = 0, $6 = 0, $7 = 0, $next$01$i$i = 0, $next$01$i$i$looptemp = 0;
 $0 = $L1 + 28 | 0;
 _luaF_close($L1, HEAP32[$0 >> 2] | 0);
 $2 = HEAP32[$0 >> 2] | 0;
 if (!$2) {
  _luaM_realloc_($L, $L1, 112, 0) | 0;
  return;
 }
 HEAP32[$L1 + 16 >> 2] = $L1 + 72;
 $6 = $L1 + 84 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$6 >> 2] = 0;
 if (!$7) $15 = $2; else {
  $next$01$i$i = $7;
  do {
   $next$01$i$i$looptemp = $next$01$i$i;
   $next$01$i$i = HEAP32[$next$01$i$i + 12 >> 2] | 0;
   _luaM_realloc_($L1, $next$01$i$i$looptemp, 40, 0) | 0;
  } while (($next$01$i$i | 0) != 0);
  $15 = HEAP32[$0 >> 2] | 0;
 }
 _luaM_realloc_($L1, $15, HEAP32[$L1 + 32 >> 2] << 4, 0) | 0;
 _luaM_realloc_($L, $L1, 112, 0) | 0;
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $9 = 0, $mem$0 = 0;
 if (!$oldmem) {
  $mem$0 = _malloc($bytes) | 0;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $bytes >>> 0 < 11 ? 16 : $bytes + 11 & -8) | 0;
 if ($9) {
  $mem$0 = $9 + 8 | 0;
  return $mem$0 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$0 = $12;
 return $mem$0 | 0;
}

function _setpath($L, $fieldname, $envname1, $envname2, $def) {
 $L = $L | 0;
 $fieldname = $fieldname | 0;
 $envname1 = $envname1 | 0;
 $envname2 = $envname2 | 0;
 $def = $def | 0;
 var $0 = 0, $2 = 0, $4 = 0, $path$01 = 0, label = 0;
 $0 = _getenv($envname1 | 0) | 0;
 if (!$0) {
  $2 = _getenv($envname2 | 0) | 0;
  if ($2) {
   $path$01 = $2;
   label = 3;
  }
 } else {
  $path$01 = $0;
  label = 3;
 }
 if ((label | 0) == 3) {
  _lua_getfield($L, -1001e3, 10888);
  $4 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  if (!$4) {
   _luaL_gsub($L, _luaL_gsub($L, $path$01, 10904, 10912) | 0, 10920, $def) | 0;
   _lua_remove($L, -2);
   _lua_setfield($L, -2, $fieldname);
   return;
  }
 }
 _lua_pushstring($L, $def) | 0;
 _lua_setfield($L, -2, $fieldname);
 return;
}

function _luaL_checkudata($L, $ud, $tname) {
 $L = $L | 0;
 $ud = $ud | 0;
 $tname = $tname | 0;
 var $$0$i1 = 0, $0 = 0, $5 = 0, $7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _lua_touserdata($L, $ud) | 0;
 if ($0) if (_lua_getmetatable($L, $ud) | 0) {
  _lua_getfield($L, -1001e3, $tname);
  $5 = (_lua_rawequal($L, -1, -2) | 0) == 0;
  _lua_settop($L, -3);
  if (!$5) {
   $$0$i1 = $0;
   STACKTOP = sp;
   return $$0$i1 | 0;
  }
 }
 $7 = _lua_typename($L, _lua_type($L, $ud) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $tname;
 HEAP32[$vararg_buffer + 4 >> 2] = $7;
 _luaL_argerror($L, $ud, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 $$0$i1 = 0;
 STACKTOP = sp;
 return $$0$i1 | 0;
}

function _str_reverse($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $3 = 0, $7 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $l = sp + 1040 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 $3 = HEAP32[$l >> 2] | 0;
 if (!$3) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else {
  $7 = $3;
  $i$01 = 0;
 }
 while (1) {
  HEAP8[$2 + $i$01 >> 0] = HEAP8[$0 + ($7 + ~$i$01) >> 0] | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
  if ($12 >>> 0 <= $i$01 >>> 0) {
   $$lcssa = $12;
   break;
  } else $7 = $12;
 }
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _auxresume($L, $co, $narg) {
 $L = $L | 0;
 $co = $co | 0;
 $narg = $narg | 0;
 var $$0 = 0, $8 = 0;
 if (!(_lua_checkstack($co, $narg) | 0)) {
  _lua_pushlstring($L, 5952, 28) | 0;
  $$0 = -1;
  return $$0 | 0;
 }
 if (!(_lua_status($co) | 0)) if (!(_lua_gettop($co) | 0)) {
  _lua_pushlstring($L, 5984, 28) | 0;
  $$0 = -1;
  return $$0 | 0;
 }
 _lua_xmove($L, $co, $narg);
 if ((_lua_resume($co, $L, $narg) | 0) >>> 0 >= 2) {
  _lua_xmove($co, $L, 1);
  $$0 = -1;
  return $$0 | 0;
 }
 $8 = _lua_gettop($co) | 0;
 if (!(_lua_checkstack($L, $8 + 1 | 0) | 0)) {
  _lua_settop($co, ~$8);
  _lua_pushlstring($L, 6016, 26) | 0;
  $$0 = -1;
  return $$0 | 0;
 } else {
  _lua_xmove($co, $L, $8);
  $$0 = $8;
  return $$0 | 0;
 }
 return 0;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 return _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
}

function _tremove($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $pos$0$lcssa = 0, $pos$02 = 0, $pos$02$looptemp = 0;
 _luaL_checktype($L, 1, 5);
 $0 = _luaL_len($L, 1) | 0;
 $1 = _luaL_optinteger($L, 2, $0) | 0;
 if (($1 | 0) != ($0 | 0)) if (($1 | 0) < 1 | ($1 | 0) > ($0 + 1 | 0)) _luaL_argerror($L, 1, 10120) | 0;
 _lua_rawgeti($L, 1, $1);
 if (($1 | 0) < ($0 | 0)) $pos$02 = $1; else {
  $pos$0$lcssa = $1;
  _lua_pushnil($L);
  _lua_rawseti($L, 1, $pos$0$lcssa);
  return 1;
 }
 do {
  $pos$02$looptemp = $pos$02;
  $pos$02 = $pos$02 + 1 | 0;
  _lua_rawgeti($L, 1, $pos$02);
  _lua_rawseti($L, 1, $pos$02$looptemp);
 } while (($pos$02 | 0) != ($0 | 0));
 $pos$0$lcssa = $0;
 _lua_pushnil($L);
 _lua_rawseti($L, 1, $pos$0$lcssa);
 return 1;
}

function _strtod($s, $p) {
 $s = $s | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $12 = 0, $4 = 0.0, $f$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 dest = $f$i;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i + 44 >> 2] = $s;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $4 = +___floatscan($f$i, 1, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return +$4;
 }
 HEAP32[$p >> 2] = ($12 | 0) != 0 ? $s + $12 | 0 : $s;
 STACKTOP = sp;
 return +$4;
}

function _lua_callk($L, $nargs, $nresults, $ctx, $k) {
 $L = $L | 0;
 $nargs = $nargs | 0;
 $nresults = $nresults | 0;
 $ctx = $ctx | 0;
 $k = $k | 0;
 var $0 = 0, $15 = 0, $17 = 0, $3 = 0, $9 = 0, label = 0;
 $0 = $L + 8 | 0;
 $3 = (HEAP32[$0 >> 2] | 0) + (~$nargs << 4) | 0;
 if (!$k) label = 4; else if (!(HEAP16[$L + 36 >> 1] | 0)) {
  $9 = HEAP32[$L + 16 >> 2] | 0;
  HEAP32[$9 + 28 >> 2] = $k;
  HEAP32[$9 + 24 >> 2] = $ctx;
  _luaD_call($L, $3, $nresults, 1);
 } else label = 4;
 if ((label | 0) == 4) _luaD_call($L, $3, $nresults, 0);
 if (($nresults | 0) != -1) return;
 $15 = (HEAP32[$L + 16 >> 2] | 0) + 4 | 0;
 $17 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$15 >> 2] | 0) >>> 0 >= $17 >>> 0) return;
 HEAP32[$15 >> 2] = $17;
 return;
}
function _luaL_openlib($L, $libname, $l, $nup) {
 $L = $L | 0;
 $libname = $libname | 0;
 $l = $l | 0;
 $nup = $nup | 0;
 var $$01$i2 = 0, $4 = 0, $size$0$lcssa$i = 0, $size$02$i1 = 0;
 _luaL_checkversion_($L, 502.0);
 if ($libname) {
  if (!$l) $size$0$lcssa$i = 0; else if (!(HEAP32[$l >> 2] | 0)) $size$0$lcssa$i = 0; else {
   $$01$i2 = $l;
   $size$02$i1 = 0;
   while (1) {
    $4 = $size$02$i1 + 1 | 0;
    $$01$i2 = $$01$i2 + 8 | 0;
    if (!(HEAP32[$$01$i2 >> 2] | 0)) {
     $size$0$lcssa$i = $4;
     break;
    } else $size$02$i1 = $4;
   }
  }
  _luaL_pushmodule($L, $libname, $size$0$lcssa$i);
  _lua_insert($L, ~$nup);
 }
 if (!$l) {
  _lua_settop($L, ~$nup);
  return;
 } else {
  _luaL_setfuncs($L, $l, $nup);
  return;
 }
}

function _luaL_optunsigned($L, $narg, $def) {
 $L = $L | 0;
 $narg = $narg | 0;
 $def = $def | 0;
 var $2 = 0, $5 = 0, $7 = 0, $9 = 0, $isnum$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum$i = sp + 8 | 0;
 if ((_lua_type($L, $narg) | 0) < 1) {
  $9 = $def;
  STACKTOP = sp;
  return $9 | 0;
 }
 $2 = _lua_tounsignedx($L, $narg, $isnum$i) | 0;
 if (!(HEAP32[$isnum$i >> 2] | 0)) {
  $5 = _lua_typename($L, 3) | 0;
  $7 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = $5;
  HEAP32[$vararg_buffer + 4 >> 2] = $7;
  _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 }
 $9 = $2;
 STACKTOP = sp;
 return $9 | 0;
}

function _luaL_buffinitsize($L, $B, $sz) {
 $L = $L | 0;
 $B = $B | 0;
 $sz = $sz | 0;
 var $$$i = 0, $1 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $6 = 0;
 HEAP32[$B + 12 >> 2] = $L;
 $1 = $B + 16 | 0;
 HEAP32[$B >> 2] = $1;
 $2 = $B + 8 | 0;
 HEAP32[$2 >> 2] = 0;
 $3 = $B + 4 | 0;
 HEAP32[$3 >> 2] = 1024;
 if ($sz >>> 0 <= 1024) {
  $12 = $1;
  $13 = 0;
  $11 = $12 + $13 | 0;
  return $11 | 0;
 }
 $$$i = $sz >>> 0 > 2048 ? $sz : 2048;
 $6 = _lua_newuserdata($L, $$$i) | 0;
 _memcpy($6 | 0, HEAP32[$B >> 2] | 0, HEAP32[$2 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) != ($1 | 0)) _lua_remove($L, -2);
 HEAP32[$B >> 2] = $6;
 HEAP32[$3 >> 2] = $$$i;
 $12 = $6;
 $13 = HEAP32[$2 >> 2] | 0;
 $11 = $12 + $13 | 0;
 return $11 | 0;
}

function _luaL_optinteger($L, $narg, $def) {
 $L = $L | 0;
 $narg = $narg | 0;
 $def = $def | 0;
 var $2 = 0, $5 = 0, $7 = 0, $9 = 0, $isnum$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum$i = sp + 8 | 0;
 if ((_lua_type($L, $narg) | 0) < 1) {
  $9 = $def;
  STACKTOP = sp;
  return $9 | 0;
 }
 $2 = _lua_tointegerx($L, $narg, $isnum$i) | 0;
 if (!(HEAP32[$isnum$i >> 2] | 0)) {
  $5 = _lua_typename($L, 3) | 0;
  $7 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = $5;
  HEAP32[$vararg_buffer + 4 >> 2] = $7;
  _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 }
 $9 = $2;
 STACKTOP = sp;
 return $9 | 0;
}

function _luaL_optnumber($L, $narg, $def) {
 $L = $L | 0;
 $narg = $narg | 0;
 $def = +$def;
 var $2 = 0.0, $5 = 0, $7 = 0, $9 = 0.0, $isnum$i = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum$i = sp + 8 | 0;
 if ((_lua_type($L, $narg) | 0) < 1) {
  $9 = $def;
  STACKTOP = sp;
  return +$9;
 }
 $2 = +_lua_tonumberx($L, $narg, $isnum$i);
 if (!(HEAP32[$isnum$i >> 2] | 0)) {
  $5 = _lua_typename($L, 3) | 0;
  $7 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
  HEAP32[$vararg_buffer >> 2] = $5;
  HEAP32[$vararg_buffer + 4 >> 2] = $7;
  _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 }
 $9 = $2;
 STACKTOP = sp;
 return +$9;
}

function _luaK_setlist($fs, $base, $nelems, $tostore) {
 $fs = $fs | 0;
 $base = $base | 0;
 $nelems = $nelems | 0;
 $tostore = $tostore | 0;
 var $2 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0;
 $2 = (($nelems + -1 | 0) / 50 | 0) + 1 | 0;
 $4 = ($tostore | 0) == -1 ? 0 : $tostore;
 if (($2 | 0) < 512) {
  _luaK_code($fs, $base << 6 | $4 << 23 | $2 << 14 | 36) | 0;
  $21 = $base + 1 | 0;
  $22 = $21 & 255;
  $23 = $fs + 48 | 0;
  HEAP8[$23 >> 0] = $22;
  return;
 }
 if (($2 | 0) >= 67108864) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 88);
 _luaK_code($fs, $base << 6 | $4 << 23 | 36) | 0;
 _luaK_code($fs, $2 << 6 | 39) | 0;
 $21 = $base + 1 | 0;
 $22 = $21 & 255;
 $23 = $fs + 48 | 0;
 HEAP8[$23 >> 0] = $22;
 return;
}

function _maxn($L) {
 $L = $L | 0;
 var $$lcssa = 0.0, $4 = 0.0, $max$0$ph$lcssa = 0.0, $max$0$ph2 = 0.0;
 _luaL_checktype($L, 1, 5);
 _lua_pushnil($L);
 L1 : do if (!(_lua_next($L, 1) | 0)) $max$0$ph$lcssa = 0.0; else {
  $max$0$ph2 = 0.0;
  while (1) {
   while (1) {
    _lua_settop($L, -2);
    if ((_lua_type($L, -1) | 0) == 3) {
     $4 = +_lua_tonumberx($L, -1, 0);
     if ($4 > $max$0$ph2) {
      $$lcssa = $4;
      break;
     }
    }
    if (!(_lua_next($L, 1) | 0)) {
     $max$0$ph$lcssa = $max$0$ph2;
     break L1;
    }
   }
   if (!(_lua_next($L, 1) | 0)) {
    $max$0$ph$lcssa = $$lcssa;
    break;
   } else $max$0$ph2 = $$lcssa;
  }
 } while (0);
 _lua_pushnumber($L, $max$0$ph$lcssa);
 return 1;
}

function _db_setlocal($L) {
 $L = $L | 0;
 var $$0 = 0, $$0$i = 0, $3 = 0, $4 = 0, $9 = 0, $ar = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar = sp;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 if (!(_lua_getstack($$0$i, _luaL_checkinteger($L, $3) | 0, $ar) | 0)) {
  $$0 = _luaL_argerror($L, $3, 6480) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $9 = $4 + 3 | 0;
  _luaL_checkany($L, $9);
  _lua_settop($L, $9);
  _lua_xmove($L, $$0$i, 1);
  _lua_pushstring($L, _lua_setlocal($$0$i, $ar, _luaL_checkinteger($L, $4 | 2) | 0) | 0) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_openlibs($L) {
 $L = $L | 0;
 _luaL_requiref($L, 11264, 173, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11272, 174, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11280, 175, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11296, 176, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11304, 177, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11312, 178, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11320, 179, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11328, 180, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11336, 181, 1);
 _lua_settop($L, -2);
 _luaL_requiref($L, 11344, 182, 1);
 _lua_settop($L, -2);
 _luaL_getsubtable($L, -1001e3, 11352) | 0;
 _lua_settop($L, -2);
 return;
}

function _f_seek($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = _luaL_checkoption($L, 2, 7464, 7472) | 0;
 $6 = +_luaL_optnumber($L, 3, 0.0);
 $7 = ~~$6;
 if (!(+($7 | 0) == $6)) _luaL_argerror($L, 3, 7488) | 0;
 if (!(_fseek($4 | 0, $7 | 0, HEAP32[7520 + ($5 << 2) >> 2] | 0) | 0)) {
  _lua_pushnumber($L, +(_ftell($4 | 0) | 0));
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_fileresult($L, 0, 0) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_pushmodule($L, $modname, $sizehint) {
 $L = $L | 0;
 $modname = $modname | 0;
 $sizehint = $sizehint | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _luaL_findtable($L, -1001e3, 10672, 1) | 0;
 _lua_getfield($L, -1, $modname);
 if ((_lua_type($L, -1) | 0) == 5) {
  _lua_remove($L, -2);
  STACKTOP = sp;
  return;
 }
 _lua_settop($L, -2);
 _lua_rawgeti($L, -1001e3, 2);
 if (_luaL_findtable($L, 0, $modname, $sizehint) | 0) {
  HEAP32[$vararg_buffer >> 2] = $modname;
  _luaL_error($L, 4272, $vararg_buffer) | 0;
 }
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -3, $modname);
 _lua_remove($L, -2);
 STACKTOP = sp;
 return;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($15 & 4)) {
  $$0 = -1;
  return $$0 | 0;
 }
 HEAP32[$f >> 2] = $15 | 32;
 $$0 = -1;
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $1 = 0, $11 = 0, $2 = 0, $l$04 = 0, $r$05 = 0, label = 0;
 if (!$n) {
  $11 = 0;
  return $11 | 0;
 } else {
  $$03 = $n;
  $l$04 = $vl;
  $r$05 = $vr;
 }
 while (1) {
  $1 = HEAP8[$l$04 >> 0] | 0;
  $2 = HEAP8[$r$05 >> 0] | 0;
  if ($1 << 24 >> 24 != $2 << 24 >> 24) {
   $$lcssa = $1;
   $$lcssa19 = $2;
   break;
  }
  $$03 = $$03 + -1 | 0;
  if (!$$03) {
   $11 = 0;
   label = 5;
   break;
  } else {
   $l$04 = $l$04 + 1 | 0;
   $r$05 = $r$05 + 1 | 0;
  }
 }
 if ((label | 0) == 5) return $11 | 0;
 $11 = ($$lcssa & 255) - ($$lcssa19 & 255) | 0;
 return $11 | 0;
}

function _luaC_barrierproto_($L, $p, $c) {
 $L = $L | 0;
 $p = $p | 0;
 $c = $c | 0;
 var $12 = 0, $25 = 0, $26 = 0, $31 = 0, $7 = 0, $8 = 0;
 if (HEAP32[$p + 32 >> 2] | 0) {
  $25 = HEAP32[$L + 12 >> 2] | 0;
  $26 = $p + 5 | 0;
  HEAP8[$26 >> 0] = (HEAPU8[$26 >> 0] | 0) & 251;
  $31 = $25 + 88 | 0;
  HEAP32[$p + 72 >> 2] = HEAP32[$31 >> 2];
  HEAP32[$31 >> 2] = $p;
  return;
 }
 if (!(HEAP8[$c + 5 >> 0] & 3)) return;
 $7 = $p + 5 | 0;
 $8 = HEAP8[$7 >> 0] | 0;
 if (!($8 & 4)) return;
 $12 = HEAP32[$L + 12 >> 2] | 0;
 if ((HEAPU8[$12 + 61 >> 0] | 0) < 2) {
  _reallymarkobject($12, $c);
  return;
 } else {
  HEAP8[$7 >> 0] = (HEAPU8[$12 + 60 >> 0] | 0) & 3 | $8 & 184;
  return;
 }
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _str_upper($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $l = sp + 1040 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 if (!(HEAP32[$l >> 2] | 0)) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 0;
 do {
  HEAP8[$2 + $i$01 >> 0] = _toupper(HEAPU8[$0 + $i$01 >> 0] | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
 } while ($i$01 >>> 0 < $12 >>> 0);
 $$lcssa = $12;
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _str_lower($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $12 = 0, $2 = 0, $b = 0, $i$01 = 0, $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $l = sp + 1040 | 0;
 $b = sp;
 $0 = _luaL_checklstring($L, 1, $l) | 0;
 $2 = _luaL_buffinitsize($L, $b, HEAP32[$l >> 2] | 0) | 0;
 if (!(HEAP32[$l >> 2] | 0)) {
  $$lcssa = 0;
  _luaL_pushresultsize($b, $$lcssa);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 0;
 do {
  HEAP8[$2 + $i$01 >> 0] = _tolower(HEAPU8[$0 + $i$01 >> 0] | 0) | 0;
  $i$01 = $i$01 + 1 | 0;
  $12 = HEAP32[$l >> 2] | 0;
 } while ($i$01 >>> 0 < $12 >>> 0);
 $$lcssa = $12;
 _luaL_pushresultsize($b, $$lcssa);
 STACKTOP = sp;
 return 1;
}

function _luaL_fileresult($L, $stat, $fname) {
 $L = $L | 0;
 $stat = $stat | 0;
 $fname = $fname | 0;
 var $$0 = 0, $1 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
 if ($stat) {
  _lua_pushboolean($L, 1);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 $4 = _strerror($1 | 0) | 0;
 if (!$fname) _lua_pushstring($L, $4) | 0; else {
  HEAP32[$vararg_buffer >> 2] = $fname;
  HEAP32[$vararg_buffer + 4 >> 2] = $4;
  _lua_pushfstring($L, 4048, $vararg_buffer) | 0;
 }
 _lua_pushinteger($L, $1);
 $$0 = 3;
 STACKTOP = sp;
 return $$0 | 0;
}

function _sinh($x) {
 $x = +$x;
 var $$ = 0.0, $$0 = 0.0, $1 = 0, $3 = 0, $4 = 0.0, $6 = 0.0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $$ = ($1 | 0) < 0 ? -.5 : .5;
 $3 = $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[tempDoublePtr + 4 >> 2] = $3;
 $4 = +HEAPF64[tempDoublePtr >> 3];
 if ($3 >>> 0 >= 1082535490) {
  $$0 = $$ * 2.0 * +___expo2($4);
  return +$$0;
 }
 $6 = +_expm1($4);
 if ($3 >>> 0 >= 1072693248) {
  $$0 = $$ * ($6 + $6 / ($6 + 1.0));
  return +$$0;
 }
 if ($3 >>> 0 < 1045430272) {
  $$0 = $x;
  return +$$0;
 }
 $$0 = $$ * ($6 * 2.0 - $6 * $6 / ($6 + 1.0));
 return +$$0;
}

function _saveSetjmp(env, label, table, size) {
 env = env | 0;
 label = label | 0;
 table = table | 0;
 size = size | 0;
 var i = 0;
 setjmpId = setjmpId + 1 | 0;
 HEAP32[env >> 2] = setjmpId;
 while ((i | 0) < (size | 0)) {
  if (!(HEAP32[table + (i << 3) >> 2] | 0)) {
   HEAP32[table + (i << 3) >> 2] = setjmpId;
   HEAP32[table + ((i << 3) + 4) >> 2] = label;
   HEAP32[table + ((i << 3) + 8) >> 2] = 0;
   tempRet0 = size;
   return table | 0;
  }
  i = i + 1 | 0;
 }
 size = size * 2 | 0;
 table = _realloc(table | 0, 8 * (size + 1 | 0) | 0) | 0;
 table = _saveSetjmp(env | 0, label | 0, table | 0, size | 0) | 0;
 tempRet0 = size;
 return table | 0;
}

function _luaO_int2fb($x) {
 $x = $x | 0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $$lcssa = 0, $2 = 0, $3 = 0, $e$0$lcssa = 0, $e$03 = 0, $phitmp = 0, $phitmp$lcssa = 0;
 if ($x >>> 0 < 8) {
  $$01 = $x;
  return $$01 | 0;
 }
 if ($x >>> 0 > 15) {
  $$02 = $x;
  $e$03 = 1;
  while (1) {
   $2 = $$02 + 1 | 0;
   $3 = $2 >>> 1;
   $phitmp = $e$03 + 1 | 0;
   if ($2 >>> 0 > 31) {
    $$02 = $3;
    $e$03 = $phitmp;
   } else {
    $$lcssa = $3;
    $phitmp$lcssa = $phitmp;
    break;
   }
  }
  $$0$lcssa = $$lcssa;
  $e$0$lcssa = $phitmp$lcssa << 3;
 } else {
  $$0$lcssa = $x;
  $e$0$lcssa = 8;
 }
 $$01 = $e$0$lcssa | $$0$lcssa + -8;
 return $$01 | 0;
}

function _luaG_ordererror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $11 = 0, $5 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer1 = sp + 8 | 0;
 $vararg_buffer = sp;
 $5 = HEAP32[3136 + ((HEAP32[$p1 + 8 >> 2] & 15) + 1 << 2) >> 2] | 0;
 $11 = HEAP32[3136 + ((HEAP32[$p2 + 8 >> 2] & 15) + 1 << 2) >> 2] | 0;
 if (($5 | 0) == ($11 | 0)) {
  HEAP32[$vararg_buffer >> 2] = $5;
  _luaG_runerror($L, 624, $vararg_buffer);
 } else {
  HEAP32[$vararg_buffer1 >> 2] = $5;
  HEAP32[$vararg_buffer1 + 4 >> 2] = $11;
  _luaG_runerror($L, 664, $vararg_buffer1);
 }
}

function _lua_settop($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $11 = 0, $13 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 if (($idx | 0) <= -1) {
  $17 = $L + 8 | 0;
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + ($idx + 1 << 4);
  return;
 }
 $3 = HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0;
 $4 = $L + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 $6 = $3 + ($idx + 1 << 4) | 0;
 if ($5 >>> 0 < $6 >>> 0) {
  $11 = (($3 + ($idx << 4) + 8 + 4 + (3 - $5) | 0) >>> 4) + 1 | 0;
  $13 = $5;
  do {
   HEAP32[$13 + 8 >> 2] = 0;
   $13 = $13 + 16 | 0;
  } while ($13 >>> 0 < $6 >>> 0);
  HEAP32[$4 >> 2] = $5 + ($11 << 4);
 }
 HEAP32[$4 >> 2] = $6;
 return;
}

function _luaL_checkunsigned($L, $narg) {
 $L = $L | 0;
 $narg = $narg | 0;
 var $0 = 0, $3 = 0, $5 = 0, $isnum = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum = sp + 8 | 0;
 $0 = _lua_tounsignedx($L, $narg, $isnum) | 0;
 if (HEAP32[$isnum >> 2] | 0) {
  STACKTOP = sp;
  return $0 | 0;
 }
 $3 = _lua_typename($L, 3) | 0;
 $5 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _fieldsel($ls, $v) {
 $ls = $ls | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $key = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $key = sp;
 $0 = $ls + 48 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 _luaK_exp2anyregup($1, $v);
 _luaX_next($ls);
 if ((HEAP32[$ls + 16 >> 2] | 0) == 288) {
  $6 = HEAP32[$ls + 24 >> 2] | 0;
  _luaX_next($ls);
  $7 = _luaK_stringK(HEAP32[$0 >> 2] | 0, $6) | 0;
  HEAP32[$key + 16 >> 2] = -1;
  HEAP32[$key + 20 >> 2] = -1;
  HEAP32[$key >> 2] = 4;
  HEAP32[$key + 8 >> 2] = $7;
  _luaK_indexed($1, $v, $key);
  STACKTOP = sp;
  return;
 } else _error_expected($ls, 288);
}

function _luaL_checkinteger($L, $narg) {
 $L = $L | 0;
 $narg = $narg | 0;
 var $0 = 0, $3 = 0, $5 = 0, $isnum = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum = sp + 8 | 0;
 $0 = _lua_tointegerx($L, $narg, $isnum) | 0;
 if (HEAP32[$isnum >> 2] | 0) {
  STACKTOP = sp;
  return $0 | 0;
 }
 $3 = _lua_typename($L, 3) | 0;
 $5 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _luaF_newproto($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaC_newobj($L, 9, 80, 0, 0) | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP32[$0 + 44 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 0;
 HEAP32[$0 + 56 >> 2] = 0;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 32 >> 2] = 0;
 HEAP32[$0 + 48 >> 2] = 0;
 HEAP32[$0 + 20 >> 2] = 0;
 HEAP32[$0 + 52 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 40 >> 2] = 0;
 HEAP8[$0 + 76 >> 0] = 0;
 HEAP8[$0 + 77 >> 0] = 0;
 HEAP8[$0 + 78 >> 0] = 0;
 HEAP32[$0 + 24 >> 2] = 0;
 HEAP32[$0 + 60 >> 2] = 0;
 HEAP32[$0 + 64 >> 2] = 0;
 HEAP32[$0 + 68 >> 2] = 0;
 HEAP32[$0 + 36 >> 2] = 0;
 return $0 | 0;
}

function _luaU_header($h) {
 $h = $h | 0;
 var $8 = 0;
 HEAP8[$h >> 0] = 27;
 HEAP8[$h + 1 >> 0] = 76;
 HEAP8[$h + 2 >> 0] = 117;
 HEAP8[$h + 3 >> 0] = 97;
 HEAP8[$h + 4 >> 0] = 82;
 HEAP8[$h + 5 >> 0] = 0;
 HEAP8[$h + 6 >> 0] = 1;
 HEAP8[$h + 7 >> 0] = 4;
 HEAP8[$h + 8 >> 0] = 4;
 HEAP8[$h + 9 >> 0] = 4;
 HEAP8[$h + 10 >> 0] = 8;
 $8 = $h + 12 | 0;
 HEAP8[$h + 11 >> 0] = 0;
 HEAP8[$8 >> 0] = HEAP8[3472] | 0;
 HEAP8[$8 + 1 >> 0] = HEAP8[3473] | 0;
 HEAP8[$8 + 2 >> 0] = HEAP8[3474] | 0;
 HEAP8[$8 + 3 >> 0] = HEAP8[3475] | 0;
 HEAP8[$8 + 4 >> 0] = HEAP8[3476] | 0;
 HEAP8[$8 + 5 >> 0] = HEAP8[3477] | 0;
 return;
}

function _str_char($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $3 = 0, $b = 0, $i$01 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $b = sp;
 $0 = _lua_gettop($L) | 0;
 $1 = _luaL_buffinitsize($L, $b, $0) | 0;
 if (($0 | 0) < 1) {
  _luaL_pushresultsize($b, $0);
  STACKTOP = sp;
  return 1;
 } else $i$01 = 1;
 while (1) {
  $3 = _luaL_checkinteger($L, $i$01) | 0;
  if (($3 & 255 | 0) != ($3 | 0)) _luaL_argerror($L, $i$01, 9904) | 0;
  HEAP8[$1 + ($i$01 + -1) >> 0] = $3;
  if (($i$01 | 0) == ($0 | 0)) break; else $i$01 = $i$01 + 1 | 0;
 }
 _luaL_pushresultsize($b, $0);
 STACKTOP = sp;
 return 1;
}

function _luaL_checknumber($L, $narg) {
 $L = $L | 0;
 $narg = $narg | 0;
 var $0 = 0.0, $3 = 0, $5 = 0, $isnum = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $isnum = sp + 8 | 0;
 $0 = +_lua_tonumberx($L, $narg, $isnum);
 if (HEAP32[$isnum >> 2] | 0) {
  STACKTOP = sp;
  return +$0;
 }
 $3 = _lua_typename($L, 3) | 0;
 $5 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $3;
 HEAP32[$vararg_buffer + 4 >> 2] = $5;
 _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return +$0;
}

function _math_min($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0.0, $3 = 0.0, $dmin$0$lcssa = 0.0, $dmin$02 = 0.0, $dmin$1 = 0.0, $i$01 = 0;
 $0 = _lua_gettop($L) | 0;
 $1 = +_luaL_checknumber($L, 1);
 if (($0 | 0) < 2) {
  $dmin$0$lcssa = $1;
  _lua_pushnumber($L, $dmin$0$lcssa);
  return 1;
 } else {
  $dmin$02 = $1;
  $i$01 = 2;
 }
 while (1) {
  $3 = +_luaL_checknumber($L, $i$01);
  $dmin$1 = $3 < $dmin$02 ? $3 : $dmin$02;
  if (($i$01 | 0) == ($0 | 0)) {
   $dmin$0$lcssa = $dmin$1;
   break;
  } else {
   $dmin$02 = $dmin$1;
   $i$01 = $i$01 + 1 | 0;
  }
 }
 _lua_pushnumber($L, $dmin$0$lcssa);
 return 1;
}

function _math_max($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0.0, $3 = 0.0, $dmax$0$lcssa = 0.0, $dmax$02 = 0.0, $dmax$1 = 0.0, $i$01 = 0;
 $0 = _lua_gettop($L) | 0;
 $1 = +_luaL_checknumber($L, 1);
 if (($0 | 0) < 2) {
  $dmax$0$lcssa = $1;
  _lua_pushnumber($L, $dmax$0$lcssa);
  return 1;
 } else {
  $dmax$02 = $1;
  $i$01 = 2;
 }
 while (1) {
  $3 = +_luaL_checknumber($L, $i$01);
  $dmax$1 = $3 > $dmax$02 ? $3 : $dmax$02;
  if (($i$01 | 0) == ($0 | 0)) {
   $dmax$0$lcssa = $dmax$1;
   break;
  } else {
   $dmax$02 = $dmax$1;
   $i$01 = $i$01 + 1 | 0;
  }
 }
 _lua_pushnumber($L, $dmax$0$lcssa);
 return 1;
}

function _strcmp($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = HEAP8[$l >> 0] | 0;
 $1 = HEAP8[$r >> 0] | 0;
 if ($0 << 24 >> 24 == 0 ? 1 : $0 << 24 >> 24 != $1 << 24 >> 24) {
  $$lcssa = $0;
  $$lcssa2 = $1;
 } else {
  $$014 = $l;
  $$05 = $r;
  do {
   $$014 = $$014 + 1 | 0;
   $$05 = $$05 + 1 | 0;
   $6 = HEAP8[$$014 >> 0] | 0;
   $7 = HEAP8[$$05 >> 0] | 0;
  } while (!($6 << 24 >> 24 == 0 ? 1 : $6 << 24 >> 24 != $7 << 24 >> 24));
  $$lcssa = $6;
  $$lcssa2 = $7;
 }
 return ($$lcssa & 255) - ($$lcssa2 & 255) | 0;
}

function _luaF_freeproto($L, $f) {
 $L = $L | 0;
 $f = $f | 0;
 _luaM_realloc_($L, HEAP32[$f + 12 >> 2] | 0, HEAP32[$f + 48 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 16 >> 2] | 0, HEAP32[$f + 56 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 8 >> 2] | 0, HEAP32[$f + 44 >> 2] << 4, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 20 >> 2] | 0, HEAP32[$f + 52 >> 2] << 2, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 24 >> 2] | 0, (HEAP32[$f + 60 >> 2] | 0) * 12 | 0, 0) | 0;
 _luaM_realloc_($L, HEAP32[$f + 28 >> 2] | 0, HEAP32[$f + 40 >> 2] << 3, 0) | 0;
 _luaM_realloc_($L, $f, 80, 0) | 0;
 return;
}

function _lua_pushstring($L, $s) {
 $L = $L | 0;
 $s = $s | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0;
 if (!$s) {
  $1 = $L + 8 | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$1 >> 2] = $2 + 16;
  $$0 = 0;
  return $$0 | 0;
 }
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $10 = _luaS_new($L, $s) | 0;
 $11 = $L + 8 | 0;
 $12 = HEAP32[$11 >> 2] | 0;
 HEAP32[$12 >> 2] = $10;
 HEAP32[$12 + 8 >> 2] = HEAPU8[$10 + 4 >> 0] | 0 | 64;
 HEAP32[$11 >> 2] = (HEAP32[$11 >> 2] | 0) + 16;
 $$0 = $10 + 16 | 0;
 return $$0 | 0;
}

function _luaL_checklstring($L, $narg, $len) {
 $L = $L | 0;
 $narg = $narg | 0;
 $len = $len | 0;
 var $0 = 0, $2 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _lua_tolstring($L, $narg, $len) | 0;
 if ($0) {
  STACKTOP = sp;
  return $0 | 0;
 }
 $2 = _lua_typename($L, 4) | 0;
 $4 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $2;
 HEAP32[$vararg_buffer + 4 >> 2] = $4;
 _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _luaB_collectgarbage($L) {
 $L = $L | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $5 = 0;
 $2 = HEAP32[5360 + ((_luaL_checkoption($L, 1, 5304, 5312) | 0) << 2) >> 2] | 0;
 $4 = _lua_gc($L, $2, _luaL_optinteger($L, 2, 0) | 0) | 0;
 if (($2 | 0) == 9 | ($2 | 0) == 5) {
  _lua_pushboolean($L, $4);
  $$0 = 1;
  return $$0 | 0;
 } else if (($2 | 0) == 3) {
  $5 = _lua_gc($L, 4, 0) | 0;
  _lua_pushnumber($L, +($4 | 0) + +($5 | 0) * .0009765625);
  _lua_pushinteger($L, $5);
  $$0 = 2;
  return $$0 | 0;
 } else {
  _lua_pushinteger($L, $4);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_where($L, $level) {
 $L = $L | 0;
 $level = $level | 0;
 var $3 = 0, $ar = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $vararg_buffer = sp;
 $ar = sp + 8 | 0;
 if (_lua_getstack($L, $level, $ar) | 0) {
  _lua_getinfo($L, 4032, $ar) | 0;
  $3 = HEAP32[$ar + 20 >> 2] | 0;
  if (($3 | 0) > 0) {
   HEAP32[$vararg_buffer >> 2] = $ar + 36;
   HEAP32[$vararg_buffer + 4 >> 2] = $3;
   _lua_pushfstring($L, 4040, $vararg_buffer) | 0;
   STACKTOP = sp;
   return;
  }
 }
 _lua_pushlstring($L, 10072, 0) | 0;
 STACKTOP = sp;
 return;
}

function _luaD_growstack($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $$ = 0, $$$ = 0, $1 = 0, $12 = 0, $13 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = HEAP32[$L + 32 >> 2] | 0;
 if (($1 | 0) > 1e6) _luaD_throw($L, 6);
 $12 = $n + 5 + ((HEAP32[$L + 8 >> 2] | 0) - (HEAP32[$L + 28 >> 2] | 0) >> 4) | 0;
 $13 = $1 << 1;
 $$ = ($13 | 0) > 1e6 ? 1e6 : $13;
 $$$ = ($$ | 0) < ($12 | 0) ? $12 : $$;
 if (($$$ | 0) > 1e6) {
  _luaD_reallocstack($L, 1000200);
  _luaG_runerror($L, 4984, sp);
 } else {
  _luaD_reallocstack($L, $$$);
  STACKTOP = sp;
  return;
 }
}

function _luaT_gettmbyobj($L, $o, $event) {
 $L = $L | 0;
 $o = $o | 0;
 $event = $event | 0;
 var $16 = 0, $2 = 0, $mt$0 = 0, $mt$0$in = 0;
 $2 = HEAP32[$o + 8 >> 2] & 15;
 if (($2 | 0) == 5) $mt$0$in = (HEAP32[$o >> 2] | 0) + 8 | 0; else if (($2 | 0) == 7) $mt$0$in = (HEAP32[$o >> 2] | 0) + 8 | 0; else $mt$0$in = (HEAP32[$L + 12 >> 2] | 0) + 252 + ($2 << 2) | 0;
 $mt$0 = HEAP32[$mt$0$in >> 2] | 0;
 if (!$mt$0) {
  $16 = 1832;
  return $16 | 0;
 }
 $16 = _luaH_getstr($mt$0, HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 184 + ($event << 2) >> 2] | 0) | 0;
 return $16 | 0;
}

function _b_replace($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkunsigned($L, 1) | 0;
 $1 = _luaL_checkunsigned($L, 2) | 0;
 $2 = _luaL_checkinteger($L, 3) | 0;
 $3 = _luaL_optinteger($L, 4, 1) | 0;
 if (($2 | 0) <= -1) _luaL_argerror($L, 3, 5752) | 0;
 if (($3 | 0) <= 0) _luaL_argerror($L, 4, 5784) | 0;
 if (($3 + $2 | 0) > 32) _luaL_error($L, 5808, sp) | 0;
 $10 = ~(-2 << $3 + -1);
 _lua_pushunsigned($L, $0 & ~($10 << $2) | ($1 & $10) << $2);
 STACKTOP = sp;
 return 1;
}

function _luaV_tostring($L, $obj) {
 $L = $L | 0;
 $obj = $obj | 0;
 var $$0 = 0, $0 = 0, $5 = 0, $s = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $vararg_buffer = sp;
 $s = sp + 8 | 0;
 $0 = $obj + 8 | 0;
 if ((HEAP32[$0 >> 2] | 0) != 3) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAPF64[$vararg_buffer >> 3] = +HEAPF64[$obj >> 3];
 $5 = _luaS_newlstr($L, $s, _sprintf($s, 7400, $vararg_buffer) | 0) | 0;
 HEAP32[$obj >> 2] = $5;
 HEAP32[$0 >> 2] = HEAPU8[$5 + 4 >> 0] | 0 | 64;
 $$0 = 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaK_patchclose($fs, $list, $level) {
 $fs = $fs | 0;
 $list = $list | 0;
 $level = $level | 0;
 var $$01 = 0, $3 = 0, $4 = 0, $5 = 0, $7 = 0, $fs$idx$val$idx$val = 0;
 if (($list | 0) == -1) return;
 $fs$idx$val$idx$val = HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0;
 $3 = ($level << 6) + 64 & 16320;
 $$01 = $list;
 do {
  $4 = $fs$idx$val$idx$val + ($$01 << 2) | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $7 = ($5 >>> 14) + -131071 | 0;
  HEAP32[$4 >> 2] = $5 & -16321 | $3;
  $$01 = ($7 | 0) == -1 ? -1 : $$01 + 1 + $7 | 0;
 } while (($$01 | 0) != -1);
 return;
}

function _luaS_hash($str, $l, $seed) {
 $str = $str | 0;
 $l = $l | 0;
 $seed = $seed | 0;
 var $0 = 0, $12 = 0, $2 = 0, $h$0$lcssa = 0, $h$02 = 0, $l1$01 = 0;
 $0 = $seed ^ $l;
 $2 = ($l >>> 5) + 1 | 0;
 if ($2 >>> 0 > $l >>> 0) {
  $h$0$lcssa = $0;
  return $h$0$lcssa | 0;
 } else {
  $h$02 = $0;
  $l1$01 = $l;
 }
 while (1) {
  $12 = ($h$02 << 5) + ($h$02 >>> 2) + (HEAPU8[$str + ($l1$01 + -1) >> 0] | 0) ^ $h$02;
  $l1$01 = $l1$01 - $2 | 0;
  if ($l1$01 >>> 0 < $2 >>> 0) {
   $h$0$lcssa = $12;
   break;
  } else $h$02 = $12;
 }
 return $h$0$lcssa | 0;
}

function _luaL_checktype($L, $narg, $t) {
 $L = $L | 0;
 $narg = $narg | 0;
 $t = $t | 0;
 var $2 = 0, $4 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if ((_lua_type($L, $narg) | 0) == ($t | 0)) {
  STACKTOP = sp;
  return;
 }
 $2 = _lua_typename($L, $t) | 0;
 $4 = _lua_typename($L, _lua_type($L, $narg) | 0) | 0;
 HEAP32[$vararg_buffer >> 2] = $2;
 HEAP32[$vararg_buffer + 4 >> 2] = $4;
 _luaL_argerror($L, $narg, _lua_pushfstring($L, 4056, $vararg_buffer) | 0) | 0;
 STACKTOP = sp;
 return;
}

function _luaK_setoneret($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 var $0 = 0, $1 = 0, $15 = 0;
 $0 = HEAP32[$e >> 2] | 0;
 if (($0 | 0) == 12) {
  HEAP32[$e >> 2] = 6;
  $1 = $e + 8 | 0;
  HEAP32[$1 >> 2] = (HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$1 >> 2] << 2) >> 2] | 0) >>> 6 & 255;
  return;
 } else if (($0 | 0) == 13) {
  $15 = (HEAP32[(HEAP32[$fs >> 2] | 0) + 12 >> 2] | 0) + (HEAP32[$e + 8 >> 2] << 2) | 0;
  HEAP32[$15 >> 2] = HEAP32[$15 >> 2] & 8388607 | 16777216;
  HEAP32[$e >> 2] = 11;
  return;
 } else return;
}

function _luaU_dump($L, $f, $w, $data, $strip) {
 $L = $L | 0;
 $f = $f | 0;
 $w = $w | 0;
 $data = $data | 0;
 $strip = $strip | 0;
 var $3 = 0, $D = 0, $h$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 $h$i = sp + 20 | 0;
 $D = sp;
 HEAP32[$D >> 2] = $L;
 HEAP32[$D + 4 >> 2] = $w;
 HEAP32[$D + 8 >> 2] = $data;
 HEAP32[$D + 12 >> 2] = $strip;
 $3 = $D + 16 | 0;
 _luaU_header($h$i);
 HEAP32[$3 >> 2] = FUNCTION_TABLE_iiiii[$w & 31]($L, $h$i, 18, $data) | 0;
 _DumpFunction($f, $D);
 STACKTOP = sp;
 return HEAP32[$3 >> 2] | 0;
}

function _luaH_getstr($t, $key) {
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $n$0 = 0, $n$0$lcssa = 0, label = 0;
 $n$0 = (HEAP32[$t + 16 >> 2] | 0) + (((1 << (HEAPU8[$t + 7 >> 0] | 0)) + -1 & HEAP32[$key + 8 >> 2]) << 5) | 0;
 while (1) {
  if ((HEAP32[$n$0 + 24 >> 2] | 0) == 68) if ((HEAP32[$n$0 + 16 >> 2] | 0) == ($key | 0)) {
   $n$0$lcssa = $n$0;
   break;
  }
  $n$0 = HEAP32[$n$0 + 28 >> 2] | 0;
  if (!$n$0) {
   $$0 = 1832;
   label = 6;
   break;
  }
 }
 if ((label | 0) == 6) return $$0 | 0;
 $$0 = $n$0$lcssa;
 return $$0 | 0;
}

function _aux_lines($L, $toclose) {
 $L = $L | 0;
 $toclose = $toclose | 0;
 var $0 = 0, $5 = 0, $i$01 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) >= 19) _luaL_argerror($L, 17, 7616) | 0;
 _lua_pushvalue($L, 1);
 _lua_pushinteger($L, $0 + -1 | 0);
 _lua_pushboolean($L, $toclose);
 if (($0 | 0) < 2) {
  $5 = $0 + 2 | 0;
  _lua_pushcclosure($L, 164, $5);
  return;
 } else $i$01 = 1;
 do {
  $i$01 = $i$01 + 1 | 0;
  _lua_pushvalue($L, $i$01);
 } while (($i$01 | 0) != ($0 | 0));
 $5 = $0 + 2 | 0;
 _lua_pushcclosure($L, 164, $5);
 return;
}

function _generic_reader($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _luaL_checkstack($L, 2, 5216);
 _lua_pushvalue($L, 1);
 _lua_callk($L, 0, 1, 0, 0);
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -2);
  HEAP32[$size >> 2] = 0;
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 if (!(_lua_isstring($L, -1) | 0)) _luaL_error($L, 5248, sp) | 0;
 _lua_replace($L, 5);
 $$0 = _lua_tolstring($L, 5, $size) | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaC_checkupvalcolor($g, $uv) {
 $g = $g | 0;
 $uv = $uv | 0;
 var $0 = 0, $15 = 0, $2 = 0, $20 = 0;
 $0 = $uv + 5 | 0;
 $2 = HEAPU8[$0 >> 0] | 0;
 if ($2 & 7) return;
 if ((HEAP8[$g + 62 >> 0] | 0) != 2) if ((HEAPU8[$g + 61 >> 0] | 0) >= 2) {
  HEAP8[$0 >> 0] = HEAPU8[$g + 60 >> 0] & 3 | $2 & 184;
  return;
 }
 HEAP8[$0 >> 0] = $2 & 187 | 4;
 $15 = HEAP32[$uv + 8 >> 2] | 0;
 if (!(HEAP32[$15 + 8 >> 2] & 64)) return;
 $20 = HEAP32[$15 >> 2] | 0;
 if (!(HEAP8[$20 + 5 >> 0] & 3)) return;
 _reallymarkobject($g, $20);
 return;
}

function _luaB_loadfile($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0, $3 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 $1 = _luaL_optlstring($L, 2, 0, 0) | 0;
 $3 = (_lua_type($L, 3) | 0) != -1;
 if (_luaL_loadfilex($L, $0, $1) | 0) {
  _lua_pushnil($L);
  _lua_insert($L, -2);
  $$0$i = 2;
  return $$0$i | 0;
 }
 if (!$3) {
  $$0$i = 1;
  return $$0$i | 0;
 }
 _lua_pushvalue($L, $3 ? 3 : 0);
 if (_lua_setupvalue($L, -2, 1) | 0) {
  $$0$i = 1;
  return $$0$i | 0;
 }
 _lua_settop($L, -2);
 $$0$i = 1;
 return $$0$i | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
  return $$0 | 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function _luaC_newobj($L, $tt, $sz, $list, $offset) {
 $L = $L | 0;
 $tt = $tt | 0;
 $sz = $sz | 0;
 $list = $list | 0;
 $offset = $offset | 0;
 var $$list = 0, $1 = 0, $3 = 0, $4 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $3 = _luaM_realloc_($L, 0, $tt & 15, $sz) | 0;
 $4 = $3 + $offset | 0;
 $$list = ($list | 0) == 0 ? $1 + 68 | 0 : $list;
 HEAP8[$3 + ($offset + 5) >> 0] = (HEAPU8[$1 + 60 >> 0] | 0) & 3;
 HEAP8[$3 + ($offset + 4) >> 0] = $tt;
 HEAP32[$4 >> 2] = HEAP32[$$list >> 2];
 HEAP32[$$list >> 2] = $4;
 return $4 | 0;
}

function _luaV_tonumber($obj, $n) {
 $obj = $obj | 0;
 $n = $n | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $num = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $num = sp;
 $1 = HEAP32[$obj + 8 >> 2] | 0;
 if (($1 | 0) == 3) $$0 = $obj; else if (($1 & 15 | 0) == 4) {
  $5 = HEAP32[$obj >> 2] | 0;
  if (!(_luaO_str2d($5 + 16 | 0, HEAP32[$5 + 12 >> 2] | 0, $num) | 0)) $$0 = 0; else {
   HEAPF64[$n >> 3] = +HEAPF64[$num >> 3];
   HEAP32[$n + 8 >> 2] = 3;
   $$0 = $n;
  }
 } else $$0 = 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaO_arith($op, $v1, $v2) {
 $op = $op | 0;
 $v1 = +$v1;
 $v2 = +$v2;
 var $$0 = 0.0;
 switch ($op | 0) {
 case 3:
  {
   $$0 = $v1 / $v2;
   break;
  }
 case 4:
  {
   $$0 = $v1 - +Math_floor(+($v1 / $v2)) * $v2;
   break;
  }
 case 2:
  {
   $$0 = $v1 * $v2;
   break;
  }
 case 5:
  {
   $$0 = +Math_pow(+$v1, +$v2);
   break;
  }
 case 0:
  {
   $$0 = $v1 + $v2;
   break;
  }
 case 6:
  {
   $$0 = -$v1;
   break;
  }
 case 1:
  {
   $$0 = $v1 - $v2;
   break;
  }
 default:
  $$0 = 0.0;
 }
 return +$$0;
}

function _db_upvalueid($L) {
 $L = $L | 0;
 var $0 = 0, $ar$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $ar$i = sp;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 _lua_pushvalue($L, 1);
 _lua_getinfo($L, 6640, $ar$i) | 0;
 if (($0 | 0) > 0) {
  if (($0 | 0) > (HEAPU8[$ar$i + 32 >> 0] | 0 | 0)) label = 3;
 } else label = 3;
 if ((label | 0) == 3) _luaL_argerror($L, 2, 6648) | 0;
 _lua_pushlightuserdata($L, _lua_upvalueid($L, 1, $0) | 0);
 STACKTOP = sp;
 return 1;
}

function _b_test($L) {
 $L = $L | 0;
 var $$lcssa = 0, $0 = 0, $3 = 0, $i$01$i = 0, $r$0$lcssa$i = 0, $r$02$i = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa$i = 1; else {
  $i$01$i = 1;
  $r$02$i = -1;
  while (1) {
   $3 = (_luaL_checkunsigned($L, $i$01$i) | 0) & $r$02$i;
   if (($i$01$i | 0) == ($0 | 0)) {
    $$lcssa = $3;
    break;
   } else {
    $i$01$i = $i$01$i + 1 | 0;
    $r$02$i = $3;
   }
  }
  $r$0$lcssa$i = ($$lcssa | 0) != 0;
 }
 _lua_pushboolean($L, $r$0$lcssa$i & 1);
 return 1;
}

function _luaK_reserveregs($fs, $n) {
 $fs = $fs | 0;
 $n = $n | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $12 = 0, $3 = 0, $5 = 0;
 $0 = $fs + 48 | 0;
 $3 = (HEAPU8[$0 >> 0] | 0) + $n | 0;
 $5 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
 if (($3 | 0) <= (HEAPU8[$5 >> 0] | 0 | 0)) {
  $$pre$phiZ2D = $3 & 255;
  HEAP8[$0 >> 0] = $$pre$phiZ2D;
  return;
 }
 if (($3 | 0) > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48);
 $12 = $3 & 255;
 HEAP8[$5 >> 0] = $12;
 $$pre$phiZ2D = $12;
 HEAP8[$0 >> 0] = $$pre$phiZ2D;
 return;
}

function _lua_setglobal($L, $var) {
 $L = $L | 0;
 $var = $var | 0;
 var $14 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $4 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 40 >> 2] | 0, 2) | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 16;
 $8 = _luaS_new($L, $var) | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$6 + 8 >> 2] = HEAPU8[$8 + 4 >> 0] | 0 | 64;
 $14 = HEAP32[$5 >> 2] | 0;
 _luaV_settable($L, $4, $14 + -16 | 0, $14 + -32 | 0);
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -32;
 return;
}

function _ll_loadfunc($L, $path, $sym) {
 $L = $L | 0;
 $path = $path | 0;
 $sym = $sym | 0;
 var $$0 = 0, $0 = 0;
 _lua_getfield($L, -1001e3, 10280);
 _lua_getfield($L, -1, $path);
 $0 = _lua_touserdata($L, -1) | 0;
 _lua_settop($L, -3);
 if (!$0) {
  _lua_pushlstring($L, 11072, 58) | 0;
  $$0 = 1;
  return $$0 | 0;
 }
 if ((HEAP8[$sym >> 0] | 0) == 42) {
  _lua_pushboolean($L, 1);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_pushlstring($L, 11072, 58) | 0;
  $$0 = 2;
  return $$0 | 0;
 }
 return 0;
}

function _f_setvbuf($L) {
 $L = $L | 0;
 var $0 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 $5 = _luaL_checkoption($L, 2, 0, 7408) | 0;
 $6 = _luaL_optinteger($L, 3, 1024) | 0;
 $12 = _luaL_fileresult($L, (_setvbuf($4 | 0, 0, HEAP32[7424 + ($5 << 2) >> 2] | 0, $6 | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function _luaL_ref($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 var $$0 = 0, $2 = 0, $3 = 0, $ref$0 = 0;
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -2);
  $$0 = -1;
  return $$0 | 0;
 }
 $2 = _lua_absindex($L, $t) | 0;
 _lua_rawgeti($L, $2, 0);
 $3 = _lua_tointegerx($L, -1, 0) | 0;
 _lua_settop($L, -2);
 if (!$3) $ref$0 = (_lua_rawlen($L, $2) | 0) + 1 | 0; else {
  _lua_rawgeti($L, $2, $3);
  _lua_rawseti($L, $2, 0);
  $ref$0 = $3;
 }
 _lua_rawseti($L, $2, $ref$0);
 $$0 = $ref$0;
 return $$0 | 0;
}

function _luaZ_fill($z) {
 $z = $z | 0;
 var $$0 = 0, $6 = 0, $8 = 0, $size = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $size = sp;
 $6 = FUNCTION_TABLE_iiii[HEAP32[$z + 8 >> 2] & 31](HEAP32[$z + 16 >> 2] | 0, HEAP32[$z + 12 >> 2] | 0, $size) | 0;
 $8 = HEAP32[$size >> 2] | 0;
 if (($6 | 0) == 0 | ($8 | 0) == 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 HEAP32[$z >> 2] = $8 + -1;
 HEAP32[$z + 4 >> 2] = $6 + 1;
 $$0 = HEAPU8[$6 >> 0] | 0;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_callmeta($L, $obj, $event) {
 $L = $L | 0;
 $obj = $obj | 0;
 $event = $event | 0;
 var $$0 = 0, $0 = 0;
 $0 = _lua_absindex($L, $obj) | 0;
 if (!(_lua_getmetatable($L, $0) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushstring($L, $event) | 0;
 _lua_rawget($L, -2);
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_remove($L, -2);
  _lua_pushvalue($L, $0);
  _lua_callk($L, 1, 1, 0, 0);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _luaB_setmetatable($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _lua_type($L, 2) | 0;
 _luaL_checktype($L, 1, 5);
 if (!(($0 | 0) == 0 | ($0 | 0) == 5)) _luaL_argerror($L, 2, 6456) | 0;
 if (!(_luaL_getmetafield($L, 1, 5032) | 0)) {
  _lua_settop($L, 2);
  _lua_setmetatable($L, 1) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 5048, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaO_ceillog2($x) {
 $x = $x | 0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $2 = 0, $3 = 0, $l$0$lcssa = 0, $l$02 = 0;
 $0 = $x + -1 | 0;
 if ($0 >>> 0 > 255) {
  $$01 = $0;
  $l$02 = 0;
  while (1) {
   $2 = $l$02 + 8 | 0;
   $3 = $$01 >>> 8;
   if ($$01 >>> 0 > 65535) {
    $$01 = $3;
    $l$02 = $2;
   } else {
    $$0$lcssa = $3;
    $l$0$lcssa = $2;
    break;
   }
  }
 } else {
  $$0$lcssa = $0;
  $l$0$lcssa = 0;
 }
 return (HEAPU8[1848 + $$0$lcssa >> 0] | 0) + $l$0$lcssa | 0;
}

function _luaZ_openspace($L, $buff, $n) {
 $L = $L | 0;
 $buff = $buff | 0;
 $n = $n | 0;
 var $$n = 0, $0 = 0, $1 = 0, $7 = 0, $8 = 0;
 $0 = $buff + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if ($1 >>> 0 >= $n >>> 0) {
  $8 = HEAP32[$buff >> 2] | 0;
  return $8 | 0;
 }
 $$n = $n >>> 0 < 32 ? 32 : $n;
 if (($$n + 1 | 0) >>> 0 > 4294967293) _luaM_toobig($L);
 $7 = _luaM_realloc_($L, HEAP32[$buff >> 2] | 0, $1, $$n) | 0;
 HEAP32[$buff >> 2] = $7;
 HEAP32[$0 >> 2] = $$n;
 $8 = $7;
 return $8 | 0;
}

function _luaL_checkstack($L, $space, $msg) {
 $L = $L | 0;
 $space = $space | 0;
 $msg = $msg | 0;
 var $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (_lua_checkstack($L, $space + 20 | 0) | 0) {
  STACKTOP = sp;
  return;
 }
 if (!$msg) {
  _luaL_error($L, 4984, sp + 8 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  HEAP32[$vararg_buffer >> 2] = $msg;
  _luaL_error($L, 4104, $vararg_buffer) | 0;
  STACKTOP = sp;
  return;
 }
}

function _luaS_eqstr($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $18 = 0, $8 = 0;
 $1 = HEAP8[$a + 4 >> 0] | 0;
 do if ($1 << 24 >> 24 == (HEAP8[$b + 4 >> 0] | 0)) {
  if ($1 << 24 >> 24 == 4) {
   $18 = ($a | 0) == ($b | 0);
   break;
  }
  $8 = HEAP32[$a + 12 >> 2] | 0;
  if (($a | 0) == ($b | 0)) $18 = 1; else if (($8 | 0) == (HEAP32[$b + 12 >> 2] | 0)) $18 = (_memcmp($a + 16 | 0, $b + 16 | 0, $8) | 0) == 0; else $18 = 0;
 } else $18 = 0; while (0);
 return $18 & 1 | 0;
}

function _lua_sethook($L, $func, $mask, $count) {
 $L = $L | 0;
 $func = $func | 0;
 $mask = $mask | 0;
 $count = $count | 0;
 var $3 = 0, $or$cond = 0;
 $or$cond = ($func | 0) == 0 | ($mask | 0) == 0;
 $3 = HEAP32[$L + 16 >> 2] | 0;
 if (HEAP8[$3 + 18 >> 0] & 1) HEAP32[$L + 20 >> 2] = HEAP32[$3 + 28 >> 2];
 HEAP32[$L + 52 >> 2] = $or$cond ? 0 : $func;
 HEAP32[$L + 44 >> 2] = $count;
 HEAP32[$L + 48 >> 2] = $count;
 HEAP8[$L + 40 >> 0] = $or$cond ? 0 : $mask & 255;
 return 1;
}

function _b_extract($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkunsigned($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 $2 = _luaL_optinteger($L, 3, 1) | 0;
 if (($1 | 0) <= -1) _luaL_argerror($L, 2, 5752) | 0;
 if (($2 | 0) <= 0) _luaL_argerror($L, 3, 5784) | 0;
 if (($2 + $1 | 0) > 32) _luaL_error($L, 5808, sp) | 0;
 _lua_pushunsigned($L, $0 >>> $1 & ~(-2 << $2 + -1));
 STACKTOP = sp;
 return 1;
}

function _lua_createtable($L, $narray, $nrec) {
 $L = $L | 0;
 $narray = $narray | 0;
 $nrec = $nrec | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaH_new($L) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 8 >> 2] = 69;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 16;
 if (!(($narray | 0) > 0 | ($nrec | 0) > 0)) return;
 _luaH_resize($L, $5, $narray, $nrec);
 return;
}

function _luaX_next($ls) {
 $ls = $ls | 0;
 var $3 = 0, $6 = 0;
 HEAP32[$ls + 8 >> 2] = HEAP32[$ls + 4 >> 2];
 $3 = $ls + 32 | 0;
 if ((HEAP32[$3 >> 2] | 0) == 286) {
  HEAP32[$ls + 16 >> 2] = _llex($ls, $ls + 24 | 0) | 0;
  return;
 } else {
  $6 = $ls + 16 | 0;
  HEAP32[$6 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6 + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$6 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$6 + 12 >> 2] = HEAP32[$3 + 12 >> 2];
  HEAP32[$3 >> 2] = 286;
  return;
 }
}

function _lua_concat($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $7 = 0, $8 = 0, $9 = 0;
 if (($n | 0) > 1) {
  if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
  _luaV_concat($L, $n);
  return;
 } else {
  if ($n) return;
  $7 = $L + 8 | 0;
  $8 = HEAP32[$7 >> 2] | 0;
  $9 = _luaS_newlstr($L, 10072, 0) | 0;
  HEAP32[$8 >> 2] = $9;
  HEAP32[$8 + 8 >> 2] = HEAPU8[$9 + 4 >> 0] | 0 | 64;
  HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 16;
  return;
 }
}

function _luaB_select($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $7 = 0, $i$0 = 0;
 $0 = _lua_gettop($L) | 0;
 if ((_lua_type($L, 1) | 0) == 4) if ((HEAP8[(_lua_tolstring($L, 1, 0) | 0) >> 0] | 0) == 35) {
  _lua_pushinteger($L, $0 + -1 | 0);
  $$0 = 1;
  return $$0 | 0;
 }
 $7 = _luaL_checkinteger($L, 1) | 0;
 $i$0 = ($7 | 0) < 0 ? $7 + $0 | 0 : ($7 | 0) > ($0 | 0) ? $0 : $7;
 if (($i$0 | 0) <= 0) _luaL_argerror($L, 1, 5088) | 0;
 $$0 = $0 - $i$0 | 0;
 return $$0 | 0;
}

function _getF($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $6 = 0;
 $0 = HEAP32[$ud >> 2] | 0;
 if (($0 | 0) > 0) {
  HEAP32[$size >> 2] = $0;
  HEAP32[$ud >> 2] = 0;
  $$0 = $ud + 8 | 0;
  return $$0 | 0;
 }
 $2 = $ud + 4 | 0;
 if (_feof(HEAP32[$2 >> 2] | 0) | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = $ud + 8 | 0;
 HEAP32[$size >> 2] = _fread($6 | 0, 1, 1024, HEAP32[$2 >> 2] | 0) | 0;
 $$0 = $6;
 return $$0 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function _b_and($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01$i = 0, $r$0$lcssa$i = 0, $r$02$i = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa$i = -1; else {
  $i$01$i = 1;
  $r$02$i = -1;
  while (1) {
   $3 = (_luaL_checkunsigned($L, $i$01$i) | 0) & $r$02$i;
   if (($i$01$i | 0) == ($0 | 0)) {
    $r$0$lcssa$i = $3;
    break;
   } else {
    $i$01$i = $i$01$i + 1 | 0;
    $r$02$i = $3;
   }
  }
 }
 _lua_pushunsigned($L, $r$0$lcssa$i);
 return 1;
}

function _io_popen($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _luaL_optlstring($L, 2, 11144, 0) | 0;
 $1 = _lua_newuserdata($L, 8) | 0;
 $2 = $1 + 4 | 0;
 HEAP32[$2 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 _luaL_error($L, 7776, sp) | 0;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$2 >> 2] = 166;
 $3 = _luaL_fileresult($L, 0, $0) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _io_close($L) {
 $L = $L | 0;
 var $7 = 0, $8 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((_lua_type($L, 1) | 0) == -1) _lua_getfield($L, -1001e3, 7200);
 if (!(HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $7 = (_luaL_checkudata($L, 1, 7088) | 0) + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 $9 = FUNCTION_TABLE_ii[$8 & 255]($L) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _io_flush($L) {
 $L = $L | 0;
 var $0 = 0, $8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 7200);
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 7204;
  _luaL_error($L, 7720, $vararg_buffer) | 0;
 }
 $8 = _luaL_fileresult($L, (_fflush(HEAP32[$0 >> 2] | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _b_arshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0, $r$0 = 0;
 $0 = _luaL_checkunsigned($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($0 | 0) < 0 & ($1 | 0) > -1) {
  if (($1 | 0) > 31) $r$0 = -1; else $r$0 = $0 >>> $1 | ~(-1 >>> $1);
  _lua_pushunsigned($L, $r$0);
  return 1;
 }
 if (($1 | 0) > 0) $$1$i = ($1 | 0) > 31 ? 0 : $0 >>> $1; else $$1$i = ($1 | 0) < -31 ? 0 : $0 << 0 - $1;
 _lua_pushunsigned($L, $$1$i);
 return 1;
}

function _lua_getglobal($L, $var) {
 $L = $L | 0;
 $var = $var | 0;
 var $15 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0;
 $4 = _luaH_getint(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 40 >> 2] | 0, 2) | 0;
 $5 = $L + 8 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 HEAP32[$5 >> 2] = $6 + 16;
 $8 = _luaS_new($L, $var) | 0;
 HEAP32[$6 >> 2] = $8;
 HEAP32[$6 + 8 >> 2] = HEAPU8[$8 + 4 >> 0] | 0 | 64;
 $15 = (HEAP32[$5 >> 2] | 0) + -16 | 0;
 _luaV_gettable($L, $4, $15, $15);
 return;
}

function _db_traceback($L) {
 $L = $L | 0;
 var $$0$i = 0, $3 = 0, $4 = 0, $5 = 0;
 if ((_lua_type($L, 1) | 0) == 8) {
  $$0$i = _lua_tothread($L, 1) | 0;
  $4 = 1;
 } else {
  $$0$i = $L;
  $4 = 0;
 }
 $3 = $4 + 1 | 0;
 $5 = _lua_tolstring($L, $3, 0) | 0;
 if (!$5) if ((_lua_type($L, $3) | 0) >= 1) {
  _lua_pushvalue($L, $3);
  return 1;
 }
 _luaL_traceback($L, $$0$i, $5, _luaL_optinteger($L, $4 | 2, ($$0$i | 0) == ($L | 0) & 1) | 0);
 return 1;
}

function _iscleared($g, $o) {
 $g = $g | 0;
 $o = $o | 0;
 var $$0 = 0, $1 = 0, $6 = 0;
 $1 = HEAP32[$o + 8 >> 2] | 0;
 if (!($1 & 64)) {
  $$0 = 0;
  return $$0 | 0;
 }
 $6 = HEAP32[$o >> 2] | 0;
 if (($1 & 15 | 0) != 4) {
  $$0 = (HEAPU8[$6 + 5 >> 0] | 0) & 3;
  return $$0 | 0;
 }
 if (!$6) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(HEAP8[$6 + 5 >> 0] & 3)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _reallymarkobject($g, $6);
 $$0 = 0;
 return $$0 | 0;
}

function _f_tostring($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  _lua_pushlstring($L, 7336, 13) | 0;
  STACKTOP = sp;
  return 1;
 } else {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 >> 2];
  _lua_pushfstring($L, 7352, $vararg_buffer) | 0;
  STACKTOP = sp;
  return 1;
 }
 return 0;
}

function _luaL_requiref($L, $modname, $openf, $glb) {
 $L = $L | 0;
 $modname = $modname | 0;
 $openf = $openf | 0;
 $glb = $glb | 0;
 _lua_pushcclosure($L, $openf, 0);
 _lua_pushstring($L, $modname) | 0;
 _lua_callk($L, 1, 1, 0, 0);
 _luaL_getsubtable($L, -1001e3, 10672) | 0;
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, $modname);
 _lua_settop($L, -2);
 if (!$glb) return;
 _lua_pushvalue($L, -1);
 _lua_setglobal($L, $modname);
 return;
}

function _escerror($ls, $c, $n, $msg) {
 $ls = $ls | 0;
 $c = $c | 0;
 $n = $n | 0;
 $msg = $msg | 0;
 var $5 = 0, $i$01 = 0;
 HEAP32[(HEAP32[$ls + 60 >> 2] | 0) + 4 >> 2] = 0;
 _save($ls, 92);
 L1 : do if (($n | 0) > 0) {
  $i$01 = 0;
  do {
   $5 = HEAP32[$c + ($i$01 << 2) >> 2] | 0;
   if (($5 | 0) == -1) break L1;
   _save($ls, $5);
   $i$01 = $i$01 + 1 | 0;
  } while (($i$01 | 0) < ($n | 0));
 } while (0);
 _lexerror($ls, $msg, 289);
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _b_xor($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa = 0; else {
  $i$01 = 1;
  $r$02 = 0;
  while (1) {
   $3 = (_luaL_checkunsigned($L, $i$01) | 0) ^ $r$02;
   if (($i$01 | 0) == ($0 | 0)) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $i$01 + 1 | 0;
    $r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L, $r$0$lcssa);
 return 1;
}

function _searcher_preload($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 _lua_getfield($L, -1001e3, 11352);
 _lua_getfield($L, -1, $0);
 if (_lua_type($L, -1) | 0) {
  STACKTOP = sp;
  return 1;
 }
 HEAP32[$vararg_buffer >> 2] = $0;
 _lua_pushfstring($L, 11168, $vararg_buffer) | 0;
 STACKTOP = sp;
 return 1;
}

function _b_or($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) < 1) $r$0$lcssa = 0; else {
  $i$01 = 1;
  $r$02 = 0;
  while (1) {
   $3 = _luaL_checkunsigned($L, $i$01) | 0 | $r$02;
   if (($i$01 | 0) == ($0 | 0)) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $i$01 + 1 | 0;
    $r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L, $r$0$lcssa);
 return 1;
}

function _luaB_assert($L) {
 $L = $L | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 if (!(_lua_toboolean($L, 1) | 0)) {
  HEAP32[$vararg_buffer >> 2] = _luaL_optlstring($L, 2, 5528, 0) | 0;
  $$0 = _luaL_error($L, 7664, $vararg_buffer) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _lua_gettop($L) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaT_init($L) {
 $L = $L | 0;
 var $0 = 0, $3 = 0, $9 = 0, $i$01 = 0;
 $0 = $L + 12 | 0;
 $i$01 = 0;
 do {
  $3 = _luaS_new($L, HEAP32[3184 + ($i$01 << 2) >> 2] | 0) | 0;
  HEAP32[(HEAP32[$0 >> 2] | 0) + 184 + ($i$01 << 2) >> 2] = $3;
  $9 = (HEAP32[(HEAP32[$0 >> 2] | 0) + 184 + ($i$01 << 2) >> 2] | 0) + 5 | 0;
  HEAP8[$9 >> 0] = HEAPU8[$9 >> 0] | 0 | 32;
  $i$01 = $i$01 + 1 | 0;
 } while (($i$01 | 0) != 17);
 return;
}

function _pairsmeta($L, $method, $iszero, $iter) {
 $L = $L | 0;
 $method = $method | 0;
 $iszero = $iszero | 0;
 $iter = $iter | 0;
 if (_luaL_getmetafield($L, 1, $method) | 0) {
  _lua_pushvalue($L, 1);
  _lua_callk($L, 1, 3, 0, 0);
  return;
 }
 _luaL_checktype($L, 1, 5);
 _lua_pushcclosure($L, $iter, 0);
 _lua_pushvalue($L, 1);
 if (!$iszero) {
  _lua_pushnil($L);
  return;
 } else {
  _lua_pushinteger($L, 0);
  return;
 }
}

function _io_write($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 7200);
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 7204;
  _luaL_error($L, 7720, $vararg_buffer) | 0;
 }
 $5 = _g_write($L, HEAP32[$0 >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _sort_comp($L, $a, $b) {
 $L = $L | 0;
 $a = $a | 0;
 $b = $b | 0;
 var $$0 = 0, $4 = 0;
 if (!(_lua_type($L, 2) | 0)) {
  $$0 = _lua_compare($L, $a, $b, 1) | 0;
  return $$0 | 0;
 } else {
  _lua_pushvalue($L, 2);
  _lua_pushvalue($L, $a + -1 | 0);
  _lua_pushvalue($L, $b + -2 | 0);
  _lua_callk($L, 2, 1, 0, 0);
  $4 = _lua_toboolean($L, -1) | 0;
  _lua_settop($L, -2);
  $$0 = $4;
  return $$0 | 0;
 }
 return 0;
}

function _io_read($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 _lua_getfield($L, -1001e3, 7176);
 $0 = _lua_touserdata($L, -1) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  HEAP32[$vararg_buffer >> 2] = 7180;
  _luaL_error($L, 7720, $vararg_buffer) | 0;
 }
 $5 = _g_read($L, HEAP32[$0 >> 2] | 0, 1) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _luaB_coresume($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $4 = 0;
 $0 = _lua_tothread($L, 1) | 0;
 if (!$0) _luaL_argerror($L, 1, 6048) | 0;
 $4 = _auxresume($L, $0, (_lua_gettop($L) | 0) + -1 | 0) | 0;
 if (($4 | 0) < 0) {
  _lua_pushboolean($L, 0);
  _lua_insert($L, -2);
  $$0 = 2;
  return $$0 | 0;
 } else {
  _lua_pushboolean($L, 1);
  _lua_insert($L, ~$4);
  $$0 = $4 + 1 | 0;
  return $$0 | 0;
 }
 return 0;
}

function _pack($L) {
 $L = $L | 0;
 var $0 = 0, $i$01 = 0;
 $0 = _lua_gettop($L) | 0;
 _lua_createtable($L, $0, 1);
 _lua_pushinteger($L, $0);
 _lua_setfield($L, -2, 10176);
 if (($0 | 0) <= 0) return 1;
 _lua_pushvalue($L, 1);
 _lua_rawseti($L, -2, 1);
 _lua_replace($L, 1);
 if (($0 | 0) > 1) $i$01 = $0; else return 1;
 do {
  _lua_rawseti($L, 1, $i$01);
  $i$01 = $i$01 + -1 | 0;
 } while (($i$01 | 0) > 1);
 return 1;
}

function _lua_pushlstring($L, $s, $len) {
 $L = $L | 0;
 $s = $s | 0;
 $len = $len | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaS_newlstr($L, $s, $len) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 8 >> 2] = HEAPU8[$5 + 4 >> 0] | 0 | 64;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 16;
 return $5 + 16 | 0;
}

function _luaL_testudata($L, $ud, $tname) {
 $L = $L | 0;
 $ud = $ud | 0;
 $tname = $tname | 0;
 var $$0 = 0, $0 = 0, $5 = 0;
 $0 = _lua_touserdata($L, $ud) | 0;
 if (!$0) {
  $$0 = 0;
  return $$0 | 0;
 }
 if (!(_lua_getmetatable($L, $ud) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_getfield($L, -1001e3, $tname);
 $5 = (_lua_rawequal($L, -1, -2) | 0) == 0;
 _lua_settop($L, -3);
 $$0 = $5 ? 0 : $0;
 return $$0 | 0;
}

function _hookf($L, $ar) {
 $L = $L | 0;
 $ar = $ar | 0;
 var $6 = 0;
 _luaL_getsubtable($L, -1001e3, 6504) | 0;
 _lua_pushthread($L) | 0;
 _lua_rawget($L, -2);
 if ((_lua_type($L, -1) | 0) != 6) return;
 _lua_pushstring($L, HEAP32[6528 + (HEAP32[$ar >> 2] << 2) >> 2] | 0) | 0;
 $6 = HEAP32[$ar + 20 >> 2] | 0;
 if (($6 | 0) > -1) _lua_pushinteger($L, $6); else _lua_pushnil($L);
 _lua_callk($L, 2, 0, 0, 0);
 return;
}

function _str_dump($L) {
 $L = $L | 0;
 var $$0 = 0, $b = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056 | 0;
 $b = sp + 8 | 0;
 _luaL_checktype($L, 1, 6);
 _lua_settop($L, 1);
 _luaL_buffinit($L, $b);
 if (!(_lua_dump($L, 19, $b) | 0)) {
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$0 = _luaL_error($L, 9872, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_execresult($L, $stat) {
 $L = $L | 0;
 $stat = $stat | 0;
 var $1 = 0;
 if (!$stat) _lua_pushboolean($L, 1); else if (($stat | 0) == -1) {
  $1 = HEAP32[(___errno_location() | 0) >> 2] | 0;
  _lua_pushnil($L);
  _lua_pushstring($L, _strerror($1 | 0) | 0) | 0;
  _lua_pushinteger($L, $1);
  return 3;
 } else _lua_pushnil($L);
 _lua_pushstring($L, 8528) | 0;
 _lua_pushinteger($L, $stat);
 return 3;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function ___memrchr($m, $c, $n) {
 $m = $m | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0 = 0, $$01 = 0, $0 = 0, $3 = 0, label = 0;
 $0 = $c & 255;
 $$01 = $n;
 while (1) {
  if (!$$01) {
   $$0 = 0;
   label = 4;
   break;
  }
  $$01 = $$01 + -1 | 0;
  $3 = $m + $$01 | 0;
  if ((HEAP8[$3 >> 0] | 0) == $0 << 24 >> 24) {
   $$0 = $3;
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) return $$0 | 0;
 return 0;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _luaL_getmetafield($L, $obj, $event) {
 $L = $L | 0;
 $obj = $obj | 0;
 $event = $event | 0;
 var $$0 = 0;
 if (!(_lua_getmetatable($L, $obj) | 0)) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_pushstring($L, $event) | 0;
 _lua_rawget($L, -2);
 if (!(_lua_type($L, -1) | 0)) {
  _lua_settop($L, -3);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_remove($L, -2);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _luaE_freeCI($L) {
 $L = $L | 0;
 var $2 = 0, $3 = 0, $next$01 = 0, $next$01$looptemp = 0;
 $2 = (HEAP32[$L + 16 >> 2] | 0) + 12 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = 0;
 if (!$3) return; else $next$01 = $3;
 do {
  $next$01$looptemp = $next$01;
  $next$01 = HEAP32[$next$01 + 12 >> 2] | 0;
  _luaM_realloc_($L, $next$01$looptemp, 40, 0) | 0;
 } while (($next$01 | 0) != 0);
 return;
}

function _pushglobalfuncname($L, $ar) {
 $L = $L | 0;
 $ar = $ar | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = _lua_gettop($L) | 0;
 _lua_getinfo($L, 10840, $ar) | 0;
 _lua_rawgeti($L, -1001e3, 2);
 $1 = $0 + 1 | 0;
 if (!(_findfield($L, $1, 2) | 0)) {
  _lua_settop($L, $0);
  $$0 = 0;
  return $$0 | 0;
 } else {
  _lua_copy($L, -1, $1);
  _lua_settop($L, -3);
  $$0 = 1;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_getsubtable($L, $idx, $fname) {
 $L = $L | 0;
 $idx = $idx | 0;
 $fname = $fname | 0;
 var $$0 = 0, $2 = 0;
 _lua_getfield($L, $idx, $fname);
 if ((_lua_type($L, -1) | 0) == 5) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_settop($L, -2);
 $2 = _lua_absindex($L, $idx) | 0;
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, $2, $fname);
 $$0 = 0;
 return $$0 | 0;
}

function _math_log($L) {
 $L = $L | 0;
 var $0 = 0.0, $4 = 0.0, $res$0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 do if ((_lua_type($L, 2) | 0) < 1) $res$0 = +Math_log(+$0); else {
  $4 = +_luaL_checknumber($L, 2);
  if ($4 == 10.0) {
   $res$0 = +_log10($0);
   break;
  } else {
   $res$0 = +Math_log(+$0) / +Math_log(+$4);
   break;
  }
 } while (0);
 _lua_pushnumber($L, $res$0);
 return 1;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function _lua_pushfstring($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $5 = 0, $argp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $argp = sp;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 HEAP32[$argp >> 2] = $varargs;
 $5 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _ll_searchpath($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $1 = _luaL_checklstring($L, 2, 0) | 0;
 $2 = _luaL_optlstring($L, 3, 12096, 0) | 0;
 if (_searchpath($L, $0, $1, $2, _luaL_optlstring($L, 4, 10960, 0) | 0) | 0) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 _lua_insert($L, -2);
 $$0 = 2;
 return $$0 | 0;
}

function _lua_newuserdata($L, $size) {
 $L = $L | 0;
 $size = $size | 0;
 var $5 = 0, $6 = 0, $7 = 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 $5 = _luaS_newudata($L, $size, 0) | 0;
 $6 = $L + 8 | 0;
 $7 = HEAP32[$6 >> 2] | 0;
 HEAP32[$7 >> 2] = $5;
 HEAP32[$7 + 8 >> 2] = 71;
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + 16;
 return $5 + 24 | 0;
}

function _luaL_loadbufferx($L, $buff, $size, $name, $mode) {
 $L = $L | 0;
 $buff = $buff | 0;
 $size = $size | 0;
 $name = $name | 0;
 $mode = $mode | 0;
 var $1 = 0, $ls = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ls = sp;
 HEAP32[$ls >> 2] = $buff;
 HEAP32[$ls + 4 >> 2] = $size;
 $1 = _lua_load($L, 20, $ls, $name, $mode) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function _luaF_freeupval($L, $uv) {
 $L = $L | 0;
 $uv = $uv | 0;
 var $4 = 0, $7 = 0;
 if ((HEAP32[$uv + 8 >> 2] | 0) == ($uv + 16 | 0)) {
  _luaM_realloc_($L, $uv, 32, 0) | 0;
  return;
 }
 $4 = $uv + 16 | 0;
 $7 = HEAP32[$4 + 4 >> 2] | 0;
 HEAP32[$7 + 16 >> 2] = HEAP32[$4 >> 2];
 HEAP32[(HEAP32[$4 >> 2] | 0) + 16 + 4 >> 2] = $7;
 _luaM_realloc_($L, $uv, 32, 0) | 0;
 return;
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $4 = 0, $5 = 0, $7 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $5 = HEAP32[$f + 8 >> 2] | 0;
 $7 = $5 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $7;
 if (($lim | 0) != 0 & ($7 | 0) > ($lim | 0)) {
  HEAP32[$f + 100 >> 2] = $4 + $lim;
  return;
 } else {
  HEAP32[$f + 100 >> 2] = $5;
  return;
 }
}

function _error($S, $why) {
 $S = $S | 0;
 $why = $why | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[$S >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = HEAP32[$S + 12 >> 2];
 HEAP32[$vararg_buffer + 4 >> 2] = $why;
 _luaO_pushfstring($0, 3560, $vararg_buffer) | 0;
 _luaD_throw(HEAP32[$S >> 2] | 0, 3);
}

function _luaF_newLclosure($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $$in = 0, $2 = 0, $7 = 0;
 $2 = _luaC_newobj($L, 6, ($n << 2) + 16 | 0, 0, 0) | 0;
 HEAP32[$2 + 12 >> 2] = 0;
 HEAP8[$2 + 6 >> 0] = $n;
 if (!$n) return $2 | 0;
 $7 = $2 + 16 | 0;
 $$in = $n;
 do {
  $$in = $$in + -1 | 0;
  HEAP32[$7 + ($$in << 2) >> 2] = 0;
 } while (($$in | 0) != 0);
 return $2 | 0;
}

function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 11416;
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0;
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0;
 $9 = tempRet0;
 $10 = 11416;
 HEAP32[$10 >> 2] = $8;
 HEAP32[$10 + 4 >> 2] = $9;
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0;
 return $14 | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _io_tmpfile($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $5 = 0;
 $0 = _lua_newuserdata($L, 8) | 0;
 $1 = $0 + 4 | 0;
 HEAP32[$1 >> 2] = 0;
 _luaL_setmetatable($L, 7088);
 HEAP32[$0 >> 2] = 0;
 HEAP32[$1 >> 2] = 165;
 $2 = _tmpfile() | 0;
 HEAP32[$0 >> 2] = $2;
 if ($2) {
  $5 = 1;
  return $5 | 0;
 }
 $5 = _luaL_fileresult($L, 0, 0) | 0;
 return $5 | 0;
}

function _lua_dump($L, $writer, $data) {
 $L = $L | 0;
 $writer = $writer | 0;
 $data = $data | 0;
 var $1 = 0, $status$0 = 0;
 $1 = HEAP32[$L + 8 >> 2] | 0;
 if ((HEAP32[$1 + -8 >> 2] | 0) != 70) {
  $status$0 = 1;
  return $status$0 | 0;
 }
 $status$0 = _luaU_dump($L, HEAP32[(HEAP32[$1 + -16 >> 2] | 0) + 12 >> 2] | 0, $writer, $data, 0) | 0;
 return $status$0 | 0;
}

function _resume_error($L, $msg, $firstArg) {
 $L = $L | 0;
 $msg = $msg | 0;
 $firstArg = $firstArg | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 HEAP32[$0 >> 2] = $firstArg;
 $1 = _luaS_new($L, $msg) | 0;
 HEAP32[$firstArg >> 2] = $1;
 HEAP32[$firstArg + 8 >> 2] = HEAPU8[$1 + 4 >> 0] | 0 | 64;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 16;
 _luaD_throw($L, -1);
}

function _finishpcall($L, $status) {
 $L = $L | 0;
 $status = $status | 0;
 var $$0 = 0;
 if (!(_lua_checkstack($L, 1) | 0)) {
  _lua_settop($L, 0);
  _lua_pushboolean($L, 0);
  _lua_pushstring($L, 4984) | 0;
  $$0 = 2;
  return $$0 | 0;
 } else {
  _lua_pushboolean($L, $status);
  _lua_replace($L, 1);
  $$0 = _lua_gettop($L) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _b_rshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0;
 $0 = _luaL_checkunsigned($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) > 0) {
  $$1$i = ($1 | 0) > 31 ? 0 : $0 >>> $1;
  _lua_pushunsigned($L, $$1$i);
  return 1;
 } else {
  $$1$i = ($1 | 0) < -31 ? 0 : $0 << 0 - $1;
  _lua_pushunsigned($L, $$1$i);
  return 1;
 }
 return 0;
}

function _error_expected($ls, $token) {
 $ls = $ls | 0;
 $token = $token | 0;
 var $1 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $1 = HEAP32[$ls + 52 >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = _luaX_token2str($ls, $token) | 0;
 _luaX_syntaxerror($ls, _luaO_pushfstring($1, 2424, $vararg_buffer) | 0);
}

function _luaT_gettm($events, $event, $ename) {
 $events = $events | 0;
 $event = $event | 0;
 $ename = $ename | 0;
 var $$0 = 0, $0 = 0, $5 = 0;
 $0 = _luaH_getstr($events, $ename) | 0;
 if (HEAP32[$0 + 8 >> 2] | 0) {
  $$0 = $0;
  return $$0 | 0;
 }
 $5 = $events + 6 | 0;
 HEAP8[$5 >> 0] = HEAPU8[$5 >> 0] | 0 | 1 << $event;
 $$0 = 0;
 return $$0 | 0;
}

function _os_tmpname($L) {
 $L = $L | 0;
 var $$0 = 0, $buff = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $buff = sp + 4 | 0;
 if (!(_tmpnam($buff | 0) | 0)) {
  $$0 = _luaL_error($L, 8584, sp) | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  _lua_pushstring($L, $buff) | 0;
  $$0 = 1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _luaK_codek($fs, $reg, $k) {
 $fs = $fs | 0;
 $reg = $reg | 0;
 $k = $k | 0;
 var $$0 = 0, $1 = 0, $7 = 0;
 $1 = $reg << 6;
 if (($k | 0) < 262144) {
  $$0 = _luaK_code($fs, $1 | $k << 14 | 1) | 0;
  return $$0 | 0;
 } else {
  $7 = _luaK_code($fs, $1 | 2) | 0;
  _luaK_code($fs, $k << 6 | 39) | 0;
  $$0 = $7;
  return $$0 | 0;
 }
 return 0;
}

function _luaL_pushresultsize($B, $sz) {
 $B = $B | 0;
 $sz = $sz | 0;
 var $0 = 0, $2 = 0, $4 = 0;
 $0 = $B + 8 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) + $sz | 0;
 HEAP32[$0 >> 2] = $2;
 $4 = HEAP32[$B + 12 >> 2] | 0;
 _lua_pushlstring($4, HEAP32[$B >> 2] | 0, $2) | 0;
 if ((HEAP32[$B >> 2] | 0) == ($B + 16 | 0)) return;
 _lua_remove($4, -2);
 return;
}

function _luaL_len($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $0 = 0, $isnum = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $isnum = sp + 4 | 0;
 _lua_len($L, $idx);
 $0 = _lua_tointegerx($L, -1, $isnum) | 0;
 if (!(HEAP32[$isnum >> 2] | 0)) _luaL_error($L, 4208, sp) | 0;
 _lua_settop($L, -2);
 STACKTOP = sp;
 return $0 | 0;
}

function _ll_loadlib($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $2 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 $2 = _ll_loadfunc($L, $0, _luaL_checklstring($L, 2, 0) | 0) | 0;
 if (!$2) {
  $$0 = 1;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 _lua_insert($L, -2);
 _lua_pushstring($L, ($2 | 0) == 1 ? 11248 : 11256) | 0;
 $$0 = 3;
 return $$0 | 0;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function _f_write($L) {
 $L = $L | 0;
 var $0 = 0, $4 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $4 = HEAP32[$0 >> 2] | 0;
 _lua_pushvalue($L, 1);
 $5 = _g_write($L, $4, 2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _luaB_auxwrap($L) {
 $L = $L | 0;
 var $0 = 0, $2 = 0;
 $0 = _lua_tothread($L, -1001001) | 0;
 $2 = _auxresume($L, $0, _lua_gettop($L) | 0) | 0;
 if (($2 | 0) >= 0) return $2 | 0;
 if (!(_lua_isstring($L, -1) | 0)) _lua_error($L) | 0;
 _luaL_where($L, 1);
 _lua_insert($L, -2);
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function _luaopen_string($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 14);
 _luaL_setfuncs($L, 8920, 0);
 _lua_createtable($L, 0, 1);
 _lua_pushlstring($L, 10072, 0) | 0;
 _lua_pushvalue($L, -2);
 _lua_setmetatable($L, -2) | 0;
 _lua_settop($L, -2);
 _lua_pushvalue($L, -2);
 _lua_setfield($L, -2, 11240);
 _lua_settop($L, -2);
 return 1;
}

function _b_rrot($L) {
 $L = $L | 0;
 var $1 = 0, $2 = 0, $3 = 0, $r$0$i = 0;
 $1 = 0 - (_luaL_checkinteger($L, 2) | 0) | 0;
 $2 = _luaL_checkunsigned($L, 1) | 0;
 $3 = $1 & 31;
 if (!$3) {
  $r$0$i = $2;
  _lua_pushunsigned($L, $r$0$i);
  return 1;
 }
 $r$0$i = $2 >>> (32 - $3 | 0) | $2 << $3;
 _lua_pushunsigned($L, $r$0$i);
 return 1;
}

function _panic($L) {
 $L = $L | 0;
 var $0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr >> 2] | 0;
 HEAP32[$vararg_buffer >> 2] = _lua_tolstring($L, -1, 0) | 0;
 _fprintf($0 | 0, 4488, $vararg_buffer | 0) | 0;
 _fflush($0 | 0) | 0;
 STACKTOP = sp;
 return 0;
}

function _f_gc($L) {
 $L = $L | 0;
 var $0 = 0, $7 = 0, $8 = 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) return 0;
 if (!(HEAP32[$0 >> 2] | 0)) return 0;
 $7 = (_luaL_checkudata($L, 1, 7088) | 0) + 4 | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 HEAP32[$7 >> 2] = 0;
 FUNCTION_TABLE_ii[$8 & 255]($L) | 0;
 return 0;
}

function _luaC_barrier_($L, $o, $v) {
 $L = $L | 0;
 $o = $o | 0;
 $v = $v | 0;
 var $1 = 0, $5 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 if ((HEAPU8[$1 + 61 >> 0] | 0) < 2) {
  _reallymarkobject($1, $v);
  return;
 } else {
  $5 = $o + 5 | 0;
  HEAP8[$5 >> 0] = (HEAPU8[$1 + 60 >> 0] | 0) & 3 | (HEAPU8[$5 >> 0] | 0) & 184;
  return;
 }
}

function _db_setupvalue($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0;
 _luaL_checkany($L, 3);
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 $1 = _lua_setupvalue($L, 1, $0) | 0;
 if (!$1) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 _lua_pushstring($L, $1) | 0;
 _lua_insert($L, -1);
 $$0$i = 1;
 return $$0$i | 0;
}

function _luaL_newmetatable($L, $tname) {
 $L = $L | 0;
 $tname = $tname | 0;
 var $$0 = 0;
 _lua_getfield($L, -1001e3, $tname);
 if (_lua_type($L, -1) | 0) {
  $$0 = 0;
  return $$0 | 0;
 }
 _lua_settop($L, -2);
 _lua_createtable($L, 0, 0);
 _lua_pushvalue($L, -1);
 _lua_setfield($L, -1001e3, $tname);
 $$0 = 1;
 return $$0 | 0;
}

function _f_flush($L) {
 $L = $L | 0;
 var $0 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $8 = _luaL_fileresult($L, (_fflush(HEAP32[$0 >> 2] | 0) | 0) == 0 & 1, 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _b_lrot($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $2 = 0, $r$0$i = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 $1 = _luaL_checkunsigned($L, 1) | 0;
 $2 = $0 & 31;
 if (!$2) {
  $r$0$i = $1;
  _lua_pushunsigned($L, $r$0$i);
  return 1;
 }
 $r$0$i = $1 >>> (32 - $2 | 0) | $1 << $2;
 _lua_pushunsigned($L, $r$0$i);
 return 1;
}

function _luaK_checkstack($fs, $n) {
 $fs = $fs | 0;
 $n = $n | 0;
 var $3 = 0, $5 = 0;
 $3 = (HEAPU8[$fs + 48 >> 0] | 0) + $n | 0;
 $5 = (HEAP32[$fs >> 2] | 0) + 78 | 0;
 if (($3 | 0) <= (HEAPU8[$5 >> 0] | 0 | 0)) return;
 if (($3 | 0) > 249) _luaX_syntaxerror(HEAP32[$fs + 12 >> 2] | 0, 48);
 HEAP8[$5 >> 0] = $3;
 return;
}

function _luaL_loadstring($L, $s) {
 $L = $L | 0;
 $s = $s | 0;
 var $0 = 0, $2 = 0, $ls$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ls$i = sp;
 $0 = _strlen($s | 0) | 0;
 HEAP32[$ls$i >> 2] = $s;
 HEAP32[$ls$i + 4 >> 2] = $0;
 $2 = _lua_load($L, 20, $ls$i, $s, 0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _io_type($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checkany($L, 1);
 $0 = _luaL_testudata($L, 1, 7088) | 0;
 if (!$0) {
  _lua_pushnil($L);
  return 1;
 }
 if (!(HEAP32[$0 + 4 >> 2] | 0)) {
  _lua_pushlstring($L, 7752, 11) | 0;
  return 1;
 } else {
  _lua_pushlstring($L, 7768, 4) | 0;
  return 1;
 }
 return 0;
}

function _testSetjmp(id, table, size) {
 id = id | 0;
 table = table | 0;
 size = size | 0;
 var i = 0, curr = 0;
 while ((i | 0) < (size | 0)) {
  curr = HEAP32[table + (i << 3) >> 2] | 0;
  if (!curr) break;
  if ((curr | 0) == (id | 0)) return HEAP32[table + ((i << 3) + 4) >> 2] | 0;
  i = i + 1 | 0;
 }
 return 0;
}

function _luaH_free($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 var $1 = 0;
 $1 = HEAP32[$t + 16 >> 2] | 0;
 if (($1 | 0) != 3040) _luaM_realloc_($L, $1, 32 << (HEAPU8[$t + 7 >> 0] | 0), 0) | 0;
 _luaM_realloc_($L, HEAP32[$t + 12 >> 2] | 0, HEAP32[$t + 28 >> 2] << 4, 0) | 0;
 _luaM_realloc_($L, $t, 32, 0) | 0;
 return;
}

function _b_lshift($L) {
 $L = $L | 0;
 var $$1$i = 0, $0 = 0, $1 = 0;
 $0 = _luaL_checkunsigned($L, 1) | 0;
 $1 = _luaL_checkinteger($L, 2) | 0;
 if (($1 | 0) < 0) if (($1 | 0) < -31) $$1$i = 0; else $$1$i = $0 >>> (0 - $1 | 0); else $$1$i = ($1 | 0) > 31 ? 0 : $0 << $1;
 _lua_pushunsigned($L, $$1$i);
 return 1;
}

function _luaS_newudata($L, $s, $e) {
 $L = $L | 0;
 $s = $s | 0;
 $e = $e | 0;
 var $2 = 0;
 if ($s >>> 0 > 4294967269) _luaM_toobig($L); else {
  $2 = _luaC_newobj($L, 7, $s + 24 | 0, 0, 0) | 0;
  HEAP32[$2 + 16 >> 2] = $s;
  HEAP32[$2 + 8 >> 2] = 0;
  HEAP32[$2 + 12 >> 2] = $e;
  return $2 | 0;
 }
 return 0;
}

function _luaX_init($L) {
 $L = $L | 0;
 var $2 = 0, $3 = 0, $i$01 = 0;
 $i$01 = 0;
 do {
  $2 = _luaS_new($L, HEAP32[1024 + ($i$01 << 2) >> 2] | 0) | 0;
  $3 = $2 + 5 | 0;
  HEAP8[$3 >> 0] = HEAPU8[$3 >> 0] | 0 | 32;
  $i$01 = $i$01 + 1 | 0;
  HEAP8[$2 + 6 >> 0] = $i$01;
 } while (($i$01 | 0) != 22);
 return;
}

function _luaO_pushfstring($L, $fmt, $varargs) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $argp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $argp = sp;
 HEAP32[$argp >> 2] = $varargs;
 $0 = _luaO_pushvfstring($L, $fmt, $argp) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _db_getupvalue($L) {
 $L = $L | 0;
 var $$0$i = 0, $0 = 0, $1 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 6);
 $1 = _lua_getupvalue($L, 1, $0) | 0;
 if (!$1) {
  $$0$i = 0;
  return $$0$i | 0;
 }
 _lua_pushstring($L, $1) | 0;
 _lua_insert($L, -2);
 $$0$i = 2;
 return $$0$i | 0;
}

function _luaH_new($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaC_newobj($L, 5, 32, 0, 0) | 0;
 HEAP32[$0 + 8 >> 2] = 0;
 HEAP8[$0 + 6 >> 0] = -1;
 HEAP32[$0 + 12 >> 2] = 0;
 HEAP32[$0 + 28 >> 2] = 0;
 HEAP32[$0 + 16 >> 2] = 3040;
 HEAP8[$0 + 7 >> 0] = 0;
 HEAP32[$0 + 20 >> 2] = 3040;
 return $0 | 0;
}

function _luaC_runtilstate($L, $statesmask) {
 $L = $L | 0;
 $statesmask = $statesmask | 0;
 var $2 = 0;
 $2 = (HEAP32[$L + 12 >> 2] | 0) + 61 | 0;
 if (1 << (HEAPU8[$2 >> 0] | 0) & $statesmask) return;
 do _singlestep($L) | 0; while ((1 << (HEAPU8[$2 >> 0] | 0) & $statesmask | 0) == 0);
 return;
}

function _os_exit($L) {
 $L = $L | 0;
 var $status$0 = 0;
 if ((_lua_type($L, 1) | 0) == 1) $status$0 = (_lua_toboolean($L, 1) | 0) == 0 & 1; else $status$0 = _luaL_optinteger($L, 1, 0) | 0;
 if (_lua_toboolean($L, 2) | 0) _lua_close($L);
 if (!$L) return 0; else _exit($status$0 | 0);
 return 0;
}

function _getS($L, $ud, $size) {
 $L = $L | 0;
 $ud = $ud | 0;
 $size = $size | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $ud + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) {
  $$0 = 0;
  return $$0 | 0;
 }
 HEAP32[$size >> 2] = $1;
 HEAP32[$0 >> 2] = 0;
 $$0 = HEAP32[$ud >> 2] | 0;
 return $$0 | 0;
}

function _f_read($L) {
 $L = $L | 0;
 var $0 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = _luaL_checkudata($L, 1, 7088) | 0;
 if (!(HEAP32[$0 + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 $5 = _g_read($L, HEAP32[$0 >> 2] | 0, 2) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _luaB_xpcall($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _lua_gettop($L) | 0;
 if (($0 | 0) <= 1) _luaL_argerror($L, 2, 4968) | 0;
 _lua_pushvalue($L, 1);
 _lua_copy($L, 2, 1);
 _lua_replace($L, 2);
 return _finishpcall($L, (_lua_pcallk($L, $0 + -2 | 0, -1, 1, 0, 161) | 0) == 0 & 1) | 0;
}

function _luaS_eqlngstr($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $11 = 0;
 $1 = HEAP32[$a + 12 >> 2] | 0;
 if (($a | 0) == ($b | 0)) $11 = 1; else if (($1 | 0) == (HEAP32[$b + 12 >> 2] | 0)) $11 = (_memcmp($a + 16 | 0, $b + 16 | 0, $1) | 0) == 0; else $11 = 0;
 return $11 & 1 | 0;
}

function _lua_getctx($L, $ctx) {
 $L = $L | 0;
 $ctx = $ctx | 0;
 var $$0 = 0, $1 = 0;
 $1 = HEAP32[$L + 16 >> 2] | 0;
 if (!(HEAP8[$1 + 18 >> 0] & 8)) {
  $$0 = 0;
  return $$0 | 0;
 }
 if ($ctx) HEAP32[$ctx >> 2] = HEAP32[$1 + 24 >> 2];
 $$0 = HEAPU8[$1 + 37 >> 0] | 0;
 return $$0 | 0;
}

function _os_execute($L) {
 $L = $L | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 $1 = _system($0 | 0) | 0;
 if (!$0) {
  _lua_pushboolean($L, $1);
  $$0 = 1;
  return $$0 | 0;
 } else {
  $$0 = _luaL_execresult($L, $1) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _luaK_stringK($fs, $s) {
 $fs = $fs | 0;
 $s = $s | 0;
 var $5 = 0, $o = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $o = sp;
 HEAP32[$o >> 2] = $s;
 HEAP32[$o + 8 >> 2] = HEAPU8[$s + 4 >> 0] | 0 | 64;
 $5 = _addk($fs, $o, $o) | 0;
 STACKTOP = sp;
 return $5 | 0;
}

function _luaB_error($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optinteger($L, 2, 1) | 0;
 _lua_settop($L, 1);
 if (!(($0 | 0) > 0 & (_lua_isstring($L, 1) | 0) != 0)) _lua_error($L) | 0;
 _luaL_where($L, $0);
 _lua_pushvalue($L, 1);
 _lua_concat($L, 2);
 _lua_error($L) | 0;
 return 0;
}

function _luaK_indexed($fs, $t, $k) {
 $fs = $fs | 0;
 $t = $t | 0;
 $k = $k | 0;
 var $0 = 0;
 $0 = $t + 8 | 0;
 HEAP8[$0 + 2 >> 0] = HEAP32[$0 >> 2];
 HEAP16[$0 >> 1] = _luaK_exp2RK($fs, $k) | 0;
 HEAP8[$0 + 3 >> 0] = (HEAP32[$t >> 2] | 0) == 8 ? 8 : 7;
 HEAP32[$t >> 2] = 9;
 return;
}

function _lua_pushthread($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $L;
 HEAP32[$1 + 8 >> 2] = 72;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 16;
 return (HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 172 >> 2] | 0) == ($L | 0) | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _luaC_barrierback_($L, $o) {
 $L = $L | 0;
 $o = $o | 0;
 var $1 = 0, $2 = 0, $7 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 $2 = $o + 5 | 0;
 HEAP8[$2 >> 0] = (HEAPU8[$2 >> 0] | 0) & 251;
 $7 = $1 + 88 | 0;
 HEAP32[$o + 24 >> 2] = HEAP32[$7 >> 2];
 HEAP32[$7 >> 2] = $o;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _luaL_unref($L, $t, $ref) {
 $L = $L | 0;
 $t = $t | 0;
 $ref = $ref | 0;
 var $1 = 0;
 if (($ref | 0) <= -1) return;
 $1 = _lua_absindex($L, $t) | 0;
 _lua_rawgeti($L, $1, 0);
 _lua_rawseti($L, $1, $ref);
 _lua_pushinteger($L, $ref);
 _lua_rawseti($L, $1, 0);
 return;
}

function _l_alloc($ud, $ptr, $osize, $nsize) {
 $ud = $ud | 0;
 $ptr = $ptr | 0;
 $osize = $osize | 0;
 $nsize = $nsize | 0;
 var $$0 = 0;
 if (!$nsize) {
  _free($ptr);
  $$0 = 0;
  return $$0 | 0;
 } else {
  $$0 = _realloc($ptr, $nsize) | 0;
  return $$0 | 0;
 }
 return 0;
}

function _lua_absindex($L, $idx) {
 $L = $L | 0;
 $idx = $idx | 0;
 var $11 = 0;
 if (($idx + 1000999 | 0) >>> 0 > 1000999) {
  $11 = $idx;
  return $11 | 0;
 }
 $11 = ((HEAP32[$L + 8 >> 2] | 0) - (HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0) >> 4) + $idx | 0;
 return $11 | 0;
}

function _luaB_dofile($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 _lua_settop($L, 1);
 if (!(_luaL_loadfilex($L, $0, 0) | 0)) {
  _lua_callk($L, 0, -1, 0, 159);
  return (_lua_gettop($L) | 0) + -1 | 0;
 } else _lua_error($L) | 0;
 return 0;
}

function _ll_seeall($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 if (!(_lua_getmetatable($L, 1) | 0)) {
  _lua_createtable($L, 0, 1);
  _lua_pushvalue($L, -1);
  _lua_setmetatable($L, 1) | 0;
 }
 _lua_rawgeti($L, -1001e3, 2);
 _lua_setfield($L, -2, 11240);
 return 0;
}

function _gctm($L) {
 $L = $L | 0;
 var $0 = 0, $n$01 = 0;
 $0 = _luaL_len($L, 1) | 0;
 if (($0 | 0) > 0) $n$01 = $0; else return 0;
 while (1) {
  _lua_rawgeti($L, 1, $n$01);
  _lua_settop($L, -2);
  if (($n$01 | 0) > 1) $n$01 = $n$01 + -1 | 0; else break;
 }
 return 0;
}

function _math_modf($L) {
 $L = $L | 0;
 var $1 = 0.0, $ip = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ip = sp;
 $1 = +_modf(+_luaL_checknumber($L, 1), $ip);
 _lua_pushnumber($L, +HEAPF64[$ip >> 3]);
 _lua_pushnumber($L, $1);
 STACKTOP = sp;
 return 2;
}

function _ipairsaux($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0, $3 = 0;
 $0 = _luaL_checkinteger($L, 2) | 0;
 _luaL_checktype($L, 1, 5);
 $1 = $0 + 1 | 0;
 _lua_pushinteger($L, $1);
 _lua_rawgeti($L, 1, $1);
 $3 = (_lua_type($L, -1) | 0) == 0;
 return ($3 ? 1 : 2) | 0;
}

function _luaZ_init($L, $z, $reader, $data) {
 $L = $L | 0;
 $z = $z | 0;
 $reader = $reader | 0;
 $data = $data | 0;
 HEAP32[$z + 16 >> 2] = $L;
 HEAP32[$z + 8 >> 2] = $reader;
 HEAP32[$z + 12 >> 2] = $data;
 HEAP32[$z >> 2] = 0;
 HEAP32[$z + 4 >> 2] = 0;
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function _db_setuservalue($L) {
 $L = $L | 0;
 if ((_lua_type($L, 1) | 0) == 2) _luaL_argerror($L, 1, 6592) | 0;
 _luaL_checktype($L, 1, 7);
 if ((_lua_type($L, 2) | 0) >= 1) _luaL_checktype($L, 2, 5);
 _lua_settop($L, 2);
 _lua_setuservalue($L, 1);
 return 1;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _lua_pushunsigned($L, $u) {
 $L = $L | 0;
 $u = $u | 0;
 var $4 = 0, $5 = 0;
 $4 = $L + 8 | 0;
 $5 = HEAP32[$4 >> 2] | 0;
 HEAPF64[$5 >> 3] = ($u | 0) > -1 ? +($u | 0) : +($u >>> 0);
 HEAP32[$5 + 8 >> 2] = 3;
 HEAP32[$4 >> 2] = $5 + 16;
 return;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function _sort($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checktype($L, 1, 5);
 $0 = _luaL_len($L, 1) | 0;
 _luaL_checkstack($L, 40, 10072);
 if ((_lua_type($L, 2) | 0) >= 1) _luaL_checktype($L, 2, 6);
 _lua_settop($L, 2);
 _auxsort($L, 1, $0);
 return 0;
}

function _math_frexp($L) {
 $L = $L | 0;
 var $e = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $e = sp;
 _lua_pushnumber($L, +_frexp(+_luaL_checknumber($L, 1), $e));
 _lua_pushinteger($L, HEAP32[$e >> 2] | 0);
 STACKTOP = sp;
 return 2;
}

function _luaL_pushresult($B) {
 $B = $B | 0;
 var $1 = 0;
 $1 = HEAP32[$B + 12 >> 2] | 0;
 _lua_pushlstring($1, HEAP32[$B >> 2] | 0, HEAP32[$B + 8 >> 2] | 0) | 0;
 if ((HEAP32[$B >> 2] | 0) == ($B + 16 | 0)) return;
 _lua_remove($1, -2);
 return;
}

function _luaH_set($L, $t, $key) {
 $L = $L | 0;
 $t = $t | 0;
 $key = $key | 0;
 var $$0 = 0, $0 = 0;
 $0 = _luaH_get($t, $key) | 0;
 if (($0 | 0) != 1832) {
  $$0 = $0;
  return $$0 | 0;
 }
 $$0 = _luaH_newkey($L, $t, $key) | 0;
 return $$0 | 0;
}

function _luaH_resizearray($L, $t, $nasize) {
 $L = $L | 0;
 $t = $t | 0;
 $nasize = $nasize | 0;
 var $7 = 0;
 if ((HEAP32[$t + 16 >> 2] | 0) == 3040) $7 = 0; else $7 = 1 << (HEAPU8[$t + 7 >> 0] | 0);
 _luaH_resize($L, $t, $nasize, $7);
 return;
}

function _luaopen_base($L) {
 $L = $L | 0;
 _lua_rawgeti($L, -1001e3, 2);
 _lua_rawgeti($L, -1001e3, 2);
 _lua_setfield($L, -2, 11264);
 _luaL_setfuncs($L, 4544, 0);
 _lua_pushlstring($L, 4736, 7) | 0;
 _lua_setfield($L, -2, 4744);
 return 1;
}

function _luaopen_math($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 28);
 _luaL_setfuncs($L, 7864, 0);
 _lua_pushnumber($L, 3.141592653589793);
 _lua_setfield($L, -2, 8096);
 _lua_pushnumber($L, inf);
 _lua_setfield($L, -2, 8104);
 return 1;
}

function _f_lines($L) {
 $L = $L | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) + 4 >> 2] | 0)) _luaL_error($L, 7368, sp) | 0;
 _aux_lines($L, 0);
 STACKTOP = sp;
 return 1;
}

function _lua_pushlightuserdata($L, $p) {
 $L = $L | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = $p;
 HEAP32[$1 + 8 >> 2] = 2;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 16;
 return;
}

function _luaG_aritherror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $1 = (_luaV_tonumber($p1, sp) | 0) == 0;
 _luaG_typeerror($L, $1 ? $p1 : $p2, 600);
}

function _luaE_setdebt($g, $debt) {
 $g = $g | 0;
 $debt = $debt | 0;
 var $0 = 0, $2 = 0;
 $0 = $g + 12 | 0;
 $2 = $g + 8 | 0;
 HEAP32[$2 >> 2] = (HEAP32[$0 >> 2] | 0) - $debt + (HEAP32[$2 >> 2] | 0);
 HEAP32[$0 >> 2] = $debt;
 return;
}

function _luaE_extendCI($L) {
 $L = $L | 0;
 var $0 = 0, $2 = 0;
 $0 = _luaM_realloc_($L, 0, 0, 40) | 0;
 $2 = HEAP32[$L + 16 >> 2] | 0;
 HEAP32[$2 + 12 >> 2] = $0;
 HEAP32[$0 + 8 >> 2] = $2;
 HEAP32[$0 + 12 >> 2] = 0;
 return $0 | 0;
}

function _os_setlocale($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_optlstring($L, 1, 0, 0) | 0;
 _lua_pushstring($L, _setlocale(HEAP32[8760 + ((_luaL_checkoption($L, 2, 8720, 8728) | 0) << 2) >> 2] | 0, $0 | 0) | 0) | 0;
 return 1;
}

function _lua_pushboolean($L, $b) {
 $L = $L | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 >> 2] = ($b | 0) != 0 & 1;
 HEAP32[$1 + 8 >> 2] = 1;
 HEAP32[$0 >> 2] = $1 + 16;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function _luaK_exp2val($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 if ((HEAP32[$e + 16 >> 2] | 0) == (HEAP32[$e + 20 >> 2] | 0)) {
  _luaK_dischargevars($fs, $e);
  return;
 } else {
  _luaK_exp2anyreg($fs, $e) | 0;
  return;
 }
}

function _lua_pushvfstring($L, $fmt, $argp) {
 $L = $L | 0;
 $fmt = $fmt | 0;
 $argp = $argp | 0;
 if ((HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 12 >> 2] | 0) > 0) _luaC_step($L);
 return _luaO_pushvfstring($L, $fmt, $argp) | 0;
}

function _lua_pushinteger($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAPF64[$1 >> 3] = +($n | 0);
 HEAP32[$1 + 8 >> 2] = 3;
 HEAP32[$0 >> 2] = $1 + 16;
 return;
}

function _str_len($L) {
 $L = $L | 0;
 var $l = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $l = sp;
 _luaL_checklstring($L, 1, $l) | 0;
 _lua_pushinteger($L, HEAP32[$l >> 2] | 0);
 STACKTOP = sp;
 return 1;
}

function _db_setmetatable($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _lua_type($L, 2) | 0;
 if (!(($0 | 0) == 0 | ($0 | 0) == 5)) _luaL_argerror($L, 2, 6456) | 0;
 _lua_settop($L, 2);
 _lua_setmetatable($L, 1) | 0;
 return 1;
}

function _lua_getallocf($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 var $$pre = 0;
 $$pre = $L + 12 | 0;
 if ($ud) HEAP32[$ud >> 2] = HEAP32[(HEAP32[$$pre >> 2] | 0) + 4 >> 2];
 return HEAP32[HEAP32[$$pre >> 2] >> 2] | 0;
}

function _luaB_getmetatable($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 if (!(_lua_getmetatable($L, 1) | 0)) {
  _lua_pushnil($L);
  return 1;
 } else {
  _luaL_getmetafield($L, 1, 5032) | 0;
  return 1;
 }
 return 0;
}

function _luaB_pcall($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _lua_pushnil($L);
 _lua_insert($L, 1);
 return _finishpcall($L, (_lua_pcallk($L, (_lua_gettop($L) | 0) + -2 | 0, -1, 0, 0, 161) | 0) == 0 & 1) | 0;
}

function _lua_pushnumber($L, $n) {
 $L = $L | 0;
 $n = +$n;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAPF64[$1 >> 3] = $n;
 HEAP32[$1 + 8 >> 2] = 3;
 HEAP32[$0 >> 2] = $1 + 16;
 return;
}

function _luaK_exp2anyregup($fs, $e) {
 $fs = $fs | 0;
 $e = $e | 0;
 if ((HEAP32[$e >> 2] | 0) == 8) if ((HEAP32[$e + 16 >> 2] | 0) == (HEAP32[$e + 20 >> 2] | 0)) return;
 _luaK_exp2anyreg($fs, $e) | 0;
 return;
}

function _lua_atpanic($L, $panicf) {
 $L = $L | 0;
 $panicf = $panicf | 0;
 var $2 = 0, $3 = 0;
 $2 = (HEAP32[$L + 12 >> 2] | 0) + 168 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 HEAP32[$2 >> 2] = $panicf;
 return $3 | 0;
}

function _luaB_next($L) {
 $L = $L | 0;
 var $$0 = 0;
 _luaL_checktype($L, 1, 5);
 _lua_settop($L, 2);
 if (_lua_next($L, 1) | 0) {
  $$0 = 2;
  return $$0 | 0;
 }
 _lua_pushnil($L);
 $$0 = 1;
 return $$0 | 0;
}

function _luaG_concaterror($L, $p1, $p2) {
 $L = $L | 0;
 $p1 = $p1 | 0;
 $p2 = $p2 | 0;
 var $1 = 0;
 $1 = HEAP32[$p1 + 8 >> 2] | 0;
 _luaG_typeerror($L, ($1 | 0) == 3 | ($1 & 15 | 0) == 4 ? $p2 : $p1, 584);
}

function _isxdigit($c) {
 $c = $c | 0;
 var $3 = 0, $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) {
  $4 = 1;
  $3 = $4 & 1;
  return $3 | 0;
 }
 $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 $3 = $4 & 1;
 return $3 | 0;
}

function _luaC_step($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 if (!(HEAP8[$1 + 63 >> 0] | 0)) {
  _luaE_setdebt($1, -1600);
  return;
 } else {
  _luaC_forcestep($L);
  return;
 }
}

function _luaB_cowrap($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checktype($L, 1, 6);
 $0 = _lua_newthread($L) | 0;
 _lua_pushvalue($L, 1);
 _lua_xmove($L, $0, 1);
 _lua_pushcclosure($L, 162, 1);
 return 1;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 31](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _gmatch($L) {
 $L = $L | 0;
 _luaL_checklstring($L, 1, 0) | 0;
 _luaL_checklstring($L, 2, 0) | 0;
 _lua_settop($L, 2);
 _lua_pushinteger($L, 0);
 _lua_pushcclosure($L, 167, 3);
 return 1;
}

function _os_rename($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 return _luaL_fileresult($L, (_rename($0 | 0, _luaL_checklstring($L, 2, 0) | 0) | 0) == 0 & 1, 0) | 0;
}

function _luaK_fixline($fs, $line) {
 $fs = $fs | 0;
 $line = $line | 0;
 HEAP32[(HEAP32[(HEAP32[$fs >> 2] | 0) + 20 >> 2] | 0) + ((HEAP32[$fs + 20 >> 2] | 0) + -1 << 2) >> 2] = $line;
 return;
}

function _lua_setallocf($L, $f, $ud) {
 $L = $L | 0;
 $f = $f | 0;
 $ud = $ud | 0;
 var $1 = 0;
 $1 = HEAP32[$L + 12 >> 2] | 0;
 HEAP32[$1 + 4 >> 2] = $ud;
 HEAP32[$1 >> 2] = $f;
 return;
}

function _luaK_codeABC($fs, $o, $a, $b, $c) {
 $fs = $fs | 0;
 $o = $o | 0;
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 return _luaK_code($fs, $a << 6 | $o | $b << 23 | $c << 14) | 0;
}

function _luaL_buffinit($L, $B) {
 $L = $L | 0;
 $B = $B | 0;
 HEAP32[$B + 12 >> 2] = $L;
 HEAP32[$B >> 2] = $B + 16;
 HEAP32[$B + 8 >> 2] = 0;
 HEAP32[$B + 4 >> 2] = 1024;
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function _os_difftime($L) {
 $L = $L | 0;
 var $1 = 0;
 $1 = ~~+_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +_difftime($1 | 0, ~~+_luaL_optnumber($L, 2, 0.0) | 0));
 return 1;
}

function _luaO_fb2int($x) {
 $x = $x | 0;
 var $$0 = 0, $1 = 0;
 $1 = $x >>> 3 & 31;
 if (!$1) {
  $$0 = $x;
  return $$0 | 0;
 }
 $$0 = ($x & 7 | 8) << $1 + -1;
 return $$0 | 0;
}

function _luaF_newCclosure($L, $n) {
 $L = $L | 0;
 $n = $n | 0;
 var $2 = 0;
 $2 = _luaC_newobj($L, 38, ($n << 4) + 16 | 0, 0, 0) | 0;
 HEAP8[$2 + 6 >> 0] = $n;
 return $2 | 0;
}

function _luaB_rawlen($L) {
 $L = $L | 0;
 if (((_lua_type($L, 1) | 0) & -2 | 0) != 4) _luaL_argerror($L, 1, 5112) | 0;
 _lua_pushinteger($L, _lua_rawlen($L, 1) | 0);
 return 1;
}

function _db_getuservalue($L) {
 $L = $L | 0;
 if ((_lua_type($L, 1) | 0) == 7) {
  _lua_getuservalue($L, 1);
  return 1;
 } else {
  _lua_pushnil($L);
  return 1;
 }
 return 0;
}

function _lua_version($L) {
 $L = $L | 0;
 var $$0 = 0;
 if (!$L) {
  $$0 = 8;
  return $$0 | 0;
 }
 $$0 = HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 176 >> 2] | 0;
 return $$0 | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _luaK_ret($fs, $first, $nret) {
 $fs = $fs | 0;
 $first = $first | 0;
 $nret = $nret | 0;
 _luaK_code($fs, $first << 6 | ($nret << 23) + 8388608 | 31) | 0;
 return;
}

function _luaF_newupval($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaC_newobj($L, 10, 32, 0, 0) | 0;
 HEAP32[$0 + 8 >> 2] = $0 + 16;
 HEAP32[$0 + 24 >> 2] = 0;
 return $0 | 0;
}

function _luaB_cocreate($L) {
 $L = $L | 0;
 var $0 = 0;
 _luaL_checktype($L, 1, 6);
 $0 = _lua_newthread($L) | 0;
 _lua_pushvalue($L, 1);
 _lua_xmove($L, $0, 1);
 return 1;
}

function _luaopen_table($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 7);
 _luaL_setfuncs($L, 9952, 0);
 _lua_getfield($L, -1, 10016);
 _lua_setglobal($L, 10016);
 return 1;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
}

function _strchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 var $0 = 0;
 $0 = ___strchrnul($s, $c) | 0;
 return ((HEAP8[$0 >> 0] | 0) == ($c & 255) << 24 >> 24 ? $0 : 0) | 0;
}

function _lua_pushnil($L) {
 $L = $L | 0;
 var $0 = 0, $1 = 0;
 $0 = $L + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$0 >> 2] = $1 + 16;
 return;
}

function _luaB_rawset($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 _luaL_checkany($L, 2);
 _luaL_checkany($L, 3);
 _lua_settop($L, 3);
 _lua_rawset($L, 1);
 return 1;
}

function _math_atan2($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +Math_atan2(+$0, +(+_luaL_checknumber($L, 2))));
 return 1;
}

function _io_noclose($L) {
 $L = $L | 0;
 HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) + 4 >> 2] = 163;
 _lua_pushnil($L);
 _lua_pushlstring($L, 7232, 26) | 0;
 return 2;
}

function _math_pow($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +Math_pow(+$0, +(+_luaL_checknumber($L, 2))));
 return 1;
}

function _math_ldexp($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +_ldexp($0, _luaL_checkinteger($L, 2) | 0));
 return 1;
}

function _luaL_checkany($L, $narg) {
 $L = $L | 0;
 $narg = $narg | 0;
 if ((_lua_type($L, $narg) | 0) != -1) return;
 _luaL_argerror($L, $narg, 4968) | 0;
 return;
}

function _os_remove($L) {
 $L = $L | 0;
 var $0 = 0;
 $0 = _luaL_checklstring($L, 1, 0) | 0;
 return _luaL_fileresult($L, (_remove($0 | 0) | 0) == 0 & 1, $0) | 0;
}

function _math_fmod($L) {
 $L = $L | 0;
 var $0 = 0.0;
 $0 = +_luaL_checknumber($L, 1);
 _lua_pushnumber($L, +_fmod($0, +_luaL_checknumber($L, 2)));
 return 1;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function jsCall_iiiii_7(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(7, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_6(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(6, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_5(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(5, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_4(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(4, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_3(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(3, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_2(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(2, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_1(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(1, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function jsCall_iiiii_0(a1, a2, a3, a4) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return jsCall_iiiii(0, a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function _strpbrk($s, $b) {
 $s = $s | 0;
 $b = $b | 0;
 var $1 = 0;
 $1 = $s + (_strcspn($s, $b) | 0) | 0;
 return ((HEAP8[$1 >> 0] | 0) != 0 ? $1 : 0) | 0;
}

function _luaK_codeABx($fs, $o, $a, $bc) {
 $fs = $fs | 0;
 $o = $o | 0;
 $a = $a | 0;
 $bc = $bc | 0;
 return _luaK_code($fs, $a << 6 | $o | $bc << 14) | 0;
}

function _luaL_setmetatable($L, $tname) {
 $L = $L | 0;
 $tname = $tname | 0;
 _lua_getfield($L, -1001e3, $tname);
 _lua_setmetatable($L, -2) | 0;
 return;
}

function _luaB_rawequal($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _luaL_checkany($L, 2);
 _lua_pushboolean($L, _lua_rawequal($L, 1, 2) | 0);
 return 1;
}

function _io_fclose($L) {
 $L = $L | 0;
 return _luaL_fileresult($L, (_fclose(HEAP32[(_luaL_checkudata($L, 1, 7088) | 0) >> 2] | 0) | 0) == 0 & 1, 0) | 0;
}

function ___expo2($x) {
 $x = +$x;
 return +(+Math_exp(+($x + -1416.0996898839683)) * 2247116418577894884661631.0e283 * 2247116418577894884661631.0e283);
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function _luaB_rawget($L) {
 $L = $L | 0;
 _luaL_checktype($L, 1, 5);
 _luaL_checkany($L, 2);
 _lua_settop($L, 2);
 _lua_rawget($L, 1);
 return 1;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function _luaB_type($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _lua_pushstring($L, _lua_typename($L, _lua_type($L, 1) | 0) | 0) | 0;
 return 1;
}

function _writer($L, $b, $size, $B) {
 $L = $L | 0;
 $b = $b | 0;
 $size = $size | 0;
 $B = $B | 0;
 _luaL_addlstring($B, $b, $size);
 return 0;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function _db_getmetatable($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 if (_lua_getmetatable($L, 1) | 0) return 1;
 _lua_pushnil($L);
 return 1;
}

function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}

function _luaX_lookahead($ls) {
 $ls = $ls | 0;
 var $1 = 0;
 $1 = _llex($ls, $ls + 40 | 0) | 0;
 HEAP32[$ls + 32 >> 2] = $1;
 return $1 | 0;
}

function _luaL_newstate() {
 var $0 = 0;
 $0 = _lua_newstate(18, 0) | 0;
 if (!$0) return $0 | 0;
 _lua_atpanic($0, 158) | 0;
 return $0 | 0;
}

function _ispunct($c) {
 $c = $c | 0;
 var $5 = 0;
 if (!(_isgraph($c) | 0)) $5 = 0; else $5 = (_isalnum($c) | 0) == 0;
 return $5 & 1 | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _luaK_getlabel($fs) {
 $fs = $fs | 0;
 var $1 = 0;
 $1 = HEAP32[$fs + 20 >> 2] | 0;
 HEAP32[$fs + 24 >> 2] = $1;
 return $1 | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 31](a1 | 0, a2 | 0);
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _luaO_hexavalue($c) {
 $c = $c | 0;
 return ((HEAP8[136 + ($c + 1) >> 0] & 2) == 0 ? ($c | 32) + -87 | 0 : $c + -48 | 0) | 0;
}

function _f_call($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_call($L, HEAP32[$ud >> 2] | 0, HEAP32[$ud + 4 >> 2] | 0, 0);
 return;
}

function _lua_gettop($L) {
 $L = $L | 0;
 return (HEAP32[$L + 8 >> 2] | 0) - ((HEAP32[HEAP32[$L + 16 >> 2] >> 2] | 0) + 16) >> 4 | 0;
}

function _luaM_toobig($L) {
 $L = $L | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _luaG_runerror($L, 1792, sp);
}

function jsCall_iiii_7(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(7, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_6(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(6, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_5(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(5, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_4(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(4, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_3(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(3, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_2(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(2, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_1(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(1, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function jsCall_iiii_0(a1, a2, a3) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return jsCall_iiii(0, a1 | 0, a2 | 0, a3 | 0) | 0;
}

function _dothecall($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_call($L, (HEAP32[$L + 8 >> 2] | 0) + -32 | 0, 0, 0);
 return;
}

function _srand($s) {
 $s = $s | 0;
 var $1 = 0;
 $1 = 11416;
 HEAP32[$1 >> 2] = $s + -1;
 HEAP32[$1 + 4 >> 2] = 0;
 return;
}

function _semerror($ls, $msg) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 HEAP32[$ls + 16 >> 2] = 0;
 _luaX_syntaxerror($ls, $msg);
}

function _os_getenv($L) {
 $L = $L | 0;
 _lua_pushstring($L, _getenv(_luaL_checklstring($L, 1, 0) | 0) | 0) | 0;
 return 1;
}

function _luaX_syntaxerror($ls, $msg) {
 $ls = $ls | 0;
 $msg = $msg | 0;
 _lexerror($ls, $msg, HEAP32[$ls + 16 >> 2] | 0);
}

function _luaS_new($L, $str) {
 $L = $L | 0;
 $str = $str | 0;
 return _luaS_newlstr($L, $str, _strlen($str | 0) | 0) | 0;
}

function _math_rad($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_luaL_checknumber($L, 1) * .017453292519943295);
 return 1;
}

function _math_deg($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_luaL_checknumber($L, 1) / .017453292519943295);
 return 1;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 255](a1 | 0) | 0;
}

function _strrchr($s, $c) {
 $s = $s | 0;
 $c = $c | 0;
 return ___memrchr($s, $c, (_strlen($s | 0) | 0) + 1 | 0) | 0;
}

function _luaopen_coroutine($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 6);
 _luaL_setfuncs($L, 5848, 0);
 return 1;
}

function _math_floor($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_floor(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _toupper($c) {
 $c = $c | 0;
 var $1 = 0;
 $1 = (_islower($c) | 0) == 0;
 return ($1 ? $c : $c & 95) | 0;
}

function _tolower($c) {
 $c = $c | 0;
 var $1 = 0;
 $1 = (_isupper($c) | 0) == 0;
 return ($1 ? $c : $c | 32) | 0;
}

function _math_sqrt($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_sqrt(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_ceil($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_ceil(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_atan($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_atan(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_asin($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_asin(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_acos($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_acos(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _luaopen_debug($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 16);
 _luaL_setfuncs($L, 6104, 0);
 return 1;
}

function _luaopen_bit32($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 12);
 _luaL_setfuncs($L, 5552, 0);
 return 1;
}

function _lua_close($L) {
 $L = $L | 0;
 _close_state(HEAP32[(HEAP32[$L + 12 >> 2] | 0) + 172 >> 2] | 0);
 return;
}

function _io_pclose($L) {
 $L = $L | 0;
 _luaL_checkudata($L, 1, 7088) | 0;
 return _luaL_execresult($L, -1) | 0;
}

function _growstack($L, $ud) {
 $L = $L | 0;
 $ud = $ud | 0;
 _luaD_growstack($L, HEAP32[$ud >> 2] | 0);
 return;
}

function _math_tan($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_tan(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_sin($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_sin(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_exp($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_exp(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_cos($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_cos(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_abs($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +Math_abs(+(+_luaL_checknumber($L, 1))));
 return 1;
}

function _math_randomseed($L) {
 $L = $L | 0;
 _srand(_luaL_checkunsigned($L, 1) | 0);
 _rand() | 0;
 return 0;
}

function _luaopen_os($L) {
 $L = $L | 0;
 _lua_createtable($L, 0, 11);
 _luaL_setfuncs($L, 8392, 0);
 return 1;
}

function _luaB_tostring($L) {
 $L = $L | 0;
 _luaL_checkany($L, 1);
 _luaL_tolstring($L, 1, 0) | 0;
 return 1;
}

function _math_log10($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_log10(+_luaL_checknumber($L, 1)));
 return 1;
}

function _isalnum($c) {
 $c = $c | 0;
 return (($c + -48 | 0) >>> 0 < 10 | (_isalpha($c) | 0) != 0) & 1 | 0;
}

function b4(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(4);
 return 0;
}

function _math_tanh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_tanh(+_luaL_checknumber($L, 1)));
 return 1;
}

function _math_sinh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_sinh(+_luaL_checknumber($L, 1)));
 return 1;
}

function _math_cosh($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +_cosh(+_luaL_checknumber($L, 1)));
 return 1;
}

function _lua_typename($L, $t) {
 $L = $L | 0;
 $t = $t | 0;
 return HEAP32[3136 + ($t + 1 << 2) >> 2] | 0;
}

function _b_not($L) {
 $L = $L | 0;
 _lua_pushunsigned($L, ~(_luaL_checkunsigned($L, 1) | 0));
 return 1;
}

function _pcallcont($L) {
 $L = $L | 0;
 return _finishpcall($L, (_lua_getctx($L, 0) | 0) == 1 & 1) | 0;
}

function _luaB_corunning($L) {
 $L = $L | 0;
 _lua_pushboolean($L, _lua_pushthread($L) | 0);
 return 2;
}

function jsCall_iii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(7, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(6, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(5, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(4, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(3, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(2, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(1, a1 | 0, a2 | 0) | 0;
}

function jsCall_iii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 return jsCall_iii(0, a1 | 0, a2 | 0) | 0;
}

function _isspace($c) {
 $c = $c | 0;
 return (($c | 0) == 32 | ($c + -9 | 0) >>> 0 < 5) & 1 | 0;
}

function _os_clock($L) {
 $L = $L | 0;
 _lua_pushnumber($L, +(_clock() | 0) / 1.0e6);
 return 1;
}

function _luaB_yield($L) {
 $L = $L | 0;
 return _lua_yieldk($L, _lua_gettop($L) | 0, 0, 0) | 0;
}

function jsCall_vii_7(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(7, a1 | 0, a2 | 0);
}

function jsCall_vii_6(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(6, a1 | 0, a2 | 0);
}

function jsCall_vii_5(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(5, a1 | 0, a2 | 0);
}

function jsCall_vii_4(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(4, a1 | 0, a2 | 0);
}

function jsCall_vii_3(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(3, a1 | 0, a2 | 0);
}

function jsCall_vii_2(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(2, a1 | 0, a2 | 0);
}

function jsCall_vii_1(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(1, a1 | 0, a2 | 0);
}

function jsCall_vii_0(a1, a2) {
 a1 = a1 | 0;
 a2 = a2 | 0;
 jsCall_vii(0, a1 | 0, a2 | 0);
}

function b1(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(1);
 return 0;
}

function _iscntrl($c) {
 $c = $c | 0;
 return ($c >>> 0 < 32 | ($c | 0) == 127) & 1 | 0;
}

function _db_getregistry($L) {
 $L = $L | 0;
 _lua_pushvalue($L, -1001e3);
 return 1;
}

function _strcoll($l, $r) {
 $l = $l | 0;
 $r = $r | 0;
 return _strcmp($l, $r) | 0;
}

function _lua_gethookmask($L) {
 $L = $L | 0;
 return HEAPU8[$L + 40 >> 0] | 0 | 0;
}

function _luaB_ipairs($L) {
 $L = $L | 0;
 _pairsmeta($L, 5288, 1, 160);
 return 3;
}

function _isalpha($c) {
 $c = $c | 0;
 return (($c | 32) + -97 | 0) >>> 0 < 26 | 0;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _luaB_pairs($L) {
 $L = $L | 0;
 _pairsmeta($L, 5192, 0, 26);
 return 3;
}

function _lua_gethookcount($L) {
 $L = $L | 0;
 return HEAP32[$L + 44 >> 2] | 0;
}

function _dofilecont($L) {
 $L = $L | 0;
 return (_lua_gettop($L) | 0) + -1 | 0;
}

function _ldexp($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function _io_output($L) {
 $L = $L | 0;
 _g_iofile($L, 7200, 7800);
 return 1;
}

function _io_input($L) {
 $L = $L | 0;
 _g_iofile($L, 7176, 11144);
 return 1;
}

function _lua_status($L) {
 $L = $L | 0;
 return HEAPU8[$L + 6 >> 0] | 0 | 0;
}

function _isupper($c) {
 $c = $c | 0;
 return ($c + -65 | 0) >>> 0 < 26 | 0;
}

function _islower($c) {
 $c = $c | 0;
 return ($c + -97 | 0) >>> 0 < 26 | 0;
}

function _isgraph($c) {
 $c = $c | 0;
 return ($c + -33 | 0) >>> 0 < 94 | 0;
}

function _lua_gethook($L) {
 $L = $L | 0;
 return HEAP32[$L + 52 >> 2] | 0;
}

function jsCall_ii_7(a1) {
 a1 = a1 | 0;
 return jsCall_ii(7, a1 | 0) | 0;
}

function jsCall_ii_6(a1) {
 a1 = a1 | 0;
 return jsCall_ii(6, a1 | 0) | 0;
}

function jsCall_ii_5(a1) {
 a1 = a1 | 0;
 return jsCall_ii(5, a1 | 0) | 0;
}

function jsCall_ii_4(a1) {
 a1 = a1 | 0;
 return jsCall_ii(4, a1 | 0) | 0;
}

function jsCall_ii_3(a1) {
 a1 = a1 | 0;
 return jsCall_ii(3, a1 | 0) | 0;
}

function jsCall_ii_2(a1) {
 a1 = a1 | 0;
 return jsCall_ii(2, a1 | 0) | 0;
}

function jsCall_ii_1(a1) {
 a1 = a1 | 0;
 return jsCall_ii(1, a1 | 0) | 0;
}

function jsCall_ii_0(a1) {
 a1 = a1 | 0;
 return jsCall_ii(0, a1 | 0) | 0;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function _str_match($L) {
 $L = $L | 0;
 return _str_find_aux($L, 0) | 0;
}

function _str_find($L) {
 $L = $L | 0;
 return _str_find_aux($L, 1) | 0;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(3);
 return 0;
}

function _lua_error($L) {
 $L = $L | 0;
 _luaG_errormsg($L);
 return 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b2(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(2);
}

function b0(p0) {
 p0 = p0 | 0;
 abort(0);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,jsCall_ii_1,b0,jsCall_ii_2,b0,jsCall_ii_3,b0,jsCall_ii_4,b0,jsCall_ii_5,b0,jsCall_ii_6,b0,jsCall_ii_7,b0,_luaB_assert,_luaB_collectgarbage,_luaB_dofile,_luaB_error,_luaB_getmetatable,_luaB_ipairs,_luaB_loadfile,_luaB_load,_luaB_next,_luaB_pairs,_luaB_pcall
,_luaB_print,_luaB_rawequal,_luaB_rawlen,_luaB_rawget,_luaB_rawset,_luaB_select,_luaB_setmetatable,_luaB_tonumber,_luaB_tostring,_luaB_type,_luaB_xpcall,_b_arshift,_b_and,_b_not,_b_or,_b_xor,_b_test,_b_extract,_b_lrot,_b_lshift,_b_replace,_b_rrot,_b_rshift,_luaB_cocreate,_luaB_coresume,_luaB_corunning,_luaB_costatus,_luaB_cowrap,_luaB_yield,_db_debug
,_db_getuservalue,_db_gethook,_db_getinfo,_db_getlocal,_db_getregistry,_db_getmetatable,_db_getupvalue,_db_upvaluejoin,_db_upvalueid,_db_setuservalue,_db_sethook,_db_setlocal,_db_setmetatable,_db_setupvalue,_db_traceback,_io_close,_io_flush,_io_input,_io_lines,_io_open,_io_output,_io_popen,_io_read,_io_tmpfile,_io_type,_io_write,_f_flush,_f_lines,_f_read,_f_seek
,_f_setvbuf,_f_write,_f_gc,_f_tostring,_math_abs,_math_acos,_math_asin,_math_atan2,_math_atan,_math_ceil,_math_cosh,_math_cos,_math_deg,_math_exp,_math_floor,_math_fmod,_math_frexp,_math_ldexp,_math_log10,_math_log,_math_max,_math_min,_math_modf,_math_pow,_math_rad,_math_random,_math_randomseed,_math_sinh,_math_sin,_math_sqrt
,_math_tanh,_math_tan,_os_clock,_os_date,_os_difftime,_os_execute,_os_exit,_os_getenv,_os_remove,_os_rename,_os_setlocale,_os_time,_os_tmpname,_str_byte,_str_char,_str_dump,_str_find,_str_format,_gmatch,_str_gsub,_str_len,_str_lower,_str_match,_str_rep,_str_reverse,_str_sub,_str_upper,_tconcat,_maxn,_tinsert
,_pack,_unpack,_tremove,_sort,_ll_loadlib,_ll_searchpath,_ll_seeall,_ll_module,_ll_require,_panic,_dofilecont,_ipairsaux,_pcallcont,_luaB_auxwrap,_io_noclose,_io_readline,_io_fclose,_io_pclose,_gmatch_aux,_gctm,_searcher_preload,_searcher_Lua,_searcher_C,_searcher_Croot,_luaopen_base,_luaopen_package,_luaopen_coroutine,_luaopen_table,_luaopen_io,_luaopen_os
,_luaopen_string,_luaopen_bit32,_luaopen_math,_luaopen_debug,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,jsCall_iiii_1,b1,jsCall_iiii_2,b1,jsCall_iiii_3,b1,jsCall_iiii_4,b1,jsCall_iiii_5,b1,jsCall_iiii_6,b1,jsCall_iiii_7,b1,_sn_write,_getF,_getS,_generic_reader,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,jsCall_vii_1,b2,jsCall_vii_2,b2,jsCall_vii_3,b2,jsCall_vii_4,b2,jsCall_vii_5,b2,jsCall_vii_6,b2,jsCall_vii_7,b2,_growstack,_f_call,_resume,_unroll,_f_parser,_dothecall,_f_luaopen,_hookf,b2,b2,b2
,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,jsCall_iii_0,b3,jsCall_iii_1,b3,jsCall_iii_2,b3,jsCall_iii_3,b3,jsCall_iii_4,b3,jsCall_iii_5,b3,jsCall_iii_6,b3,jsCall_iii_7,b3,_lua_newstate,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,jsCall_iiiii_0,b4,jsCall_iiiii_1,b4,jsCall_iiiii_2,b4,jsCall_iiiii_3,b4,jsCall_iiiii_4,b4,jsCall_iiiii_5,b4,jsCall_iiiii_6,b4,jsCall_iiiii_7,b4,_l_alloc,_writer,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4];

  return { _luaL_checkstack: _luaL_checkstack, _lua_setglobal: _lua_setglobal, _strlen: _strlen, _lua_pushlightuserdata: _lua_pushlightuserdata, _bitshift64Lshr: _bitshift64Lshr, _lua_copy: _lua_copy, _lua_createtable: _lua_createtable, _luaL_optinteger: _luaL_optinteger, _lua_arith: _lua_arith, _lua_rawset: _lua_rawset, _lua_setmetatable: _lua_setmetatable, _lua_concat: _lua_concat, _luaL_optlstring: _luaL_optlstring, _luaopen_io: _luaopen_io, _memcpy: _memcpy, _luaL_pushmodule: _luaL_pushmodule, _luaL_pushresultsize: _luaL_pushresultsize, _lua_upvalueid: _lua_upvalueid, _lua_close: _lua_close, _luaopen_math: _luaopen_math, _lua_setupvalue: _lua_setupvalue, _lua_replace: _lua_replace, _lua_gethookmask: _lua_gethookmask, _lua_xmove: _lua_xmove, _lua_load: _lua_load, _lua_pcallk: _lua_pcallk, _lua_touserdata: _lua_touserdata, _lua_getglobal: _lua_getglobal, _luaL_prepbuffsize: _luaL_prepbuffsize, _lua_rawget: _lua_rawget, _free: _free, _lua_pushcclosure: _lua_pushcclosure, _lua_pushstring: _lua_pushstring, _lua_upvaluejoin: _lua_upvaluejoin, _luaL_callmeta: _luaL_callmeta, _luaopen_string: _luaopen_string, _lua_isuserdata: _lua_isuserdata, _luaL_loadbufferx: _luaL_loadbufferx, _lua_resume: _lua_resume, _lua_iscfunction: _lua_iscfunction, _luaL_execresult: _luaL_execresult, _lua_remove: _lua_remove, _luaL_checkoption: _luaL_checkoption, _lua_rawlen: _lua_rawlen, _lua_len: _lua_len, _luaL_openlib: _luaL_openlib, _lua_pushvfstring: _lua_pushvfstring, _lua_isnumber: _lua_isnumber, _luaL_checklstring: _luaL_checklstring, _lua_isstring: _lua_isstring, _lua_pushlstring: _lua_pushlstring, _lua_status: _lua_status, _luaopen_os: _luaopen_os, _luaL_len: _luaL_len, _lua_callk: _lua_callk, _luaL_checkany: _luaL_checkany, _luaL_addstring: _luaL_addstring, _lua_pushfstring: _lua_pushfstring, _lua_insert: _lua_insert, _i64Add: _i64Add, _lua_tolstring: _lua_tolstring, _lua_pushnil: _lua_pushnil, _luaL_traceback: _luaL_traceback, _luaL_requiref: _luaL_requiref, _lua_checkstack: _lua_checkstack, _luaopen_package: _luaopen_package, _luaL_pushresult: _luaL_pushresult, _lua_topointer: _lua_topointer, _lua_error: _lua_error, _luaL_setfuncs: _luaL_setfuncs, _luaopen_debug: _luaopen_debug, _lua_compare: _lua_compare, _lua_getfield: _lua_getfield, _luaL_checkinteger: _luaL_checkinteger, _lua_getstack: _lua_getstack, _lua_gettop: _lua_gettop, _lua_getlocal: _lua_getlocal, _lua_gc: _lua_gc, _lua_newuserdata: _lua_newuserdata, _luaL_checkunsigned: _luaL_checkunsigned, _lua_settable: _lua_settable, _luaL_addlstring: _luaL_addlstring, _luaL_fileresult: _luaL_fileresult, _lua_toboolean: _lua_toboolean, _lua_setallocf: _lua_setallocf, _memset: _memset, _lua_gethook: _lua_gethook, _lua_tointegerx: _lua_tointegerx, _lua_gethookcount: _lua_gethookcount, _lua_version: _lua_version, _lua_tounsignedx: _lua_tounsignedx, _luaL_openlibs: _luaL_openlibs, _lua_setlocal: _lua_setlocal, _lua_yieldk: _lua_yieldk, _lua_setuservalue: _lua_setuservalue, _i64Subtract: _i64Subtract, _lua_rawgetp: _lua_rawgetp, _luaL_testudata: _luaL_testudata, _lua_newstate: _lua_newstate, _lua_pushvalue: _lua_pushvalue, _lua_gettable: _lua_gettable, _lua_tocfunction: _lua_tocfunction, _lua_newthread: _lua_newthread, _lua_typename: _lua_typename, _luaL_argerror: _luaL_argerror, _lua_absindex: _lua_absindex, _lua_rawgeti: _lua_rawgeti, _testSetjmp: _testSetjmp, _lua_sethook: _lua_sethook, _lua_pushthread: _lua_pushthread, _luaL_buffinit: _luaL_buffinit, _luaL_loadfilex: _luaL_loadfilex, _malloc: _malloc, _lua_rawequal: _lua_rawequal, _luaL_optunsigned: _luaL_optunsigned, _lua_type: _lua_type, _lua_tothread: _lua_tothread, _lua_dump: _lua_dump, _luaL_checkversion_: _luaL_checkversion_, _luaL_buffinitsize: _luaL_buffinitsize, _luaL_checknumber: _luaL_checknumber, _luaL_newmetatable: _luaL_newmetatable, _lua_getmetatable: _lua_getmetatable, _lua_pushunsigned: _lua_pushunsigned, _lua_getupvalue: _lua_getupvalue, _luaopen_base: _luaopen_base, _luaL_gsub: _luaL_gsub, _luaL_addvalue: _luaL_addvalue, _bitshift64Shl: _bitshift64Shl, _luaL_tolstring: _luaL_tolstring, _lua_atpanic: _lua_atpanic, _luaL_getmetafield: _luaL_getmetafield, _lua_getinfo: _lua_getinfo, _luaL_setmetatable: _luaL_setmetatable, _lua_settop: _lua_settop, _lua_pushboolean: _lua_pushboolean, _lua_setfield: _lua_setfield, _luaL_checktype: _luaL_checktype, _luaL_ref: _luaL_ref, _lua_next: _lua_next, _lua_getctx: _lua_getctx, _luaL_checkudata: _luaL_checkudata, _luaopen_table: _luaopen_table, _luaopen_coroutine: _luaopen_coroutine, _luaopen_bit32: _luaopen_bit32, _luaL_getsubtable: _luaL_getsubtable, _lua_getuservalue: _lua_getuservalue, _lua_pushnumber: _lua_pushnumber, _lua_rawseti: _lua_rawseti, _saveSetjmp: _saveSetjmp, _luaL_optnumber: _luaL_optnumber, _lua_pushinteger: _lua_pushinteger, _lua_getallocf: _lua_getallocf, _luaL_newstate: _luaL_newstate, _lua_tonumberx: _lua_tonumberx, _luaL_where: _luaL_where, _lua_rawsetp: _lua_rawsetp, _luaL_error: _luaL_error, _luaL_unref: _luaL_unref, _luaL_loadstring: _luaL_loadstring, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_iiiii: dynCall_iiiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _luaL_checkstack = Module["_luaL_checkstack"] = asm["_luaL_checkstack"];
var _lua_setglobal = Module["_lua_setglobal"] = asm["_lua_setglobal"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _lua_pushlightuserdata = Module["_lua_pushlightuserdata"] = asm["_lua_pushlightuserdata"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _lua_copy = Module["_lua_copy"] = asm["_lua_copy"];
var _lua_createtable = Module["_lua_createtable"] = asm["_lua_createtable"];
var _luaL_optinteger = Module["_luaL_optinteger"] = asm["_luaL_optinteger"];
var _lua_arith = Module["_lua_arith"] = asm["_lua_arith"];
var _lua_rawset = Module["_lua_rawset"] = asm["_lua_rawset"];
var _lua_setmetatable = Module["_lua_setmetatable"] = asm["_lua_setmetatable"];
var _lua_upvalueid = Module["_lua_upvalueid"] = asm["_lua_upvalueid"];
var _luaL_optlstring = Module["_luaL_optlstring"] = asm["_luaL_optlstring"];
var _luaopen_io = Module["_luaopen_io"] = asm["_luaopen_io"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _luaL_pushmodule = Module["_luaL_pushmodule"] = asm["_luaL_pushmodule"];
var _luaL_pushresultsize = Module["_luaL_pushresultsize"] = asm["_luaL_pushresultsize"];
var _lua_pushthread = Module["_lua_pushthread"] = asm["_lua_pushthread"];
var _lua_close = Module["_lua_close"] = asm["_lua_close"];
var _luaopen_math = Module["_luaopen_math"] = asm["_luaopen_math"];
var _lua_setupvalue = Module["_lua_setupvalue"] = asm["_lua_setupvalue"];
var _luaL_ref = Module["_luaL_ref"] = asm["_luaL_ref"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _luaL_checkversion_ = Module["_luaL_checkversion_"] = asm["_luaL_checkversion_"];
var _lua_xmove = Module["_lua_xmove"] = asm["_lua_xmove"];
var _lua_load = Module["_lua_load"] = asm["_lua_load"];
var _lua_pcallk = Module["_lua_pcallk"] = asm["_lua_pcallk"];
var _lua_touserdata = Module["_lua_touserdata"] = asm["_lua_touserdata"];
var _lua_getglobal = Module["_lua_getglobal"] = asm["_lua_getglobal"];
var _luaL_prepbuffsize = Module["_luaL_prepbuffsize"] = asm["_luaL_prepbuffsize"];
var _lua_rawget = Module["_lua_rawget"] = asm["_lua_rawget"];
var _free = Module["_free"] = asm["_free"];
var _lua_pushcclosure = Module["_lua_pushcclosure"] = asm["_lua_pushcclosure"];
var _lua_pushstring = Module["_lua_pushstring"] = asm["_lua_pushstring"];
var _lua_upvaluejoin = Module["_lua_upvaluejoin"] = asm["_lua_upvaluejoin"];
var _luaopen_string = Module["_luaopen_string"] = asm["_luaopen_string"];
var _lua_isuserdata = Module["_lua_isuserdata"] = asm["_lua_isuserdata"];
var _luaL_loadbufferx = Module["_luaL_loadbufferx"] = asm["_luaL_loadbufferx"];
var _lua_resume = Module["_lua_resume"] = asm["_lua_resume"];
var _lua_iscfunction = Module["_lua_iscfunction"] = asm["_lua_iscfunction"];
var _luaL_newstate = Module["_luaL_newstate"] = asm["_luaL_newstate"];
var _luaL_execresult = Module["_luaL_execresult"] = asm["_luaL_execresult"];
var _lua_remove = Module["_lua_remove"] = asm["_lua_remove"];
var _luaL_checkoption = Module["_luaL_checkoption"] = asm["_luaL_checkoption"];
var _lua_rawlen = Module["_lua_rawlen"] = asm["_lua_rawlen"];
var _lua_len = Module["_lua_len"] = asm["_lua_len"];
var _luaL_openlib = Module["_luaL_openlib"] = asm["_luaL_openlib"];
var _lua_pushvfstring = Module["_lua_pushvfstring"] = asm["_lua_pushvfstring"];
var _lua_isnumber = Module["_lua_isnumber"] = asm["_lua_isnumber"];
var _lua_newuserdata = Module["_lua_newuserdata"] = asm["_lua_newuserdata"];
var _lua_isstring = Module["_lua_isstring"] = asm["_lua_isstring"];
var _lua_pushlstring = Module["_lua_pushlstring"] = asm["_lua_pushlstring"];
var _luaopen_os = Module["_luaopen_os"] = asm["_luaopen_os"];
var _luaL_len = Module["_luaL_len"] = asm["_luaL_len"];
var _lua_callk = Module["_lua_callk"] = asm["_lua_callk"];
var _luaL_checkany = Module["_luaL_checkany"] = asm["_luaL_checkany"];
var _lua_getallocf = Module["_lua_getallocf"] = asm["_lua_getallocf"];
var _luaL_addstring = Module["_luaL_addstring"] = asm["_luaL_addstring"];
var _lua_pushfstring = Module["_lua_pushfstring"] = asm["_lua_pushfstring"];
var _lua_insert = Module["_lua_insert"] = asm["_lua_insert"];
var _lua_tolstring = Module["_lua_tolstring"] = asm["_lua_tolstring"];
var _lua_pushnil = Module["_lua_pushnil"] = asm["_lua_pushnil"];
var _luaL_traceback = Module["_luaL_traceback"] = asm["_luaL_traceback"];
var _luaL_requiref = Module["_luaL_requiref"] = asm["_luaL_requiref"];
var _lua_checkstack = Module["_lua_checkstack"] = asm["_lua_checkstack"];
var _luaopen_package = Module["_luaopen_package"] = asm["_luaopen_package"];
var _luaL_pushresult = Module["_luaL_pushresult"] = asm["_luaL_pushresult"];
var _lua_topointer = Module["_lua_topointer"] = asm["_lua_topointer"];
var _lua_error = Module["_lua_error"] = asm["_lua_error"];
var _luaL_setfuncs = Module["_luaL_setfuncs"] = asm["_luaL_setfuncs"];
var _luaopen_debug = Module["_luaopen_debug"] = asm["_luaopen_debug"];
var _lua_concat = Module["_lua_concat"] = asm["_lua_concat"];
var _luaL_checkinteger = Module["_luaL_checkinteger"] = asm["_luaL_checkinteger"];
var _lua_getstack = Module["_lua_getstack"] = asm["_lua_getstack"];
var _lua_gettop = Module["_lua_gettop"] = asm["_lua_gettop"];
var _lua_getlocal = Module["_lua_getlocal"] = asm["_lua_getlocal"];
var _lua_gc = Module["_lua_gc"] = asm["_lua_gc"];
var _luaL_checklstring = Module["_luaL_checklstring"] = asm["_luaL_checklstring"];
var _luaL_checkunsigned = Module["_luaL_checkunsigned"] = asm["_luaL_checkunsigned"];
var _lua_settable = Module["_lua_settable"] = asm["_lua_settable"];
var _luaL_addlstring = Module["_luaL_addlstring"] = asm["_luaL_addlstring"];
var _luaL_fileresult = Module["_luaL_fileresult"] = asm["_luaL_fileresult"];
var _lua_toboolean = Module["_lua_toboolean"] = asm["_lua_toboolean"];
var _lua_setallocf = Module["_lua_setallocf"] = asm["_lua_setallocf"];
var _memset = Module["_memset"] = asm["_memset"];
var _lua_gethook = Module["_lua_gethook"] = asm["_lua_gethook"];
var _lua_tointegerx = Module["_lua_tointegerx"] = asm["_lua_tointegerx"];
var _lua_gethookcount = Module["_lua_gethookcount"] = asm["_lua_gethookcount"];
var _lua_version = Module["_lua_version"] = asm["_lua_version"];
var _lua_tounsignedx = Module["_lua_tounsignedx"] = asm["_lua_tounsignedx"];
var _luaL_openlibs = Module["_luaL_openlibs"] = asm["_luaL_openlibs"];
var _lua_setlocal = Module["_lua_setlocal"] = asm["_lua_setlocal"];
var _lua_yieldk = Module["_lua_yieldk"] = asm["_lua_yieldk"];
var _lua_setuservalue = Module["_lua_setuservalue"] = asm["_lua_setuservalue"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _lua_rawseti = Module["_lua_rawseti"] = asm["_lua_rawseti"];
var _lua_rawgetp = Module["_lua_rawgetp"] = asm["_lua_rawgetp"];
var _luaL_testudata = Module["_luaL_testudata"] = asm["_luaL_testudata"];
var _lua_newstate = Module["_lua_newstate"] = asm["_lua_newstate"];
var _lua_pushvalue = Module["_lua_pushvalue"] = asm["_lua_pushvalue"];
var _lua_getctx = Module["_lua_getctx"] = asm["_lua_getctx"];
var _lua_tocfunction = Module["_lua_tocfunction"] = asm["_lua_tocfunction"];
var _lua_newthread = Module["_lua_newthread"] = asm["_lua_newthread"];
var _lua_typename = Module["_lua_typename"] = asm["_lua_typename"];
var _luaL_argerror = Module["_luaL_argerror"] = asm["_luaL_argerror"];
var _lua_absindex = Module["_lua_absindex"] = asm["_lua_absindex"];
var _lua_rawgeti = Module["_lua_rawgeti"] = asm["_lua_rawgeti"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _lua_sethook = Module["_lua_sethook"] = asm["_lua_sethook"];
var _luaL_callmeta = Module["_luaL_callmeta"] = asm["_luaL_callmeta"];
var _luaL_buffinit = Module["_luaL_buffinit"] = asm["_luaL_buffinit"];
var _luaL_loadfilex = Module["_luaL_loadfilex"] = asm["_luaL_loadfilex"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _lua_rawequal = Module["_lua_rawequal"] = asm["_lua_rawequal"];
var _luaL_optunsigned = Module["_luaL_optunsigned"] = asm["_luaL_optunsigned"];
var _lua_type = Module["_lua_type"] = asm["_lua_type"];
var _lua_compare = Module["_lua_compare"] = asm["_lua_compare"];
var _lua_tothread = Module["_lua_tothread"] = asm["_lua_tothread"];
var _lua_getfield = Module["_lua_getfield"] = asm["_lua_getfield"];
var _lua_gettable = Module["_lua_gettable"] = asm["_lua_gettable"];
var _luaL_buffinitsize = Module["_luaL_buffinitsize"] = asm["_luaL_buffinitsize"];
var _luaL_checknumber = Module["_luaL_checknumber"] = asm["_luaL_checknumber"];
var _luaL_newmetatable = Module["_luaL_newmetatable"] = asm["_luaL_newmetatable"];
var _lua_getmetatable = Module["_lua_getmetatable"] = asm["_lua_getmetatable"];
var _lua_pushunsigned = Module["_lua_pushunsigned"] = asm["_lua_pushunsigned"];
var _lua_getupvalue = Module["_lua_getupvalue"] = asm["_lua_getupvalue"];
var _luaopen_base = Module["_luaopen_base"] = asm["_luaopen_base"];
var _luaL_gsub = Module["_luaL_gsub"] = asm["_luaL_gsub"];
var _luaL_addvalue = Module["_luaL_addvalue"] = asm["_luaL_addvalue"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _luaL_tolstring = Module["_luaL_tolstring"] = asm["_luaL_tolstring"];
var _lua_atpanic = Module["_lua_atpanic"] = asm["_lua_atpanic"];
var _luaL_getmetafield = Module["_luaL_getmetafield"] = asm["_luaL_getmetafield"];
var _lua_getinfo = Module["_lua_getinfo"] = asm["_lua_getinfo"];
var _luaL_setmetatable = Module["_luaL_setmetatable"] = asm["_luaL_setmetatable"];
var _lua_settop = Module["_lua_settop"] = asm["_lua_settop"];
var _lua_pushboolean = Module["_lua_pushboolean"] = asm["_lua_pushboolean"];
var _lua_setfield = Module["_lua_setfield"] = asm["_lua_setfield"];
var _luaL_checktype = Module["_luaL_checktype"] = asm["_luaL_checktype"];
var _lua_replace = Module["_lua_replace"] = asm["_lua_replace"];
var _lua_next = Module["_lua_next"] = asm["_lua_next"];
var _luaL_checkudata = Module["_luaL_checkudata"] = asm["_luaL_checkudata"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _luaopen_coroutine = Module["_luaopen_coroutine"] = asm["_luaopen_coroutine"];
var _luaopen_bit32 = Module["_luaopen_bit32"] = asm["_luaopen_bit32"];
var _luaopen_table = Module["_luaopen_table"] = asm["_luaopen_table"];
var _luaL_getsubtable = Module["_luaL_getsubtable"] = asm["_luaL_getsubtable"];
var _lua_getuservalue = Module["_lua_getuservalue"] = asm["_lua_getuservalue"];
var _lua_pushnumber = Module["_lua_pushnumber"] = asm["_lua_pushnumber"];
var _lua_dump = Module["_lua_dump"] = asm["_lua_dump"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _luaL_optnumber = Module["_luaL_optnumber"] = asm["_luaL_optnumber"];
var _lua_pushinteger = Module["_lua_pushinteger"] = asm["_lua_pushinteger"];
var _lua_gethookmask = Module["_lua_gethookmask"] = asm["_lua_gethookmask"];
var _lua_status = Module["_lua_status"] = asm["_lua_status"];
var _lua_tonumberx = Module["_lua_tonumberx"] = asm["_lua_tonumberx"];
var _luaL_where = Module["_luaL_where"] = asm["_luaL_where"];
var _lua_rawsetp = Module["_lua_rawsetp"] = asm["_lua_rawsetp"];
var _luaL_error = Module["_luaL_error"] = asm["_luaL_error"];
var _luaL_loadstring = Module["_luaL_loadstring"] = asm["_luaL_loadstring"];
var _luaL_unref = Module["_luaL_unref"] = asm["_luaL_unref"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}





!(function(exports, global, emscripten){
/* Utility functions */
var slice = [].slice;
var apply = (function(){}).apply;

// applying arguments to new isn't easy with js.....
function new_(a, b, c, d, e, f, g, h, i) {
	switch (arguments.length) {
		case 0: return new this();
		case 1: return new this(a);
		case 2: return new this(a, b);
		case 3: return new this(a, b, c);
		case 4: return new this(a, b, c, d);
		case 5: return new this(a, b, c, d, e);
		case 6: return new this(a, b, c, d, e, f);
		case 7: return new this(a, b, c, d, e, f, g);
		case 8: return new this(a, b, c, d, e, f, g, h);
		case 9: return new this(a, b, c, d, e, f, g, h, i);
		default:
			// Attempt the theorectically equivalent way
			// Native objects often detect this and throw;
			// luckily there aren't many native objects that take >9 arguments; so this case is rare
			var obj = Object.create(this.prototype);
			var ret = this.apply(obj, arguments);
			return (typeof ret === 'object' && ret !== null)?ret:obj;
	}
}

/* */
var Lua = exports.Lua = {
	defines: {
		REGISTRYINDEX: /*FIRSTPSEUDOIDX*/ ( - /*LUAI_MAXSTACK*/1000000 - 1000 ),
		RIDX_GLOBALS: 2,
		RIDX_MAINTHREAD: 1,
		MULTRET: -1,
		NOREF: -2,
		GC: {
			STOP: 0,
			RESTART: 1,
			COLLECT: 2,
			COUNT: 3,
			COUNTB: 4,
			STEP: 5,
			SETPAUSE: 6,
			SETSTEPMUL: 7,
			SETMAJORINC: 8,
			ISRUNNING: 9,
			GEN: 10,
			INC: 11,
		},
		T: {
			NONE: -1,
			NIL: 0,
			BOOLEAN: 1,
			LIGHTUSERDATA: 2,
			NUMBER: 3,
			STRING: 4,
			TABLE: 5,
			FUNCTION: 6,
			USERDATA: 7,
			THREAD: 8,
		},
	},
	lib: {
		// absindex
		// arith
		// atpanic
		// callk
		checkstack:        emscripten.cwrap('lua_checkstack',        null,     ["number", "number"]),
		// close
		// compare
		// concat
		// copy
		createtable:       emscripten.cwrap('lua_createtable',       null,     ["number", "number", "number"]),
		// dump
		error:             emscripten.cwrap('lua_error',             "number", ["number"]),
		gc:                emscripten.cwrap('lua_gc',                "number", ["number", "number", "number"]),
		// getallocf
		// getctx
		getfield:          emscripten.cwrap('lua_getfield',          null,     ["number", "number", "string"]),
		getglobal:         emscripten.cwrap('lua_getglobal',         null,     ["number", "string"]),
		// gethook
		// gethookcount
		// gethookmask
		// getinfo
		// getlocal
		// getmetatable
		// getstack
		gettable:          emscripten.cwrap('lua_gettable',          null,     ["number", "number"]),
		gettop:            emscripten.cwrap('lua_gettop',            "number", ["number"]),
		// getupvalue
		// getuservalue
		// insert
		// iscfunction
		// isnumber
		// isstring
		// isuserdata
		// len
		// load
		// newstate
		// newthread
		newuserdata:       emscripten.cwrap('lua_newuserdata',       "number", ["number", "number"]),
		// next
		pcallk:            emscripten.cwrap('lua_pcallk',            "number", ["number", "number", "number", "number", "number", "number"]),
		pushboolean:       emscripten.cwrap('lua_pushboolean',       null,     ["number", "number"]),
		pushcclosure:      emscripten.cwrap('lua_pushcclosure',      null,     ["number", "number", "number"]),
		// pushfstring
		// pushinteger
		pushlightuserdata: emscripten.cwrap('lua_pushlightuserdata', null,     ["number", "number"]),
		pushlstring:       emscripten.cwrap('lua_pushlstring',       null,     ["number", "array", "number"]),
		pushnil:           emscripten.cwrap('lua_pushnil',           null,     ["number"]),
		pushnumber:        emscripten.cwrap('lua_pushnumber',        null,     ["number", "number"]),
		// pushstring
		// pushthread
		// pushunsigned
		pushvalue:         emscripten.cwrap('lua_pushvalue',         null,     ["number", "number"]),
		// pushvfstring
		// rawequal
		// rawget
		rawgeti:           emscripten.cwrap('lua_rawgeti',           null,     ["number", "number", "number"]),
		// rawgetp
		// rawlen
		// rawset
		// rawseti
		// rawsetp
		remove:            emscripten.cwrap('lua_remove',            null,     ["number", "number"]),
		// replace
		// resume
		// setallocf
		setfield:          emscripten.cwrap('lua_setfield',          null,     ["number", "number", "string"]),
		setglobal:         emscripten.cwrap('lua_setglobal',         null,     ["number", "string"]),
		// sethook
		// setlocal
		setmetatable:      emscripten.cwrap('lua_setmetatable',      null,     ["number", "number"]),
		settable:          emscripten.cwrap('lua_settable',          null,     ["number", "number"]),
		settop:            emscripten.cwrap('lua_settop',            null,     ["number", "number"]),
		// setupvalue
		// setuservalue
		// status
		toboolean:         emscripten.cwrap('lua_toboolean',         "number", ["number", "number"]),
		// tocfunction
		// tointegerx
		tolstring:         emscripten.cwrap('lua_tolstring',         "number", ["number", "number", "number"]),
		tonumberx:         emscripten.cwrap('lua_tonumberx',         "number", ["number", "number", "number"]),
		// topointer
		tothread:          emscripten.cwrap('lua_tothread',          "number", ["number", "number"]),
		// tounsignedx
		touserdata:        emscripten.cwrap('lua_touserdata',        "number", ["number", "number"]),
		type:              emscripten.cwrap('lua_type',              "number", ["number", "number"]),
		typename:          emscripten.cwrap('lua_typename',          "string", ["number", "number"]),
		// upvalueid
		// upvaluejoin
		// version
		// xmove
		// yieldk
	},
	auxlib:{
		// addlstring
		// addstring
		// addvalue
		// argerror
		// buffinit
		// buffinitsize
		// callmeta
		// checkany
		// checkinteger
		// checklstring
		// checknumber
		// checkoption
		// checkstack
		// checktype
		checkudata:        emscripten.cwrap('luaL_checkudata',       "number", ["number", "number", "string"]),
		// checkunsigned
		// error
		// execresult
		// fileresult
		// getmetafield
		// getsubtable
		// gsub
		// len
		loadbufferx:       emscripten.cwrap('luaL_loadbufferx',      "number", ["number", "array", "number", "string", "string"]),
		// loadfilex
		// loadstring
		newmetatable:      emscripten.cwrap('luaL_newmetatable',     "number", ["number", "string"]),
		newstate:          emscripten.cwrap('luaL_newstate',         "number", []),
		openlibs:          emscripten.cwrap('luaL_openlibs',         null,     ["number"]),
		// optinteger
		// optlstring
		// optnumber
		// optunsigned
		// prepbuffsize
		// pushresult
		// pushresultsize
		ref:               emscripten.cwrap('luaL_ref',              "number", ["number", "number"]),
		// requiref
		// setfuncs
		setmetatable:      emscripten.cwrap('luaL_setmetatable',     null,     ["number", "string"]),
		testudata:         emscripten.cwrap('luaL_testudata',        "number", ["number", "number", "string"]),
		tolstring:         emscripten.cwrap('luaL_tolstring',        "number", ["number", "number", "number"]),
		traceback:         emscripten.cwrap('luaL_traceback',        null,     ["number", "number", "string", "number"]),
		unref:             emscripten.cwrap('luaL_unref',            "number", ["number", "number", "number"]),
		// where
	},
	refs: [],
	refs_i: 0,
};

Lua.Error = function (L, error_index) {
	this.message = L.tostring(error_index);
	// Get lua stack trace
	L.traceback(L._L, this.message, 1);
	this.lua_stack = L.raw_tostring(-1);
	L.pop(1);
};
Lua.Error.prototype = new Error();
Lua.Error.prototype.name = "Lua.Error";

Lua.cfuncs = {
	__gc: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		delete Lua.refs[id];
		return 0;
	}),
	__index: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var k = L.lua_to_js(2);
		try {
			var res = ob[k];
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	__newindex: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var k = L.lua_to_js(2);
		if (L.isnil(3)) {
			try {
				delete ob[k];
			} catch (e) {
				L.push(e);
				L.error();
				throw "Unreachable";
			}
		} else {
			var v = L.lua_to_js(3);
			try {
				ob[k]=v;
			} catch (e) {
				L.push(e);
				L.error();
				throw "Unreachable";
			}
		}
		return 0;
	}),
	__call: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var top = L.gettop();
		var thisarg = top>=2?L.lua_to_js(2):null;
		var args = [];
		for (var i=3; i<=top; i++) {
			args.push(L.lua_to_js(i));
		}
		try {
			var res = apply.call(ob, thisarg, args);
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	__len: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		L.push(ob.length);
		return 1;
	}),
	__tostring: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		L.pushstring(ob===null?"null":ob.toString());
		return 1;
	}),
	"new": emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var top = L.gettop();
		var args = [];
		for (var i=2; i<=top;i++) {
			args.push(L.lua_to_js(i));
		}
		try {
			var res = new_.apply(ob,args);
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	// "delete": emscripten.Runtime.addFunction(function(L){
	// 	L = new Lua.State(L);
	// 	var box = L.checkudata(1, "_PROXY_MT");
	// 	var id = emscripten.getValue(box, "double");
	// 	var ob = Lua.refs[id];
	// 	var k = L.lua_to_js(2);
	// 	L.pushboolean(delete ob[k]);
	// 	return 1;
	// }),
	// Our error handler
	traceback: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		L.pushjs(new Lua.Error(L, 1));
		return 1;
	}),
};

// Either wraps existing state; or makes a new one
Lua.State = function (_L) {
	if (_L) {
		this._L = _L;
	} else {
		this._L = Lua.auxlib.newstate();

		this.gc(Lua.defines.GC.STOP, 0);

		this.openlibs();

		// Construct Proxy metatable
		this.newmetatable("_PROXY_MT");
		this.pushcclosure(Lua.cfuncs.__gc, 0);
		this.setfield(-2, "__gc");
		this.pushcclosure(Lua.cfuncs.__index, 0);
		this.setfield(-2, "__index");
		this.pushcclosure(Lua.cfuncs.__newindex, 0);
		this.setfield(-2, "__newindex");
		this.pushcclosure(Lua.cfuncs.__call, 0);
		this.setfield(-2, "__call");
		this.pushcclosure(Lua.cfuncs.__len, 0);
		this.setfield(-2, "__len");
		this.pushcclosure(Lua.cfuncs.__tostring, 0);
		this.setfield(-2, "__tostring");
		this.pop(1);

		// Set up weakly valued table for holding userdata
		// This level of indirection ensures equal js objects are equal
		this.createtable(0, 0);
		this.createtable(0, 1);
		this.pushstring("v");
		this.setfield(-2, "__mode");
		Lua.lib.setmetatable(this._L, -2);
		this.setfield(Lua.defines.REGISTRYINDEX, "wrapped");

		// Create 'js' library
		this.createtable(0, 3);
		this.pushcclosure(Lua.cfuncs["new"], 0);
		this.setfield(-2, "new");
		this.push(null);
		this.setfield(-2, "null");
		this.push(global);
		this.setfield(-2, "global");
		this.setglobal("js");

		this.gc(Lua.defines.GC.RESTART, 0);
	}
	this._G = Lua.Proxy.create(this, Lua.defines.RIDX_GLOBALS);
};
// Add all C functions as methods on a Lua_State object.
// Auxiliary library takes precedence
(function() {
	function wrap(func) {
		return function() {
			var args = slice.call(arguments, 0);
			args.splice(0, 0, this._L);
			return func.apply(null, args);
		};
	}
	for (var i in Lua.lib) {
		Lua.State.prototype[i] = wrap(Lua.lib[i]);
	}
	for (var j in Lua.auxlib) {
		Lua.State.prototype[j] = wrap(Lua.auxlib[j]);
	}
})();
// Add functions that are normally macros
Lua.State.prototype.pop = function(n) {
	this.settop(-n-1);
};
Lua.State.prototype.isnil = function(n) {
	return this.type(n) === 0;
};
Lua.State.prototype.isnoneornil = function(n) {
	return this.type(n) <= 0;
};
Lua.State.prototype.getmetatable = function(n) {
	this.getfield(Lua.defines.REGISTRYINDEX, n);
};
Lua.State.prototype.pcall = function(n,r,f) {
	return this.pcallk(n, r, f, 0, null);
};
Lua.State.prototype.tonumber = function(n) {
	return this.tonumberx(n, null);
};

// Debugging
Lua.State.prototype.printStack = function() {
	for(var j=1;j<=this.gettop();j++){
		var t = this.type(j);
		console.log(j, this.typename(t), (function(t){switch(t){
			case Lua.defines.T.NUMBER:
				return this.tonumber(j);
			case Lua.defines.T.STRING:
				return this.raw_tostring(j);
			case Lua.defines.T.USERDATA:
				return this.touserdata(j);
			default:
				return;
		}}).call(this, t));
	}
};
// Add handy wrappers to make for idiomatic js
Lua.State.prototype.pushstring = function (str) {
	var chars = emscripten.intArrayFromString(str, true);
	this.pushlstring(chars, chars.length);
};
Lua.State.prototype.raw_tostring = function(i) {
	var l = emscripten.allocate(4, "i32", emscripten.ALLOC_STACK);
	var p = Lua.lib.tolstring(this._L, i || -1, l);
	if (p === 0 /* NULL */) return null;
	return emscripten.Pointer_stringify(p, emscripten.getValue(l, "i32"));
};
// This version calls __tostring metamethod
Lua.State.prototype.tostring = function(i) {
	var l = emscripten.allocate(4, "i32", emscripten.ALLOC_STACK);
	var p = this.tolstring(i || -1, l);
	return emscripten.Pointer_stringify(p, emscripten.getValue(l, "i32"));
};
Lua.State.prototype.lua_to_js = function(i) {
	switch(this.type(i)) {
		case -1: // LUA_TNONE
		case 0: // LUA_TNIL
			return void 0;
		case 1: // LUA_TBOOLEAN
			return this.toboolean(i)!==0;
		case 2: // LUA_TLIGHTUSERDATA
			return this.touserdata(i);
		case 3: // LUA_TNUMBER
			return this.tonumberx(i);
		case 4: // LUA_TSTRING
			return this.raw_tostring(i);
		case 7: // LUA_TUSERDATA
			var box = this.testudata(i, "_PROXY_MT");
			if (box !== /* NULL */ 0) {
				var id = emscripten.getValue(box, "double");
				return Lua.refs[id];
			}
			/* fall through */
		default: // LUA_TTABLE, LUA_TFUNCTION, LUA_TTHREAD
			return new Lua.Proxy(this, i);
	}
};
Lua.State.prototype.pushjs = function(ob) {
	var i = Lua.refs.indexOf(ob);
	if (i !== -1) {
		this.getfield(Lua.defines.REGISTRYINDEX, "wrapped");
		this.pushnumber(i);
		this.gettable(-2);
		if (!this.isnil(-1)) {
			this.remove(this.gettop()-2+1); // Remove "wrapped" from the stack; remove can't take a psuedo index
			return;
		} else {
			// Object has been removed from weak table, but hasn't been collected yet.
			this.pop(2);
		}
	}
	i = Lua.refs_i++;
	Lua.refs[i] = ob;
	var box = this.newuserdata(8);
	emscripten.setValue(box, i, "double");
	this.setmetatable("_PROXY_MT");
	// Save in lua table
	this.getfield(Lua.defines.REGISTRYINDEX, "wrapped");
	this.pushnumber(i);
	this.pushvalue(-3);
	this.settable(-3);
	this.pop(1); // pop "wrapped"
};
// Get main lua_State of given thread
var getmain = function(L) {
	L.rawgeti(Lua.defines.REGISTRYINDEX, Lua.defines.RIDX_MAINTHREAD);
	var _L = L.tothread(-1);
	L.pop(1);
	return _L;
}
Lua.State.prototype.push = function(ob) {
	switch (typeof ob) {
		case "boolean":
			return this.pushboolean(ob?1:0);
		case "number":
			return this.pushnumber(ob);
		case "string":
			return this.pushstring(ob);
		case "undefined":
			return this.pushnil();
		default:
			if (typeof ob === "function" && ob.L instanceof Lua.State && ob.L._L === getmain(this)) { // Is Lua.Proxy object for this state
				return ob.push();
			}
			/* convert Classes of the primitive objects to primitives */
			if (typeof ob === "object" && (ob instanceof Boolean || ob instanceof Number || ob instanceof String)) {
				return this.push(ob.valueOf());
			}
			return this.pushjs(ob);
	}
};
Lua.State.prototype.load = function(code, name, mode) {
	var chars = emscripten.intArrayFromString(code, true);
	if (this.loadbufferx(chars, chars.length, name, mode) !== 0) {
		throw new Lua.Error(this, -1);
	}
	var r = new Lua.Proxy(this, -1);
	this.pop(1);
	return r;
};
Lua.State.prototype.execute = function(code) {
	var proxy = this.load(code);
	var args = slice.call(arguments, 1);
	return proxy.invoke(args);
};

Lua.Proxy = function (L, i) {
	// Push the given index (luaL_ref pops it)
	L.pushvalue(i);
	var ref = L.ref(Lua.defines.REGISTRYINDEX);

	// Use the main stack for calling
	var _L = getmain(L);
	if (L._L != _L) {
		L = new Lua.State(_L);
	}

	return Lua.Proxy.create(L, ref);
};
Lua.Proxy.create = function(L, ref) {
	// We want the proxy to be callable as a normal JS function
	// This means we have to attach other methods to the function manually
	// and return only the first return result
	function self() {
		"use strict"; /* if a function isn't strict, you can't pass null as 'this' */
		var args = slice.call(arguments, 0);
		args.splice(0, 0, this);
		return self.invoke(args, 1)[0];
	}

	self.L = L;
	self.ref = ref;

	// Add methods
	self.invoke   = Lua.Proxy.invoke;
	self.push     = Lua.Proxy.push;
	self.free     = Lua.Proxy.free;
	self.toString = Lua.Proxy.toString;
	self.get      = Lua.Proxy.get;
	self.set      = Lua.Proxy.set;

	return self;
};
Lua.Proxy.push = function() {
	this.L.rawgeti(Lua.defines.REGISTRYINDEX, this.ref);
};
Lua.Proxy.free = function() {
	this.L.unref(Lua.defines.REGISTRYINDEX, this.ref);
	this.ref = Lua.defines.NOREF;
};
Lua.Proxy.invoke = function(args, n_results) {
	if (this.L.checkstack(1+1+args.length)===0) throw "Out of stack space";
	if ((n_results === void 0) || (n_results === null)) {
		n_results = Lua.defines.MULTRET;
	}
	var pre = this.L.gettop();
	this.L.pushcclosure(Lua.cfuncs.traceback, 0);
	this.push();
	for (var i=0; i<args.length; i++) {
		this.L.push(args[i]);
	}
	if (this.L.pcall(args.length, n_results, pre+1) !== 0) {
		var err = this.L.lua_to_js(-1);
		this.L.settop(pre);
		throw err;
	}
	var top = this.L.gettop();
	var results=[];
	for (var j=pre+2; j<=top; j++) {
		results.push(this.L.lua_to_js(j));
	}
	this.L.settop(pre);
	return results;
};
Lua.Proxy.toString = function() {
	this.push();
	var s = this.L.tostring(-1);
	this.L.pop(2); // Pop self + tostring result
	return s;
};
Lua.Proxy.get = function(key) {
	this.push();
	this.L.push(key);
	this.L.gettable(-2);
	var res = this.L.lua_to_js(-1);
	this.L.pop(2); // Pop self + result
	return res;
};
Lua.Proxy.set = function(key, value) {
	this.push();
	this.L.push(key);
	this.L.push(value);
	this.L.settable(-3);
	this.L.pop(1); // Pop self
	return;
};

Lua.init = function() {
	// Create arbitraily "primary" lua state
	var L = exports.L = new Lua.State();
	L.execute("dofile'js.lua'");
	if (typeof window === 'object') {
		// Run script tags on page
		var onload = window.onload;
		window.onload = function() {
			if (onload) onload();
			Lua.executeScripts(L);
		};
	}
};
Lua.executeScripts = function(L) {
	Array.prototype.forEach.call(document.querySelectorAll('script[type=\"text\/lua\"]'), function(tag) {
		L.execute(tag.innerHTML);
	});
};
if (!emscripten.noInitialRun) Lua.init();

return Lua;
})(typeof module !== 'undefined' ? module.exports : this, this, Module);


