
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
fileData0 = [];
fileData0.push.apply(fileData0, [45, 45, 32, 77, 97, 107, 101, 32, 119, 105, 110, 100, 111, 119, 32, 111, 98, 106, 101, 99, 116, 32, 97, 32, 103, 108, 111, 98, 97, 108, 10, 119, 105, 110, 100, 111, 119, 32, 61, 32, 106, 115, 46, 103, 108, 111, 98, 97, 108, 59, 10, 10, 100, 111, 32, 45, 45, 32, 67, 114, 101, 97, 116, 101, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 32, 97, 110, 100, 32, 106, 115, 46, 112, 97, 105, 114, 115, 32, 102, 117, 110, 99, 116, 105, 111, 110, 115, 46, 32, 97, 116, 116, 97, 99, 104, 32, 97, 115, 32, 95, 95, 112, 97, 105, 114, 115, 32, 97, 110, 100, 32, 95, 95, 105, 112, 97, 105, 114, 115, 32, 111, 110, 32, 74, 83, 32, 117, 115, 101, 114, 100, 97, 116, 97, 32, 111, 98, 106, 101, 99, 116, 115, 46, 10, 9, 108, 111, 99, 97, 108, 32, 95, 80, 82, 79, 88, 89, 95, 77, 84, 32, 61, 32, 100, 101, 98, 117, 103, 46, 103, 101, 116, 114, 101, 103, 105, 115, 116, 114, 121, 40, 41, 46, 95, 80, 82, 79, 88, 89, 95, 77, 84, 10, 10, 9, 45, 45, 32, 73, 116, 101, 114, 97, 116, 101, 115, 32, 102, 114, 111, 109, 32, 48, 32, 116, 111, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 46, 108, 101, 110, 103, 116, 104, 45, 49, 10, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 95, 105, 110, 101, 120, 116, 40, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 44, 32, 105, 41, 10, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 10, 9, 9, 105, 102, 32, 105, 32, 62, 61, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 46, 108, 101, 110, 103, 116, 104, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 105, 44, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 91, 105, 93, 10, 9, 101, 110, 100, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 40, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 41, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 106, 115, 95, 105, 110, 101, 120, 116, 44, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 44, 32, 45, 49, 10, 9, 101, 110, 100, 10, 9, 95, 80, 82, 79, 88, 89, 95, 77, 84, 46, 95, 95, 105, 112, 97, 105, 114, 115, 32, 61, 32, 106, 115, 46, 105, 112, 97, 105, 114, 115, 10, 10, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 95, 110, 101, 120, 116, 40, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 44, 32, 108, 97, 115, 116, 41, 10, 9, 9, 105, 102, 32, 105, 32, 62, 61, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 46, 108, 101, 110, 103, 116, 104, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 32, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 105, 44, 32, 99, 111, 108, 108, 101, 99, 116, 105, 111, 110, 91, 105, 93, 10, 9, 101, 110, 100, 10, 9, 102, 117, 110, 99, 116, 105, 111, 110, 32, 106, 115, 46, 112, 97, 105, 114, 115, 40, 111, 98, 41, 10, 9, 9, 108, 111, 99, 97, 108, 32, 107, 101, 121, 115, 32, 61, 32, 106, 115, 46, 103, 108, 111, 98, 97, 108, 46, 79, 98, 106, 101, 99, 116, 58, 103, 101, 116, 79, 119, 110, 80, 114, 111, 112, 101, 114, 116, 121, 78, 97, 109, 101, 115, 40, 111, 98, 41, 32, 45, 45, 32, 83, 104, 111, 117, 108, 100, 32, 116, 104, 105, 115, 32, 98, 101, 32, 79, 98, 106, 101, 99, 116, 46, 107, 101, 121, 115, 63, 10, 9, 9, 108, 111, 99, 97, 108, 32, 105, 32, 61, 32, 48, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 116, 105, 111, 110, 40, 111, 98, 44, 32, 108, 97, 115, 116, 41, 10, 9, 9, 9, 108, 111, 99, 97, 108, 32, 107, 32, 61, 32, 107, 101, 121, 115, 91, 105, 93, 10, 9, 9, 9, 105, 32, 61, 32, 105, 32, 43, 32, 49, 59, 10, 9, 9, 9, 114, 101, 116, 117, 114, 110, 32, 107, 44, 32, 111, 98, 91, 107, 93, 10, 9, 9, 101, 110, 100, 44, 32, 111, 98, 44, 32, 110, 105, 108, 10, 9, 101, 110, 100, 10, 9, 95, 80, 82, 79, 88, 89, 95, 77, 84, 46, 95, 95, 112, 97, 105, 114, 115, 32, 61, 32, 106, 115, 46, 112, 97, 105, 114, 115, 10, 101, 110, 100, 10, 10, 45, 45, 32, 83, 101, 116, 32, 117, 112, 32, 114, 101, 113, 117, 105, 114, 101, 32, 112, 97, 116, 104, 115, 32, 116, 111, 32, 98, 101, 32, 115, 101, 110, 115, 105, 98, 108, 101, 32, 102, 111, 114, 32, 116, 104, 101, 32, 98, 114, 111, 119, 115, 101, 114, 10, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 117, 114, 108, 41, 10, 9, 108, 111, 99, 97, 108, 32, 120, 104, 114, 32, 61, 32, 106, 115, 46, 110, 101, 119, 40, 119, 105, 110, 100, 111, 119, 46, 88, 77, 76, 72, 116, 116, 112, 82, 101, 113, 117, 101, 115, 116, 41, 10, 9, 120, 104, 114, 58, 111, 112, 101, 110, 40, 34, 71, 69, 84, 34, 44, 32, 117, 114, 108, 44, 32, 102, 97, 108, 115, 101, 41, 32, 45, 45, 32, 83, 121, 110, 99, 104, 114, 111, 110, 111, 117, 115, 10, 9, 45, 45, 32, 78, 101, 101, 100, 32, 116, 111, 32, 112, 99, 97, 108, 108, 32, 120, 104, 114, 58, 115, 101, 110, 100, 40, 41, 44, 32, 97, 115, 32, 105, 116, 32, 99, 97, 110, 32, 116, 104, 114, 111, 119, 32, 97, 32, 78, 101, 116, 119, 111, 114, 107, 69, 114, 114, 111, 114, 32, 105, 102, 32, 67, 79, 82, 83, 32, 102, 97, 105, 108, 115, 10, 9, 108, 111, 99, 97, 108, 32, 111, 107, 44, 32, 101, 114, 114, 32, 61, 32, 112, 99, 97, 108, 108, 40, 120, 104, 114, 46, 115, 101, 110, 100, 44, 32, 120, 104, 114, 41, 10, 9, 105, 102, 32, 110, 111, 116, 32, 111, 107, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 44, 32, 116, 111, 115, 116, 114, 105, 110, 103, 40, 101, 114, 114, 41, 10, 9, 101, 108, 115, 101, 105, 102, 32, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 32, 126, 61, 32, 50, 48, 48, 32, 116, 104, 101, 110, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 110, 105, 108, 44, 32, 34, 72, 84, 84, 80, 32, 71, 69, 84, 32, 34, 32, 46, 46, 32, 120, 104, 114, 46, 115, 116, 97, 116, 117, 115, 84, 101, 120, 116, 32, 46, 46, 32, 34, 58, 32, 34, 32, 46, 46, 32, 117, 114, 108, 10, 9, 101, 110, 100, 10, 9, 114, 101, 116, 117, 114, 110, 32, 108, 111, 97, 100, 40, 120, 104, 114, 46, 114, 101, 115, 112, 111, 110, 115, 101, 84, 101, 120, 116, 44, 32, 117, 114, 108, 41, 10, 101, 110, 100, 10, 112, 97, 99, 107, 97, 103, 101, 46, 112, 97, 116, 104, 32, 61, 32, 34, 34, 10, 112, 97, 99, 107, 97, 103, 101, 46, 99, 112, 97, 116, 104, 32, 61, 32, 34, 34, 10, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 112, 97, 99, 107, 97, 103, 101, 46, 115, 101, 97, 114, 99, 104, 101, 114, 115, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 105, 102, 32, 110, 111, 116, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 109, 97, 116, 99, 104, 40, 34, 47, 34, 41, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 108, 108, 95, 117, 114, 108, 32, 61, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 103, 115, 117, 98, 40, 34, 37, 46, 34, 44, 32, 34, 47, 34, 41, 32, 46, 46, 32, 34, 46, 108, 117, 97, 34, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 102, 117, 108, 108, 95, 117, 114, 108, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 32, 101, 110, 100, 10, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 108, 108, 95, 117, 114, 108, 32, 61, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 103, 115, 117, 98, 40, 34, 37, 46, 34, 44, 32, 34, 47, 34, 41, 32, 46, 46, 32, 34, 47, 105, 110, 105, 116, 46, 108, 117, 97, 34, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 50, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 102, 117, 108, 108, 95, 117, 114, 108, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 126, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 32, 101, 110, 100, 10, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 32, 46, 46, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 50, 10, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10, 116, 97, 98, 108, 101, 46, 105, 110, 115, 101, 114, 116, 40, 112, 97, 99, 107, 97, 103, 101, 46, 115, 101, 97, 114, 99, 104, 101, 114, 115, 44, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 105, 102, 32, 109, 111, 100, 95, 110, 97, 109, 101, 58, 109, 97, 116, 99, 104, 40, 34, 94, 104, 116, 116, 112, 115, 63, 58, 47, 47, 34, 41, 32, 116, 104, 101, 110, 10, 9, 9, 108, 111, 99, 97, 108, 32, 102, 117, 110, 99, 44, 32, 101, 114, 114, 32, 61, 32, 108, 111, 97, 100, 95, 108, 117, 97, 95, 111, 118, 101, 114, 95, 104, 116, 116, 112, 40, 109, 111, 100, 95, 110, 97, 109, 101, 41, 10, 9, 9, 105, 102, 32, 102, 117, 110, 99, 32, 61, 61, 32, 110, 105, 108, 32, 116, 104, 101, 110, 32, 114, 101, 116, 117, 114, 110, 32, 34, 92, 110, 32, 32, 32, 32, 34, 32, 46, 46, 32, 101, 114, 114, 32, 101, 110, 100, 10, 9, 9, 114, 101, 116, 117, 114, 110, 32, 102, 117, 110, 99, 10, 9, 101, 110, 100, 10, 101, 110, 100, 41, 10]);
Module['FS_createDataFile']('/', 'js.lua', fileData0, true, true);

  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var final = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    final = parse();
  } catch(e) {
    final += '?';
  }
  if (final.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return final;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 134217728;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(12347);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,96,127,64,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,115,116,97,99,107,32,116,114,97,99,101,98,97,99,107,58,0,0,0,0,0,0,0,0,10,9,46,46,46,0,0,0,83,108,110,116,0,0,0,0,10,9,37,115,58,0,0,0,37,100,58,0,0,0,0,0,32,105,110,32,0,0,0,0,10,9,40,46,46,46,116,97,105,108,32,99,97,108,108,115,46,46,46,41,0,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,40,37,115,41,0,0,0,110,0,0,0,0,0,0,0,109,101,116,104,111,100,0,0,99,97,108,108,105,110,103,32,39,37,115,39,32,111,110,32,98,97,100,32,115,101,108,102,32,40,37,115,41,0,0,0,63,0,0,0,0,0,0,0,98,97,100,32,97,114,103,117,109,101,110,116,32,35,37,100,32,116,111,32,39,37,115,39,32,40,37,115,41,0,0,0,83,108,0,0,0,0,0,0,37,115,58,37,100,58,32,0,0,0,0,0,0,0,0,0,37,115,58,32,37,115,0,0,101,120,105,116,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,115,39,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,32,40,37,115,41,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,98,117,102,102,101,114,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,61,115,116,100,105,110,0,0,64,37,115,0,0,0,0,0,114,0,0,0,0,0,0,0,111,112,101,110,0,0,0,0,114,98,0,0,0,0,0,0,114,101,111,112,101,110,0,0,114,101,97,100,0,0,0,0,111,98,106,101,99,116,32,108,101,110,103,116,104,32,105,115,32,110,111,116,32,97,32,110,117,109,98,101,114,0,0,0,95,95,116,111,115,116,114,105,110,103,0,0,0,0,0,0,116,114,117,101,0,0,0,0,102,97,108,115,101,0,0,0,110,105,108,0,0,0,0,0,37,115,58,32,37,112,0,0,95,76,79,65,68,69,68,0,110,97,109,101,32,99,111,110,102,108,105,99,116,32,102,111,114,32,109,111,100,117,108,101,32,39,37,115,39,0,0,0,116,111,111,32,109,97,110,121,32,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,109,117,108,116,105,112,108,101,32,76,117,97,32,86,77,115,32,100,101,116,101,99,116,101,100,0,0,0,0,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,58,32,97,112,112,46,32,110,101,101,100,115,32,37,102,44,32,76,117,97,32,99,111,114,101,32,112,114,111,118,105,100,101,115,32,37,102,0,0,0,98,97,100,32,99,111,110,118,101,114,115,105,111,110,32,110,117,109,98,101,114,45,62,105,110,116,59,32,109,117,115,116,32,114,101,99,111,109,112,105,108,101,32,76,117,97,32,119,105,116,104,32,112,114,111,112,101,114,32,115,101,116,116,105,110,103,115,0,0,0,0,0,80,65,78,73,67,58,32,117,110,112,114,111,116,101,99,116,101,100,32,101,114,114,111,114,32,105,110,32,99,97,108,108,32,116,111,32,76,117,97,32,65,80,73,32,40,37,115,41,10,0,0,0,0,0,0,0,239,187,191,0,0,0,0,0,99,97,110,110,111,116,32,37,115,32,37,115,58,32,37,115,0,0,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,37,115,0,0,0,0,0,102,0,0,0,0,0,0,0,46,0,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,39,37,115,39,0,0,0,109,97,105,110,32,99,104,117,110,107,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,60,37,115,58,37,100,62,0,0,0,0,0,0,0,0,95,71,0,0,0,0,0,0,128,4,0,0,18,0,0,0,136,4,0,0,19,0,0,0,152,4,0,0,20,0,0,0,160,4,0,0,21,0,0,0,168,4,0,0,22,0,0,0,184,4,0,0,23,0,0,0,192,4,0,0,24,0,0,0,208,4,0,0,25,0,0,0,216,4,0,0,25,0,0,0,232,4,0,0,26,0,0,0,240,4,0,0,27,0,0,0,248,4,0,0,28,0,0,0,0,5,0,0,29,0,0,0,8,5,0,0,30,0,0,0,24,5,0,0,31,0,0,0,32,5,0,0,32,0,0,0,40,5,0,0,33,0,0,0,48,5,0,0,34,0,0,0,56,5,0,0,35,0,0,0,72,5,0,0,36,0,0,0,88,5,0,0,37,0,0,0,104,5,0,0,38,0,0,0,112,5,0,0,39,0,0,0,0,0,0,0,0,0,0,0,76,117,97,32,53,46,50,0,95,86,69,82,83,73,79,78,0,0,0,0,0,0,0,0,97,115,115,101,114,116,0,0,99,111,108,108,101,99,116,103,97,114,98,97,103,101,0,0,100,111,102,105,108,101,0,0,101,114,114,111,114,0,0,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,105,112,97,105,114,115,0,0,108,111,97,100,102,105,108,101,0,0,0,0,0,0,0,0,108,111,97,100,0,0,0,0,108,111,97,100,115,116,114,105,110,103,0,0,0,0,0,0,110,101,120,116,0,0,0,0,112,97,105,114,115,0,0,0,112,99,97,108,108,0,0,0,112,114,105,110,116,0,0,0,114,97,119,101,113,117,97,108,0,0,0,0,0,0,0,0,114,97,119,108,101,110,0,0,114,97,119,103,101,116,0,0,114,97,119,115,101,116,0,0,115,101,108,101,99,116,0,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,116,111,110,117,109,98,101,114,0,0,0,0,0,0,0,0,116,111,115,116,114,105,110,103,0,0,0,0,0,0,0,0,116,121,112,101,0,0,0,0,120,112,99,97,108,108,0,0,118,97,108,117,101,32,101,120,112,101,99,116,101,100,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,98,97,115,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,0,32,12,10,13,9,11,0,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,95,95,109,101,116,97,116,97,98,108,101,0,0,0,0,0,99,97,110,110,111,116,32,99,104,97,110,103,101,32,97,32,112,114,111,116,101,99,116,101,100,32,109,101,116,97,116,97,98,108,101,0,0,0,0,0,105,110,100,101,120,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,116,97,98,108,101,32,111,114,32,115,116,114,105,110,103,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,39,116,111,115,116,114,105,110,103,39,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,32,116,111,32,39,112,114,105,110,116,39,0,0,0,0,0,0,95,95,112,97,105,114,115,0,98,116,0,0,0,0,0,0,61,40,108,111,97,100,41,0,116,111,111,32,109,97,110,121,32,110,101,115,116,101,100,32,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,114,101,97,100,101,114,32,102,117,110,99,116,105,111,110,32,109,117,115,116,32,114,101,116,117,114,110,32,97,32,115,116,114,105,110,103,0,0,0,0,95,95,105,112,97,105,114,115,0,0,0,0,0,0,0,0,16,7,0,0,24,7,0,0,32,7,0,0,40,7,0,0,48,7,0,0,56,7,0,0,72,7,0,0,88,7,0,0,104,7,0,0,120,7,0,0,136,7,0,0,0,0,0,0,115,116,111,112,0,0,0,0,114,101,115,116,97,114,116,0,99,111,108,108,101,99,116,0,99,111,117,110,116,0,0,0,115,116,101,112,0,0,0,0,115,101,116,112,97,117,115,101,0,0,0,0,0,0,0,0,115,101,116,115,116,101,112,109,117,108,0,0,0,0,0,0,115,101,116,109,97,106,111,114,105,110,99,0,0,0,0,0,105,115,114,117,110,110,105,110,103,0,0,0,0,0,0,0,103,101,110,101,114,97,116,105,111,110,97,108,0,0,0,0,105,110,99,114,101,109,101,110,116,97,108,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,37,115,0,0,0,0,0,0,97,115,115,101,114,116,105,111,110,32,102,97,105,108,101,100,33,0,0,0,0,0,0,0,80,8,0,0,40,0,0,0,88,8,0,0,41,0,0,0,96,8,0,0,42,0,0,0,104,8,0,0,43,0,0,0,112,8,0,0,44,0,0,0,120,8,0,0,45,0,0,0,128,8,0,0,46,0,0,0,136,8,0,0,47,0,0,0,144,8,0,0,48,0,0,0,152,8,0,0,49,0,0,0,160,8,0,0,50,0,0,0,168,8,0,0,51,0,0,0,0,0,0,0,0,0,0,0,97,114,115,104,105,102,116,0,98,97,110,100,0,0,0,0,98,110,111,116,0,0,0,0,98,111,114,0,0,0,0,0,98,120,111,114,0,0,0,0,98,116,101,115,116,0,0,0,101,120,116,114,97,99,116,0,108,114,111,116,97,116,101,0,108,115,104,105,102,116,0,0,114,101,112,108,97,99,101,0,114,114,111,116,97,116,101,0,114,115,104,105,102,116,0,0,102,105,101,108,100,32,99,97,110,110,111,116,32,98,101,32,110,101,103,97,116,105,118,101,0,0,0,0,0,0,0,0,119,105,100,116,104,32,109,117,115,116,32,98,101,32,112,111,115,105,116,105,118,101,0,0,116,114,121,105,110,103,32,116,111,32,97,99,99,101,115,115,32,110,111,110,45,101,120,105,115,116,101,110,116,32,98,105,116,115,0,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,101,120,112,114,101,115,115,105,111,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,0,99,111,110,115,116,114,117,99,116,111,114,32,116,111,111,32,108,111,110,103,0,0,0,0,99,111,110,115,116,97,110,116,115,0,0,0,0,0,0,0,111,112,99,111,100,101,115,0,99,111,110,116,114,111,108,32,115,116,114,117,99,116,117,114,101,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,192,9,0,0,52,0,0,0,200,9,0,0,53,0,0,0,208,9,0,0,54,0,0,0,216,9,0,0,55,0,0,0,224,9,0,0,56,0,0,0,232,9,0,0,57,0,0,0,0,0,0,0,0,0,0,0,99,114,101,97,116,101,0,0,114,101,115,117,109,101,0,0,114,117,110,110,105,110,103,0,115,116,97,116,117,115,0,0,119,114,97,112,0,0,0,0,121,105,101,108,100,0,0,0,116,111,111,32,109,97,110,121,32,97,114,103,117,109,101,110,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,116,111,111,32,109,97,110,121,32,114,101,115,117,108,116,115,32,116,111,32,114,101,115,117,109,101,0,0,0,0,0,0,99,111,114,111,117,116,105,110,101,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,115,117,115,112,101,110,100,101,100,0,0,0,0,0,0,0,110,111,114,109,97,108,0,0,100,101,97,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,8,8,8,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,22,22,22,22,22,22,22,22,22,22,4,4,4,4,4,4,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,5,4,21,21,21,21,21,21,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,4,4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,12,0,0,58,0,0,0,32,12,0,0,59,0,0,0,48,12,0,0,60,0,0,0,56,12,0,0,61,0,0,0,64,12,0,0,62,0,0,0,80,12,0,0,63,0,0,0,96,12,0,0,64,0,0,0,112,12,0,0,65,0,0,0,128,12,0,0,66,0,0,0,144,12,0,0,67,0,0,0,160,12,0,0,68,0,0,0,176,12,0,0,69,0,0,0,184,12,0,0,70,0,0,0,200,12,0,0,71,0,0,0,216,12,0,0,72,0,0,0,232,12,0,0,73,0,0,0,0,0,0,0,0,0,0,0,100,101,98,117,103,0,0,0,103,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,103,101,116,104,111,111,107,0,103,101,116,105,110,102,111,0,103,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,103,101,116,114,101,103,105,115,116,114,121,0,0,0,0,0,103,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,103,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,117,112,118,97,108,117,101,106,111,105,110,0,0,0,0,0,117,112,118,97,108,117,101,105,100,0,0,0,0,0,0,0,115,101,116,117,115,101,114,118,97,108,117,101,0,0,0,0,115,101,116,104,111,111,107,0,115,101,116,108,111,99,97,108,0,0,0,0,0,0,0,0,115,101,116,109,101,116,97,116,97,98,108,101,0,0,0,0,115,101,116,117,112,118,97,108,117,101,0,0,0,0,0,0,116,114,97,99,101,98,97,99,107,0,0,0,0,0,0,0,110,105,108,32,111,114,32,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,0,108,101,118,101,108,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,95,72,75,69,89,0,0,0,107,0,0,0,0,0,0,0,95,95,109,111,100,101,0,0,88,13,0,0,96,13,0,0,104,13,0,0,112,13,0,0,120,13,0,0,0,0,0,0,99,97,108,108,0,0,0,0,114,101,116,117,114,110,0,0,108,105,110,101,0,0,0,0,99,111,117,110,116,0,0,0,116,97,105,108,32,99,97,108,108,0,0,0,0,0,0,0,102,117,108,108,32,117,115,101,114,100,97,116,97,32,101,120,112,101,99,116,101,100,44,32,103,111,116,32,108,105,103,104,116,32,117,115,101,114,100,97,116,97,0,0,0,0,0,0,62,117,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,112,118,97,108,117,101,32,105,110,100,101,120,0,0,0,76,117,97,32,102,117,110,99,116,105,111,110,32,101,120,112,101,99,116,101,100,0,0,0,102,108,110,83,116,117,0,0,62,37,115,0,0,0,0,0,102,117,110,99,116,105,111,110,32,111,114,32,108,101,118,101,108,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,0,0,115,111,117,114,99,101,0,0,115,104,111,114,116,95,115,114,99,0,0,0,0,0,0,0,108,105,110,101,100,101,102,105,110,101,100,0,0,0,0,0,108,97,115,116,108,105,110,101,100,101,102,105,110,101,100,0,119,104,97,116,0,0,0,0,99,117,114,114,101,110,116,108,105,110,101,0,0,0,0,0,110,117,112,115,0,0,0,0,110,112,97,114,97,109,115,0,105,115,118,97,114,97,114,103,0,0,0,0,0,0,0,0,110,97,109,101,0,0,0,0,110,97,109,101,119,104,97,116,0,0,0,0,0,0,0,0,105,115,116,97,105,108,99,97,108,108,0,0,0,0,0,0,97,99,116,105,118,101,108,105,110,101,115,0,0,0,0,0,102,117,110,99,0,0,0,0,101,120,116,101,114,110,97,108,32,104,111,111,107,0,0,0,108,117,97,95,100,101,98,117,103,62,32,0,0,0,0,0,99,111,110,116,10,0,0,0,61,40,100,101,98,117,103,32,99,111,109,109,97,110,100,41,0,0,0,0,0,0,0,0,37,115,10,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,37,115,32,39,37,115,39,32,40,97,32,37,115,32,118,97,108,117,101,41,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,37,115,32,97,32,37,115,32,118,97,108,117,101,0,0,0,0,0,0,0,0,99,111,110,99,97,116,101,110,97,116,101,0,0,0,0,0,112,101,114,102,111,114,109,32,97,114,105,116,104,109,101,116,105,99,32,111,110,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,116,119,111,32,37,115,32,118,97,108,117,101,115,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,99,111,109,112,97,114,101,32,37,115,32,119,105,116,104,32,37,115,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,108,111,99,97,108,0,0,0,95,69,78,86,0,0,0,0,103,108,111,98,97,108,0,0,102,105,101,108,100,0,0,0,117,112,118,97,108,117,101,0,99,111,110,115,116,97,110,116,0,0,0,0,0,0,0,0,109,101,116,104,111,100,0,0,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,111,114,32,105,116,101,114,97,116,111,114,0,0,0,0,109,101,116,97,109,101,116,104,111,100,0,0,0,0,0,0,61,91,67,93,0,0,0,0,67,0,0,0,0,0,0,0,61,63,0,0,0,0,0,0,109,97,105,110,0,0,0,0,76,117,97,0,0,0,0,0,40,42,116,101,109,112,111,114,97,114,121,41,0,0,0,0,40,42,118,97,114,97,114,103,41,0,0,0,0,0,0,0,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,67,32,115,116,97,99,107,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,97,99,114,111,115,115,32,97,32,67,45,99,97,108,108,32,98,111,117,110,100,97,114,121,0,0,0,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,121,105,101,108,100,32,102,114,111,109,32,111,117,116,115,105,100,101,32,97,32,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,98,105,110,97,114,121,0,0,116,101,120,116,0,0,0,0,97,116,116,101,109,112,116,32,116,111,32,108,111,97,100,32,97,32,37,115,32,99,104,117,110,107,32,40,109,111,100,101,32,105,115,32,39,37,115,39,41,0,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,101,114,114,111,114,32,104,97,110,100,108,105,110,103,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,110,111,110,45,115,117,115,112,101,110,100,101,100,32,99,111,114,111,117,116,105,110,101,0,0,0,99,97,110,110,111,116,32,114,101,115,117,109,101,32,100,101,97,100,32,99,111,114,111,117,116,105,110,101,0,0,0,0,99,97,108,108,0,0,0,0,110,111,32,109,101,115,115,97,103,101,0,0,0,0,0,0,101,114,114,111,114,32,105,110,32,95,95,103,99,32,109,101,116,97,109,101,116,104,111,100,32,40,37,115,41,0,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,95,71,0,0,0,0,0,0,112,97,99,107,97,103,101,0,99,111,114,111,117,116,105,110,101,0,0,0,0,0,0,0,116,97,98,108,101,0,0,0,111,115,0,0,0,0,0,0,115,116,114,105,110,103,0,0,98,105,116,51,50,0,0,0,109,97,116,104,0,0,0,0,100,101,98,117,103,0,0,0,120,20,0,0,128,20,0,0,136,20,0,0,144,20,0,0,152,20,0,0,160,20,0,0,168,20,0,0,176,20,0,0,184,20,0,0,200,20,0,0,208,20,0,0,216,20,0,0,224,20,0,0,232,20,0,0,240,20,0,0,248,20,0,0,0,21,0,0,8,21,0,0,16,21,0,0,24,21,0,0,32,21,0,0,40,21,0,0,48,21,0,0,56,21,0,0,64,21,0,0,72,21,0,0,80,21,0,0,88,21,0,0,96,21,0,0,104,21,0,0,112,21,0,0,128,21,0,0,136,21,0,0,0,0,0,0,39,37,99,39,0,0,0,0,99,104,97,114,40,37,100,41,0,0,0,0,0,0,0,0,39,37,115,39,0,0,0,0,95,69,78,86,0,0,0,0,105,110,118,97,108,105,100,32,108,111,110,103,32,115,116,114,105,110,103,32,100,101,108,105,109,105,116,101,114,0,0,0,46,0,0,0,0,0,0,0,69,101,0,0,0,0,0,0,88,120,0,0,0,0,0,0,80,112,0,0,0,0,0,0,43,45,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,108,101,120,105,99,97,108,32,101,108,101,109,101,110,116,32,116,111,111,32,108,111,110,103,0,0,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,115,116,114,105,110,103,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,101,115,99,97,112,101,32,115,101,113,117,101,110,99,101,0,100,101,99,105,109,97,108,32,101,115,99,97,112,101,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,0,0,104,101,120,97,100,101,99,105,109,97,108,32,100,105,103,105,116,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,115,116,114,105,110,103,0,0,117,110,102,105,110,105,115,104,101,100,32,108,111,110,103,32,99,111,109,109,101,110,116,0,99,104,117,110,107,32,104,97,115,32,116,111,111,32,109,97,110,121,32,108,105,110,101,115,0,0,0,0,0,0,0,0,37,115,58,37,100,58,32,37,115,0,0,0,0,0,0,0,37,115,32,110,101,97,114,32,37,115,0,0,0,0,0,0,97,110,100,0,0,0,0,0,98,114,101,97,107,0,0,0,100,111,0,0,0,0,0,0,101,108,115,101,0,0,0,0,101,108,115,101,105,102,0,0,101,110,100,0,0,0,0,0,102,97,108,115,101,0,0,0,102,111,114,0,0,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,103,111,116,111,0,0,0,0,105,102,0,0,0,0,0,0,105,110,0,0,0,0,0,0,108,111,99,97,108,0,0,0,110,105,108,0,0,0,0,0,110,111,116,0,0,0,0,0,111,114,0,0,0,0,0,0,114,101,112,101,97,116,0,0,114,101,116,117,114,110,0,0,116,104,101,110,0,0,0,0,116,114,117,101,0,0,0,0,117,110,116,105,108,0,0,0,119,104,105,108,101,0,0,0,46,46,0,0,0,0,0,0,46,46,46,0,0,0,0,0,61,61,0,0,0,0,0,0,62,61,0,0,0,0,0,0,60,61,0,0,0,0,0,0,126,61,0,0,0,0,0,0,58,58,0,0,0,0,0,0,60,101,111,102,62,0,0,0,60,110,117,109,98,101,114,62,0,0,0,0,0,0,0,0,60,110,97,109,101,62,0,0,60,115,116,114,105,110,103,62,0,0,0,0,0,0,0,0,144,22,0,0,74,0,0,0,152,22,0,0,75,0,0,0,160,22,0,0,76,0,0,0,168,22,0,0,77,0,0,0,176,22,0,0,78,0,0,0,184,22,0,0,79,0,0,0,192,22,0,0,80,0,0,0,200,22,0,0,81,0,0,0,208,22,0,0,82,0,0,0,216,22,0,0,83,0,0,0,224,22,0,0,84,0,0,0,232,22,0,0,85,0,0,0,240,22,0,0,86,0,0,0,248,22,0,0,87,0,0,0,0,23,0,0,88,0,0,0,8,23,0,0,89,0,0,0,16,23,0,0,90,0,0,0,24,23,0,0,91,0,0,0,32,23,0,0,92,0,0,0,40,23,0,0,93,0,0,0,48,23,0,0,94,0,0,0,56,23,0,0,95,0,0,0,64,23,0,0,96,0,0,0,80,23,0,0,97,0,0,0,88,23,0,0,98,0,0,0,96,23,0,0,99,0,0,0,104,23,0,0,100,0,0,0,112,23,0,0,101,0,0,0,0,0,0,0,0,0,0,0,112,105,0,0,0,0,0,0,104,117,103,101,0,0,0,0,97,98,115,0,0,0,0,0,97,99,111,115,0,0,0,0,97,115,105,110,0,0,0,0,97,116,97,110,50,0,0,0,97,116,97,110,0,0,0,0,99,101,105,108,0,0,0,0,99,111,115,104,0,0,0,0,99,111,115,0,0,0,0,0,100,101,103,0,0,0,0,0,101,120,112,0,0,0,0,0,102,108,111,111,114,0,0,0,102,109,111,100,0,0,0,0,102,114,101,120,112,0,0,0,108,100,101,120,112,0,0,0,108,111,103,49,48,0,0,0,108,111,103,0,0,0,0,0,109,97,120,0,0,0,0,0,109,105,110,0,0,0,0,0,109,111,100,102,0,0,0,0,112,111,119,0,0,0,0,0,114,97,100,0,0,0,0,0,114,97,110,100,111,109,0,0,114,97,110,100,111,109,115,101,101,100,0,0,0,0,0,0,115,105,110,104,0,0,0,0,115,105,110,0,0,0,0,0,115,113,114,116,0,0,0,0,116,97,110,104,0,0,0,0,116,97,110,0,0,0,0,0,105,110,116,101,114,118,97,108,32,105,115,32,101,109,112,116,121,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,0,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,0,0,0,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,101,114,114,111,114,58,32,98,108,111,99,107,32,116,111,111,32,98,105,103,0,0,95,67,76,73,66,83,0,0,95,95,103,99,0,0,0,0,176,27,0,0,102,0,0,0,184,27,0,0,103,0,0,0,200,27,0,0,104,0,0,0,0,0,0,0,0,0,0,0,108,111,97,100,101,114,115,0,115,101,97,114,99,104,101,114,115,0,0,0,0,0,0,0,112,97,116,104,0,0,0,0,76,85,65,95,80,65,84,72,95,53,95,50,0,0,0,0,76,85,65,95,80,65,84,72,0,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,115,104,97,114,101,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,108,117,97,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,47,105,110,105,116,46,108,117,97,59,46,47,63,46,108,117,97,0,0,0,0,0,0,0,99,112,97,116,104,0,0,0,76,85,65,95,67,80,65,84,72,95,53,95,50,0,0,0,76,85,65,95,67,80,65,84,72,0,0,0,0,0,0,0,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,63,46,115,111,59,47,117,115,114,47,108,111,99,97,108,47,108,105,98,47,108,117,97,47,53,46,50,47,108,111,97,100,97,108,108,46,115,111,59,46,47,63,46,115,111,0,0,0,0,47,10,59,10,63,10,33,10,45,10,0,0,0,0,0,0,99,111,110,102,105,103,0,0,95,76,79,65,68,69,68,0,108,111,97,100,101,100,0,0,95,80,82,69,76,79,65,68,0,0,0,0,0,0,0,0,112,114,101,108,111,97,100,0,192,25,0,0,105,0,0,0,200,25,0,0,106,0,0,0,0,0,0,0,0,0,0,0,109,111,100,117,108,101,0,0,114,101,113,117,105,114,101,0,39,112,97,99,107,97,103,101,46,115,101,97,114,99,104,101,114,115,39,32,109,117,115,116,32,98,101,32,97,32,116,97,98,108,101,0,0,0,0,0,109,111,100,117,108,101,32,39,37,115,39,32,110,111,116,32,102,111,117,110,100,58,37,115,0,0,0,0,0,0,0,0,95,78,65,77,69,0,0,0,102,0,0,0,0,0,0,0,39,109,111,100,117,108,101,39,32,110,111,116,32,99,97,108,108,101,100,32,102,114,111,109,32,97,32,76,117,97,32,102,117,110,99,116,105,111,110,0,95,77,0,0,0,0,0,0,95,80,65,67,75,65,71,69,0,0,0,0,0,0,0,0,59,59,0,0,0,0,0,0,59,1,59,0,0,0,0,0,1,0,0,0,0,0,0,0,76,85,65,95,78,79,69,78,86,0,0,0,0,0,0,0,47,0,0,0,0,0,0,0,10,9,110,111,32,109,111,100,117,108,101,32,39,37,115,39,32,105,110,32,102,105,108,101,32,39,37,115,39,0,0,0,101,114,114,111,114,32,108,111,97,100,105,110,103,32,109,111,100,117,108,101,32,39,37,115,39,32,102,114,111,109,32,102,105,108,101,32,39,37,115,39,58,10,9,37,115,0,0,0,46,0,0,0,0,0,0,0,95,0,0,0,0,0,0,0,108,117,97,111,112,101,110,95,37,115,0,0,0,0,0,0,100,121,110,97,109,105,99,32,108,105,98,114,97,114,105,101,115,32,110,111,116,32,101,110,97,98,108,101,100,59,32,99,104,101,99,107,32,121,111,117,114,32,76,117,97,32,105,110,115,116,97,108,108,97,116,105,111,110,0,0,0,0,0,0,39,112,97,99,107,97,103,101,46,37,115,39,32,109,117,115,116,32,98,101,32,97,32,115,116,114,105,110,103,0,0,0,63,0,0,0,0,0,0,0,10,9,110,111,32,102,105,108,101,32,39,37,115,39,0,0,114,0,0,0,0,0,0,0,10,9,110,111,32,102,105,101,108,100,32,112,97,99,107,97,103,101,46,112,114,101,108,111,97,100,91,39,37,115,39,93,0,0,0,0,0,0,0,0,108,111,97,100,108,105,98,0,115,101,97,114,99,104,112,97,116,104,0,0,0,0,0,0,115,101,101,97,108,108,0,0,95,95,105,110,100,101,120,0,97,98,115,101,110,116,0,0,105,110,105,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,110,78,0,0,0,0,0,0,120,88,0,0,0,0,0,0,40,110,117,108,108,41,0,0,37,112,0,0,0,0,0,0,37,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,108,117,97,95,112,117,115,104,102,115,116,114,105,110,103,39,0,0,0,0,0,0,46,46,46,0,0,0,0,0,91,115,116,114,105,110,103,32,34,0,0,0,0,0,0,0,34,93,0,0,0,0,0,0,96,113,65,84,80,80,92,108,60,16,60,84,108,124,124,124,124,124,124,96,96,96,104,34,188,188,188,132,228,84,84,16,98,98,4,98,20,81,80,23,248,29,0,0,107,0,0,0,0,30,0,0,108,0,0,0,8,30,0,0,109,0,0,0,24,30,0,0,110,0,0,0,32,30,0,0,111,0,0,0,40,30,0,0,112,0,0,0,48,30,0,0,113,0,0,0,56,30,0,0,114,0,0,0,64,30,0,0,115,0,0,0,80,30,0,0,116,0,0,0,88,30,0,0,117,0,0,0,0,0,0,0,0,0,0,0,99,108,111,99,107,0,0,0,100,97,116,101,0,0,0,0,100,105,102,102,116,105,109,101,0,0,0,0,0,0,0,0,101,120,101,99,117,116,101,0,101,120,105,116,0,0,0,0,103,101,116,101,110,118,0,0,114,101,109,111,118,101,0,0,114,101,110,97,109,101,0,0,115,101,116,108,111,99,97,108,101,0,0,0,0,0,0,0,116,105,109,101,0,0,0,0,116,109,112,110,97,109,101,0,117,110,97,98,108,101,32,116,111,32,103,101,110,101,114,97,116,101,32,97,32,117,110,105,113,117,101,32,102,105,108,101,110,97,109,101,0,0,0,0,115,101,99,0,0,0,0,0,109,105,110,0,0,0,0,0,104,111,117,114,0,0,0,0,100,97,121,0,0,0,0,0,109,111,110,116,104,0,0,0,121,101,97,114,0,0,0,0,105,115,100,115,116,0,0,0,102,105,101,108,100,32,39,37,115,39,32,109,105,115,115,105,110,103,32,105,110,32,100,97,116,101,32,116,97,98,108,101,0,0,0,0,0,0,0,0,6,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,32,31,0,0,40,31,0,0,48,31,0,0,56,31,0,0,72,31,0,0,80,30,0,0,0,0,0,0,0,0,0,0,97,108,108,0,0,0,0,0,99,111,108,108,97,116,101,0,99,116,121,112,101,0,0,0,109,111,110,101,116,97,114,121,0,0,0,0,0,0,0,0,110,117,109,101,114,105,99,0,37,99,0,0,0,0,0,0,42,116,0,0,0,0,0,0,119,100,97,121,0,0,0,0,121,100,97,121,0,0,0,0,97,65,98,66,99,100,72,73,106,109,77,112,83,85,119,87,120,88,121,89,122,37,0,0,105,110,118,97,108,105,100,32,99,111,110,118,101,114,115,105,111,110,32,115,112,101,99,105,102,105,101,114,32,39,37,37,37,115,39,0,0,0,0,0,60,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,110,111,116,32,105,110,115,105,100,101,32,97,32,108,111,111,112,0,0,0,0,0,0,0,110,111,32,118,105,115,105,98,108,101,32,108,97,98,101,108,32,39,37,115,39,32,102,111,114,32,60,103,111,116,111,62,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,60,103,111,116,111,32,37,115,62,32,97,116,32,108,105,110,101,32,37,100,32,106,117,109,112,115,32,105,110,116,111,32,116,104,101,32,115,99,111,112,101,32,111,102,32,108,111,99,97,108,32,39,37,115,39,0,98,114,101,97,107,0,0,0,108,97,98,101,108,115,47,103,111,116,111,115,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,115,121,110,116,97,120,32,101,114,114,111,114,0,0,0,0,67,32,108,101,118,101,108,115,0,0,0,0,0,0,0,0,6,6,6,6,7,7,7,7,7,7,10,9,5,4,3,3,3,3,3,3,3,3,3,3,3,3,2,2,1,1,0,0,99,97,110,110,111,116,32,117,115,101,32,39,46,46,46,39,32,111,117,116,115,105,100,101,32,97,32,118,97,114,97,114,103,32,102,117,110,99,116,105,111,110,0,0,0,0,0,0,115,101,108,102,0,0,0,0,60,110,97,109,101,62,32,111,114,32,39,46,46,46,39,32,101,120,112,101,99,116,101,100,0,0,0,0,0,0,0,0,108,111,99,97,108,32,118,97,114,105,97,98,108,101,115,0,102,117,110,99,116,105,111,110,115,0,0,0,0,0,0,0,105,116,101,109,115,32,105,110,32,97,32,99,111,110,115,116,114,117,99,116,111,114,0,0,109,97,105,110,32,102,117,110,99,116,105,111,110,0,0,0,102,117,110,99,116,105,111,110,32,97,116,32,108,105,110,101,32,37,100,0,0,0,0,0,116,111,111,32,109,97,110,121,32,37,115,32,40,108,105,109,105,116,32,105,115,32,37,100,41,32,105,110,32,37,115,0,102,117,110,99,116,105,111,110,32,97,114,103,117,109,101,110,116,115,32,101,120,112,101,99,116,101,100,0,0,0,0,0,117,110,101,120,112,101,99,116,101,100,32,115,121,109,98,111,108,0,0,0,0,0,0,0,108,97,98,101,108,32,39,37,115,39,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,32,111,110,32,108,105,110,101,32,37,100,0,0,0,39,61,39,32,111,114,32,39,105,110,39,32,101,120,112,101,99,116,101,100,0,0,0,0,40,102,111,114,32,103,101,110,101,114,97,116,111,114,41,0,40,102,111,114,32,115,116,97,116,101,41,0,0,0,0,0,40,102,111,114,32,99,111,110,116,114,111,108,41,0,0,0,40,102,111,114,32,105,110,100,101,120,41,0,0,0,0,0,40,102,111,114,32,108,105,109,105,116,41,0,0,0,0,0,40,102,111,114,32,115,116,101,112,41,0,0,0,0,0,0,37,115,32,101,120,112,101,99,116,101,100,32,40,116,111,32,99,108,111,115,101,32,37,115,32,97,116,32,108,105,110,101,32,37,100,41,0,0,0,0,117,112,118,97,108,117,101,115,0,0,0,0,0,0,0,0,110,111,116,32,101,110,111,117,103,104,32,109,101,109,111,114,121,0,0,0,0,0,0,0,48,35,0,0,118,0,0,0,56,35,0,0,119,0,0,0,64,35,0,0,120,0,0,0,72,35,0,0,121,0,0,0,80,35,0,0,122,0,0,0,88,35,0,0,123,0,0,0,96,35,0,0,124,0,0,0,104,35,0,0,125,0,0,0,112,35,0,0,126,0,0,0,120,35,0,0,127,0,0,0,128,35,0,0,128,0,0,0,136,35,0,0,129,0,0,0,144,35,0,0,130,0,0,0,152,35,0,0,131,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,95,95,105,110,100,101,120,0,98,121,116,101,0,0,0,0,99,104,97,114,0,0,0,0,100,117,109,112,0,0,0,0,102,105,110,100,0,0,0,0,102,111,114,109,97,116,0,0,103,109,97,116,99,104,0,0,103,115,117,98,0,0,0,0,108,101,110,0,0,0,0,0,108,111,119,101,114,0,0,0,109,97,116,99,104,0,0,0,114,101,112,0,0,0,0,0,114,101,118,101,114,115,101,0,115,117,98,0,0,0,0,0,117,112,112,101,114,0,0,0,114,101,115,117,108,116,105,110,103,32,115,116,114,105,110,103,32,116,111,111,32,108,97,114,103,101,0,0,0,0,0,0,116,111,111,32,109,97,110,121,32,99,97,112,116,117,114,101,115,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,0,0,0,117,110,102,105,110,105,115,104,101,100,32,99,97,112,116,117,114,101,0,0,0,0,0,0,112,97,116,116,101,114,110,32,116,111,111,32,99,111,109,112,108,101,120,0,0,0,0,0,109,105,115,115,105,110,103,32,39,91,39,32,97,102,116,101,114,32,39,37,37,102,39,32,105,110,32,112,97,116,116,101,114,110,0,0,0,0,0,0,105,110,118,97,108,105,100,32,99,97,112,116,117,114,101,32,105,110,100,101,120,32,37,37,37,100,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,101,110,100,115,32,119,105,116,104,32,39,37,37,39,41,0,0,0,0,0,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,39,93,39,41,0,109,97,108,102,111,114,109,101,100,32,112,97,116,116,101,114,110,32,40,109,105,115,115,105,110,103,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,37,37,98,39,41,0,0,105,110,118,97,108,105,100,32,112,97,116,116,101,114,110,32,99,97,112,116,117,114,101,0,94,36,42,43,63,46,40,91,37,45,0,0,0,0,0,0,115,116,114,105,110,103,47,102,117,110,99,116,105,111,110,47,116,97,98,108,101,32,101,120,112,101,99,116,101,100,0,0,105,110,118,97,108,105,100,32,114,101,112,108,97,99,101,109,101,110,116,32,118,97,108,117,101,32,40,97,32,37,115,41,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,117,115,101,32,111,102,32,39,37,99,39,32,105,110,32,114,101,112,108,97,99,101,109,101,110,116,32,115,116,114,105,110,103,0,0,0,0,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,110,111,116,32,97,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,108,0,0,0,0,0,0,0,110,111,116,32,97,32,110,111,110,45,110,101,103,97,116,105,118,101,32,110,117,109,98,101,114,32,105,110,32,112,114,111,112,101,114,32,114,97,110,103,101,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,39,37,37,37,99,39,32,116,111,32,39,102,111,114,109,97,116,39,0,0,0,0,0,0,0,92,37,100,0,0,0,0,0,92,37,48,51,100,0,0,0,45,43,32,35,48,0,0,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,114,101,112,101,97,116,101,100,32,102,108,97,103,115,41,0,105,110,118,97,108,105,100,32,102,111,114,109,97,116,32,40,119,105,100,116,104,32,111,114,32,112,114,101,99,105,115,105,111,110,32,116,111,111,32,108,111,110,103,41,0,0,0,0,117,110,97,98,108,101,32,116,111,32,100,117,109,112,32,103,105,118,101,110,32,102,117,110,99,116,105,111,110,0,0,0,118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,0,0,115,116,114,105,110,103,32,115,108,105,99,101,32,116,111,111,32,108,111,110,103,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,110,105,108,0,0,0,0,0,0,116,97,98,108,101,32,105,110,100,101,120,32,105,115,32,78,97,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,105,110,118,97,108,105,100,32,107,101,121,32,116,111,32,39,110,101,120,116,39,0,0,0,136,39,0,0,132,0,0,0,144,39,0,0,133,0,0,0,152,39,0,0,134,0,0,0,160,39,0,0,135,0,0,0,128,39,0,0,136,0,0,0,168,39,0,0,137,0,0,0,176,39,0,0,138,0,0,0,0,0,0,0,0,0,0,0,117,110,112,97,99,107,0,0,99,111,110,99,97,116,0,0,109,97,120,110,0,0,0,0,105,110,115,101,114,116,0,0,112,97,99,107,0,0,0,0,114,101,109,111,118,101,0,0,115,111,114,116,0,0,0,0,0,0,0,0,0,0,0,0,105,110,118,97,108,105,100,32,111,114,100,101,114,32,102,117,110,99,116,105,111,110,32,102,111,114,32,115,111,114,116,105,110,103,0,0,0,0,0,0,112,111,115,105,116,105,111,110,32,111,117,116,32,111,102,32,98,111,117,110,100,115,0,0,116,111,111,32,109,97,110,121], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([32,114,101,115,117,108,116,115,32,116,111,32,117,110,112,97,99,107,0,0,0,0,0,0,110,0,0,0,0,0,0,0,119,114,111,110,103,32,110,117,109,98,101,114,32,111,102,32,97,114,103,117,109,101,110,116,115,32,116,111,32,39,105,110,115,101,114,116,39,0,0,0,105,110,118,97,108,105,100,32,118,97,108,117,101,32,40,37,115,41,32,97,116,32,105,110,100,101,120,32,37,100,32,105,110,32,116,97,98,108,101,32,102,111,114,32,39,99,111,110,99,97,116,39,0,0,0,0,110,111,32,118,97,108,117,101,0,0,0,0,0,0,0,0,110,105,108,0,0,0,0,0,98,111,111,108,101,97,110,0,117,115,101,114,100,97,116,97,0,0,0,0,0,0,0,0,110,117,109,98,101,114,0,0,115,116,114,105,110,103,0,0,116,97,98,108,101,0,0,0,102,117,110,99,116,105,111,110,0,0,0,0,0,0,0,0,116,104,114,101,97,100,0,0,112,114,111,116,111,0,0,0,117,112,118,97,108,0,0,0,136,40,0,0,152,40,0,0,160,40,0,0,168,40,0,0,184,40,0,0,192,40,0,0,200,40,0,0,208,40,0,0,168,40,0,0,224,40,0,0,232,40,0,0,240,40,0,0,112,41,0,0,120,41,0,0,136,41,0,0,144,41,0,0,152,41,0,0,160,41,0,0,168,41,0,0,176,41,0,0,184,41,0,0,192,41,0,0,200,41,0,0,208,41,0,0,216,41,0,0,224,41,0,0,232,41,0,0,240,41,0,0,0,42,0,0,0,0,0,0,95,95,105,110,100,101,120,0,95,95,110,101,119,105,110,100,101,120,0,0,0,0,0,0,95,95,103,99,0,0,0,0,95,95,109,111,100,101,0,0,95,95,108,101,110,0,0,0,95,95,101,113,0,0,0,0,95,95,97,100,100,0,0,0,95,95,115,117,98,0,0,0,95,95,109,117,108,0,0,0,95,95,100,105,118,0,0,0,95,95,109,111,100,0,0,0,95,95,112,111,119,0,0,0,95,95,117,110,109,0,0,0,95,95,108,116,0,0,0,0,95,95,108,101,0,0,0,0,95,95,99,111,110,99,97,116,0,0,0,0,0,0,0,0,95,95,99,97,108,108,0,0,98,105,110,97,114,121,32,115,116,114,105,110,103,0,0,0,25,147,13,10,26,10,0,0,116,114,117,110,99,97,116,101,100,0,0,0,0,0,0,0,37,115,58,32,37,115,32,112,114,101,99,111,109,112,105,108,101,100,32,99,104,117,110,107,0,0,0,0,0,0,0,0,99,111,114,114,117,112,116,101,100,0,0,0,0,0,0,0,110,111,116,32,97,0,0,0,118,101,114,115,105,111,110,32,109,105,115,109,97,116,99,104,32,105,110,0,0,0,0,0,105,110,99,111,109,112,97,116,105,98,108,101,0,0,0,0,37,46,49,52,103,0,0,0,105,110,100,101,120,0,0,0,108,111,111,112,32,105,110,32,103,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,108,111,111,112,32,105,110,32,115,101,116,116,97,98,108,101,0,0,0,0,0,0,0,0,115,116,114,105,110,103,32,108,101,110,103,116,104,32,111,118,101,114,102,108,111,119,0,0,103,101,116,32,108,101,110,103,116,104,32,111,102,0,0,0,39,102,111,114,39,32,105,110,105,116,105,97,108,32,118,97,108,117,101,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,108,105,109,105,116,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,39,102,111,114,39,32,115,116,101,112,32,109,117,115,116,32,98,101,32,97,32,110,117,109,98,101,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,0,0,0,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _setlocale(category, locale) {
      if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString('C'), 'i8', ALLOC_NORMAL);
        return _setlocale.ret;
      }
      return 0;
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }function _freopen(filename, mode, stream) {
      // FILE *freopen(const char *restrict filename, const char *restrict mode, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/freopen.html
      if (!filename) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (!streamObj) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return 0;
        }
        if (_freopen.buffer) _free(_freopen.buffer);
        filename = intArrayFromString(streamObj.path);
        filename = allocate(filename, 'i8', ALLOC_NORMAL);
      }
      _fclose(stream);
      return _fopen(filename, mode);
    }



  var _emscripten_check_longjmp=true;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  var _log=Math_log;

  var _emscripten_postinvoke=true;

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  function _system(command) {
      // int system(const char *command);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/system.html
      // Can't call external programs.
      ___setErrNo(ERRNO_CODES.EAGAIN);
      return -1;
    }

  
  function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  
  var _tzname=allocate(8, "i32*", ALLOC_STATIC);
  
  var _daylight=allocate(1, "i32*", ALLOC_STATIC);
  
  var _timezone=allocate(1, "i32*", ALLOC_STATIC);function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      HEAP32[((_tzname)>>2)]=winterNamePtr;
      HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
    }function _mktime(tmPtr) {
      _tzset();
      var year = HEAP32[(((tmPtr)+(20))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(16))>>2)],
                               HEAP32[(((tmPtr)+(12))>>2)],
                               HEAP32[(((tmPtr)+(8))>>2)],
                               HEAP32[(((tmPtr)+(4))>>2)],
                               HEAP32[((tmPtr)>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(24))>>2)]=new Date(timestamp).getDay();
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      return timestamp;
    }

  function _tmpnam(s, dir, prefix) {
      // char *tmpnam(char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/tmpnam.html
      // NOTE: The dir and prefix arguments are for internal use only.
      var folder = FS.findObject(dir || '/tmp');
      if (!folder || !folder.isFolder) {
        dir = '/tmp';
        folder = FS.findObject(dir);
        if (!folder || !folder.isFolder) return 0;
      }
      var name = prefix || 'file';
      do {
        name += String.fromCharCode(65 + (Math.random() * 25)|0);
      } while (name in folder.contents);
      var result = dir + '/' + name;
      if (!_tmpnam.buffer) _tmpnam.buffer = _malloc(256);
      if (!s) s = _tmpnam.buffer;
      writeAsciiToMemory(result, s);
      return s;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _log10(x) {
      return Math.log(x) / Math.LN10;
    }

  
  var ___tm_current=allocate(44, "i8", ALLOC_STATIC);
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=start.getTimezoneOffset() * 60;
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  var _emscripten_prep_setjmp=true;

  var _BDtoIHigh=true;

  
  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  var _ceil=Math_ceil;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  function _sinh(x) {
      var p = Math.pow(Math.E, x);
      return (p - (1 / p)) / 2;
    }
  
  function _cosh(x) {
      var p = Math.pow(Math.E, x);
      return (p + (1 / p)) / 2;
    }function _tanh(x) {
      return _sinh(x) / _cosh(x);
    }

  function _localeconv() {
      // %struct.timeval = type { char* decimal point, other stuff... }
      // var indexes = Runtime.calculateStructAlignment({ fields: ['i32', 'i32'] });
      var me = _localeconv;
      if (!me.ret) {
      // These are defaults from the "C" locale
        me.ret = allocate([
          allocate(intArrayFromString('.'), 'i8', ALLOC_NORMAL),0,0,0, // decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // int_curr_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // currency_symbol
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_decimal_point
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_thousands_sep
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // mon_grouping
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0, // positive_sign
          allocate(intArrayFromString(''), 'i8', ALLOC_NORMAL),0,0,0 // negative_sign
        ], 'i8*', ALLOC_NORMAL); // Allocate strings in lconv, still don't allocate chars
      }
      return me.ret;
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  
  function _unlink(path) {
      // int unlink(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/unlink.html
      path = Pointer_stringify(path);
      try {
        FS.unlink(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _rmdir(path) {
      // int rmdir(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rmdir.html
      path = Pointer_stringify(path);
      try {
        FS.rmdir(path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _remove(path) {
      // int remove(const char *path);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/remove.html
      var ret = _unlink(path);
      if (ret == -1) ret = _rmdir(path);
      return ret;
    }

  function _fmod(x, y) {
      return x % y;
    }

  function _rename(old_path, new_path) {
      // int rename(const char *old, const char *new);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/rename.html
      old_path = Pointer_stringify(old_path);
      new_path = Pointer_stringify(new_path);
      try {
        FS.rename(old_path, new_path);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  var _BDtoILow=true;


   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  var _tan=Math_tan;

  function _feof(stream) {
      // int feof(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/feof.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.eof);
    }

  var _asin=Math_asin;

  var _fabs=Math_abs;

  var _floor=Math_floor;


  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  var _sqrt=Math_sqrt;

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  var _emscripten_get_longjmp_result=true;

  var _sin=Math_sin;

  function _fmodl() {
  return _fmod.apply(null, arguments)
  }


  function _modf(x, intpart) {
      HEAPF64[((intpart)>>3)]=(x < 0) ? Math.ceil(x) : Math.floor(x);
      return x - HEAPF64[((intpart)>>3)];
    }

  var _atan=Math_atan;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function _gmtime_r(time, tmPtr) {
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getUTCSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getUTCMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getUTCHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getUTCDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getUTCMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getUTCFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getUTCDay();
      HEAP32[(((tmPtr)+(36))>>2)]=0;
      HEAP32[(((tmPtr)+(32))>>2)]=0;
      var start = new Date(date); // define date using UTC, start from Jan 01 00:00:00 UTC
      start.setUTCDate(1);
      start.setUTCMonth(0);
      start.setUTCHours(0);
      start.setUTCMinutes(0);
      start.setUTCSeconds(0);
      start.setUTCMilliseconds(0);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(40))>>2)]=___tm_timezone;
  
      return tmPtr;
    }function _gmtime(time) {
      return _gmtime_r(time, ___tm_current);
    }


  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  var _emscripten_setjmp=true;

  var _cos=Math_cos;

  function _difftime(time1, time0) {
      return time1 - time0;
    }

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  var _atan2=Math_atan2;

   
  Module["_strcpy"] = _strcpy;

  var _exp=Math_exp;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  var _acos=Math_acos;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          var ret = new Date().getTimezoneOffset();
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          var minutes = ret % 60;
          ret = (100*(ret - minutes)/60) + minutes;
          // add sign and adjust length to ?hhmm
          if (ret >= 0) {
            ret = '' + ret;
            while (ret.length < 4) ret = '0' + ret;
            return '+' + ret;
          } else {
            ret = '' + ret;
            ret = ret.substr(1);
            while (ret.length < 4) ret = '0' + ret;
            return '-' + ret;
          }
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          try {
            // Date strings typically end in (PDT) or such.
            return new Date().toString().split('(').slice(-1)[0].split(')')[0];
          } catch(e) {
            return ''; // may not work in all browsers
          }
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'use asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var jsCall=env.jsCall;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiii=env.invoke_iiiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _sin=env._sin;
  var _exp=env._exp;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _send=env._send;
  var _cosh=env._cosh;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var _atan2=env._atan2;
  var _fmodl=env._fmodl;
  var _difftime=env._difftime;
  var _freopen=env._freopen;
  var _rmdir=env._rmdir;
  var _feof=env._feof;
  var _fputc=env._fputc;
  var _asin=env._asin;
  var _atan=env._atan;
  var _floor=env._floor;
  var _longjmp=env._longjmp;
  var _system=env._system;
  var _fflush=env._fflush;
  var _remove=env._remove;
  var __addDays=env.__addDays;
  var _modf=env._modf;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var __reallyNegative=env.__reallyNegative;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _acos=env._acos;
  var _localtime=env._localtime;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sinh=env._sinh;
  var _unlink=env._unlink;
  var _time=env._time;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _clock=env._clock;
  var __arraySum=env.__arraySum;
  var _fgets=env._fgets;
  var _putchar=env._putchar;
  var _gmtime=env._gmtime;
  var _cos=env._cos;
  var _tanh=env._tanh;
  var _pread=env._pread;
  var _localeconv=env._localeconv;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _log=env._log;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _fgetc=env._fgetc;
  var _recv=env._recv;
  var ___buildEnvironment=env.___buildEnvironment;
  var _tan=env._tan;
  var _copysign=env._copysign;
  var _gmtime_r=env._gmtime_r;
  var _mkport=env._mkport;
  var __exit=env.__exit;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _tmpnam=env._tmpnam;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _ceil=env._ceil;
  var __formatString=env.__formatString;
  var _log10=env._log10;
  var _sqrt=env._sqrt;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _rename=env._rename;
  var _mktime=env._mktime;
  var ___setErrNo=env.___setErrNo;
  var _setlocale=env._setlocale;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }

  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _lua_checkstack($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $res$01 = 0, $res$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $size;
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = ($10|0)>($size|0);
 if ($11) {
  $res$03 = 1;
 } else {
  $12 = (($L) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13;
  $15 = (($8) - ($14))|0;
  $16 = $15 >> 4;
  $17 = (($16) + 5)|0;
  $18 = (1000000 - ($size))|0;
  $19 = ($17|0)>($18|0);
  if ($19) {
   $res$01 = 0;
   STACKTOP = sp;return ($res$01|0);
  }
  $20 = (_luaD_rawrunprotected($L,18,$0)|0);
  $21 = ($20|0)==(0);
  $22 = $21&1;
  if ($21) {
   $res$03 = $22;
  } else {
   $res$01 = 0;
   STACKTOP = sp;return ($res$01|0);
  }
 }
 $23 = (($2) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$5>>2]|0;
 $26 = HEAP32[$0>>2]|0;
 $27 = (($25) + ($26<<4)|0);
 $28 = ($24>>>0)<($27>>>0);
 if (!($28)) {
  $res$01 = $res$03;
  STACKTOP = sp;return ($res$01|0);
 }
 HEAP32[$23>>2] = $27;
 $res$01 = $res$03;
 STACKTOP = sp;return ($res$01|0);
}
function _growstack($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 _luaD_growstack($L,$0);
 STACKTOP = sp;return;
}
function _lua_xmove($from,$to,$n) {
 $from = $from|0;
 $to = $to|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($from|0)==($to|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($from) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (0 - ($n))|0;
 $4 = (($2) + ($3<<4)|0);
 HEAP32[$1>>2] = $4;
 $5 = ($n|0)>(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($to) + 8|0);
 $i$01 = 0;
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = (($7) + ($i$01<<4)|0);
  $9 = HEAP32[$6>>2]|0;
  $10 = (($9) + 16|0);
  HEAP32[$6>>2] = $10;
  $11 = $8;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($11) + 4)|0;
  $15 = $14;
  $16 = HEAP32[$15>>2]|0;
  $17 = $9;
  $18 = $17;
  HEAP32[$18>>2] = $13;
  $19 = (($17) + 4)|0;
  $20 = $19;
  HEAP32[$20>>2] = $16;
  $21 = ((($7) + ($i$01<<4)|0) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($9) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = (($i$01) + 1)|0;
  $exitcond = ($24|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $24;
  }
 }
 STACKTOP = sp;return;
}
function _lua_atpanic($L,$panicf) {
 $L = $L|0;
 $panicf = $panicf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 168|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = $panicf;
 STACKTOP = sp;return ($3|0);
}
function _lua_version($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)==(0|0);
 if ($0) {
  $$0 = 8;
 } else {
  $1 = (($L) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 176|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_absindex($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $idx$off = (($idx) + 1000999)|0;
 $0 = ($idx$off>>>0)>(1000999);
 if ($0) {
  $11 = $idx;
  STACKTOP = sp;return ($11|0);
 }
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($L) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 $10 = (($9) + ($idx))|0;
 $11 = $10;
 STACKTOP = sp;return ($11|0);
}
function _lua_gettop($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = $1;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 4;
 STACKTOP = sp;return ($9|0);
}
function _lua_settop($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)>(-1);
 if (!($0)) {
  $12 = (($idx) + 1)|0;
  $13 = (($L) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($12<<4)|0);
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 }
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $$sum = (($idx) + 1)|0;
 $6 = (($3) + ($$sum<<4)|0);
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $9 = $5;
  while(1) {
   $8 = (($9) + 16|0);
   $10 = (($9) + 8|0);
   HEAP32[$10>>2] = 0;
   $11 = ($8>>>0)<($6>>>0);
   if ($11) {
    $9 = $8;
   } else {
    break;
   }
  }
  HEAP32[$4>>2] = $8;
 }
 HEAP32[$4>>2] = $6;
 STACKTOP = sp;return;
}
function _lua_remove($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$02 = 0, $p$02$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 16|0);
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = $1;$p$02 = $0;
 } else {
  $$lcssa1 = $3;
  $22 = (($$lcssa1) + -16|0);
  HEAP32[$2>>2] = $22;
  STACKTOP = sp;return;
 }
 while(1) {
  $6 = $5;
  $7 = $6;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($6) + 4)|0;
  $10 = $9;
  $11 = HEAP32[$10>>2]|0;
  $12 = $p$02;
  $13 = $12;
  HEAP32[$13>>2] = $8;
  $14 = (($12) + 4)|0;
  $15 = $14;
  HEAP32[$15>>2] = $11;
  $16 = (($p$02) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($p$02) + 8|0);
  HEAP32[$18>>2] = $17;
  $19 = (($5) + 16|0);
  $20 = HEAP32[$2>>2]|0;
  $21 = ($19>>>0)<($20>>>0);
  if ($21) {
   $p$02$phi = $5;$5 = $19;$p$02 = $p$02$phi;
  } else {
   $$lcssa1 = $20;
   break;
  }
 }
 $22 = (($$lcssa1) + -16|0);
 HEAP32[$2>>2] = $22;
 STACKTOP = sp;return;
}
function _index2addr($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $$luaO_nilobject_ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($idx|0)>(0);
 do {
  if ($2) {
   $3 = HEAP32[$1>>2]|0;
   $4 = (($3) + ($idx<<4)|0);
   $5 = (($L) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($4>>>0)<($6>>>0);
   $$luaO_nilobject_ = $7 ? $4 : 7144;
   $$0 = $$luaO_nilobject_;
  } else {
   $8 = ($idx|0)<(-1000999);
   if (!($8)) {
    $9 = (($L) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + ($idx<<4)|0);
    $$0 = $11;
    break;
   }
   $12 = ($idx|0)==(-1001000);
   if ($12) {
    $13 = (($L) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + 40|0);
    $$0 = $15;
    break;
   }
   $16 = (-1001000 - ($idx))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = (($17) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(22);
   if ($20) {
    $$0 = 7144;
   } else {
    $21 = HEAP32[$17>>2]|0;
    $22 = (($21) + 6|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = ($16|0)>($24|0);
    if ($25) {
     $$0 = 7144;
    } else {
     $26 = (($16) + -1)|0;
     $27 = ((($21) + ($26<<4)|0) + 16|0);
     $$0 = $27;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lua_insert($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $q$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2>>>0)>($0>>>0);
 if ($3) {
  $q$01 = $2;
  while(1) {
   $4 = (($q$01) + -16|0);
   $5 = $4;
   $6 = $5;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($5) + 4)|0;
   $9 = $8;
   $10 = HEAP32[$9>>2]|0;
   $11 = $q$01;
   $12 = $11;
   HEAP32[$12>>2] = $7;
   $13 = (($11) + 4)|0;
   $14 = $13;
   HEAP32[$14>>2] = $10;
   $15 = (($q$01) + -8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($q$01) + 8|0);
   HEAP32[$17>>2] = $16;
   $18 = ($4>>>0)>($0>>>0);
   if ($18) {
    $q$01 = $4;
   } else {
    break;
   }
  }
 }
 $19 = HEAP32[$1>>2]|0;
 $20 = $19;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 $27 = $26;
 HEAP32[$27>>2] = $22;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 $30 = (($19) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($0) + 8|0);
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _lua_replace($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -16|0);
 _moveto($L,$2,$idx);
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + -16|0);
 HEAP32[$0>>2] = $4;
 STACKTOP = sp;return;
}
function _moveto($L,$fr,$idx) {
 $L = $L|0;
 $fr = $fr|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = $fr;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 $11 = (($fr) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($0) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = ($idx|0)<(-1001000);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = HEAP32[$11>>2]|0;
 $16 = $15 & 64;
 $17 = ($16|0)==(0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$fr>>2]|0;
 $19 = (($18) + 5|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20 & 3;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = (($L) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 5|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 4;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  STACKTOP = sp;return;
 }
 _luaC_barrier_($L,$26,$18);
 STACKTOP = sp;return;
}
function _lua_copy($L,$fromidx,$toidx) {
 $L = $L|0;
 $fromidx = $fromidx|0;
 $toidx = $toidx|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$fromidx)|0);
 _moveto($L,$0,$toidx);
 STACKTOP = sp;return;
}
function _lua_pushvalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $9;
 HEAP32[$10>>2] = $5;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $8;
 $13 = (($0) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[$1>>2]|0;
 $17 = (($16) + 16|0);
 HEAP32[$1>>2] = $17;
 STACKTOP = sp;return;
}
function _lua_type($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = ($0|0)==(7144|0);
 if ($1) {
  $5 = -1;
 } else {
  $2 = (($0) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $3 & 15;
  $5 = $4;
 }
 STACKTOP = sp;return ($5|0);
}
function _lua_typename($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 1)|0;
 $1 = (10488 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function _lua_iscfunction($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(22);
 $4 = ($2|0)==(102);
 $$ = $3 | $4;
 $5 = $$&1;
 STACKTOP = sp;return ($5|0);
}
function _lua_isnumber($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 if ($3) {
  $7 = 1;
 } else {
  $4 = (_luaV_tonumber($0,$n)|0);
  $5 = ($4|0)!=(0|0);
  $7 = $5;
 }
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _lua_isstring($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$idx)|0);
 $$off = (($0) + -3)|0;
 $1 = ($$off>>>0)<(2);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _lua_isuserdata($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(71);
 $4 = ($2|0)==(2);
 $$ = $3 | $4;
 $5 = $$&1;
 STACKTOP = sp;return ($5|0);
}
function _lua_rawequal($L,$index1,$index2) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$index1)|0);
 $1 = (_index2addr($L,$index2)|0);
 $2 = ($0|0)==(7144|0);
 $3 = ($1|0)==(7144|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $4 = (($0) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($1) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if ($8) {
  $9 = (_luaV_equalobj_(0,$0,$1)|0);
  $10 = ($9|0)!=(0);
  $12 = $10;
 } else {
  $12 = 0;
 }
 $11 = $12&1;
 $13 = $11;
 STACKTOP = sp;return ($13|0);
}
function _lua_arith($L,$op) {
 $L = $L|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($op|0)==(6);
 if ($0) {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + -16|0);
  $4 = $3;
  $5 = $4;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($4) + 4)|0;
  $8 = $7;
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = $10;
  HEAP32[$11>>2] = $6;
  $12 = (($10) + 4)|0;
  $13 = $12;
  HEAP32[$13>>2] = $9;
  $14 = (($2) + -8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($2) + 8|0);
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$1>>2]|0;
  $18 = (($17) + 16|0);
  HEAP32[$1>>2] = $18;
 }
 $19 = (($L) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + -32|0);
 $22 = (($20) + -16|0);
 $23 = (($20) + -24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(3);
 if ($25) {
  $26 = (($20) + -8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(3);
  if ($28) {
   $29 = +HEAPF64[$21>>3];
   $30 = +HEAPF64[$22>>3];
   $31 = (+_luaO_arith($op,$29,$30));
   HEAPF64[$21>>3] = $31;
   HEAP32[$23>>2] = 3;
   $33 = HEAP32[$19>>2]|0;
   $34 = (($33) + -16|0);
   HEAP32[$19>>2] = $34;
   STACKTOP = sp;return;
  }
 }
 $32 = (($op) + 6)|0;
 _luaV_arith($L,$21,$21,$22,$32);
 $33 = HEAP32[$19>>2]|0;
 $34 = (($33) + -16|0);
 HEAP32[$19>>2] = $34;
 STACKTOP = sp;return;
}
function _lua_compare($L,$index1,$index2,$op) {
 $L = $L|0;
 $index1 = $index1|0;
 $index2 = $index2|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$index1)|0);
 $1 = (_index2addr($L,$index2)|0);
 $2 = ($0|0)==(7144|0);
 $3 = ($1|0)==(7144|0);
 $or$cond = $2 | $3;
 do {
  if ($or$cond) {
   $i$0 = 0;
  } else {
   if ((($op|0) == 1)) {
    $13 = (_luaV_lessthan($L,$0,$1)|0);
    $i$0 = $13;
    break;
   } else if ((($op|0) == 2)) {
    $14 = (_luaV_lessequal($L,$0,$1)|0);
    $i$0 = $14;
    break;
   } else if ((($op|0) == 0)) {
    $4 = (($0) + 8|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (($1) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($5|0)==($7|0);
    if ($8) {
     $9 = (_luaV_equalobj_($L,$0,$1)|0);
     $10 = ($9|0)!=(0);
     $12 = $10;
    } else {
     $12 = 0;
    }
    $11 = $12&1;
    $i$0 = $11;
    break;
   } else {
    $i$0 = 0;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($i$0|0);
}
function _lua_tonumberx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $n = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 if ($3) {
  $o$0 = $0;
 } else {
  $4 = (_luaV_tonumber($0,$n)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $8 = ($isnum|0)==(0|0);
   if ($8) {
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
   HEAP32[$isnum>>2] = 0;
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  } else {
   $o$0 = $4;
  }
 }
 $6 = ($isnum|0)==(0|0);
 if (!($6)) {
  HEAP32[$isnum>>2] = 1;
 }
 $7 = +HEAPF64[$o$0>>3];
 $$0 = $7;
 STACKTOP = sp;return (+$$0);
}
function _lua_tointegerx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $n = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 if ($3) {
  $o$0 = $0;
  label = 3;
 } else {
  $4 = (_luaV_tonumber($0,$n)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $9 = ($isnum|0)==(0|0);
   if ($9) {
    $$0 = 0;
   } else {
    HEAP32[$isnum>>2] = 0;
    $$0 = 0;
   }
  } else {
   $o$0 = $4;
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = +HEAPF64[$o$0>>3];
  $7 = (~~(($6)));
  $8 = ($isnum|0)==(0|0);
  if ($8) {
   $$0 = $7;
  } else {
   HEAP32[$isnum>>2] = 1;
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_tounsignedx($L,$idx,$isnum) {
 $L = $L|0;
 $idx = $idx|0;
 $isnum = $isnum|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $n = 0, $o$0 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $n = sp + 8|0;
 $u$sroa$0 = sp;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(3);
 if ($3) {
  $o$0 = $0;
  label = 3;
 } else {
  $4 = (_luaV_tonumber($0,$n)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $10 = ($isnum|0)==(0|0);
   if ($10) {
    $$0 = 0;
   } else {
    HEAP32[$isnum>>2] = 0;
    $$0 = 0;
   }
  } else {
   $o$0 = $4;
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = +HEAPF64[$o$0>>3];
  $7 = $6 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $7;
  $8 = HEAP32[$u$sroa$0>>2]|0;
  $9 = ($isnum|0)==(0|0);
  if ($9) {
   $$0 = $8;
  } else {
   HEAP32[$isnum>>2] = 1;
   $$0 = $8;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_toboolean($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $7 = 0;
 } else {
  $4 = ($2|0)==(1);
  if ($4) {
   $5 = HEAP32[$0>>2]|0;
   $phitmp = ($5|0)!=(0);
   $7 = $phitmp;
  } else {
   $7 = 1;
  }
 }
 $6 = $7&1;
 STACKTOP = sp;return ($6|0);
}
function _lua_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $o$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 15;
 $4 = ($3|0)==(4);
 do {
  if ($4) {
   $o$0 = $0;
  } else {
   $5 = (_luaV_tostring($L,$0)|0);
   $6 = ($5|0)==(0);
   if (!($6)) {
    $8 = (($L) + 12|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($9) + 12|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)>(0);
    if ($12) {
     _luaC_step($L);
    }
    $13 = (_index2addr($L,$idx)|0);
    $o$0 = $13;
    break;
   }
   $7 = ($len|0)==(0|0);
   if ($7) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$len>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $14 = ($len|0)==(0|0);
 if (!($14)) {
  $15 = HEAP32[$o$0>>2]|0;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$len>>2] = $17;
 }
 $18 = HEAP32[$o$0>>2]|0;
 $19 = (($18) + 16|0);
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _lua_rawlen($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 15;
 if ((($3|0) == 4)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
 } else if ((($3|0) == 7)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $$0 = $9;
 } else if ((($3|0) == 5)) {
  $10 = HEAP32[$0>>2]|0;
  $11 = (_luaH_getn($10)|0);
  $$0 = $11;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_tocfunction($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 if ((($2|0) == 102)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $$0 = $6;
 } else if ((($2|0) == 22)) {
  $3 = HEAP32[$0>>2]|0;
  $$0 = $3;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_touserdata($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 15;
 if ((($3|0) == 2)) {
  $6 = HEAP32[$0>>2]|0;
  $$0 = $6;
 } else if ((($3|0) == 7)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 24|0);
  $$0 = $5;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_tothread($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(72);
 if ($3) {
  $4 = HEAP32[$0>>2]|0;
  $5 = $4;
 } else {
  $5 = 0;
 }
 STACKTOP = sp;return ($5|0);
}
function _lua_topointer($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 63;
 switch ($3|0) {
 case 38:  {
  $6 = HEAP32[$0>>2]|0;
  $$0 = $6;
  break;
 }
 case 5:  {
  $4 = HEAP32[$0>>2]|0;
  $$0 = $4;
  break;
 }
 case 6:  {
  $5 = HEAP32[$0>>2]|0;
  $$0 = $5;
  break;
 }
 case 22:  {
  $7 = HEAP32[$0>>2]|0;
  $$0 = $7;
  break;
 }
 case 8:  {
  $8 = HEAP32[$0>>2]|0;
  $$0 = $8;
  break;
 }
 case 2: case 7:  {
  $9 = (_lua_touserdata($L,$idx)|0);
  $$0 = $9;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_pushnil($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 STACKTOP = sp;return;
}
function _lua_pushnumber($L,$n) {
 $L = $L|0;
 $n = +$n;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAPF64[$1>>3] = $n;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 3;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 STACKTOP = sp;return;
}
function _lua_pushinteger($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (+($n|0));
 HEAPF64[$1>>3] = $2;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 3;
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$0>>2] = $5;
 STACKTOP = sp;return;
}
function _lua_pushunsigned($L,$u) {
 $L = $L|0;
 $u = $u|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($u|0)>(-1);
 if ($0) {
  $1 = (+($u|0));
  $5 = $1;
 } else {
  $2 = (+($u>>>0));
  $5 = $2;
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 HEAPF64[$4>>3] = $5;
 $6 = (($4) + 8|0);
 HEAP32[$6>>2] = 3;
 $7 = HEAP32[$3>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$3>>2] = $8;
 STACKTOP = sp;return;
}
function _lua_pushlstring($L,$s,$len) {
 $L = $L|0;
 $s = $s|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newlstr($L,$s,$len)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($5) + 4|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 | 64;
 $12 = (($7) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = HEAP32[$6>>2]|0;
 $14 = (($13) + 16|0);
 HEAP32[$6>>2] = $14;
 $15 = (($5) + 16|0);
 STACKTOP = sp;return ($15|0);
}
function _lua_pushstring($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  _lua_pushnil($L);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($L) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(0);
 if ($5) {
  _luaC_step($L);
 }
 $6 = (_luaS_new($L,$s)|0);
 $7 = (($L) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$8>>2] = $6;
 $9 = (($6) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | 64;
 $13 = (($8) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$7>>2]|0;
 $15 = (($14) + 16|0);
 HEAP32[$7>>2] = $15;
 $16 = (($6) + 16|0);
 $$0 = $16;
 STACKTOP = sp;return ($$0|0);
}
function _lua_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($5|0);
}
function _lua_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argp = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 HEAP32[$argp>>2] = $varargs;
 $5 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($5|0);
}
function _lua_pushcclosure($L,$fn,$n) {
 $L = $L|0;
 $fn = $fn|0;
 $n = $n|0;
 var $$in = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  HEAP32[$2>>2] = $fn;
  $3 = (($2) + 8|0);
  HEAP32[$3>>2] = 22;
  $36 = (($L) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 16|0);
  HEAP32[$36>>2] = $38;
  STACKTOP = sp;return;
 }
 $4 = (($L) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if ($8) {
  _luaC_step($L);
 }
 $9 = (_luaF_newCclosure($L,$n)|0);
 $10 = (($9) + 12|0);
 HEAP32[$10>>2] = $fn;
 $11 = (($L) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (0 - ($n))|0;
 $14 = (($12) + ($13<<4)|0);
 HEAP32[$11>>2] = $14;
 $15 = ($n|0)==(0);
 if ($15) {
  $$lcssa = $14;
 } else {
  $$in = $n;$18 = $14;
  while(1) {
   $16 = (($$in) + -1)|0;
   $17 = (($18) + ($16<<4)|0);
   $19 = ((($9) + ($16<<4)|0) + 16|0);
   $20 = $17;
   $21 = $20;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($20) + 4)|0;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = $19;
   $27 = $26;
   HEAP32[$27>>2] = $22;
   $28 = (($26) + 4)|0;
   $29 = $28;
   HEAP32[$29>>2] = $25;
   $30 = ((($18) + ($16<<4)|0) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($9) + ($16<<4)|0) + 24|0);
   HEAP32[$32>>2] = $31;
   $33 = ($16|0)==(0);
   $34 = HEAP32[$11>>2]|0;
   if ($33) {
    $$lcssa = $34;
    break;
   } else {
    $$in = $16;$18 = $34;
   }
  }
 }
 HEAP32[$$lcssa>>2] = $9;
 $35 = (($$lcssa) + 8|0);
 HEAP32[$35>>2] = 102;
 $36 = (($L) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 16|0);
 HEAP32[$36>>2] = $38;
 STACKTOP = sp;return;
}
function _lua_pushboolean($L,$b) {
 $L = $L|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($b|0)!=(0);
 $3 = $2&1;
 HEAP32[$1>>2] = $3;
 $4 = (($1) + 8|0);
 HEAP32[$4>>2] = 1;
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + 16|0);
 HEAP32[$0>>2] = $6;
 STACKTOP = sp;return;
}
function _lua_pushlightuserdata($L,$p) {
 $L = $L|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $p;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 2;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 STACKTOP = sp;return;
}
function _lua_pushthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$1>>2] = $L;
 $2 = (($1) + 8|0);
 HEAP32[$2>>2] = 72;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$0>>2] = $4;
 $5 = (($L) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 172|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($L|0);
 $10 = $9&1;
 STACKTOP = sp;return ($10|0);
}
function _lua_getglobal($L,$var) {
 $L = $L|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2)|0);
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$5>>2] = $7;
 $8 = (_luaS_new($L,$var)|0);
 HEAP32[$6>>2] = $8;
 $9 = (($8) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | 64;
 $13 = (($6) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + -16|0);
 _luaV_gettable($L,$4,$15,$15);
 STACKTOP = sp;return;
}
function _lua_gettable($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -16|0);
 _luaV_gettable($L,$0,$3,$3);
 STACKTOP = sp;return;
}
function _lua_getfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_luaS_new($L,$k)|0);
 HEAP32[$2>>2] = $3;
 $4 = (($3) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 | 64;
 $8 = (($2) + 8|0);
 HEAP32[$8>>2] = $7;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$1>>2] = $10;
 _luaV_gettable($L,$0,$9,$9);
 STACKTOP = sp;return;
}
function _lua_rawget($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -16|0);
 $5 = (_luaH_get($1,$4)|0);
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + -16|0);
 $8 = $5;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = (($5) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($6) + -8|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function _lua_rawgeti($L,$idx,$n) {
 $L = $L|0;
 $idx = $idx|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaH_getint($1,$n)|0);
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $4;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (($2) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$3>>2]|0;
 $19 = (($18) + 16|0);
 HEAP32[$3>>2] = $19;
 STACKTOP = sp;return;
}
function _lua_rawgetp($L,$idx,$p) {
 $L = $L|0;
 $idx = $idx|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $k = sp;
 $0 = (_index2addr($L,$idx)|0);
 HEAP32[$k>>2] = $p;
 $1 = (($k) + 8|0);
 HEAP32[$1>>2] = 2;
 $2 = HEAP32[$0>>2]|0;
 $3 = (_luaH_get($2,$k)|0);
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($3) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($5) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$4>>2]|0;
 $20 = (($19) + 16|0);
 HEAP32[$4>>2] = $20;
 STACKTOP = sp;return;
}
function _lua_createtable($L,$narray,$nrec) {
 $L = $L|0;
 $narray = $narray|0;
 $nrec = $nrec|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaH_new($L)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 69;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = ($narray|0)>(0);
 $12 = ($nrec|0)>(0);
 $or$cond = $11 | $12;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 _luaH_resize($L,$5,$narray,$nrec);
 STACKTOP = sp;return;
}
function _lua_getmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $mt$0 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$objindex)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 15;
 if ((($3|0) == 5)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $mt$0 = $6;
 } else if ((($3|0) == 7)) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $mt$0 = $9;
 } else {
  $10 = (($L) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11) + ($3<<2)|0) + 252|0);
  $13 = HEAP32[$12>>2]|0;
  $mt$0 = $13;
 }
 $14 = ($mt$0|0)==(0|0);
 if ($14) {
  $res$0 = 0;
  STACKTOP = sp;return ($res$0|0);
 }
 $15 = (($L) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 HEAP32[$16>>2] = $mt$0;
 $17 = (($16) + 8|0);
 HEAP32[$17>>2] = 69;
 $18 = HEAP32[$15>>2]|0;
 $19 = (($18) + 16|0);
 HEAP32[$15>>2] = $19;
 $res$0 = 1;
 STACKTOP = sp;return ($res$0|0);
}
function _lua_getuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 if ($4) {
  $8 = (($6) + 8|0);
  HEAP32[$8>>2] = 0;
 } else {
  HEAP32[$6>>2] = $3;
  $7 = (($6) + 8|0);
  HEAP32[$7>>2] = 69;
 }
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$5>>2] = $10;
 STACKTOP = sp;return;
}
function _lua_setglobal($L,$var) {
 $L = $L|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaH_getint($3,2)|0);
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$5>>2] = $7;
 $8 = (_luaS_new($L,$var)|0);
 HEAP32[$6>>2] = $8;
 $9 = (($8) + 4|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 | 64;
 $13 = (($6) + 8|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[$5>>2]|0;
 $15 = (($14) + -16|0);
 $16 = (($14) + -32|0);
 _luaV_settable($L,$4,$15,$16);
 $17 = HEAP32[$5>>2]|0;
 $18 = (($17) + -32|0);
 HEAP32[$5>>2] = $18;
 STACKTOP = sp;return;
}
function _lua_settable($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -32|0);
 $4 = (($2) + -16|0);
 _luaV_settable($L,$0,$3,$4);
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + -32|0);
 HEAP32[$1>>2] = $6;
 STACKTOP = sp;return;
}
function _lua_setfield($L,$idx,$k) {
 $L = $L|0;
 $idx = $idx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 16|0);
 HEAP32[$1>>2] = $3;
 $4 = (_luaS_new($L,$k)|0);
 HEAP32[$2>>2] = $4;
 $5 = (($4) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | 64;
 $9 = (($2) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$1>>2]|0;
 $11 = (($10) + -16|0);
 $12 = (($10) + -32|0);
 _luaV_settable($L,$0,$11,$12);
 $13 = HEAP32[$1>>2]|0;
 $14 = (($13) + -32|0);
 HEAP32[$1>>2] = $14;
 STACKTOP = sp;return;
}
function _lua_rawset($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -16|0);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($2) + -32|0);
 $6 = (_luaH_set($L,$4,$5)|0);
 $7 = $3;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($2) + -8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($6) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + 6|0);
 HEAP8[$21>>0] = 0;
 $22 = HEAP32[$1>>2]|0;
 $23 = (($22) + -8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & 64;
 $26 = ($25|0)==(0);
 if (!($26)) {
  $27 = (($22) + -16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 5|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 & 3;
  $32 = ($31<<24>>24)==(0);
  if (!($32)) {
   $33 = HEAP32[$0>>2]|0;
   $34 = (($33) + 5|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = $35 & 4;
   $37 = ($36<<24>>24)==(0);
   if (!($37)) {
    _luaC_barrierback_($L,$33);
   }
  }
 }
 $38 = HEAP32[$1>>2]|0;
 $39 = (($38) + -32|0);
 HEAP32[$1>>2] = $39;
 STACKTOP = sp;return;
}
function _lua_rawseti($L,$idx,$n) {
 $L = $L|0;
 $idx = $idx|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -16|0);
 _luaH_setint($L,$1,$n,$4);
 $5 = HEAP32[$2>>2]|0;
 $6 = (($5) + -8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 64;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = (($5) + -16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 5|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 & 3;
  $15 = ($14<<24>>24)==(0);
  if (!($15)) {
   $16 = HEAP32[$0>>2]|0;
   $17 = (($16) + 5|0);
   $18 = HEAP8[$17>>0]|0;
   $19 = $18 & 4;
   $20 = ($19<<24>>24)==(0);
   if (!($20)) {
    _luaC_barrierback_($L,$16);
   }
  }
 }
 $21 = HEAP32[$2>>2]|0;
 $22 = (($21) + -16|0);
 HEAP32[$2>>2] = $22;
 STACKTOP = sp;return;
}
function _lua_rawsetp($L,$idx,$p) {
 $L = $L|0;
 $idx = $idx|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $k = sp;
 $0 = (_index2addr($L,$idx)|0);
 HEAP32[$k>>2] = $p;
 $1 = (($k) + 8|0);
 HEAP32[$1>>2] = 2;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -16|0);
 $5 = HEAP32[$0>>2]|0;
 $6 = (_luaH_set($L,$5,$k)|0);
 $7 = $4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($3) + -8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($6) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$2>>2]|0;
 $21 = (($20) + -8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 64;
 $24 = ($23|0)==(0);
 if (!($24)) {
  $25 = (($20) + -16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 5|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28 & 3;
  $30 = ($29<<24>>24)==(0);
  if (!($30)) {
   $31 = HEAP32[$0>>2]|0;
   $32 = (($31) + 5|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33 & 4;
   $35 = ($34<<24>>24)==(0);
   if (!($35)) {
    _luaC_barrierback_($L,$31);
   }
  }
 }
 $36 = HEAP32[$2>>2]|0;
 $37 = (($36) + -16|0);
 HEAP32[$2>>2] = $37;
 STACKTOP = sp;return;
}
function _lua_setmetatable($L,$objindex) {
 $L = $L|0;
 $objindex = $objindex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $mt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$objindex)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $mt$0 = 0;
 } else {
  $6 = (($2) + -16|0);
  $7 = HEAP32[$6>>2]|0;
  $mt$0 = $7;
 }
 $8 = (($0) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 15;
 if ((($10|0) == 5)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = (($11) + 8|0);
  HEAP32[$12>>2] = $mt$0;
  $13 = ($mt$0|0)==(0|0);
  if (!($13)) {
   $14 = (($mt$0) + 5|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 3;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    $18 = HEAP32[$0>>2]|0;
    $19 = (($18) + 5|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20 & 4;
    $22 = ($21<<24>>24)==(0);
    if (!($22)) {
     _luaC_barrierback_($L,$18);
    }
   }
   $23 = HEAP32[$0>>2]|0;
   _luaC_checkfinalizer($L,$23,$mt$0);
  }
 } else if ((($10|0) == 7)) {
  $24 = HEAP32[$0>>2]|0;
  $25 = (($24) + 8|0);
  HEAP32[$25>>2] = $mt$0;
  $26 = ($mt$0|0)==(0|0);
  if (!($26)) {
   $27 = (($mt$0) + 5|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28 & 3;
   $30 = ($29<<24>>24)==(0);
   if (!($30)) {
    $31 = HEAP32[$0>>2]|0;
    $32 = (($31) + 5|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33 & 4;
    $35 = ($34<<24>>24)==(0);
    if (!($35)) {
     _luaC_barrier_($L,$31,$mt$0);
    }
   }
   $36 = HEAP32[$0>>2]|0;
   _luaC_checkfinalizer($L,$36,$mt$0);
  }
 } else {
  $37 = (($L) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($38) + ($10<<2)|0) + 252|0);
  HEAP32[$39>>2] = $mt$0;
 }
 $40 = HEAP32[$1>>2]|0;
 $41 = (($40) + -16|0);
 HEAP32[$1>>2] = $41;
 STACKTOP = sp;return 1;
}
function _lua_setuservalue($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 12|0);
  HEAP32[$7>>2] = 0;
 } else {
  $8 = (($2) + -16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$0>>2]|0;
  $11 = (($10) + 12|0);
  HEAP32[$11>>2] = $9;
  $12 = HEAP32[$1>>2]|0;
  $13 = (($12) + -16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 5|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & 3;
  $18 = ($17<<24>>24)==(0);
  if (!($18)) {
   $19 = HEAP32[$0>>2]|0;
   $20 = (($19) + 5|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 & 4;
   $23 = ($22<<24>>24)==(0);
   if (!($23)) {
    _luaC_barrier_($L,$19,$14);
   }
  }
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = (($24) + -16|0);
 HEAP32[$1>>2] = $25;
 STACKTOP = sp;return;
}
function _lua_getctx($L,$ctx) {
 $L = $L|0;
 $ctx = $ctx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 8;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ($ctx|0)==(0|0);
 if (!($6)) {
  $7 = (($1) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$ctx>>2] = $8;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = (($9) + 37|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _lua_callk($L,$nargs,$nresults,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $nargs ^ -1;
 $3 = (($1) + ($2<<4)|0);
 $4 = ($k|0)==(0|0);
 if ($4) {
  label = 4;
 } else {
  $5 = (($L) + 36|0);
  $6 = HEAP16[$5>>1]|0;
  $7 = ($6<<16>>16)==(0);
  if ($7) {
   $8 = (($L) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 28|0);
   HEAP32[$10>>2] = $k;
   $11 = HEAP32[$8>>2]|0;
   $12 = (($11) + 24|0);
   HEAP32[$12>>2] = $ctx;
   _luaD_call($L,$3,$nresults,1);
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  _luaD_call($L,$3,$nresults,0);
 }
 $13 = ($nresults|0)==(-1);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($L) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 $19 = ($17>>>0)<($18>>>0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 HEAP32[$16>>2] = $18;
 STACKTOP = sp;return;
}
function _lua_pcallk($L,$nargs,$nresults,$errfunc,$ctx,$k) {
 $L = $L|0;
 $nargs = $nargs|0;
 $nresults = $nresults|0;
 $errfunc = $errfunc|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $func$0 = 0;
 var $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = ($errfunc|0)==(0);
 if ($0) {
  $func$0 = 0;
 } else {
  $1 = (_index2addr($L,$errfunc)|0);
  $2 = (($L) + 28|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $1;
  $5 = $3;
  $6 = (($4) - ($5))|0;
  $func$0 = $6;
 }
 $7 = (($L) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $nargs ^ -1;
 $10 = (($8) + ($9<<4)|0);
 HEAP32[$c>>2] = $10;
 $11 = ($k|0)==(0|0);
 if ($11) {
  label = 5;
 } else {
  $12 = (($L) + 36|0);
  $13 = HEAP16[$12>>1]|0;
  $14 = ($13<<16>>16)==(0);
  if ($14) {
   $23 = (($L) + 16|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 28|0);
   HEAP32[$25>>2] = $k;
   $26 = (($24) + 24|0);
   HEAP32[$26>>2] = $ctx;
   $27 = HEAP32[$c>>2]|0;
   $28 = (($L) + 28|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $27;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   $33 = (($24) + 20|0);
   HEAP32[$33>>2] = $32;
   $34 = (($L) + 41|0);
   $35 = HEAP8[$34>>0]|0;
   $36 = (($24) + 36|0);
   HEAP8[$36>>0] = $35;
   $37 = (($L) + 68|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($24) + 32|0);
   HEAP32[$39>>2] = $38;
   HEAP32[$37>>2] = $func$0;
   $40 = (($24) + 18|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = $42 | 16;
   $44 = $43&255;
   HEAP8[$40>>0] = $44;
   $45 = HEAP32[$c>>2]|0;
   _luaD_call($L,$45,$nresults,1);
   $46 = HEAP8[$40>>0]|0;
   $47 = $46&255;
   $48 = $47 & 239;
   $49 = $48&255;
   HEAP8[$40>>0] = $49;
   $50 = HEAP32[$39>>2]|0;
   HEAP32[$37>>2] = $50;
   $status$0 = 0;
  } else {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $15 = (($c) + 4|0);
  HEAP32[$15>>2] = $nresults;
  $16 = HEAP32[$c>>2]|0;
  $17 = (($L) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $16;
  $20 = $18;
  $21 = (($19) - ($20))|0;
  $22 = (_luaD_pcall($L,19,$c,$21,$func$0)|0);
  $status$0 = $22;
 }
 $51 = ($nresults|0)==(-1);
 if (!($51)) {
  STACKTOP = sp;return ($status$0|0);
 }
 $52 = (($L) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = HEAP32[$7>>2]|0;
 $57 = ($55>>>0)<($56>>>0);
 if (!($57)) {
  STACKTOP = sp;return ($status$0|0);
 }
 HEAP32[$54>>2] = $56;
 STACKTOP = sp;return ($status$0|0);
}
function _f_call($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = (($ud) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 _luaD_call($L,$0,$2,0);
 STACKTOP = sp;return;
}
function _lua_load($L,$reader,$data,$chunkname,$mode) {
 $L = $L|0;
 $reader = $reader|0;
 $data = $data|0;
 $chunkname = $chunkname|0;
 $mode = $mode|0;
 var $$chunkname = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $z = sp;
 $0 = ($chunkname|0)==(0|0);
 $$chunkname = $0 ? 16 : $chunkname;
 _luaZ_init($L,$z,$reader,$data);
 $1 = (_luaD_protectedparser($L,$z,$$chunkname,$mode)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(1);
 if (!($9)) {
  STACKTOP = sp;return ($1|0);
 }
 $10 = (($L) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaH_getint($13,2)|0);
 $15 = (($6) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $14;
 $20 = $19;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + 4)|0;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = $18;
 $26 = $25;
 HEAP32[$26>>2] = $21;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = $24;
 $29 = (($14) + 8|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($18) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$29>>2]|0;
 $33 = $32 & 64;
 $34 = ($33|0)==(0);
 if ($34) {
  STACKTOP = sp;return ($1|0);
 }
 $35 = HEAP32[$14>>2]|0;
 $36 = (($35) + 5|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37 & 3;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  STACKTOP = sp;return ($1|0);
 }
 $40 = HEAP32[$15>>2]|0;
 $41 = (($40) + 5|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42 & 4;
 $44 = ($43<<24>>24)==(0);
 if ($44) {
  STACKTOP = sp;return ($1|0);
 }
 _luaC_barrier_($L,$40,$35);
 STACKTOP = sp;return ($1|0);
}
function _lua_dump($L,$writer,$data) {
 $L = $L|0;
 $writer = $writer|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(70);
 if (!($4)) {
  $status$0 = 1;
  STACKTOP = sp;return ($status$0|0);
 }
 $5 = (($1) + -16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_luaU_dump($L,$8,$writer,$data,0)|0);
 $status$0 = $9;
 STACKTOP = sp;return ($status$0|0);
}
function _lua_status($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function _lua_gc($L,$what,$data) {
 $L = $L|0;
 $what = $what|0;
 $data = $data|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $debt$0 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($what|0) {
  case 0:  {
   $2 = (($1) + 63|0);
   HEAP8[$2>>0] = 0;
   $res$0 = 0;
   break;
  }
  case 1:  {
   _luaE_setdebt($1,0);
   $3 = (($1) + 63|0);
   HEAP8[$3>>0] = 1;
   $res$0 = 0;
   break;
  }
  case 6:  {
   $34 = (($1) + 156|0);
   $35 = HEAP32[$34>>2]|0;
   HEAP32[$34>>2] = $data;
   $res$0 = $35;
   break;
  }
  case 8:  {
   $36 = (($1) + 160|0);
   $37 = HEAP32[$36>>2]|0;
   HEAP32[$36>>2] = $data;
   $res$0 = $37;
   break;
  }
  case 2:  {
   _luaC_fullgc($L,0);
   $res$0 = 0;
   break;
  }
  case 3:  {
   $4 = (($1) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($1) + 12|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + ($5))|0;
   $9 = $8 >>> 10;
   $res$0 = $9;
   break;
  }
  case 4:  {
   $10 = (($1) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($1) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($11))|0;
   $15 = $14 & 1023;
   $res$0 = $15;
   break;
  }
  case 5:  {
   $16 = (($1) + 62|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = ($17<<24>>24)==(2);
   if ($18) {
    $19 = (($1) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(0);
    $22 = $21&1;
    _luaC_forcestep($L);
    $res$0 = $22;
    break L1;
   }
   $23 = $data << 10;
   $24 = (($23) + -1600)|0;
   $25 = (($1) + 63|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $debt$0 = $24;
    _luaE_setdebt($1,$debt$0);
    _luaC_forcestep($L);
    $31 = (($1) + 61|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = ($32<<24>>24)==(5);
    $$ = $33&1;
    STACKTOP = sp;return ($$|0);
   }
   $28 = (($1) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + ($24))|0;
   $debt$0 = $30;
   _luaE_setdebt($1,$debt$0);
   _luaC_forcestep($L);
   $31 = (($1) + 61|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = ($32<<24>>24)==(5);
   $$ = $33&1;
   STACKTOP = sp;return ($$|0);
   break;
  }
  case 9:  {
   $40 = (($1) + 63|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $res$0 = $42;
   break;
  }
  case 10:  {
   _luaC_changemode($L,2);
   $res$0 = 0;
   break;
  }
  case 11:  {
   _luaC_changemode($L,0);
   $res$0 = 0;
   break;
  }
  case 7:  {
   $38 = (($1) + 164|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$38>>2] = $data;
   $res$0 = $39;
   break;
  }
  default: {
   $res$0 = -1;
  }
  }
 } while(0);
 STACKTOP = sp;return ($res$0|0);
}
function _lua_error($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaG_errormsg($L);
 // unreachable;
 return 0|0;
}
function _lua_next($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -16|0);
 $5 = (_luaH_next($L,$1,$4)|0);
 $6 = ($5|0)==(0);
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + -16|0);
 $9 = (($7) + 16|0);
 $storemerge = $6 ? $8 : $9;
 HEAP32[$2>>2] = $storemerge;
 STACKTOP = sp;return ($5|0);
}
function _lua_concat($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1);
 if ($0) {
  $1 = (($L) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)>(0);
  if ($5) {
   _luaC_step($L);
  }
  _luaV_concat($L,$n);
  STACKTOP = sp;return;
 } else {
  $6 = ($n|0)==(0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = (($L) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_luaS_newlstr($L,24,0)|0);
  HEAP32[$8>>2] = $9;
  $10 = (($9) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | 64;
  $14 = (($8) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = HEAP32[$7>>2]|0;
  $16 = (($15) + 16|0);
  HEAP32[$7>>2] = $16;
  STACKTOP = sp;return;
 }
}
function _lua_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$idx)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 _luaV_objlen($L,$2,$0);
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$1>>2] = $4;
 STACKTOP = sp;return;
}
function _lua_getallocf($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ud|0)==(0|0);
 if (!($0)) {
  $1 = (($L) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$ud>>2] = $4;
 }
 $5 = (($L) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function _lua_setallocf($L,$f,$ud) {
 $L = $L|0;
 $f = $f|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = $ud;
 $3 = HEAP32[$0>>2]|0;
 HEAP32[$3>>2] = $f;
 STACKTOP = sp;return;
}
function _lua_newuserdata($L,$size) {
 $L = $L|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaS_newudata($L,$size,0)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 71;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = (($5) + 24|0);
 STACKTOP = sp;return ($11|0);
}
function _lua_getupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $val = sp;
 HEAP32[$val>>2] = 0;
 $0 = (_index2addr($L,$funcindex)|0);
 $1 = (_aux_upvalue($0,$n,$val,0)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = HEAP32[$val>>2]|0;
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $5;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 $16 = (($3) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($5) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$4>>2]|0;
 $20 = (($19) + 16|0);
 HEAP32[$4>>2] = $20;
 STACKTOP = sp;return ($1|0);
}
function _aux_upvalue($fi,$n,$val,$owner) {
 $fi = $fi|0;
 $n = $n|0;
 $val = $val|0;
 $owner = $owner|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fi) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 if ((($2|0) == 6)) {
  $12 = HEAP32[$fi>>2]|0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($n|0)>(0);
  if ($15) {
   $16 = (($14) + 40|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)<($n|0);
   if ($18) {
    $$0 = 0;
   } else {
    $19 = (($n) + -1)|0;
    $20 = (($12) + 16|0);
    $21 = (($20) + ($19<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    HEAP32[$val>>2] = $24;
    $25 = ($owner|0)==(0|0);
    if (!($25)) {
     $26 = HEAP32[$21>>2]|0;
     HEAP32[$owner>>2] = $26;
    }
    $27 = (($14) + 28|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + ($19<<3)|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)==(0|0);
    if ($31) {
     $$0 = 24;
    } else {
     $32 = (($30) + 16|0);
     $$0 = $32;
    }
   }
  } else {
   $$0 = 0;
  }
 } else if ((($2|0) == 38)) {
  $3 = HEAP32[$fi>>2]|0;
  $4 = ($n|0)>(0);
  if ($4) {
   $5 = (($3) + 6|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6&255;
   $8 = ($7|0)<($n|0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = (($n) + -1)|0;
    $10 = ((($3) + ($9<<4)|0) + 16|0);
    HEAP32[$val>>2] = $10;
    $11 = ($owner|0)==(0|0);
    if ($11) {
     $$0 = 24;
    } else {
     HEAP32[$owner>>2] = $3;
     $$0 = 24;
    }
   }
  } else {
   $$0 = 0;
  }
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _lua_setupvalue($L,$funcindex,$n) {
 $L = $L|0;
 $funcindex = $funcindex|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $owner = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $val = sp + 4|0;
 $owner = sp;
 HEAP32[$val>>2] = 0;
 HEAP32[$owner>>2] = 0;
 $0 = (_index2addr($L,$funcindex)|0);
 $1 = (_aux_upvalue($0,$n,$val,$owner)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -16|0);
 HEAP32[$3>>2] = $5;
 $6 = HEAP32[$val>>2]|0;
 $7 = $5;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = $6;
 $14 = $13;
 HEAP32[$14>>2] = $9;
 $15 = (($13) + 4)|0;
 $16 = $15;
 HEAP32[$16>>2] = $12;
 $17 = (($4) + -8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($6) + 8|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 $21 = (($20) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 & 64;
 $24 = ($23|0)==(0);
 if ($24) {
  STACKTOP = sp;return ($1|0);
 }
 $25 = HEAP32[$20>>2]|0;
 $26 = (($25) + 5|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27 & 3;
 $29 = ($28<<24>>24)==(0);
 if ($29) {
  STACKTOP = sp;return ($1|0);
 }
 $30 = HEAP32[$owner>>2]|0;
 $31 = (($30) + 5|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32 & 4;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  STACKTOP = sp;return ($1|0);
 }
 _luaC_barrier_($L,$30,$25);
 STACKTOP = sp;return ($1|0);
}
function _lua_upvalueid($L,$fidx,$n) {
 $L = $L|0;
 $fidx = $fidx|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$fidx)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 63;
 if ((($3|0) == 38)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($n) + -1)|0;
  $8 = ((($6) + ($7<<4)|0) + 16|0);
  $$0 = $8;
 } else if ((($3|0) == 6)) {
  $4 = (_getupvalref($L,$fidx,$n,0)|0);
  $5 = HEAP32[$4>>2]|0;
  $$0 = $5;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _getupvalref($L,$fidx,$n,$pf) {
 $L = $L|0;
 $fidx = $fidx|0;
 $n = $n|0;
 $pf = $pf|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_index2addr($L,$fidx)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($pf|0)==(0|0);
 if (!($2)) {
  HEAP32[$pf>>2] = $1;
 }
 $3 = (($n) + -1)|0;
 $4 = (($1) + 16|0);
 $5 = (($4) + ($3<<2)|0);
 STACKTOP = sp;return ($5|0);
}
function _lua_upvaluejoin($L,$fidx1,$n1,$fidx2,$n2) {
 $L = $L|0;
 $fidx1 = $fidx1|0;
 $n1 = $n1|0;
 $fidx2 = $fidx2|0;
 $n2 = $n2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $f1 = sp;
 $0 = (_getupvalref($L,$fidx1,$n1,$f1)|0);
 $1 = (_getupvalref($L,$fidx2,$n2,0)|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($3) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 3;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$f1>>2]|0;
 $9 = (($8) + 5|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 & 4;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 _luaC_barrier_($L,$8,$3);
 STACKTOP = sp;return;
}
function _luaL_traceback($L,$L1,$msg,$level) {
 $L = $L|0;
 $L1 = $L1|0;
 $msg = $msg|0;
 $level = $level|0;
 var $$0$be = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer4 = sp;
 $ar = sp + 4|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (_countlevels($L1)|0);
 $2 = ($1|0)>(22);
 $3 = $2 ? 12 : 0;
 $4 = ($msg|0)==(0|0);
 if (!($4)) {
  HEAP32[$vararg_buffer4>>2] = $msg;
  (_lua_pushfstring($L,32,$vararg_buffer4)|0);
 }
 (_lua_pushlstring($L,40,16)|0);
 $5 = (_lua_getstack($L1,$level,$ar)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $21 = (_lua_gettop($L)|0);
  $22 = (($21) - ($0))|0;
  _lua_concat($L,$22);
  STACKTOP = sp;return;
 }
 $7 = (($1) + -10)|0;
 $8 = (($ar) + 36|0);
 $9 = (($ar) + 20|0);
 $10 = (($ar) + 35|0);
 $$in = $level;
 while(1) {
  $11 = (($$in) + 1)|0;
  $12 = ($11|0)==($3|0);
  if ($12) {
   (_lua_pushlstring($L,64,5)|0);
   $$0$be = $7;
  } else {
   (_lua_getinfo($L1,72,$ar)|0);
   HEAP32[$vararg_buffer4>>2] = $8;
   (_lua_pushfstring($L,80,$vararg_buffer4)|0);
   $13 = HEAP32[$9>>2]|0;
   $14 = ($13|0)>(0);
   if ($14) {
    HEAP32[$vararg_buffer4>>2] = $13;
    (_lua_pushfstring($L,88,$vararg_buffer4)|0);
   }
   (_lua_pushlstring($L,96,4)|0);
   _pushfuncname($L,$ar);
   $15 = HEAP8[$10>>0]|0;
   $16 = ($15<<24>>24)==(0);
   if (!($16)) {
    (_lua_pushlstring($L,104,20)|0);
   }
   $17 = (_lua_gettop($L)|0);
   $18 = (($17) - ($0))|0;
   _lua_concat($L,$18);
   $$0$be = $11;
  }
  $19 = (_lua_getstack($L1,$$0$be,$ar)|0);
  $20 = ($19|0)==(0);
  if ($20) {
   break;
  } else {
   $$in = $$0$be;
  }
 }
 $21 = (_lua_gettop($L)|0);
 $22 = (($21) - ($0))|0;
 _lua_concat($L,$22);
 STACKTOP = sp;return;
}
function _countlevels($L) {
 $L = $L|0;
 var $$le$1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $le$0 = 0, $le$1$lcssa = 0, $le$11 = 0, $li$0 = 0, $li$0$phi = 0, $li$1$ = 0, $li$12 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $ar = sp;
 $le$0 = 1;$li$0 = 1;
 while(1) {
  $0 = (_lua_getstack($L,$le$0,$ar)|0);
  $1 = ($0|0)==(0);
  $2 = $le$0 << 1;
  if ($1) {
   break;
  } else {
   $li$0$phi = $le$0;$le$0 = $2;$li$0 = $li$0$phi;
  }
 }
 $3 = ($li$0|0)<($le$0|0);
 if ($3) {
  $le$11 = $le$0;$li$12 = $li$0;
 } else {
  $le$1$lcssa = $le$0;
  $10 = (($le$1$lcssa) + -1)|0;
  STACKTOP = sp;return ($10|0);
 }
 while(1) {
  $4 = (($li$12) + ($le$11))|0;
  $5 = (($4|0) / 2)&-1;
  $6 = (_lua_getstack($L,$5,$ar)|0);
  $7 = ($6|0)==(0);
  $8 = (($5) + 1)|0;
  $$le$1 = $7 ? $5 : $le$11;
  $li$1$ = $7 ? $li$12 : $8;
  $9 = ($li$1$|0)<($$le$1|0);
  if ($9) {
   $le$11 = $$le$1;$li$12 = $li$1$;
  } else {
   $le$1$lcssa = $$le$1;
   break;
  }
 }
 $10 = (($le$1$lcssa) + -1)|0;
 STACKTOP = sp;return ($10|0);
}
function _pushfuncname($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer4 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer4 = sp;
 $0 = (($ar) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($ar) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $5;
  (_lua_pushfstring($L,872,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
 $6 = (($ar) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP8[$7>>0]|0;
 if ((($8<<24>>24) == 109)) {
  (_lua_pushlstring($L,888,10)|0);
  STACKTOP = sp;return;
 } else if ((($8<<24>>24) == 67)) {
  $9 = (_pushglobalfuncname($L,$ar)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   (_lua_pushlstring($L,200,1)|0);
   STACKTOP = sp;return;
  } else {
   $11 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer4>>2] = $11;
   (_lua_pushfstring($L,872,$vararg_buffer4)|0);
   _lua_remove($L,-2);
   STACKTOP = sp;return;
  }
 } else {
  $12 = (($ar) + 36|0);
  $13 = (($ar) + 24|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $12;
  $vararg_ptr7 = (($vararg_buffer4) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $14;
  (_lua_pushfstring($L,904,$vararg_buffer4)|0);
  STACKTOP = sp;return;
 }
}
function _luaL_argerror($L,$narg,$extramsg) {
 $L = $L|0;
 $narg = $narg|0;
 $extramsg = $extramsg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer6 = sp;
 $ar = sp + 12|0;
 $0 = (_lua_getstack($L,0,$ar)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  HEAP32[$vararg_buffer6>>2] = $narg;
  $vararg_ptr1 = (($vararg_buffer6) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $extramsg;
  $2 = (_luaL_error($L,128,$vararg_buffer6)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 (_lua_getinfo($L,152,$ar)|0);
 $3 = (($ar) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_strcmp($4,160)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = (($narg) + -1)|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = (($ar) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer6>>2] = $10;
   $vararg_ptr5 = (($vararg_buffer6) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $extramsg;
   $11 = (_luaL_error($L,168,$vararg_buffer6)|0);
   $$0 = $11;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01 = $7;
  }
 } else {
  $$01 = $narg;
 }
 $12 = (($ar) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = (_pushglobalfuncname($L,$ar)|0);
  $16 = ($15|0)==(0);
  if ($16) {
   $18 = 200;
  } else {
   $17 = (_lua_tolstring($L,-1,0)|0);
   $18 = $17;
  }
  HEAP32[$12>>2] = $18;
 }
 $19 = HEAP32[$12>>2]|0;
 HEAP32[$vararg_buffer6>>2] = $$01;
 $vararg_ptr9 = (($vararg_buffer6) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $19;
 $vararg_ptr10 = (($vararg_buffer6) + 8|0);
 HEAP32[$vararg_ptr10>>2] = $extramsg;
 $20 = (_luaL_error($L,208,$vararg_buffer6)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_error($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 _luaL_where($L,1);
 (_lua_pushvfstring($L,$fmt,$argp)|0);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return 0|0;
}
function _pushglobalfuncname($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 (_lua_getinfo($L,856,$ar)|0);
 _lua_rawgeti($L,-1001000,2);
 $1 = (($0) + 1)|0;
 $2 = (_findfield($L,$1,2)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _lua_settop($L,$0);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_copy($L,-1,$1);
  _lua_settop($L,-3);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaL_where($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $ar = sp + 8|0;
 $0 = (_lua_getstack($L,$level,$ar)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  (_lua_getinfo($L,240,$ar)|0);
  $2 = (($ar) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(0);
  if ($4) {
   $5 = (($ar) + 36|0);
   HEAP32[$vararg_buffer>>2] = $5;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $3;
   (_lua_pushfstring($L,248,$vararg_buffer)|0);
   STACKTOP = sp;return;
  }
 }
 (_lua_pushlstring($L,256,0)|0);
 STACKTOP = sp;return;
}
function _luaL_fileresult($L,$stat,$fname) {
 $L = $L|0;
 $stat = $stat|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($stat|0)==(0);
 if (!($2)) {
  _lua_pushboolean($L,1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushnil($L);
 $3 = ($fname|0)==(0|0);
 $4 = (_strerror(($1|0))|0);
 if ($3) {
  (_lua_pushstring($L,$4)|0);
 } else {
  HEAP32[$vararg_buffer>>2] = $fname;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $4;
  (_lua_pushfstring($L,264,$vararg_buffer)|0);
 }
 _lua_pushinteger($L,$1);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_execresult($L,$stat) {
 $L = $L|0;
 $stat = $stat|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($stat|0) == -1)) {
  $0 = (_luaL_fileresult($L,0,0)|0);
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($stat|0) == 0)) {
  _lua_pushboolean($L,1);
 } else {
  _lua_pushnil($L);
 }
 (_lua_pushstring($L,272)|0);
 _lua_pushinteger($L,$stat);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_newmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,$tname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,-2);
 _lua_createtable($L,0,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-1001000,$tname);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_setmetatable($L,$tname) {
 $L = $L|0;
 $tname = $tname|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,$tname);
 (_lua_setmetatable($L,-2)|0);
 STACKTOP = sp;return;
}
function _luaL_testudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_touserdata($L,$ud)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_lua_getmetatable($L,$ud)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = 0;
  } else {
   _lua_getfield($L,-1001000,$tname);
   $4 = (_lua_rawequal($L,-1,-2)|0);
   $5 = ($4|0)==(0);
   $$ = $5 ? 0 : $0;
   _lua_settop($L,-3);
   $$0 = $$;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaL_checkudata($L,$ud,$tname) {
 $L = $L|0;
 $ud = $ud|0;
 $tname = $tname|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_testudata($L,$ud,$tname)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _typeerror($L,$ud,$tname);
 }
 STACKTOP = sp;return ($0|0);
}
function _typeerror($L,$narg,$tname) {
 $L = $L|0;
 $narg = $narg|0;
 $tname = $tname|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,$narg)|0);
 $1 = (_lua_typename($L,$0)|0);
 HEAP32[$vararg_buffer>>2] = $tname;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (_lua_pushfstring($L,832,$vararg_buffer)|0);
 (_luaL_argerror($L,$narg,$2)|0);
 STACKTOP = sp;return;
}
function _luaL_checkoption($L,$narg,$def,$lst) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 $lst = $lst|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($def|0)==(0|0);
 if ($0) {
  $2 = (_luaL_checklstring($L,$narg,0)|0);
  $10 = $2;
 } else {
  $1 = (_luaL_optlstring($L,$narg,$def,0)|0);
  $10 = $1;
 }
 $3 = HEAP32[$lst>>2]|0;
 $4 = ($3|0)==(0|0);
 L5: do {
  if (!($4)) {
   $9 = $3;$i$02 = 0;
   while(1) {
    $11 = (_strcmp($9,$10)|0);
    $12 = ($11|0)==(0);
    $6 = (($i$02) + 1)|0;
    if ($12) {
     $$0 = $i$02;
     break;
    }
    $5 = (($lst) + ($6<<2)|0);
    $7 = HEAP32[$5>>2]|0;
    $8 = ($7|0)==(0|0);
    if ($8) {
     break L5;
    } else {
     $9 = $7;$i$02 = $6;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$vararg_buffer>>2] = $10;
 $13 = (_lua_pushfstring($L,280,$vararg_buffer)|0);
 $14 = (_luaL_argerror($L,$narg,$13)|0);
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_optlstring($L,$narg,$def,$len) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $2 = ($len|0)==(0|0);
  if ($2) {
   $$0 = $def;
  } else {
   $3 = ($def|0)==(0|0);
   if ($3) {
    $5 = 0;
   } else {
    $4 = (_strlen(($def|0))|0);
    $5 = $4;
   }
   HEAP32[$len>>2] = $5;
   $$0 = $def;
  }
 } else {
  $6 = (_luaL_checklstring($L,$narg,$len)|0);
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaL_checklstring($L,$narg,$len) {
 $L = $L|0;
 $narg = $narg|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tolstring($L,$narg,$len)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _tag_error($L,$narg,4);
 }
 STACKTOP = sp;return ($0|0);
}
function _luaL_checkstack($L,$space,$msg) {
 $L = $L|0;
 $space = $space|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($space) + 20)|0;
 $1 = (_lua_checkstack($L,$0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ($msg|0)==(0|0);
 if ($3) {
  (_luaL_error($L,328,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 } else {
  HEAP32[$vararg_buffer1>>2] = $msg;
  (_luaL_error($L,304,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
}
function _luaL_checktype($L,$narg,$t) {
 $L = $L|0;
 $narg = $narg|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)==($t|0);
 if (!($1)) {
  _tag_error($L,$narg,$t);
 }
 STACKTOP = sp;return;
}
function _tag_error($L,$narg,$tag) {
 $L = $L|0;
 $narg = $narg|0;
 $tag = $tag|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_typename($L,$tag)|0);
 _typeerror($L,$narg,$0);
 STACKTOP = sp;return;
}
function _luaL_checkany($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)==(-1);
 if ($1) {
  (_luaL_argerror($L,$narg,344)|0);
 }
 STACKTOP = sp;return;
}
function _luaL_checknumber($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $isnum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isnum = sp;
 $0 = (+_lua_tonumberx($L,$narg,$isnum));
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return (+$0);
 }
 _tag_error($L,$narg,3);
 STACKTOP = sp;return (+$0);
}
function _luaL_optnumber($L,$narg,$def) {
 $L = $L|0;
 $narg = $narg|0;
 $def = +$def;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $3 = $def;
 } else {
  $2 = (+_luaL_checknumber($L,$narg));
  $3 = $2;
 }
 STACKTOP = sp;return (+$3);
}
function _luaL_checkinteger($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, $2 = 0, $isnum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isnum = sp;
 $0 = (_lua_tointegerx($L,$narg,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 _tag_error($L,$narg,3);
 STACKTOP = sp;return ($0|0);
}
function _luaL_checkunsigned($L,$narg) {
 $L = $L|0;
 $narg = $narg|0;
 var $0 = 0, $1 = 0, $2 = 0, $isnum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isnum = sp;
 $0 = (_lua_tounsignedx($L,$narg,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 _tag_error($L,$narg,3);
 STACKTOP = sp;return ($0|0);
}
function _luaL_optinteger($L,$narg,$def) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $3 = $def;
 } else {
  $2 = (_luaL_checkinteger($L,$narg)|0);
  $3 = $2;
 }
 STACKTOP = sp;return ($3|0);
}
function _luaL_optunsigned($L,$narg,$def) {
 $L = $L|0;
 $narg = $narg|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,$narg)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $3 = $def;
 } else {
  $2 = (_luaL_checkunsigned($L,$narg)|0);
  $3 = $2;
 }
 STACKTOP = sp;return ($3|0);
}
function _luaL_prepbuffsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($B) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($B) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) - ($5))|0;
 $7 = ($6>>>0)<($sz>>>0);
 if (!($7)) {
  $21 = HEAP32[$4>>2]|0;
  $22 = HEAP32[$B>>2]|0;
  $23 = (($22) + ($21)|0);
  STACKTOP = sp;return ($23|0);
 }
 $8 = $3 << 1;
 $9 = (($8) - ($5))|0;
 $10 = ($9>>>0)<($sz>>>0);
 $11 = (($5) + ($sz))|0;
 $$ = $10 ? $11 : $8;
 $12 = ($$>>>0)<($5>>>0);
 $13 = (($$) - ($5))|0;
 $14 = ($13>>>0)<($sz>>>0);
 $or$cond = $12 | $14;
 if ($or$cond) {
  (_luaL_error($1,360,$vararg_buffer)|0);
 }
 $15 = (_lua_newuserdata($1,$$)|0);
 $16 = HEAP32[$B>>2]|0;
 $17 = HEAP32[$4>>2]|0;
 _memcpy(($15|0),($16|0),($17|0))|0;
 $18 = HEAP32[$B>>2]|0;
 $19 = (($B) + 16|0);
 $20 = ($18|0)==($19|0);
 if (!($20)) {
  _lua_remove($1,-2);
 }
 HEAP32[$B>>2] = $15;
 HEAP32[$2>>2] = $$;
 $21 = HEAP32[$4>>2]|0;
 $22 = HEAP32[$B>>2]|0;
 $23 = (($22) + ($21)|0);
 STACKTOP = sp;return ($23|0);
}
function _luaL_addlstring($B,$s,$l) {
 $B = $B|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_prepbuffsize($B,$l)|0);
 _memcpy(($0|0),($s|0),($l|0))|0;
 $1 = (($B) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($l))|0;
 HEAP32[$1>>2] = $3;
 STACKTOP = sp;return;
}
function _luaL_addstring($B,$s) {
 $B = $B|0;
 $s = $s|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 _luaL_addlstring($B,$s,$0);
 STACKTOP = sp;return;
}
function _luaL_pushresult($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$B>>2]|0;
 $3 = (($B) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushlstring($1,$2,$4)|0);
 $5 = HEAP32[$B>>2]|0;
 $6 = (($B) + 16|0);
 $7 = ($5|0)==($6|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 _lua_remove($1,-2);
 STACKTOP = sp;return;
}
function _luaL_pushresultsize($B,$sz) {
 $B = $B|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($sz))|0;
 HEAP32[$0>>2] = $2;
 _luaL_pushresult($B);
 STACKTOP = sp;return;
}
function _luaL_addvalue($B) {
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $l = sp;
 $0 = (($B) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_tolstring($1,-1,$l)|0);
 $3 = HEAP32[$B>>2]|0;
 $4 = (($B) + 16|0);
 $5 = ($3|0)==($4|0);
 if (!($5)) {
  _lua_insert($1,-2);
 }
 $6 = HEAP32[$l>>2]|0;
 _luaL_addlstring($B,$2,$6);
 $7 = HEAP32[$B>>2]|0;
 $8 = ($7|0)!=($4|0);
 $9 = $8 ? -2 : -1;
 _lua_remove($1,$9);
 STACKTOP = sp;return;
}
function _luaL_buffinit($L,$B) {
 $L = $L|0;
 $B = $B|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($B) + 12|0);
 HEAP32[$0>>2] = $L;
 $1 = (($B) + 16|0);
 HEAP32[$B>>2] = $1;
 $2 = (($B) + 8|0);
 HEAP32[$2>>2] = 0;
 $3 = (($B) + 4|0);
 HEAP32[$3>>2] = 1024;
 STACKTOP = sp;return;
}
function _luaL_buffinitsize($L,$B,$sz) {
 $L = $L|0;
 $B = $B|0;
 $sz = $sz|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_buffinit($L,$B);
 $0 = (_luaL_prepbuffsize($B,$sz)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaL_ref($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $ref$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,-2);
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_lua_absindex($L,$t)|0);
 _lua_rawgeti($L,$2,0);
 $3 = (_lua_tointegerx($L,-1,0)|0);
 _lua_settop($L,-2);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = (_lua_rawlen($L,$2)|0);
  $6 = (($5) + 1)|0;
  $ref$0 = $6;
 } else {
  _lua_rawgeti($L,$2,$3);
  _lua_rawseti($L,$2,0);
  $ref$0 = $3;
 }
 _lua_rawseti($L,$2,$ref$0);
 $$0 = $ref$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_unref($L,$t,$ref) {
 $L = $L|0;
 $t = $t|0;
 $ref = $ref|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ref|0)>(-1);
 if (!($0)) {
  STACKTOP = sp;return;
 }
 $1 = (_lua_absindex($L,$t)|0);
 _lua_rawgeti($L,$1,0);
 _lua_rawseti($L,$1,$ref);
 _lua_pushinteger($L,$ref);
 _lua_rawseti($L,$1,0);
 STACKTOP = sp;return;
}
function _luaL_loadfilex($L,$filename,$mode) {
 $L = $L|0;
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $lf = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $vararg_buffer = sp;
 $lf = sp + 8|0;
 $c = sp + 4|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + 1)|0;
 $2 = ($filename|0)==(0|0);
 if ($2) {
  (_lua_pushlstring($L,384,6)|0);
  $3 = HEAP32[_stdin>>2]|0;
  $4 = (($lf) + 4|0);
  HEAP32[$4>>2] = $3;
 } else {
  HEAP32[$vararg_buffer>>2] = $filename;
  (_lua_pushfstring($L,392,$vararg_buffer)|0);
  $5 = (_fopen(($filename|0),(400|0))|0);
  $6 = (($lf) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   _errfile($L,408,$1);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (_skipcomment($lf,$c)|0);
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = HEAP32[$lf>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$lf>>2] = $11;
  $12 = ((($lf) + ($10)|0) + 8|0);
  HEAP8[$12>>0] = 10;
 }
 $13 = HEAP32[$c>>2]|0;
 $14 = ($13|0)!=(27);
 $or$cond = $14 | $2;
 do {
  if ($or$cond) {
   $19 = $13;
  } else {
   $15 = (($lf) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (_freopen(($filename|0),(416|0),($16|0))|0);
   HEAP32[$15>>2] = $17;
   $18 = ($17|0)==(0|0);
   if (!($18)) {
    (_skipcomment($lf,$c)|0);
    $$pr = HEAP32[$c>>2]|0;
    $19 = $$pr;
    break;
   }
   _errfile($L,424,$1);
   $$0 = 7;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $20 = ($19|0)==(-1);
 if (!($20)) {
  $21 = $19&255;
  $22 = HEAP32[$lf>>2]|0;
  $23 = (($22) + 1)|0;
  HEAP32[$lf>>2] = $23;
  $24 = ((($lf) + ($22)|0) + 8|0);
  HEAP8[$24>>0] = $21;
 }
 $25 = (_lua_tolstring($L,-1,0)|0);
 $26 = (_lua_load($L,19,$lf,$25,$mode)|0);
 $27 = (($lf) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (_ferror(($28|0))|0);
 if (!($2)) {
  (_fclose(($28|0))|0);
 }
 $30 = ($29|0)==(0);
 if ($30) {
  _lua_remove($L,$1);
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_settop($L,$1);
  _errfile($L,432,$1);
  $$0 = 7;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _errfile($L,$what,$fnameindex) {
 $L = $L|0;
 $what = $what|0;
 $fnameindex = $fnameindex|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (___errno_location()|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_strerror(($1|0))|0);
 $3 = (_lua_tolstring($L,$fnameindex,0)|0);
 $4 = (($3) + 1|0);
 HEAP32[$vararg_buffer>>2] = $what;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 (_lua_pushfstring($L,808,$vararg_buffer)|0);
 _lua_remove($L,$fnameindex);
 STACKTOP = sp;return;
}
function _skipcomment($lf,$cp) {
 $lf = $lf|0;
 $cp = $cp|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_skipBOM($lf)|0);
 HEAP32[$cp>>2] = $0;
 $1 = ($0|0)==(35);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($lf) + 4|0);
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  $4 = (_getc(($3|0))|0);
  if ((($4|0) == 10) | (($4|0) == -1)) {
   break;
  }
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = (_getc(($5|0))|0);
 HEAP32[$cp>>2] = $6;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _getF($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = ($0|0)>(0);
 do {
  if ($1) {
   HEAP32[$size>>2] = $0;
   HEAP32[$ud>>2] = 0;
  } else {
   $2 = (($ud) + 4|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (_feof(($3|0))|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (($ud) + 8|0);
    $7 = HEAP32[$2>>2]|0;
    $8 = (_fread(($6|0),1,1024,($7|0))|0);
    HEAP32[$size>>2] = $8;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $9 = (($ud) + 8|0);
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_loadbufferx($L,$buff,$size,$name,$mode) {
 $L = $L|0;
 $buff = $buff|0;
 $size = $size|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $ls = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ls = sp;
 HEAP32[$ls>>2] = $buff;
 $0 = (($ls) + 4|0);
 HEAP32[$0>>2] = $size;
 $1 = (_lua_load($L,20,$ls,$name,$mode)|0);
 STACKTOP = sp;return ($1|0);
}
function _getS($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ud) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$size>>2] = $1;
 HEAP32[$0>>2] = 0;
 $3 = HEAP32[$ud>>2]|0;
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_loadstring($L,$s) {
 $L = $L|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (_luaL_loadbufferx($L,$s,$0,$s,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaL_getmetafield($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getmetatable($L,$obj)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   (_lua_pushstring($L,$event)|0);
   _lua_rawget($L,-2);
   $2 = (_lua_type($L,-1)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    _lua_settop($L,-3);
    $$0 = 0;
    break;
   } else {
    _lua_remove($L,-2);
    $$0 = 1;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaL_callmeta($L,$obj,$event) {
 $L = $L|0;
 $obj = $obj|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_absindex($L,$obj)|0);
 $1 = (_luaL_getmetafield($L,$0,$event)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushvalue($L,$0);
 _lua_callk($L,1,1,0,0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_len($L,$idx) {
 $L = $L|0;
 $idx = $idx|0;
 var $0 = 0, $1 = 0, $2 = 0, $isnum = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $isnum = sp + 4|0;
 _lua_len($L,$idx);
 $0 = (_lua_tointegerx($L,-1,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  (_luaL_error($L,440,$vararg_buffer)|0);
 }
 _lua_settop($L,-2);
 STACKTOP = sp;return ($0|0);
}
function _luaL_tolstring($L,$idx,$len) {
 $L = $L|0;
 $idx = $idx|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_luaL_callmeta($L,$idx,472)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $2 = (_lua_type($L,$idx)|0);
   if ((($2|0) == 0)) {
    (_lua_pushlstring($L,504,3)|0);
    break;
   } else if ((($2|0) == 4) | (($2|0) == 3)) {
    _lua_pushvalue($L,$idx);
    break;
   } else if ((($2|0) == 1)) {
    $3 = (_lua_toboolean($L,$idx)|0);
    $4 = ($3|0)!=(0);
    $5 = $4 ? 488 : 496;
    (_lua_pushstring($L,$5)|0);
    break;
   } else {
    $6 = (_lua_type($L,$idx)|0);
    $7 = (_lua_typename($L,$6)|0);
    $8 = (_lua_topointer($L,$idx)|0);
    HEAP32[$vararg_buffer>>2] = $7;
    $vararg_ptr1 = (($vararg_buffer) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $8;
    (_lua_pushfstring($L,512,$vararg_buffer)|0);
    break;
   }
  }
 } while(0);
 $9 = (_lua_tolstring($L,-1,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function _luaL_pushmodule($L,$modname,$sizehint) {
 $L = $L|0;
 $modname = $modname|0;
 $sizehint = $sizehint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 (_luaL_findtable($L,-1001000,520,1)|0);
 _lua_getfield($L,-1,$modname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  _lua_remove($L,-2);
  STACKTOP = sp;return;
 }
 _lua_settop($L,-2);
 _lua_rawgeti($L,-1001000,2);
 $2 = (_luaL_findtable($L,0,$modname,$sizehint)|0);
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  HEAP32[$vararg_buffer>>2] = $modname;
  (_luaL_error($L,528,$vararg_buffer)|0);
 }
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-3,$modname);
 _lua_remove($L,-2);
 STACKTOP = sp;return;
}
function _luaL_findtable($L,$idx,$fname,$szhint) {
 $L = $L|0;
 $idx = $idx|0;
 $fname = $fname|0;
 $szhint = $szhint|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $e$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($idx|0)==(0);
 if ($0) {
  $$01 = $fname;
 } else {
  _lua_pushvalue($L,$idx);
  $$01 = $fname;
 }
 while(1) {
  $1 = (_strchr($$01,46)|0);
  $2 = ($1|0)==(0|0);
  if ($2) {
   $3 = (_strlen(($$01|0))|0);
   $4 = (($$01) + ($3)|0);
   $e$0 = $4;
  } else {
   $e$0 = $1;
  }
  $5 = $e$0;
  $6 = $$01;
  $7 = (($5) - ($6))|0;
  (_lua_pushlstring($L,$$01,$7)|0);
  _lua_rawget($L,-2);
  $8 = (_lua_type($L,-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _lua_settop($L,-2);
   $10 = HEAP8[$e$0>>0]|0;
   $11 = ($10<<24>>24)==(46);
   $12 = $11 ? 1 : $szhint;
   _lua_createtable($L,0,$12);
   (_lua_pushlstring($L,$$01,$7)|0);
   _lua_pushvalue($L,-2);
   _lua_settable($L,-4);
  } else {
   $13 = (_lua_type($L,-1)|0);
   $14 = ($13|0)==(5);
   if (!($14)) {
    break;
   }
  }
  _lua_remove($L,-2);
  $15 = (($e$0) + 1|0);
  $16 = HEAP8[$e$0>>0]|0;
  $17 = ($16<<24>>24)==(46);
  if ($17) {
   $$01 = $15;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,-3);
 $$0 = $$01;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_openlib($L,$libname,$l,$nup) {
 $L = $L|0;
 $libname = $libname|0;
 $l = $l|0;
 $nup = $nup|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,502.0);
 $0 = ($libname|0)==(0|0);
 if (!($0)) {
  $1 = (_libsize($l)|0);
  _luaL_pushmodule($L,$libname,$1);
  $2 = $nup ^ -1;
  _lua_insert($L,$2);
 }
 $3 = ($l|0)==(0|0);
 if ($3) {
  $4 = $nup ^ -1;
  _lua_settop($L,$4);
  STACKTOP = sp;return;
 } else {
  _luaL_setfuncs($L,$l,$nup);
  STACKTOP = sp;return;
 }
}
function _luaL_checkversion_($L,$ver) {
 $L = $L|0;
 $ver = +$ver;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $vararg_buffer4 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer4 = sp;
 $0 = (_lua_version($L)|0);
 $1 = (_lua_version(0)|0);
 $2 = ($0|0)==($1|0);
 if ($2) {
  $3 = +HEAPF64[$0>>3];
  $4 = $3 != $ver;
  if ($4) {
   HEAPF64[tempDoublePtr>>3]=$ver;HEAP32[$vararg_buffer4>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer4+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $vararg_ptr3 = (($vararg_buffer4) + 8|0);
   HEAPF64[tempDoublePtr>>3]=$3;HEAP32[$vararg_ptr3>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr3+4>>2]=HEAP32[tempDoublePtr+4>>2];
   (_luaL_error($L,616,$vararg_buffer4)|0);
  }
 } else {
  (_luaL_error($L,584,$vararg_buffer4)|0);
 }
 _lua_pushnumber($L,-4660.0);
 $5 = (_lua_tointegerx($L,-1,0)|0);
 $6 = ($5|0)==(-4660);
 if ($6) {
  $7 = (_lua_tounsignedx($L,-1,0)|0);
  $8 = ($7|0)==(-4660);
  if ($8) {
   _lua_settop($L,-2);
   STACKTOP = sp;return;
  }
 }
 (_luaL_error($L,672,$vararg_buffer4)|0);
 _lua_settop($L,-2);
 STACKTOP = sp;return;
}
function _libsize($l) {
 $l = $l|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $size$0$lcssa = 0, $size$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==(0|0);
 L1: do {
  if ($0) {
   $size$0$lcssa = 0;
  } else {
   $$01 = $l;$size$02 = 0;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $2 = ($1|0)==(0|0);
    if ($2) {
     $size$0$lcssa = $size$02;
     break L1;
    }
    $3 = (($size$02) + 1)|0;
    $4 = (($$01) + 8|0);
    $$01 = $4;$size$02 = $3;
   }
  }
 } while(0);
 STACKTOP = sp;return ($size$0$lcssa|0);
}
function _luaL_setfuncs($L,$l,$nup) {
 $L = $L|0;
 $l = $l|0;
 $nup = $nup|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkversion_($L,502.0);
 _luaL_checkstack($L,$nup,560);
 $0 = HEAP32[$l>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $13 = $nup ^ -1;
  _lua_settop($L,$13);
  STACKTOP = sp;return;
 }
 $2 = ($nup|0)>(0);
 $3 = (-2 - ($nup))|0;
 $4 = (0 - ($nup))|0;
 $7 = $l;
 while(1) {
  if ($2) {
   $i$01 = 0;
   while(1) {
    _lua_pushvalue($L,$4);
    $5 = (($i$01) + 1)|0;
    $exitcond = ($5|0)==($nup|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $5;
    }
   }
  }
  $6 = (($7) + 4|0);
  $8 = HEAP32[$6>>2]|0;
  _lua_pushcclosure($L,$8,$nup);
  $9 = HEAP32[$7>>2]|0;
  _lua_setfield($L,$3,$9);
  $10 = (($7) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $7 = $10;
  }
 }
 $13 = $nup ^ -1;
 _lua_settop($L,$13);
 STACKTOP = sp;return;
}
function _luaL_getsubtable($L,$idx,$fname) {
 $L = $L|0;
 $idx = $idx|0;
 $fname = $fname|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,$idx,$fname);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_settop($L,-2);
 $2 = (_lua_absindex($L,$idx)|0);
 _lua_createtable($L,0,0);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,$2,$fname);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaL_requiref($L,$modname,$openf,$glb) {
 $L = $L|0;
 $modname = $modname|0;
 $openf = $openf|0;
 $glb = $glb|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushcclosure($L,$openf,0);
 (_lua_pushstring($L,$modname)|0);
 _lua_callk($L,1,1,0,0);
 (_luaL_getsubtable($L,-1001000,520)|0);
 _lua_pushvalue($L,-2);
 _lua_setfield($L,-2,$modname);
 _lua_settop($L,-2);
 $0 = ($glb|0)==(0);
 if ($0) {
  STACKTOP = sp;return;
 }
 _lua_pushvalue($L,-1);
 _lua_setglobal($L,$modname);
 STACKTOP = sp;return;
}
function _luaL_gsub($L,$s,$p,$r) {
 $L = $L|0;
 $s = $s|0;
 $p = $p|0;
 $r = $r|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $b = sp;
 $0 = (_strlen(($p|0))|0);
 _luaL_buffinit($L,$b);
 $1 = (_strstr($s,$p)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0$lcssa = $s;
 } else {
  $$01 = $s;$3 = $1;
  while(1) {
   $4 = $3;
   $5 = $$01;
   $6 = (($4) - ($5))|0;
   _luaL_addlstring($b,$$01,$6);
   _luaL_addstring($b,$r);
   $7 = (($3) + ($0)|0);
   $8 = (_strstr($7,$p)|0);
   $9 = ($8|0)==(0|0);
   if ($9) {
    $$0$lcssa = $7;
    break;
   } else {
    $$01 = $7;$3 = $8;
   }
  }
 }
 _luaL_addstring($b,$$0$lcssa);
 _luaL_pushresult($b);
 $10 = (_lua_tolstring($L,-1,0)|0);
 STACKTOP = sp;return ($10|0);
}
function _luaL_newstate() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_newstate(18,0)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  (_lua_atpanic($0,139)|0);
 }
 STACKTOP = sp;return ($0|0);
}
function _l_alloc($ud,$ptr,$osize,$nsize) {
 $ud = $ud|0;
 $ptr = $ptr|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($nsize|0)==(0);
 if ($0) {
  _free($ptr);
  $$0 = 0;
 } else {
  $1 = (_realloc($ptr,$nsize)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _panic($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[_stderr>>2]|0;
 $1 = (_lua_tolstring($L,-1,0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf(($0|0),(744|0),($vararg_buffer|0))|0);
 $2 = HEAP32[_stderr>>2]|0;
 (_fflush(($2|0))|0);
 STACKTOP = sp;return 0;
}
function _skipBOM($lf) {
 $lf = $lf|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$lf>>2] = 0;
 $0 = (($lf) + 4|0);
 $p$0 = 800;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = (_getc(($1|0))|0);
  $3 = ($2|0)==(-1);
  if ($3) {
   $$0 = -1;
   label = 6;
   break;
  }
  $4 = (($p$0) + 1|0);
  $5 = HEAP8[$p$0>>0]|0;
  $6 = $5&255;
  $7 = ($2|0)==($6|0);
  if (!($7)) {
   $$0 = $2;
   label = 6;
   break;
  }
  $8 = $2&255;
  $9 = HEAP32[$lf>>2]|0;
  $10 = (($9) + 1)|0;
  HEAP32[$lf>>2] = $10;
  $11 = ((($lf) + ($9)|0) + 8|0);
  HEAP8[$11>>0] = $8;
  $12 = HEAP8[$4>>0]|0;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 5;
   break;
  } else {
   $p$0 = $4;
  }
 }
 if ((label|0) == 5) {
  HEAP32[$lf>>2] = 0;
  $14 = HEAP32[$0>>2]|0;
  $15 = (_getc(($14|0))|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _findfield($L,$objidx,$level) {
 $L = $L|0;
 $objidx = $objidx|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)==(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (_lua_type($L,-1)|0);
   $2 = ($1|0)==(5);
   if ($2) {
    _lua_pushnil($L);
    $3 = (_lua_next($L,-2)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $$0 = 0;
    } else {
     $5 = (($level) + -1)|0;
     while(1) {
      $6 = (_lua_type($L,-2)|0);
      $7 = ($6|0)==(4);
      if ($7) {
       $8 = (_lua_rawequal($L,$objidx,-1)|0);
       $9 = ($8|0)==(0);
       if (!($9)) {
        label = 7;
        break;
       }
       $10 = (_findfield($L,$objidx,$5)|0);
       $11 = ($10|0)==(0);
       if (!($11)) {
        label = 9;
        break;
       }
      }
      _lua_settop($L,-2);
      $12 = (_lua_next($L,-2)|0);
      $13 = ($12|0)==(0);
      if ($13) {
       $$0 = 0;
       break L1;
      }
     }
     if ((label|0) == 7) {
      _lua_settop($L,-2);
      $$0 = 1;
      break;
     }
     else if ((label|0) == 9) {
      _lua_remove($L,-2);
      (_lua_pushlstring($L,864,1)|0);
      _lua_insert($L,-2);
      _lua_concat($L,3);
      $$0 = 1;
      break;
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaopen_base($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_rawgeti($L,-1001000,2);
 _lua_rawgeti($L,-1001000,2);
 _lua_setfield($L,-2,928);
 _luaL_setfuncs($L,936,0);
 (_lua_pushlstring($L,1128,7)|0);
 _lua_setfield($L,-2,1136);
 STACKTOP = sp;return 1;
}
function _luaB_assert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_lua_toboolean($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = (_luaL_optlstring($L,2,2000,0)|0);
  HEAP32[$vararg_buffer>>2] = $2;
  $3 = (_luaL_error($L,1992,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = (_lua_gettop($L)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaB_collectgarbage($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkoption($L,1,1824,1760)|0);
 $1 = (1944 + ($0<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_luaL_optinteger($L,2,0)|0);
 $4 = (_lua_gc($L,$2,$3)|0);
 if ((($2|0) == 9) | (($2|0) == 5)) {
  _lua_pushboolean($L,$4);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 3)) {
  $5 = (_lua_gc($L,4,0)|0);
  $6 = (+($4|0));
  $7 = (+($5|0));
  $8 = $7 * 9.765625E-4;
  $9 = $6 + $8;
  _lua_pushnumber($L,$9);
  _lua_pushinteger($L,$5);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_pushinteger($L,$4);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaB_dofile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 _lua_settop($L,1);
 $1 = (_luaL_loadfilex($L,$0,0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lua_callk($L,0,-1,0,140);
  $3 = (_dofilecont($L)|0);
  STACKTOP = sp;return ($3|0);
 } else {
  (_lua_error($L)|0);
  // unreachable;
 }
 return 0|0;
}
function _luaB_error($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optinteger($L,2,1)|0);
 _lua_settop($L,1);
 $1 = (_lua_isstring($L,1)|0);
 $2 = ($1|0)!=(0);
 $3 = ($0|0)>(0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,$0);
 _lua_pushvalue($L,1);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return 0|0;
}
function _luaB_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 } else {
  (_luaL_getmetafield($L,1,1488)|0);
  STACKTOP = sp;return 1;
 }
 return 0|0;
}
function _luaB_ipairs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pairsmeta($L,1744,1,141);
 STACKTOP = sp;return 3;
}
function _luaB_loadfile($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_optlstring($L,2,0,0)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 3 : 0;
 $5 = (_luaL_loadfilex($L,$0,$1)|0);
 $6 = (_load_aux($L,$5,$4)|0);
 STACKTOP = sp;return ($6|0);
}
function _luaB_load($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $l = sp;
 $0 = (_lua_tolstring($L,1,$l)|0);
 $1 = (_luaL_optlstring($L,3,1656,0)|0);
 $2 = (_lua_type($L,4)|0);
 $3 = ($2|0)!=(-1);
 $4 = $3 ? 4 : 0;
 $5 = ($0|0)==(0|0);
 if ($5) {
  $9 = (_luaL_optlstring($L,2,1664,0)|0);
  _luaL_checktype($L,1,6);
  _lua_settop($L,5);
  $10 = (_lua_load($L,21,0,$9,$1)|0);
  $status$0 = $10;
  $11 = (_load_aux($L,$status$0,$4)|0);
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = (_luaL_optlstring($L,2,$0,0)|0);
  $7 = HEAP32[$l>>2]|0;
  $8 = (_luaL_loadbufferx($L,$0,$7,$6,$1)|0);
  $status$0 = $8;
  $11 = (_load_aux($L,$status$0,$4)|0);
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function _luaB_next($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _lua_settop($L,2);
 $0 = (_lua_next($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_pushnil($L);
  $$0 = 1;
 } else {
  $$0 = 2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaB_pairs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _pairsmeta($L,1648,0,26);
 STACKTOP = sp;return 3;
}
function _luaB_pcall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _lua_pushnil($L);
 _lua_insert($L,1);
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -2)|0;
 $2 = (_lua_pcallk($L,$1,-1,0,0,142)|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_finishpcall($L,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function _luaB_print($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_lua_gettop($L)|0);
 _lua_getglobal($L,1368);
 $1 = ($0|0)<(1);
 L1: do {
  if (!($1)) {
   $2 = HEAP32[_stdout>>2]|0;
   $i$04 = 1;
   while(1) {
    _lua_pushvalue($L,-1);
    _lua_pushvalue($L,$i$04);
    _lua_callk($L,1,1,0,0);
    $3 = (_lua_tolstring($L,-1,$l)|0);
    $4 = ($3|0)==(0|0);
    if ($4) {
     break;
    }
    $6 = ($i$04|0)>(1);
    if ($6) {
     (_fputc(9,($2|0))|0);
    }
    $7 = HEAP32[$l>>2]|0;
    (_fwrite(($3|0),1,($7|0),($2|0))|0);
    _lua_settop($L,-2);
    $8 = (($i$04) + 1)|0;
    $9 = ($i$04|0)<($0|0);
    if ($9) {
     $i$04 = $8;
    } else {
     break L1;
    }
   }
   $5 = (_luaL_error($L,1600,$vararg_buffer)|0);
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP32[_stdout>>2]|0;
 (_fputc(10,($10|0))|0);
 $11 = HEAP32[_stdout>>2]|0;
 (_fflush(($11|0))|0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaB_rawequal($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 _luaL_checkany($L,2);
 $0 = (_lua_rawequal($L,1,2)|0);
 _lua_pushboolean($L,$0);
 STACKTOP = sp;return 1;
}
function _luaB_rawlen($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = $0 & -2;
 $2 = ($1|0)==(4);
 if (!($2)) {
  (_luaL_argerror($L,1,1568)|0);
 }
 $3 = (_lua_rawlen($L,1)|0);
 _lua_pushinteger($L,$3);
 STACKTOP = sp;return 1;
}
function _luaB_rawget($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _lua_settop($L,2);
 _lua_rawget($L,1);
 STACKTOP = sp;return 1;
}
function _luaB_rawset($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _luaL_checkany($L,2);
 _luaL_checkany($L,3);
 _lua_settop($L,3);
 _lua_rawset($L,1);
 STACKTOP = sp;return 1;
}
function _luaB_select($L) {
 $L = $L|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_type($L,1)|0);
 $2 = ($1|0)==(4);
 if ($2) {
  $3 = (_lua_tolstring($L,1,0)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(35);
  if ($5) {
   $6 = (($0) + -1)|0;
   _lua_pushinteger($L,$6);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $7 = (_luaL_checkinteger($L,1)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $9 = (($7) + ($0))|0;
  $i$0 = $9;
 } else {
  $10 = ($7|0)>($0|0);
  $$ = $10 ? $0 : $7;
  $i$0 = $$;
 }
 $11 = ($i$0|0)>(0);
 if (!($11)) {
  (_luaL_argerror($L,1,1544)|0);
 }
 $12 = (($0) - ($i$0))|0;
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _luaB_setmetatable($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_lua_type($L,2)|0);
 _luaL_checktype($L,1,5);
 if (!((($0|0) == 0) | (($0|0) == 5))) {
  (_luaL_argerror($L,2,1464)|0);
 }
 $1 = (_luaL_getmetafield($L,1,1488)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  _lua_settop($L,2);
  (_lua_setmetatable($L,1)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_luaL_error($L,1504,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaB_tonumber($L) {
 $L = $L|0;
 var $$off = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigittmp = 0, $isnum = 0, $l = 0, $n1$0 = 0.0, $n1$1 = 0.0, $neg$0 = 0, $s$0 = 0, $s$1 = 0, $s$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $isnum = sp + 4|0;
 $l = sp;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)<(1);
 do {
  if ($1) {
   $2 = (+_lua_tonumberx($L,1,$isnum));
   $3 = HEAP32[$isnum>>2]|0;
   $4 = ($3|0)==(0);
   if ($4) {
    _luaL_checkany($L,1);
    break;
   }
   _lua_pushnumber($L,$2);
   STACKTOP = sp;return 1;
  } else {
   $5 = (_luaL_checklstring($L,1,$l)|0);
   $6 = HEAP32[$l>>2]|0;
   $7 = (($5) + ($6)|0);
   $8 = (_luaL_checkinteger($L,2)|0);
   $$off = (($8) + -2)|0;
   $9 = ($$off>>>0)<(35);
   if (!($9)) {
    (_luaL_argerror($L,2,1432)|0);
   }
   $10 = (_strspn($5,1456)|0);
   $11 = (($5) + ($10)|0);
   $12 = HEAP8[$11>>0]|0;
   if ((($12<<24>>24) == 45)) {
    $$sum2 = (($10) + 1)|0;
    $13 = (($5) + ($$sum2)|0);
    $neg$0 = 1;$s$0 = $13;
   } else if ((($12<<24>>24) == 43)) {
    $$sum = (($10) + 1)|0;
    $14 = (($5) + ($$sum)|0);
    $neg$0 = 0;$s$0 = $14;
   } else {
    $neg$0 = 0;$s$0 = $11;
   }
   $15 = HEAP8[$s$0>>0]|0;
   $16 = $15&255;
   $17 = (_isalnum($16)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    $19 = (+($8|0));
    $n1$0 = 0.0;$s$1 = $s$0;
    while(1) {
     $20 = HEAP8[$s$1>>0]|0;
     $21 = $20&255;
     $isdigittmp = (($21) + -48)|0;
     $isdigit = ($isdigittmp>>>0)<(10);
     if ($isdigit) {
      $22 = $20 << 24 >> 24;
      $23 = (($22) + -48)|0;
      $26 = $23;
     } else {
      $24 = (_toupper($21)|0);
      $25 = (($24) + -55)|0;
      $26 = $25;
     }
     $27 = ($26|0)<($8|0);
     if (!($27)) {
      $n1$1 = $n1$0;$s$2 = $s$1;
      break;
     }
     $28 = $19 * $n1$0;
     $29 = (+($26|0));
     $30 = $28 + $29;
     $31 = (($s$1) + 1|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32&255;
     $34 = (_isalnum($33)|0);
     $35 = ($34|0)==(0);
     if ($35) {
      $n1$1 = $30;$s$2 = $31;
      break;
     } else {
      $n1$0 = $30;$s$1 = $31;
     }
    }
    $36 = (_strspn($s$2,1456)|0);
    $37 = (($s$2) + ($36)|0);
    $38 = ($37|0)==($7|0);
    if ($38) {
     $39 = ($neg$0|0)==(0);
     if ($39) {
      $41 = $n1$1;
     } else {
      $40 = -$n1$1;
      $41 = $40;
     }
     _lua_pushnumber($L,$41);
     STACKTOP = sp;return 1;
    }
   }
  }
 } while(0);
 _lua_pushnil($L);
 STACKTOP = sp;return 1;
}
function _luaB_tostring($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 (_luaL_tolstring($L,1,0)|0);
 STACKTOP = sp;return 1;
}
function _luaB_type($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_type($L,1)|0);
 $1 = (_lua_typename($L,$0)|0);
 (_lua_pushstring($L,$1)|0);
 STACKTOP = sp;return 1;
}
function _luaB_xpcall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)>(1);
 if (!($1)) {
  (_luaL_argerror($L,2,1400)|0);
 }
 _lua_pushvalue($L,1);
 _lua_copy($L,2,1);
 _lua_replace($L,2);
 $2 = (($0) + -2)|0;
 $3 = (_lua_pcallk($L,$2,-1,1,0,142)|0);
 $4 = ($3|0)==(0);
 $5 = $4&1;
 $6 = (_finishpcall($L,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _pcallcont($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_getctx($L,0)|0);
 $1 = ($0|0)==(1);
 $2 = $1&1;
 $3 = (_finishpcall($L,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _finishpcall($L,$status) {
 $L = $L|0;
 $status = $status|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_checkstack($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,0);
  _lua_pushboolean($L,0);
  (_lua_pushstring($L,1416)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_pushboolean($L,$status);
  _lua_replace($L,1);
  $2 = (_lua_gettop($L)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _pairsmeta($L,$method,$iszero,$iter) {
 $L = $L|0;
 $method = $method|0;
 $iszero = $iszero|0;
 $iter = $iter|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_getmetafield($L,1,$method)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _lua_pushvalue($L,1);
  _lua_callk($L,1,3,0,0);
  STACKTOP = sp;return;
 }
 _luaL_checktype($L,1,5);
 _lua_pushcclosure($L,$iter,0);
 _lua_pushvalue($L,1);
 $2 = ($iszero|0)==(0);
 if ($2) {
  _lua_pushnil($L);
  STACKTOP = sp;return;
 } else {
  _lua_pushinteger($L,0);
  STACKTOP = sp;return;
 }
}
function _generic_reader($L,$ud,$size) {
 $L = $L|0;
 $ud = $ud|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _luaL_checkstack($L,2,1672);
 _lua_pushvalue($L,1);
 _lua_callk($L,0,1,0,0);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_settop($L,-2);
  HEAP32[$size>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_lua_isstring($L,-1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  (_luaL_error($L,1704,$vararg_buffer)|0);
 }
 _lua_replace($L,5);
 $4 = (_lua_tolstring($L,5,$size)|0);
 $$0 = $4;
 STACKTOP = sp;return ($$0|0);
}
function _load_aux($L,$status,$envidx) {
 $L = $L|0;
 $status = $status|0;
 $envidx = $envidx|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($status|0)==(0);
 if ($0) {
  $1 = ($envidx|0)==(0);
  if ($1) {
   $$0 = 1;
  } else {
   _lua_pushvalue($L,$envidx);
   $2 = (_lua_setupvalue($L,-2,1)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    _lua_settop($L,-2);
    $$0 = 1;
   } else {
    $$0 = 1;
   }
  }
 } else {
  _lua_pushnil($L);
  _lua_insert($L,-2);
  $$0 = 2;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ipairsaux($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,5);
 $1 = (($0) + 1)|0;
 _lua_pushinteger($L,$1);
 _lua_rawgeti($L,1,$1);
 $2 = (_lua_type($L,-1)|0);
 $3 = ($2|0)==(0);
 $4 = $3 ? 1 : 2;
 STACKTOP = sp;return ($4|0);
}
function _dofilecont($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (($0) + -1)|0;
 STACKTOP = sp;return ($1|0);
}
function _luaopen_bit32($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,12);
 _luaL_setfuncs($L,2024,0);
 STACKTOP = sp;return 1;
}
function _b_arshift($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = ($1|0)>(-1);
 $3 = ($0|0)<(0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $4 = (0 - ($1))|0;
  _b_shift($L,$0,$4);
  STACKTOP = sp;return 1;
 }
 $5 = ($1|0)>(31);
 if ($5) {
  $r$0 = -1;
 } else {
  $6 = $0 >>> $1;
  $7 = -1 >>> $1;
  $8 = $7 ^ -1;
  $9 = $6 | $8;
  $r$0 = $9;
 }
 _lua_pushunsigned($L,$r$0);
 STACKTOP = sp;return 1;
}
function _b_and($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_andaux($L)|0);
 _lua_pushunsigned($L,$0);
 STACKTOP = sp;return 1;
}
function _b_not($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = $0 ^ -1;
 _lua_pushunsigned($L,$1);
 STACKTOP = sp;return 1;
}
function _b_or($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa = 0;
 } else {
  $i$01 = 1;$r$02 = 0;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01)|0);
   $3 = $2 | $r$02;
   $4 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $4;$r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L,$r$0$lcssa);
 STACKTOP = sp;return 1;
}
function _b_xor($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa = 0;
 } else {
  $i$01 = 1;$r$02 = 0;
  while(1) {
   $2 = (_luaL_checkunsigned($L,$i$01)|0);
   $3 = $2 ^ $r$02;
   $4 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $r$0$lcssa = $3;
    break;
   } else {
    $i$01 = $4;$r$02 = $3;
   }
  }
 }
 _lua_pushunsigned($L,$r$0$lcssa);
 STACKTOP = sp;return 1;
}
function _b_test($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_andaux($L)|0);
 $1 = ($0|0)!=(0);
 $2 = $1&1;
 _lua_pushboolean($L,$2);
 STACKTOP = sp;return 1;
}
function _b_extract($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $w = sp;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_fieldargs($L,2,$w)|0);
 $2 = $0 >>> $1;
 $3 = HEAP32[$w>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = -2 << $4;
 $6 = $5 ^ -1;
 $7 = $2 & $6;
 _lua_pushunsigned($L,$7);
 STACKTOP = sp;return 1;
}
function _b_lrot($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 _b_rot($L,$0);
 STACKTOP = sp;return 1;
}
function _b_lshift($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 _b_shift($L,$0,$1);
 STACKTOP = sp;return 1;
}
function _b_replace($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $w = sp;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkunsigned($L,2)|0);
 $2 = (_fieldargs($L,3,$w)|0);
 $3 = HEAP32[$w>>2]|0;
 $4 = (($3) + -1)|0;
 $5 = -2 << $4;
 $6 = $5 ^ -1;
 $7 = $1 & $6;
 $8 = $6 << $2;
 $9 = $8 ^ -1;
 $10 = $0 & $9;
 $11 = $7 << $2;
 $12 = $10 | $11;
 _lua_pushunsigned($L,$12);
 STACKTOP = sp;return 1;
}
function _b_rrot($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 $1 = (0 - ($0))|0;
 _b_rot($L,$1);
 STACKTOP = sp;return 1;
}
function _b_rshift($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (0 - ($1))|0;
 _b_shift($L,$0,$2);
 STACKTOP = sp;return 1;
}
function _b_shift($L,$r,$i) {
 $L = $L|0;
 $r = $r|0;
 $i = $i|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($i|0)<(0);
 if ($0) {
  $1 = (0 - ($i))|0;
  $2 = ($1|0)>(31);
  $3 = $r >>> $1;
  $$ = $2 ? 0 : $3;
  $$1 = $$;
 } else {
  $4 = ($i|0)>(31);
  $5 = $r << $i;
  $$0 = $4 ? 0 : $5;
  $$1 = $$0;
 }
 _lua_pushunsigned($L,$$1);
 STACKTOP = sp;return;
}
function _b_rot($L,$i) {
 $L = $L|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $r$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 $1 = $i & 31;
 $2 = ($1|0)==(0);
 if ($2) {
  $r$0 = $0;
 } else {
  $3 = $0 << $1;
  $4 = (32 - ($1))|0;
  $5 = $0 >>> $4;
  $6 = $3 | $5;
  $r$0 = $6;
 }
 _lua_pushunsigned($L,$r$0);
 STACKTOP = sp;return;
}
function _fieldargs($L,$farg,$width) {
 $L = $L|0;
 $farg = $farg|0;
 $width = $width|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checkinteger($L,$farg)|0);
 $1 = (($farg) + 1)|0;
 $2 = (_luaL_optinteger($L,$1,1)|0);
 $3 = ($0|0)>(-1);
 if (!($3)) {
  (_luaL_argerror($L,$farg,2224)|0);
 }
 $4 = ($2|0)>(0);
 if (!($4)) {
  (_luaL_argerror($L,$1,2256)|0);
 }
 $5 = (($2) + ($0))|0;
 $6 = ($5|0)>(32);
 if (!($6)) {
  HEAP32[$width>>2] = $2;
  STACKTOP = sp;return ($0|0);
 }
 (_luaL_error($L,2280,$vararg_buffer)|0);
 HEAP32[$width>>2] = $2;
 STACKTOP = sp;return ($0|0);
}
function _andaux($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $exitcond = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $r$0$lcssa = -1;
  STACKTOP = sp;return ($r$0$lcssa|0);
 } else {
  $i$01 = 1;$r$02 = -1;
 }
 while(1) {
  $2 = (_luaL_checkunsigned($L,$i$01)|0);
  $3 = $2 & $r$02;
  $4 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   $r$0$lcssa = $3;
   break;
  } else {
   $i$01 = $4;$r$02 = $3;
  }
 }
 STACKTOP = sp;return ($r$0$lcssa|0);
}
function _luaK_nil($fs,$from,$n) {
 $fs = $fs|0;
 $from = $from|0;
 $n = $n|0;
 var $$from = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + ($from))|0;
 $1 = (($0) + -1)|0;
 $2 = (($fs) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($fs) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)>($5|0);
 do {
  if ($6) {
   $7 = (($3) + -1)|0;
   $8 = HEAP32[$fs>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + ($7<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12 & 63;
   $14 = ($13|0)==(4);
   if ($14) {
    $15 = $12 >>> 6;
    $16 = $15 & 255;
    $17 = $12 >>> 23;
    $18 = (($16) + ($17))|0;
    $19 = ($16|0)>($from|0);
    if ($19) {
     label = 5;
    } else {
     $20 = (($18) + 1)|0;
     $21 = ($20|0)<($from|0);
     if ($21) {
      label = 5;
     }
    }
    if ((label|0) == 5) {
     $22 = ($16|0)<($from|0);
     $23 = ($16|0)>($0|0);
     $or$cond = $22 | $23;
     if ($or$cond) {
      break;
     }
    }
    $24 = ($16|0)<($from|0);
    $$from = $24 ? $16 : $from;
    $25 = ($18|0)>($1|0);
    $l$0 = $25 ? $18 : $1;
    $26 = HEAP32[$11>>2]|0;
    $27 = $26 & 8372287;
    $28 = $$from << 6;
    $29 = $28 & 16320;
    $30 = (($l$0) - ($$from))|0;
    $31 = $30 << 23;
    $32 = $31 | $29;
    $33 = $32 | $27;
    HEAP32[$11>>2] = $33;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $34 = (($n) + -1)|0;
 (_luaK_codeABC($fs,4,$from,$34,0)|0);
 STACKTOP = sp;return;
}
function _luaK_codeABC($fs,$o,$a,$b,$c) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $b << 23;
 $3 = $1 | $2;
 $4 = $c << 14;
 $5 = $3 | $4;
 $6 = (_luaK_code($fs,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _luaK_jump($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $j = sp;
 $0 = (($fs) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$0>>2] = -1;
 $2 = (_luaK_codeABx($fs,23,0,131070)|0);
 HEAP32[$j>>2] = $2;
 _luaK_concat($fs,$j,$1);
 $3 = HEAP32[$j>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _luaK_codeABx($fs,$o,$a,$bc) {
 $fs = $fs|0;
 $o = $o|0;
 $a = $a|0;
 $bc = $bc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | $o;
 $2 = $bc << 14;
 $3 = $1 | $2;
 $4 = (_luaK_code($fs,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _luaK_concat($fs,$l1,$l2) {
 $fs = $fs|0;
 $l1 = $l1|0;
 $l2 = $l2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $list$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(-1);
 do {
  if (!($0)) {
   $1 = HEAP32[$l1>>2]|0;
   $2 = ($1|0)==(-1);
   if ($2) {
    HEAP32[$l1>>2] = $l2;
    break;
   } else {
    $list$0 = $1;
   }
   while(1) {
    $3 = (_getjump($fs,$list$0)|0);
    $4 = ($3|0)==(-1);
    if ($4) {
     break;
    } else {
     $list$0 = $3;
    }
   }
   _fixjump($fs,$list$0,$l2);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _luaK_ret($fs,$first,$nret) {
 $fs = $fs|0;
 $first = $first|0;
 $nret = $nret|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($nret) + 1)|0;
 (_luaK_codeABC($fs,31,$first,$0,0)|0);
 STACKTOP = sp;return;
}
function _luaK_getlabel($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 24|0);
 HEAP32[$2>>2] = $1;
 $3 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function _luaK_patchlist($fs,$list,$target) {
 $fs = $fs|0;
 $list = $list|0;
 $target = $target|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($target|0);
 if ($2) {
  _luaK_patchtohere($fs,$list);
  STACKTOP = sp;return;
 } else {
  _patchlistaux($fs,$list,$target,255,$target);
  STACKTOP = sp;return;
 }
}
function _luaK_patchtohere($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_getlabel($fs)|0);
 $0 = (($fs) + 28|0);
 _luaK_concat($fs,$0,$list);
 STACKTOP = sp;return;
}
function _patchlistaux($fs,$list,$vtarget,$reg,$dtarget) {
 $fs = $fs|0;
 $list = $list|0;
 $vtarget = $vtarget|0;
 $reg = $reg|0;
 $dtarget = $dtarget|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $$01 = $list;
 }
 while(1) {
  $1 = (_getjump($fs,$$01)|0);
  $2 = (_patchtestreg($fs,$$01,$reg)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   _fixjump($fs,$$01,$dtarget);
  } else {
   _fixjump($fs,$$01,$vtarget);
  }
  $4 = ($1|0)==(-1);
  if ($4) {
   break;
  } else {
   $$01 = $1;
  }
 }
 STACKTOP = sp;return;
}
function _luaK_patchclose($fs,$list,$level) {
 $fs = $fs|0;
 $list = $list|0;
 $level = $level|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = $level << 6;
 $2 = (($1) + 64)|0;
 $3 = $2 & 16320;
 $$01 = $list;
 while(1) {
  $4 = (_getjump($fs,$$01)|0);
  $5 = HEAP32[$fs>>2]|0;
  $6 = (($5) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($$01<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 & -16321;
  $11 = $10 | $3;
  HEAP32[$8>>2] = $11;
  $12 = ($4|0)==(-1);
  if ($12) {
   break;
  } else {
   $$01 = $4;
  }
 }
 STACKTOP = sp;return;
}
function _getjump($fs,$pc) {
 $fs = $fs|0;
 $pc = $pc|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($pc<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 >>> 14;
 $6 = (($5) + -131071)|0;
 $7 = ($6|0)==(-1);
 if ($7) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($pc) + 1)|0;
 $9 = (($8) + ($6))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _fixjump($fs,$pc,$dest) {
 $fs = $fs|0;
 $pc = $pc|0;
 $dest = $dest|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ispos = 0, $neg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($pc<<2)|0);
 $$neg = $pc ^ -1;
 $4 = (($$neg) + ($dest))|0;
 $ispos = ($4|0)>(-1);
 $neg = (0 - ($4))|0;
 $5 = $ispos ? $4 : $neg;
 $6 = ($5|0)>(131071);
 if ($6) {
  $7 = (($fs) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  _luaX_syntaxerror($8,2408);
  // unreachable;
 } else {
  $9 = HEAP32[$3>>2]|0;
  $10 = $9 & 16383;
  $11 = $4 << 14;
  $12 = (($11) + 2147467264)|0;
  $13 = $10 | $12;
  HEAP32[$3>>2] = $13;
  STACKTOP = sp;return;
 }
}
function _luaK_code($fs,$i) {
 $fs = $fs|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 _dischargejpc($fs);
 $1 = (($fs) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 48|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if (!($5)) {
  $6 = (($fs) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($0) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_luaM_growaux_($9,$11,$3,4,2147483645,2400)|0);
  HEAP32[$10>>2] = $12;
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = (($0) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($13<<2)|0);
 HEAP32[$16>>2] = $i;
 $17 = HEAP32[$1>>2]|0;
 $18 = (($0) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($17|0)<($19|0);
 if (!($20)) {
  $21 = (($fs) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 52|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($0) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_luaM_growaux_($24,$26,$18,4,2147483645,2400)|0);
  HEAP32[$25>>2] = $27;
 }
 $28 = (($fs) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = HEAP32[$1>>2]|0;
 $33 = (($0) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + ($32<<2)|0);
 HEAP32[$35>>2] = $31;
 $36 = HEAP32[$1>>2]|0;
 $37 = (($36) + 1)|0;
 HEAP32[$1>>2] = $37;
 STACKTOP = sp;return ($36|0);
}
function _luaK_codek($fs,$reg,$k) {
 $fs = $fs|0;
 $reg = $reg|0;
 $k = $k|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($k|0)<(262144);
 if ($0) {
  $1 = (_luaK_codeABx($fs,1,$reg,$k)|0);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (_luaK_codeABx($fs,2,$reg,0)|0);
  _codeextraarg($fs,$k);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _codeextraarg($fs,$a) {
 $fs = $fs|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a << 6;
 $1 = $0 | 39;
 (_luaK_code($fs,$1)|0);
 STACKTOP = sp;return;
}
function _luaK_checkstack($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = (($4) + 78|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = ($3|0)>($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = ($3|0)>(249);
 if ($9) {
  $10 = (($fs) + 12|0);
  $11 = HEAP32[$10>>2]|0;
  _luaX_syntaxerror($11,2320);
  // unreachable;
 }
 $12 = $3&255;
 HEAP8[$5>>0] = $12;
 STACKTOP = sp;return;
}
function _luaK_reserveregs($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_checkstack($fs,$n);
 $0 = (($fs) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + ($n))|0;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 STACKTOP = sp;return;
}
function _luaK_stringK($fs,$s) {
 $fs = $fs|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $o = sp;
 HEAP32[$o>>2] = $s;
 $0 = (($s) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 | 64;
 $4 = (($o) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($5|0);
}
function _addk($fs,$key,$v) {
 $fs = $fs|0;
 $key = $key|0;
 $v = $v|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $oldsize$01 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u$sroa$0 = sp;
 $0 = (($fs) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($fs) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_luaH_set($3,$5,$key)|0);
 $7 = HEAP32[$fs>>2]|0;
 $8 = (($6) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(3);
 if ($10) {
  $11 = +HEAPF64[$6>>3];
  $12 = $11 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $12;
  $13 = HEAP32[$u$sroa$0>>2]|0;
  $14 = (($7) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($15) + ($13<<4)|0) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($v) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17|0)==($19|0);
  if ($20) {
   $21 = (($15) + ($13<<4)|0);
   $22 = (_luaV_equalobj_(0,$21,$v)|0);
   $23 = ($22|0)==(0);
   if (!($23)) {
    $$0 = $13;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $24 = (($7) + 44|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($fs) + 32|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (+($27|0));
 HEAPF64[$6>>3] = $28;
 HEAP32[$8>>2] = 3;
 $29 = HEAP32[$24>>2]|0;
 $30 = ($27|0)<($29|0);
 if (!($30)) {
  $31 = (($7) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_luaM_growaux_($3,$32,$24,16,67108863,2384)|0);
  HEAP32[$31>>2] = $33;
 }
 $34 = HEAP32[$24>>2]|0;
 $35 = ($25|0)<($34|0);
 if ($35) {
  $36 = (($7) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $oldsize$01 = $25;
  while(1) {
   $38 = (($oldsize$01) + 1)|0;
   $39 = ((($37) + ($oldsize$01<<4)|0) + 8|0);
   HEAP32[$39>>2] = 0;
   $40 = HEAP32[$24>>2]|0;
   $41 = ($38|0)<($40|0);
   if ($41) {
    $oldsize$01 = $38;
   } else {
    break;
   }
  }
 }
 $42 = (($7) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($27<<4)|0);
 $45 = $v;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = $44;
 $52 = $51;
 HEAP32[$52>>2] = $47;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = $50;
 $55 = (($v) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($43) + ($27<<4)|0) + 8|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$26>>2]|0;
 $59 = (($58) + 1)|0;
 HEAP32[$26>>2] = $59;
 $60 = HEAP32[$55>>2]|0;
 $61 = $60 & 64;
 $62 = ($61|0)==(0);
 if ($62) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 $63 = HEAP32[$v>>2]|0;
 $64 = (($63) + 5|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 & 3;
 $67 = ($66<<24>>24)==(0);
 if ($67) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 $68 = (($7) + 5|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69 & 4;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $$0 = $27;
  STACKTOP = sp;return ($$0|0);
 }
 _luaC_barrier_($3,$7,$63);
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_numberK($fs,$r) {
 $fs = $fs|0;
 $r = +$r;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $n$0 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = sp + 16|0;
 $o = sp;
 HEAPF64[$0>>3] = $r;
 $1 = (($fs) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 HEAPF64[$o>>3] = $r;
 $5 = (($o) + 8|0);
 HEAP32[$5>>2] = 3;
 $6 = +HEAPF64[$0>>3];
 $7 = ($6 != $6) | (0.0 != 0.0) |($6 == 0.0);
 if ($7) {
  $8 = (($4) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 16|0);
  HEAP32[$8>>2] = $10;
  $11 = (_luaS_newlstr($4,$0,8)|0);
  HEAP32[$9>>2] = $11;
  $12 = (($11) + 4|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 | 64;
  $16 = (($9) + 8|0);
  HEAP32[$16>>2] = $15;
  $17 = HEAP32[$8>>2]|0;
  $18 = (($17) + -16|0);
  $19 = (_addk($fs,$18,$o)|0);
  $20 = HEAP32[$8>>2]|0;
  $21 = (($20) + -16|0);
  HEAP32[$8>>2] = $21;
  $n$0 = $19;
  STACKTOP = sp;return ($n$0|0);
 } else {
  $22 = (_addk($fs,$o,$o)|0);
  $n$0 = $22;
  STACKTOP = sp;return ($n$0|0);
 }
 return 0|0;
}
function _luaK_setreturns($fs,$e,$nresults) {
 $fs = $fs|0;
 $e = $e|0;
 $nresults = $nresults|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 12)) {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -8372225;
  $9 = $nresults << 14;
  $10 = (($9) + 16384)|0;
  $11 = $10 & 8372224;
  $12 = $8 | $11;
  HEAP32[$6>>2] = $12;
  STACKTOP = sp;return;
 } else if ((($0|0) == 13)) {
  $13 = (($e) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$fs>>2]|0;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + ($14<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 & 8388607;
  $21 = $nresults << 23;
  $22 = (($21) + 8388608)|0;
  $23 = $20 | $22;
  HEAP32[$18>>2] = $23;
  $24 = HEAP32[$13>>2]|0;
  $25 = HEAP32[$fs>>2]|0;
  $26 = (($25) + 12|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + ($24<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $29 & -16321;
  $31 = (($fs) + 48|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 << 6;
  $35 = $34 | $30;
  HEAP32[$28>>2] = $35;
  _luaK_reserveregs($fs,1);
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_setoneret($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 12)) {
  HEAP32[$e>>2] = 6;
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$fs>>2]|0;
  $4 = (($3) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($2<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 >>> 6;
  $9 = $8 & 255;
  HEAP32[$1>>2] = $9;
  STACKTOP = sp;return;
 } else if ((($0|0) == 13)) {
  $10 = (($e) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$fs>>2]|0;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & 8388607;
  $18 = $17 | 16777216;
  HEAP32[$15>>2] = $18;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaK_dischargevars($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 8:  {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaK_codeABC($fs,5,0,$2,0)|0);
  HEAP32[$1>>2] = $3;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $4 = (($e) + 8|0);
  $5 = HEAP16[$4>>1]|0;
  $6 = $5 << 16 >> 16;
  _freereg($fs,$6);
  $7 = (($4) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(7);
  if ($9) {
   $10 = (($4) + 2|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   _freereg($fs,$12);
   $op$0 = 7;
  } else {
   $op$0 = 6;
  }
  $13 = (($4) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = HEAP16[$4>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = (_luaK_codeABC($fs,$op$0,0,$15,$17)|0);
  HEAP32[$4>>2] = $18;
  HEAP32[$e>>2] = 11;
  STACKTOP = sp;return;
  break;
 }
 case 12: case 13:  {
  _luaK_setoneret($fs,$e);
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  HEAP32[$e>>2] = 6;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _freereg($fs,$reg) {
 $fs = $fs|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $reg & 256;
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($fs) + 46|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)>($reg|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($fs) + 48|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($7) + -1)<<24>>24;
 HEAP8[$6>>0] = $8;
 STACKTOP = sp;return;
}
function _luaK_exp2nextreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 _freeexp($fs,$e);
 _luaK_reserveregs($fs,1);
 $0 = (($fs) + 48|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + -1)|0;
 _exp2reg($fs,$e,$3);
 STACKTOP = sp;return;
}
function _freeexp($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(6);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($e) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 _freereg($fs,$3);
 STACKTOP = sp;return;
}
function _exp2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p_f$0 = 0, $p_t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _discharge2reg($fs,$e,$reg);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(10);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = (($e) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  _luaK_concat($fs,$2,$4);
 }
 $5 = (($e) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($e) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)==($8|0);
 if ($9) {
  HEAP32[$5>>2] = -1;
  HEAP32[$7>>2] = -1;
  $23 = (($e) + 8|0);
  HEAP32[$23>>2] = $reg;
  HEAP32[$e>>2] = 6;
  STACKTOP = sp;return;
 }
 $10 = (_need_value($fs,$6)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = (_need_value($fs,$8)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $p_f$0 = -1;$p_t$0 = -1;
  } else {
   label = 6;
  }
 } else {
  label = 6;
 }
 if ((label|0) == 6) {
  $14 = HEAP32[$e>>2]|0;
  $15 = ($14|0)==(10);
  if ($15) {
   $19 = -1;
  } else {
   $16 = (_luaK_jump($fs)|0);
   $19 = $16;
  }
  $17 = (_code_label($fs,$reg,0,1)|0);
  $18 = (_code_label($fs,$reg,1,0)|0);
  _luaK_patchtohere($fs,$19);
  $p_f$0 = $17;$p_t$0 = $18;
 }
 $20 = (_luaK_getlabel($fs)|0);
 $21 = HEAP32[$7>>2]|0;
 _patchlistaux($fs,$21,$20,$reg,$p_f$0);
 $22 = HEAP32[$5>>2]|0;
 _patchlistaux($fs,$22,$20,$reg,$p_t$0);
 HEAP32[$5>>2] = -1;
 HEAP32[$7>>2] = -1;
 $23 = (($e) + 8|0);
 HEAP32[$23>>2] = $reg;
 HEAP32[$e>>2] = 6;
 STACKTOP = sp;return;
}
function _luaK_exp2anyreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(6);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  $7 = (($e) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  if ($6) {
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
  $9 = (($fs) + 46|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($8|0)<($11|0);
  if (!($12)) {
   _exp2reg($fs,$e,$8);
   $13 = HEAP32[$7>>2]|0;
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _luaK_exp2nextreg($fs,$e);
 $14 = (($e) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $$0 = $15;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_exp2anyregup($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(8);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($e) + 20|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($3|0)==($5|0);
  if ($6) {
   STACKTOP = sp;return;
  }
 }
 (_luaK_exp2anyreg($fs,$e)|0);
 STACKTOP = sp;return;
}
function _luaK_exp2val($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($e) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($e) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)==($3|0);
 if ($4) {
  _luaK_dischargevars($fs,$e);
  STACKTOP = sp;return;
 } else {
  (_luaK_exp2anyreg($fs,$e)|0);
  STACKTOP = sp;return;
 }
}
function _luaK_exp2RK($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_exp2val($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 1: case 3: case 2:  {
  $1 = (($fs) + 32|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)<(256);
  if ($3) {
   $4 = HEAP32[$e>>2]|0;
   $5 = ($4|0)==(1);
   if ($5) {
    $6 = (_nilK($fs)|0);
    $11 = $6;
   } else {
    $7 = ($4|0)==(2);
    $8 = $7&1;
    $9 = (_boolK($fs,$8)|0);
    $11 = $9;
   }
   $10 = (($e) + 8|0);
   HEAP32[$10>>2] = $11;
   HEAP32[$e>>2] = 4;
   $12 = HEAP32[$10>>2]|0;
   $13 = $12 | 256;
   $$0 = $13;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $14 = (($e) + 8|0);
  $15 = +HEAPF64[$14>>3];
  $16 = (_luaK_numberK($fs,$15)|0);
  HEAP32[$14>>2] = $16;
  HEAP32[$e>>2] = 4;
  label = 8;
  break;
 }
 case 4:  {
  label = 8;
  break;
 }
 default: {
 }
 }
 if ((label|0) == 8) {
  $17 = (($e) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)<(256);
  if ($19) {
   $20 = $18 | 256;
   $$0 = $20;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $21 = (_luaK_exp2anyreg($fs,$e)|0);
 $$0 = $21;
 STACKTOP = sp;return ($$0|0);
}
function _nilK($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $k = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $k = sp + 16|0;
 $v = sp;
 $0 = (($v) + 8|0);
 HEAP32[$0>>2] = 0;
 $1 = (($fs) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$k>>2] = $2;
 $3 = (($k) + 8|0);
 HEAP32[$3>>2] = 69;
 $4 = (_addk($fs,$k,$v)|0);
 STACKTOP = sp;return ($4|0);
}
function _boolK($fs,$b) {
 $fs = $fs|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $o = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $o = sp;
 HEAP32[$o>>2] = $b;
 $0 = (($o) + 8|0);
 HEAP32[$0>>2] = 1;
 $1 = (_addk($fs,$o,$o)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaK_storevar($fs,$var,$ex) {
 $fs = $fs|0;
 $var = $var|0;
 $ex = $ex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$var>>2]|0;
 if ((($0|0) == 9)) {
  $6 = (($var) + 8|0);
  $7 = (($6) + 3|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(7);
  $10 = $9 ? 10 : 8;
  $11 = (_luaK_exp2RK($fs,$ex)|0);
  $12 = (($6) + 2|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = HEAP16[$6>>1]|0;
  $16 = $15 << 16 >> 16;
  (_luaK_codeABC($fs,$10,$14,$16,$11)|0);
 } else if ((($0|0) == 8)) {
  $3 = (_luaK_exp2anyreg($fs,$ex)|0);
  $4 = (($var) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  (_luaK_codeABC($fs,9,$3,$5,0)|0);
 } else if ((($0|0) == 7)) {
  _freeexp($fs,$ex);
  $1 = (($var) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  _exp2reg($fs,$ex,$2);
  STACKTOP = sp;return;
 }
 _freeexp($fs,$ex);
 STACKTOP = sp;return;
}
function _luaK_self($fs,$e,$key) {
 $fs = $fs|0;
 $e = $e|0;
 $key = $key|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_exp2anyreg($fs,$e)|0);
 $0 = (($e) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 _freeexp($fs,$e);
 $2 = (($fs) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 HEAP32[$0>>2] = $4;
 HEAP32[$e>>2] = 6;
 _luaK_reserveregs($fs,2);
 $5 = HEAP32[$0>>2]|0;
 $6 = (_luaK_exp2RK($fs,$key)|0);
 (_luaK_codeABC($fs,12,$5,$1,$6)|0);
 _freeexp($fs,$key);
 STACKTOP = sp;return;
}
function _luaK_goiftrue($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 2) | (($0|0) == 5) | (($0|0) == 4)) {
  $pc$0 = -1;
 } else if ((($0|0) == 10)) {
  _invertjump($fs,$e);
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $pc$0 = $2;
 } else {
  $3 = (_jumponcond($fs,$e,0)|0);
  $pc$0 = $3;
 }
 $4 = (($e) + 20|0);
 _luaK_concat($fs,$4,$pc$0);
 $5 = (($e) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 _luaK_patchtohere($fs,$6);
 HEAP32[$5>>2] = -1;
 STACKTOP = sp;return;
}
function _invertjump($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($e) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_getjumpcontrol($fs,$1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -16321;
 $5 = $3 & 16320;
 $6 = ($5|0)==(0);
 $7 = $6&1;
 $8 = $7 << 6;
 $9 = $8 | $4;
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return;
}
function _jumponcond($fs,$e,$cond) {
 $fs = $fs|0;
 $e = $e|0;
 $cond = $cond|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(11);
 if ($1) {
  $2 = (($e) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$fs>>2]|0;
  $5 = (($4) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($3<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 63;
  $10 = ($9|0)==(20);
  if ($10) {
   $11 = (($fs) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + -1)|0;
   HEAP32[$11>>2] = $13;
   $14 = $8 >>> 23;
   $15 = ($cond|0)==(0);
   $16 = $15&1;
   $17 = (_condjump($fs,27,$14,0,$16)|0);
   $$0 = $17;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _discharge2anyreg($fs,$e);
 _freeexp($fs,$e);
 $18 = (($e) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_condjump($fs,28,255,$19,$cond)|0);
 $$0 = $20;
 STACKTOP = sp;return ($$0|0);
}
function _luaK_goiffalse($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pc$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 if ((($0|0) == 10)) {
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $pc$0 = $2;
 } else if ((($0|0) == 3) | (($0|0) == 1)) {
  $pc$0 = -1;
 } else {
  $3 = (_jumponcond($fs,$e,1)|0);
  $pc$0 = $3;
 }
 $4 = (($e) + 16|0);
 _luaK_concat($fs,$4,$pc$0);
 $5 = (($e) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 _luaK_patchtohere($fs,$6);
 HEAP32[$5>>2] = -1;
 STACKTOP = sp;return;
}
function _luaK_indexed($fs,$t,$k) {
 $fs = $fs|0;
 $t = $t|0;
 $k = $k|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1&255;
 $3 = (($0) + 2|0);
 HEAP8[$3>>0] = $2;
 $4 = (_luaK_exp2RK($fs,$k)|0);
 $5 = $4&65535;
 HEAP16[$0>>1] = $5;
 $6 = HEAP32[$t>>2]|0;
 $7 = ($6|0)==(8);
 $8 = $7 ? 8 : 7;
 $9 = (($0) + 3|0);
 HEAP8[$9>>0] = $8;
 HEAP32[$t>>2] = 9;
 STACKTOP = sp;return;
}
function _luaK_prefix($fs,$op,$e,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e = $e|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $e2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $e2 = sp;
 $0 = (($e2) + 20|0);
 HEAP32[$0>>2] = -1;
 $1 = (($e2) + 16|0);
 HEAP32[$1>>2] = -1;
 HEAP32[$e2>>2] = 5;
 $2 = (($e2) + 8|0);
 HEAPF64[$2>>3] = 0.0;
 do {
  if ((($op|0) == 0)) {
   $3 = (_isnumeral($e)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    (_luaK_exp2anyreg($fs,$e)|0);
    _codearith($fs,19,$e,$e2,$line);
    break;
   } else {
    $5 = (($e) + 8|0);
    $6 = +HEAPF64[$5>>3];
    $7 = -$6;
    HEAPF64[$5>>3] = $7;
    break;
   }
  } else if ((($op|0) == 1)) {
   _codenot($fs,$e);
  } else if ((($op|0) == 2)) {
   (_luaK_exp2anyreg($fs,$e)|0);
   _codearith($fs,21,$e,$e2,$line);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _isnumeral($e) {
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(5);
 if ($1) {
  $2 = (($e) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(-1);
  if ($4) {
   $5 = (($e) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   $9 = $7;
  } else {
   $9 = 0;
  }
 } else {
  $9 = 0;
 }
 $8 = $9&1;
 STACKTOP = sp;return ($8|0);
}
function _codearith($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_constfolding($op,$e1,$e2)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 if ((($op|0) == 19) | (($op|0) == 21)) {
  $5 = 0;
 } else {
  $2 = (_luaK_exp2RK($fs,$e2)|0);
  $5 = $2;
 }
 $3 = (_luaK_exp2RK($fs,$e1)|0);
 $4 = ($3|0)>($5|0);
 if ($4) {
  _freeexp($fs,$e1);
  _freeexp($fs,$e2);
 } else {
  _freeexp($fs,$e2);
  _freeexp($fs,$e1);
 }
 $6 = (_luaK_codeABC($fs,$op,0,$3,$5)|0);
 $7 = (($e1) + 8|0);
 HEAP32[$7>>2] = $6;
 HEAP32[$e1>>2] = 11;
 _luaK_fixline($fs,$line);
 STACKTOP = sp;return;
}
function _codenot($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 3: case 1:  {
  HEAP32[$e>>2] = 2;
  break;
 }
 case 2: case 5: case 4:  {
  HEAP32[$e>>2] = 3;
  break;
 }
 case 10:  {
  _invertjump($fs,$e);
  break;
 }
 case 6: case 11:  {
  _discharge2anyreg($fs,$e);
  _freeexp($fs,$e);
  $1 = (($e) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaK_codeABC($fs,20,0,$2,0)|0);
  HEAP32[$1>>2] = $3;
  HEAP32[$e>>2] = 11;
  break;
 }
 default: {
 }
 }
 $4 = (($e) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($e) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$4>>2] = $7;
 HEAP32[$6>>2] = $5;
 $8 = HEAP32[$4>>2]|0;
 _removevalues($fs,$8);
 $9 = HEAP32[$6>>2]|0;
 _removevalues($fs,$9);
 STACKTOP = sp;return;
}
function _luaK_infix($fs,$op,$v) {
 $fs = $fs|0;
 $op = $op|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 13:  {
  _luaK_goiftrue($fs,$v);
  break;
 }
 case 14:  {
  _luaK_goiffalse($fs,$v);
  break;
 }
 case 6:  {
  _luaK_exp2nextreg($fs,$v);
  break;
 }
 case 5: case 4: case 3: case 2: case 1: case 0:  {
  $0 = (_isnumeral($v)|0);
  $1 = ($0|0)==(0);
  if ($1) {
   (_luaK_exp2RK($fs,$v)|0);
  }
  break;
 }
 default: {
  (_luaK_exp2RK($fs,$v)|0);
 }
 }
 STACKTOP = sp;return;
}
function _luaK_posfix($fs,$op,$e1,$e2,$line) {
 $fs = $fs|0;
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 13:  {
  _luaK_dischargevars($fs,$e2);
  $0 = (($e2) + 20|0);
  $1 = (($e1) + 20|0);
  $2 = HEAP32[$1>>2]|0;
  _luaK_concat($fs,$0,$2);
  ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 14:  {
  _luaK_dischargevars($fs,$e2);
  $3 = (($e2) + 16|0);
  $4 = (($e1) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  _luaK_concat($fs,$3,$5);
  ;HEAP32[$e1+0>>2]=HEAP32[$e2+0>>2]|0;HEAP32[$e1+4>>2]=HEAP32[$e2+4>>2]|0;HEAP32[$e1+8>>2]=HEAP32[$e2+8>>2]|0;HEAP32[$e1+12>>2]=HEAP32[$e2+12>>2]|0;HEAP32[$e1+16>>2]=HEAP32[$e2+16>>2]|0;HEAP32[$e1+20>>2]=HEAP32[$e2+20>>2]|0;
  STACKTOP = sp;return;
  break;
 }
 case 9: case 8: case 7:  {
  $30 = (($op) + 17)|0;
  _codecomp($fs,$30,1,$e1,$e2);
  STACKTOP = sp;return;
  break;
 }
 case 12: case 11: case 10:  {
  $31 = (($op) + 14)|0;
  _codecomp($fs,$31,0,$e1,$e2);
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  _luaK_exp2val($fs,$e2);
  $6 = HEAP32[$e2>>2]|0;
  $7 = ($6|0)==(11);
  if ($7) {
   $8 = (($e2) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP32[$fs>>2]|0;
   $11 = (($10) + 12|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($12) + ($9<<2)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 63;
   $16 = ($15|0)==(22);
   if ($16) {
    _freeexp($fs,$e1);
    $17 = HEAP32[$8>>2]|0;
    $18 = HEAP32[$fs>>2]|0;
    $19 = (($18) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($17<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 & 8388607;
    $24 = (($e1) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 << 23;
    $27 = $26 | $23;
    HEAP32[$21>>2] = $27;
    HEAP32[$e1>>2] = 11;
    $28 = HEAP32[$8>>2]|0;
    HEAP32[$24>>2] = $28;
    STACKTOP = sp;return;
   }
  }
  _luaK_exp2nextreg($fs,$e2);
  _codearith($fs,22,$e1,$e2,$line);
  STACKTOP = sp;return;
  break;
 }
 case 5: case 4: case 3: case 2: case 1: case 0:  {
  $29 = (($op) + 13)|0;
  _codearith($fs,$29,$e1,$e2,$line);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _codecomp($fs,$op,$cond,$e1,$e2) {
 $fs = $fs|0;
 $op = $op|0;
 $cond = $cond|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $o1$0 = 0, $o2$0 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaK_exp2RK($fs,$e1)|0);
 $1 = (_luaK_exp2RK($fs,$e2)|0);
 _freeexp($fs,$e2);
 _freeexp($fs,$e1);
 $2 = ($cond|0)!=(0);
 $3 = ($op|0)==(24);
 $or$cond = $2 | $3;
 $o1$0 = $or$cond ? $0 : $1;
 $o2$0 = $or$cond ? $1 : $0;
 $$0 = $or$cond ? $cond : 1;
 $4 = (_condjump($fs,$op,$$0,$o1$0,$o2$0)|0);
 $5 = (($e1) + 8|0);
 HEAP32[$5>>2] = $4;
 HEAP32[$e1>>2] = 10;
 STACKTOP = sp;return;
}
function _luaK_fixline($fs,$line) {
 $fs = $fs|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = HEAP32[$fs>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($2<<2)|0);
 HEAP32[$6>>2] = $line;
 STACKTOP = sp;return;
}
function _luaK_setlist($fs,$base,$nelems,$tostore) {
 $fs = $fs|0;
 $base = $base|0;
 $nelems = $nelems|0;
 $tostore = $tostore|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($nelems) + -1)|0;
 $1 = (($0|0) / 50)&-1;
 $2 = (($1) + 1)|0;
 $3 = ($tostore|0)==(-1);
 $4 = $3 ? 0 : $tostore;
 $5 = ($2|0)<(512);
 do {
  if ($5) {
   (_luaK_codeABC($fs,36,$base,$4,$2)|0);
  } else {
   $6 = ($2|0)<(67108864);
   if ($6) {
    (_luaK_codeABC($fs,36,$base,$4,0)|0);
    _codeextraarg($fs,$2);
    break;
   } else {
    $7 = (($fs) + 12|0);
    $8 = HEAP32[$7>>2]|0;
    _luaX_syntaxerror($8,2360);
    // unreachable;
   }
  }
 } while(0);
 $9 = (($base) + 1)|0;
 $10 = $9&255;
 $11 = (($fs) + 48|0);
 HEAP8[$11>>0] = $10;
 STACKTOP = sp;return;
}
function _condjump($fs,$op,$A,$B,$C) {
 $fs = $fs|0;
 $op = $op|0;
 $A = $A|0;
 $B = $B|0;
 $C = $C|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_codeABC($fs,$op,$A,$B,$C)|0);
 $0 = (_luaK_jump($fs)|0);
 STACKTOP = sp;return ($0|0);
}
function _discharge2anyreg($fs,$e) {
 $fs = $fs|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$e>>2]|0;
 $1 = ($0|0)==(6);
 if ($1) {
  STACKTOP = sp;return;
 }
 _luaK_reserveregs($fs,1);
 $2 = (($fs) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + -1)|0;
 _discharge2reg($fs,$e,$5);
 STACKTOP = sp;return;
}
function _removevalues($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $$01 = $list;
 }
 while(1) {
  (_patchtestreg($fs,$$01,255)|0);
  $1 = (_getjump($fs,$$01)|0);
  $2 = ($1|0)==(-1);
  if ($2) {
   break;
  } else {
   $$01 = $1;
  }
 }
 STACKTOP = sp;return;
}
function _patchtestreg($fs,$node,$reg) {
 $fs = $fs|0;
 $node = $node|0;
 $reg = $reg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (_getjumpcontrol($fs,$node)|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 $3 = ($2|0)==(28);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($reg|0)==(255);
 if ($4) {
  label = 5;
 } else {
  $5 = $1 >>> 23;
  $6 = ($5|0)==($reg|0);
  if ($6) {
   label = 5;
  } else {
   $7 = $1 & -16321;
   $8 = $reg << 6;
   $9 = $8 & 16320;
   $10 = $7 | $9;
   $storemerge = $10;
  }
 }
 if ((label|0) == 5) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $11 >>> 23;
  $13 = $12 << 6;
  $14 = $11 & 8372224;
  $15 = $14 | $13;
  $16 = $15 | 27;
  $storemerge = $16;
 }
 HEAP32[$0>>2] = $storemerge;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _getjumpcontrol($fs,$pc) {
 $fs = $fs|0;
 $pc = $pc|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + ($pc<<2)|0);
 $4 = ($pc|0)>(0);
 if ($4) {
  $$sum = (($pc) + -1)|0;
  $5 = (($2) + ($$sum<<2)|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 63;
  $8 = (7536 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(0);
  if ($10) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = $3;
 STACKTOP = sp;return ($$0|0);
}
function _discharge2reg($fs,$e,$reg) {
 $fs = $fs|0;
 $e = $e|0;
 $reg = $reg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaK_dischargevars($fs,$e);
 $0 = HEAP32[$e>>2]|0;
 switch ($0|0) {
 case 2: case 3:  {
  $1 = HEAP32[$e>>2]|0;
  $2 = ($1|0)==(2);
  $3 = $2&1;
  (_luaK_codeABC($fs,3,$reg,$3,0)|0);
  break;
 }
 case 4:  {
  $4 = (($e) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  (_luaK_codek($fs,$reg,$5)|0);
  break;
 }
 case 1:  {
  _luaK_nil($fs,$reg,1);
  break;
 }
 case 5:  {
  $6 = (($e) + 8|0);
  $7 = +HEAPF64[$6>>3];
  $8 = (_luaK_numberK($fs,$7)|0);
  (_luaK_codek($fs,$reg,$8)|0);
  break;
 }
 case 11:  {
  $9 = (($e) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$fs>>2]|0;
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($10<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & -16321;
  $17 = $reg << 6;
  $18 = $17 & 16320;
  $19 = $16 | $18;
  HEAP32[$14>>2] = $19;
  break;
 }
 case 6:  {
  $20 = (($e) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($reg|0);
  if (!($22)) {
   (_luaK_codeABC($fs,0,$reg,$21,0)|0);
  }
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $23 = (($e) + 8|0);
 HEAP32[$23>>2] = $reg;
 HEAP32[$e>>2] = 6;
 STACKTOP = sp;return;
}
function _constfolding($op,$e1,$e2) {
 $op = $op|0;
 $e1 = $e1|0;
 $e2 = $e2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isnumeral($e1)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_isnumeral($e2)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    $4 = $op & -2;
    $5 = ($4|0)==(16);
    if ($5) {
     $6 = (($e2) + 8|0);
     $7 = +HEAPF64[$6>>3];
     $8 = $7 == 0.0;
     if ($8) {
      $$0 = 0;
      break;
     }
    }
    $9 = (($op) + -13)|0;
    $10 = (($e1) + 8|0);
    $11 = +HEAPF64[$10>>3];
    $12 = (($e2) + 8|0);
    $13 = +HEAPF64[$12>>3];
    $14 = (+_luaO_arith($9,$11,$13));
    HEAPF64[$10>>3] = $14;
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _need_value($fs,$list) {
 $fs = $fs|0;
 $list = $list|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($list|0)==(-1);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $$012 = $list;
   while(1) {
    $1 = (_getjumpcontrol($fs,$$012)|0);
    $2 = HEAP32[$1>>2]|0;
    $3 = $2 & 63;
    $4 = ($3|0)==(28);
    if (!($4)) {
     $$0 = 1;
     break L1;
    }
    $5 = (_getjump($fs,$$012)|0);
    $6 = ($5|0)==(-1);
    if ($6) {
     $$0 = 0;
     break;
    } else {
     $$012 = $5;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _code_label($fs,$A,$b,$jump) {
 $fs = $fs|0;
 $A = $A|0;
 $b = $b|0;
 $jump = $jump|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaK_getlabel($fs)|0);
 $0 = (_luaK_codeABC($fs,3,$A,$b,$jump)|0);
 STACKTOP = sp;return ($0|0);
}
function _dischargejpc($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 _patchlistaux($fs,$1,$3,255,$3);
 HEAP32[$0>>2] = -1;
 STACKTOP = sp;return;
}
function _luaopen_coroutine($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,6);
 _luaL_setfuncs($L,2440,0);
 STACKTOP = sp;return 1;
}
function _luaB_cocreate($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,6);
 $0 = (_lua_newthread($L)|0);
 _lua_pushvalue($L,1);
 _lua_xmove($L,$0,1);
 STACKTOP = sp;return 1;
}
function _luaB_coresume($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,2640)|0);
 }
 $2 = (_lua_gettop($L)|0);
 $3 = (($2) + -1)|0;
 $4 = (_auxresume($L,$0,$3)|0);
 $5 = ($4|0)<(0);
 if ($5) {
  _lua_pushboolean($L,0);
  _lua_insert($L,-2);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_pushboolean($L,1);
  $6 = (($4) + 1)|0;
  $7 = $4 ^ -1;
  _lua_insert($L,$7);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaB_corunning($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_pushthread($L)|0);
 _lua_pushboolean($L,$0);
 STACKTOP = sp;return 2;
}
function _luaB_costatus($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $ar = sp;
 $0 = (_lua_tothread($L,1)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  (_luaL_argerror($L,1,2640)|0);
 }
 $2 = ($0|0)==($L|0);
 do {
  if ($2) {
   (_lua_pushlstring($L,2512,7)|0);
  } else {
   $3 = (_lua_status($0)|0);
   if ((($3|0) == 0)) {
    $4 = (_lua_getstack($0,0,$ar)|0);
    $5 = ($4|0)>(0);
    if ($5) {
     (_lua_pushlstring($L,2680,6)|0);
     break;
    }
    $6 = (_lua_gettop($0)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     (_lua_pushlstring($L,2688,4)|0);
     break;
    } else {
     (_lua_pushlstring($L,2664,9)|0);
     break;
    }
   } else if ((($3|0) == 1)) {
    (_lua_pushlstring($L,2664,9)|0);
    break;
   } else {
    (_lua_pushlstring($L,2688,4)|0);
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return 1;
}
function _luaB_cowrap($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaB_cocreate($L)|0);
 _lua_pushcclosure($L,143,1);
 STACKTOP = sp;return 1;
}
function _luaB_yield($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (_lua_yieldk($L,$0,0,0)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaB_auxwrap($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_tothread($L,-1001001)|0);
 $1 = (_lua_gettop($L)|0);
 $2 = (_auxresume($L,$0,$1)|0);
 $3 = ($2|0)<(0);
 if (!($3)) {
  STACKTOP = sp;return ($2|0);
 }
 $4 = (_lua_isstring($L,-1)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  (_lua_error($L)|0);
  // unreachable;
 }
 _luaL_where($L,1);
 _lua_insert($L,-2);
 _lua_concat($L,2);
 (_lua_error($L)|0);
 // unreachable;
 return 0|0;
}
function _auxresume($L,$co,$narg) {
 $L = $L|0;
 $co = $co|0;
 $narg = $narg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_checkstack($co,$narg)|0);
 $1 = ($0|0)==(0);
 do {
  if ($1) {
   (_lua_pushlstring($L,2544,28)|0);
   $$0 = -1;
  } else {
   $2 = (_lua_status($co)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    $4 = (_lua_gettop($co)|0);
    $5 = ($4|0)==(0);
    if ($5) {
     (_lua_pushlstring($L,2576,28)|0);
     $$0 = -1;
     break;
    }
   }
   _lua_xmove($L,$co,$narg);
   $6 = (_lua_resume($co,$L,$narg)|0);
   $7 = ($6>>>0)<(2);
   if (!($7)) {
    _lua_xmove($co,$L,1);
    $$0 = -1;
    break;
   }
   $8 = (_lua_gettop($co)|0);
   $9 = (($8) + 1)|0;
   $10 = (_lua_checkstack($L,$9)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = $8 ^ -1;
    _lua_settop($co,$12);
    (_lua_pushlstring($L,2608,26)|0);
    $$0 = -1;
    break;
   } else {
    _lua_xmove($co,$L,$8);
    $$0 = $8;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaopen_debug($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,16);
 _luaL_setfuncs($L,2960,0);
 STACKTOP = sp;return 1;
}
function _db_debug($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buffer = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $vararg_buffer = sp;
 $buffer = sp + 4|0;
 $0 = HEAP32[_stderr>>2]|0;
 (_fwrite((3824|0),11,1,($0|0))|0);
 $1 = HEAP32[_stderr>>2]|0;
 (_fflush(($1|0))|0);
 $2 = HEAP32[_stdin>>2]|0;
 $3 = (_fgets(($buffer|0),250,($2|0))|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return 0;
 }
 $5 = HEAP32[_stderr>>2]|0;
 $6 = HEAP32[_stdin>>2]|0;
 while(1) {
  $7 = (_strcmp($buffer,3840)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   label = 8;
   break;
  }
  $9 = (_strlen(($buffer|0))|0);
  $10 = (_luaL_loadbufferx($L,$buffer,$9,3848,0)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = (_lua_pcallk($L,0,0,0,0,0)|0);
   $13 = ($12|0)==(0);
   if (!($13)) {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $14 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer>>2] = $14;
   (_fprintf(($5|0),(3872|0),($vararg_buffer|0))|0);
   (_fflush(($5|0))|0);
  }
  _lua_settop($L,0);
  (_fwrite((3824|0),11,1,($5|0))|0);
  (_fflush(($5|0))|0);
  $15 = (_fgets(($buffer|0),250,($6|0))|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return 0;
 }
 return 0|0;
}
function _db_getuservalue($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(7);
 if ($1) {
  _lua_getuservalue($L,1);
 } else {
  _lua_pushnil($L);
 }
 STACKTOP = sp;return 1;
}
function _db_gethook($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $arg = 0, $buff = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $arg = sp;
 $buff = sp + 4|0;
 $0 = (_getthread($L,$arg)|0);
 $1 = (_lua_gethookmask($0)|0);
 $2 = (_lua_gethook($0)|0);
 $3 = ($2|0)!=(0|0);
 $4 = ($2|0)!=(20|0);
 $or$cond = $3 & $4;
 if ($or$cond) {
  (_lua_pushlstring($L,3808,13)|0);
 } else {
  (_luaL_getsubtable($L,-1001000,3368)|0);
  (_lua_pushthread($0)|0);
  _lua_xmove($0,$L,1);
  _lua_rawget($L,-2);
  _lua_remove($L,-2);
 }
 $5 = (_unmakemask($1,$buff)|0);
 (_lua_pushstring($L,$5)|0);
 $6 = (_lua_gethookcount($0)|0);
 _lua_pushinteger($L,$6);
 STACKTOP = sp;return 3;
}
function _db_getinfo($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $arg = 0, $options$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $ar = sp + 8|0;
 $arg = sp + 4|0;
 $0 = (_getthread($L,$arg)|0);
 $1 = HEAP32[$arg>>2]|0;
 $2 = (($1) + 2)|0;
 $3 = (_luaL_optlstring($L,$2,3568,0)|0);
 $4 = HEAP32[$arg>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_lua_isnumber($L,$5)|0);
 $7 = ($6|0)==(0);
 $8 = HEAP32[$arg>>2]|0;
 $9 = (($8) + 1)|0;
 do {
  if ($7) {
   $13 = (_lua_type($L,$9)|0);
   $14 = ($13|0)==(6);
   if ($14) {
    HEAP32[$vararg_buffer>>2] = $3;
    (_lua_pushfstring($L,3576,$vararg_buffer)|0);
    $15 = (_lua_tolstring($L,-1,0)|0);
    $16 = HEAP32[$arg>>2]|0;
    $17 = (($16) + 1)|0;
    _lua_pushvalue($L,$17);
    _lua_xmove($L,$0,1);
    $options$0 = $15;
    break;
   }
   $18 = HEAP32[$arg>>2]|0;
   $19 = (($18) + 1)|0;
   $20 = (_luaL_argerror($L,$19,3584)|0);
   $$0 = $20;
   STACKTOP = sp;return ($$0|0);
  } else {
   $10 = (_lua_tointegerx($L,$9,0)|0);
   $11 = (_lua_getstack($0,$10,$ar)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    _lua_pushnil($L);
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $options$0 = $3;
   }
  }
 } while(0);
 $21 = (_lua_getinfo($0,$options$0,$ar)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  $23 = HEAP32[$arg>>2]|0;
  $24 = (($23) + 2)|0;
  $25 = (_luaL_argerror($L,$24,3616)|0);
  $$0 = $25;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_createtable($L,0,2);
 $26 = (_strchr($options$0,83)|0);
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  $28 = (($ar) + 16|0);
  $29 = HEAP32[$28>>2]|0;
  _settabss($L,3632,$29);
  $30 = (($ar) + 36|0);
  _settabss($L,3640,$30);
  $31 = (($ar) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  _settabsi($L,3656,$32);
  $33 = (($ar) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  _settabsi($L,3672,$34);
  $35 = (($ar) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  _settabss($L,3688,$36);
 }
 $37 = (_strchr($options$0,108)|0);
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  $39 = (($ar) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  _settabsi($L,3696,$40);
 }
 $41 = (_strchr($options$0,117)|0);
 $42 = ($41|0)==(0|0);
 if (!($42)) {
  $43 = (($ar) + 32|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  _settabsi($L,3712,$45);
  $46 = (($ar) + 33|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  _settabsi($L,3720,$48);
  $49 = (($ar) + 34|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50 << 24 >> 24;
  _settabsb($L,3728,$51);
 }
 $52 = (_strchr($options$0,110)|0);
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  $54 = (($ar) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  _settabss($L,3744,$55);
  $56 = (($ar) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  _settabss($L,3752,$57);
 }
 $58 = (_strchr($options$0,116)|0);
 $59 = ($58|0)==(0|0);
 if (!($59)) {
  $60 = (($ar) + 35|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61 << 24 >> 24;
  _settabsb($L,3768,$62);
 }
 $63 = (_strchr($options$0,76)|0);
 $64 = ($63|0)==(0|0);
 if (!($64)) {
  _treatstackoption($L,$0,3784);
 }
 $65 = (_strchr($options$0,102)|0);
 $66 = ($65|0)==(0|0);
 if ($66) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _treatstackoption($L,$0,3800);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _db_getlocal($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ar = 0, $arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $arg = sp + 100|0;
 $ar = sp;
 $0 = (_getthread($L,$arg)|0);
 $1 = HEAP32[$arg>>2]|0;
 $2 = (($1) + 2)|0;
 $3 = (_luaL_checkinteger($L,$2)|0);
 $4 = HEAP32[$arg>>2]|0;
 $5 = (($4) + 1)|0;
 $6 = (_lua_type($L,$5)|0);
 $7 = ($6|0)==(6);
 $8 = HEAP32[$arg>>2]|0;
 $9 = (($8) + 1)|0;
 if ($7) {
  _lua_pushvalue($L,$9);
  $10 = (_lua_getlocal($L,0,$3)|0);
  (_lua_pushstring($L,$10)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_luaL_checkinteger($L,$9)|0);
 $12 = (_lua_getstack($0,$11,$ar)|0);
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = HEAP32[$arg>>2]|0;
  $15 = (($14) + 1)|0;
  $16 = (_luaL_argerror($L,$15,3344)|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = (_lua_getlocal($0,$ar,$3)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  _lua_pushnil($L);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_xmove($0,$L,1);
  (_lua_pushstring($L,$17)|0);
  _lua_pushvalue($L,-2);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _db_getregistry($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushvalue($L,-1001000);
 STACKTOP = sp;return 1;
}
function _db_getmetatable($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,1);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_pushnil($L);
 }
 STACKTOP = sp;return 1;
}
function _db_getupvalue($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_auxupvalue($L,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _db_upvaluejoin($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_checkupval($L,1,2)|0);
 $1 = (_checkupval($L,3,4)|0);
 $2 = (_lua_iscfunction($L,1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  (_luaL_argerror($L,1,3544)|0);
 }
 $4 = (_lua_iscfunction($L,3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  _lua_upvaluejoin($L,1,$0,3,$1);
  STACKTOP = sp;return 0;
 }
 (_luaL_argerror($L,3,3544)|0);
 _lua_upvaluejoin($L,1,$0,3,$1);
 STACKTOP = sp;return 0;
}
function _db_upvalueid($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_checkupval($L,1,2)|0);
 $1 = (_lua_upvalueid($L,1,$0)|0);
 _lua_pushlightuserdata($L,$1);
 STACKTOP = sp;return 1;
}
function _db_setuservalue($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(2);
 if ($1) {
  (_luaL_argerror($L,1,3464)|0);
 }
 _luaL_checktype($L,1,7);
 $2 = (_lua_type($L,2)|0);
 $3 = ($2|0)<(1);
 if (!($3)) {
  _luaL_checktype($L,2,5);
 }
 _lua_settop($L,2);
 _lua_setuservalue($L,1);
 STACKTOP = sp;return 1;
}
function _db_sethook($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg = 0;
 var $count$0 = 0, $func$0 = 0, $mask$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $arg = sp;
 $0 = (_getthread($L,$arg)|0);
 $1 = HEAP32[$arg>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_lua_type($L,$2)|0);
 $4 = ($3|0)<(1);
 $5 = HEAP32[$arg>>2]|0;
 if ($4) {
  $6 = (($5) + 1)|0;
  _lua_settop($L,$6);
  $count$0 = 0;$func$0 = 0;$mask$0 = 0;
 } else {
  $7 = (($5) + 2)|0;
  $8 = (_luaL_checklstring($L,$7,0)|0);
  $9 = HEAP32[$arg>>2]|0;
  $10 = (($9) + 1)|0;
  _luaL_checktype($L,$10,6);
  $11 = HEAP32[$arg>>2]|0;
  $12 = (($11) + 3)|0;
  $13 = (_luaL_optinteger($L,$12,0)|0);
  $14 = (_makemask($8,$13)|0);
  $count$0 = $13;$func$0 = 20;$mask$0 = $14;
 }
 $15 = (_luaL_getsubtable($L,-1001000,3368)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  (_lua_pushstring($L,3376)|0);
  _lua_setfield($L,-2,3384);
  _lua_pushvalue($L,-1);
  (_lua_setmetatable($L,-2)|0);
 }
 (_lua_pushthread($0)|0);
 _lua_xmove($0,$L,1);
 $17 = HEAP32[$arg>>2]|0;
 $18 = (($17) + 1)|0;
 _lua_pushvalue($L,$18);
 _lua_rawset($L,-3);
 (_lua_sethook($0,$func$0,$mask$0,$count$0)|0);
 STACKTOP = sp;return 0;
}
function _db_setlocal($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $arg = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $arg = sp + 100|0;
 $ar = sp;
 $0 = (_getthread($L,$arg)|0);
 $1 = HEAP32[$arg>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_luaL_checkinteger($L,$2)|0);
 $4 = (_lua_getstack($0,$3,$ar)|0);
 $5 = ($4|0)==(0);
 $6 = HEAP32[$arg>>2]|0;
 if ($5) {
  $7 = (($6) + 1)|0;
  $8 = (_luaL_argerror($L,$7,3344)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = (($6) + 3)|0;
  _luaL_checkany($L,$9);
  $10 = HEAP32[$arg>>2]|0;
  $11 = (($10) + 3)|0;
  _lua_settop($L,$11);
  _lua_xmove($L,$0,1);
  $12 = HEAP32[$arg>>2]|0;
  $13 = (($12) + 2)|0;
  $14 = (_luaL_checkinteger($L,$13)|0);
  $15 = (_lua_setlocal($0,$ar,$14)|0);
  (_lua_pushstring($L,$15)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _db_setmetatable($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 if (!((($0|0) == 0) | (($0|0) == 5))) {
  (_luaL_argerror($L,2,3320)|0);
 }
 _lua_settop($L,2);
 (_lua_setmetatable($L,1)|0);
 STACKTOP = sp;return 1;
}
function _db_setupvalue($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checkany($L,3);
 $0 = (_auxupvalue($L,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _db_traceback($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $arg = sp;
 $0 = (_getthread($L,$arg)|0);
 $1 = HEAP32[$arg>>2]|0;
 $2 = (($1) + 1)|0;
 $3 = (_lua_tolstring($L,$2,0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = HEAP32[$arg>>2]|0;
  $6 = (($5) + 1)|0;
  $7 = (_lua_type($L,$6)|0);
  $8 = ($7|0)<(1);
  if (!($8)) {
   $9 = HEAP32[$arg>>2]|0;
   $10 = (($9) + 1)|0;
   _lua_pushvalue($L,$10);
   STACKTOP = sp;return 1;
  }
 }
 $11 = HEAP32[$arg>>2]|0;
 $12 = (($11) + 2)|0;
 $13 = ($0|0)==($L|0);
 $14 = $13&1;
 $15 = (_luaL_optinteger($L,$12,$14)|0);
 _luaL_traceback($L,$0,$3,$15);
 STACKTOP = sp;return 1;
}
function _getthread($L,$arg) {
 $L = $L|0;
 $arg = $arg|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(8);
 if ($1) {
  HEAP32[$arg>>2] = 1;
  $2 = (_lua_tothread($L,1)|0);
  $$0 = $2;
 } else {
  HEAP32[$arg>>2] = 0;
  $$0 = $L;
 }
 STACKTOP = sp;return ($$0|0);
}
function _auxupvalue($L,$get) {
 $L = $L|0;
 $get = $get|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkinteger($L,2)|0);
 _luaL_checktype($L,1,6);
 $1 = ($get|0)==(0);
 if ($1) {
  $3 = (_lua_setupvalue($L,1,$0)|0);
  $4 = $3;
 } else {
  $2 = (_lua_getupvalue($L,1,$0)|0);
  $4 = $2;
 }
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 (_lua_pushstring($L,$4)|0);
 $6 = (($get) + 1)|0;
 $7 = $get ^ -1;
 _lua_insert($L,$7);
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _hookf($L,$ar) {
 $L = $L|0;
 $ar = $ar|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_getsubtable($L,-1001000,3368)|0);
 (_lua_pushthread($L)|0);
 _lua_rawget($L,-2);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(6);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = HEAP32[$ar>>2]|0;
 $3 = (3392 + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 (_lua_pushstring($L,$4)|0);
 $5 = (($ar) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  _lua_pushinteger($L,$6);
 } else {
  _lua_pushnil($L);
 }
 _lua_callk($L,2,0,0,0);
 STACKTOP = sp;return;
}
function _makemask($smask,$count) {
 $smask = $smask|0;
 $count = $count|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $mask$1 = 0, $mask$1$ = 0, $mask$3 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($smask,99)|0);
 $not$ = ($0|0)!=(0|0);
 $$ = $not$&1;
 $1 = (_strchr($smask,114)|0);
 $2 = ($1|0)==(0|0);
 $3 = $$ | 2;
 $mask$1 = $2 ? $$ : $3;
 $4 = (_strchr($smask,108)|0);
 $5 = ($4|0)==(0|0);
 $6 = $mask$1 | 4;
 $mask$1$ = $5 ? $mask$1 : $6;
 $7 = ($count|0)>(0);
 $8 = $mask$1$ | 8;
 $mask$3 = $7 ? $8 : $mask$1$;
 STACKTOP = sp;return ($mask$3|0);
}
function _checkupval($L,$argf,$argnup) {
 $L = $L|0;
 $argf = $argf|0;
 $argnup = $argnup|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $ar = sp;
 $0 = (_luaL_checkinteger($L,$argnup)|0);
 _luaL_checktype($L,$argf,6);
 _lua_pushvalue($L,$argf);
 (_lua_getinfo($L,3512,$ar)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $2 = (($ar) + 32|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($0|0)>($4|0);
  if (!($5)) {
   STACKTOP = sp;return ($0|0);
  }
 }
 (_luaL_argerror($L,$argnup,3520)|0);
 STACKTOP = sp;return ($0|0);
}
function _settabss($L,$i,$v) {
 $L = $L|0;
 $i = $i|0;
 $v = $v|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_pushstring($L,$v)|0);
 _lua_setfield($L,-2,$i);
 STACKTOP = sp;return;
}
function _settabsi($L,$i,$v) {
 $L = $L|0;
 $i = $i|0;
 $v = $v|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushinteger($L,$v);
 _lua_setfield($L,-2,$i);
 STACKTOP = sp;return;
}
function _settabsb($L,$i,$v) {
 $L = $L|0;
 $i = $i|0;
 $v = $v|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushboolean($L,$v);
 _lua_setfield($L,-2,$i);
 STACKTOP = sp;return;
}
function _treatstackoption($L,$L1,$fname) {
 $L = $L|0;
 $L1 = $L1|0;
 $fname = $fname|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($L|0)==($L1|0);
 if ($0) {
  _lua_pushvalue($L,-2);
  _lua_remove($L,-3);
 } else {
  _lua_xmove($L1,$L,1);
 }
 _lua_setfield($L,-2,$fname);
 STACKTOP = sp;return;
}
function _unmakemask($mask,$smask) {
 $mask = $mask|0;
 $smask = $smask|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0, $i$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mask & 1;
 $1 = ($0|0)==(0);
 if ($1) {
  $i$0 = 0;
 } else {
  HEAP8[$smask>>0] = 99;
  $i$0 = 1;
 }
 $2 = $mask & 2;
 $3 = ($2|0)==(0);
 if ($3) {
  $i$1 = $i$0;
 } else {
  $4 = (($i$0) + 1)|0;
  $5 = (($smask) + ($i$0)|0);
  HEAP8[$5>>0] = 114;
  $i$1 = $4;
 }
 $6 = $mask & 4;
 $7 = ($6|0)==(0);
 if ($7) {
  $i$2 = $i$1;
 } else {
  $8 = (($i$1) + 1)|0;
  $9 = (($smask) + ($i$1)|0);
  HEAP8[$9>>0] = 108;
  $i$2 = $8;
 }
 $10 = (($smask) + ($i$2)|0);
 HEAP8[$10>>0] = 0;
 STACKTOP = sp;return ($smask|0);
}
function _lua_sethook($L,$func,$mask,$count) {
 $L = $L|0;
 $func = $func|0;
 $mask = $mask|0;
 $count = $count|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ($func|0)==(0|0);
 $1 = ($mask|0)==(0);
 $or$cond = $0 | $1;
 $$0 = $or$cond ? 0 : $func;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 18|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if (!($7)) {
  $8 = (($3) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($L) + 20|0);
  HEAP32[$10>>2] = $9;
 }
 $11 = (($L) + 52|0);
 HEAP32[$11>>2] = $$0;
 $12 = (($L) + 44|0);
 HEAP32[$12>>2] = $count;
 $13 = (($L) + 48|0);
 HEAP32[$13>>2] = $count;
 $14 = $mask&255;
 $15 = $or$cond ? 0 : $14;
 $16 = (($L) + 40|0);
 HEAP8[$16>>0] = $15;
 STACKTOP = sp;return 1;
}
function _lua_gethook($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _lua_gethookmask($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 40|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function _lua_gethookcount($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function _lua_getstack($L,$level,$ar) {
 $L = $L|0;
 $level = $level|0;
 $ar = $ar|0;
 var $$0 = 0, $$015 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $ci$0$lcssa10 = 0, $ci$04 = 0, $ci$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)<(0);
 L1: do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (($L) + 16|0);
   $ci$04 = HEAP32[$1>>2]|0;
   $2 = ($level|0)>(0);
   if ($2) {
    $3 = (($L) + 72|0);
    $$015 = $level;$ci$06 = $ci$04;
    while(1) {
     $4 = ($ci$06|0)==($3|0);
     if ($4) {
      $$0 = 0;
      break L1;
     }
     $5 = (($$015) + -1)|0;
     $6 = (($ci$06) + 8|0);
     $ci$0 = HEAP32[$6>>2]|0;
     $7 = ($5|0)>(0);
     if ($7) {
      $$015 = $5;$ci$06 = $ci$0;
     } else {
      break;
     }
    }
    $8 = ($5|0)==(0);
    if ($8) {
     $ci$0$lcssa10 = $ci$0;
    } else {
     $$0 = 0;
     break;
    }
   } else {
    $ci$0$lcssa10 = $ci$04;
   }
   $9 = (($L) + 72|0);
   $10 = ($ci$0$lcssa10|0)==($9|0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = (($ar) + 96|0);
    HEAP32[$11>>2] = $ci$0$lcssa10;
    $$0 = 1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _lua_getlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name$0 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pos = sp;
 $0 = ($ar|0)==(0|0);
 if ($0) {
  $1 = (($L) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + -8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(70);
  if (!($5)) {
   $name$0 = 0;
   STACKTOP = sp;return ($name$0|0);
  }
  $6 = (($2) + -16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (_luaF_getlocalname($9,$n,0)|0);
  $name$0 = $10;
  STACKTOP = sp;return ($name$0|0);
 } else {
  HEAP32[$pos>>2] = 0;
  $11 = (($ar) + 96|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_findlocal($L,$12,$n,$pos)|0);
  $14 = ($13|0)==(0|0);
  if ($14) {
   $name$0 = 0;
   STACKTOP = sp;return ($name$0|0);
  }
  $15 = HEAP32[$pos>>2]|0;
  $16 = (($L) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $15;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $17;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = (($15) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($17) + 8|0);
  HEAP32[$30>>2] = $29;
  $31 = HEAP32[$16>>2]|0;
  $32 = (($31) + 16|0);
  HEAP32[$16>>2] = $32;
  $name$0 = $13;
  STACKTOP = sp;return ($name$0|0);
 }
 return 0|0;
}
function _findlocal($L,$ci,$n,$pos) {
 $L = $L|0;
 $ci = $ci|0;
 $n = $n|0;
 $pos = $pos|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $base$02 = 0, $base$03 = 0, $name$1 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($ci) + 18|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 do {
  if ($3) {
   $7 = HEAP32[$ci>>2]|0;
   $8 = (($7) + 16|0);
   $base$02 = $8;
   label = 6;
  } else {
   $4 = ($n|0)<(0);
   if (!($4)) {
    $9 = (($ci) + 24|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = HEAP32[$ci>>2]|0;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 12|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (_currentpc($ci)|0);
    $16 = (_luaF_getlocalname($14,$n,$15)|0);
    $17 = ($16|0)==(0|0);
    if ($17) {
     $base$02 = $10;
     label = 6;
     break;
    } else {
     $base$03 = $10;$name$1 = $16;
     break;
    }
   }
   $5 = (0 - ($n))|0;
   $6 = (_findvararg($ci,$5,$pos)|0);
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 6) {
  $18 = (($L) + 16|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==($ci|0);
  if ($20) {
   $21 = (($L) + 8|0);
   $$in = $21;
  } else {
   $22 = (($ci) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $$in = $23;
  }
  $24 = HEAP32[$$in>>2]|0;
  $25 = $24;
  $26 = $base$02;
  $27 = (($25) - ($26))|0;
  $28 = $27 >> 4;
  $29 = ($28|0)>=($n|0);
  $30 = ($n|0)>(0);
  $or$cond = $29 & $30;
  if ($or$cond) {
   $base$03 = $base$02;$name$1 = 4232;
  } else {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $31 = (($n) + -1)|0;
 $32 = (($base$03) + ($31<<4)|0);
 HEAP32[$pos>>2] = $32;
 $$0 = $name$1;
 STACKTOP = sp;return ($$0|0);
}
function _lua_setlocal($L,$ar,$n) {
 $L = $L|0;
 $ar = $ar|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pos = sp;
 HEAP32[$pos>>2] = 0;
 $0 = (($ar) + 96|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_findlocal($L,$1,$n,$pos)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $21 = (($L) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + -16|0);
  HEAP32[$21>>2] = $23;
  STACKTOP = sp;return ($2|0);
 }
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -16|0);
 $7 = HEAP32[$pos>>2]|0;
 $8 = $6;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = (($5) + -8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($7) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = (($L) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + -16|0);
 HEAP32[$21>>2] = $23;
 STACKTOP = sp;return ($2|0);
}
function _lua_getinfo($L,$what,$ar) {
 $L = $L|0;
 $what = $what|0;
 $ar = $ar|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $func$0 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$what>>0]|0;
 $1 = ($0<<24>>24)==(62);
 if ($1) {
  $2 = (($L) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + -16|0);
  $5 = (($what) + 1|0);
  HEAP32[$2>>2] = $4;
  $$0 = $5;$ci$0 = 0;$func$0 = $4;
 } else {
  $6 = (($ar) + 96|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $$0 = $what;$ci$0 = $7;$func$0 = $8;
 }
 $9 = (($func$0) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 31;
 $12 = ($11|0)==(6);
 if ($12) {
  $13 = HEAP32[$func$0>>2]|0;
  $14 = $13;
 } else {
  $14 = 0;
 }
 $15 = (_auxgetinfo($L,$$0,$ar,$14,$ci$0)|0);
 $16 = (_strchr($$0,102)|0);
 $17 = ($16|0)==(0|0);
 if (!($17)) {
  $18 = (($L) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $func$0;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $19;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = HEAP32[$9>>2]|0;
  $31 = (($19) + 8|0);
  HEAP32[$31>>2] = $30;
  $32 = HEAP32[$18>>2]|0;
  $33 = (($32) + 16|0);
  HEAP32[$18>>2] = $33;
 }
 $34 = (_strchr($$0,76)|0);
 $35 = ($34|0)==(0|0);
 if ($35) {
  STACKTOP = sp;return ($15|0);
 }
 _collectvalidlines($L,$14);
 STACKTOP = sp;return ($15|0);
}
function _auxgetinfo($L,$what,$ar,$f,$ci) {
 $L = $L|0;
 $what = $what|0;
 $ar = $ar|0;
 $f = $f|0;
 $ci = $ci|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $status$0$lcssa = 0, $status$03 = 0, $status$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$what>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $status$0$lcssa = 1;
  STACKTOP = sp;return ($status$0$lcssa|0);
 }
 $2 = ($ci|0)==(0|0);
 $3 = (($ar) + 20|0);
 $4 = (($ci) + 18|0);
 $5 = ($f|0)==(0|0);
 $6 = (($ar) + 32|0);
 $7 = (($ar) + 34|0);
 $8 = (($ar) + 33|0);
 $9 = (($f) + 6|0);
 $10 = (($ar) + 32|0);
 $11 = (($f) + 4|0);
 $12 = (($f) + 12|0);
 $13 = (($ar) + 34|0);
 $14 = (($ar) + 33|0);
 $15 = ($ci|0)==(0|0);
 $16 = (($ar) + 35|0);
 $17 = (($ci) + 18|0);
 $18 = ($ci|0)==(0|0);
 $19 = (($ar) + 8|0);
 $20 = (($ar) + 8|0);
 $21 = (($ar) + 4|0);
 $22 = (($ci) + 18|0);
 $23 = (($ci) + 8|0);
 $24 = (($ar) + 4|0);
 $25 = (($ar) + 8|0);
 $$02 = $what;$27 = $0;$status$03 = 1;
 while(1) {
  $26 = $27 << 24 >> 24;
  L6: do {
   switch ($26|0) {
   case 108:  {
    if ($2) {
     $32 = -1;
    } else {
     $28 = HEAP8[$4>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $32 = -1;
     } else {
      $31 = (_currentline($ci)|0);
      $32 = $31;
     }
    }
    HEAP32[$3>>2] = $32;
    $status$1 = $status$03;
    break;
   }
   case 83:  {
    _funcinfo($ar,$f);
    $status$1 = $status$03;
    break;
   }
   case 117:  {
    if ($5) {
     HEAP8[$6>>0] = 0;
    } else {
     $33 = HEAP8[$9>>0]|0;
     HEAP8[$10>>0] = $33;
     $34 = HEAP8[$11>>0]|0;
     $35 = ($34<<24>>24)==(38);
     if (!($35)) {
      $36 = HEAP32[$12>>2]|0;
      $37 = (($36) + 77|0);
      $38 = HEAP8[$37>>0]|0;
      HEAP8[$13>>0] = $38;
      $39 = HEAP32[$12>>2]|0;
      $40 = (($39) + 76|0);
      $41 = HEAP8[$40>>0]|0;
      HEAP8[$14>>0] = $41;
      $status$1 = $status$03;
      break L6;
     }
    }
    HEAP8[$7>>0] = 1;
    HEAP8[$8>>0] = 0;
    $status$1 = $status$03;
    break;
   }
   case 102: case 76:  {
    $status$1 = $status$03;
    break;
   }
   case 116:  {
    if ($15) {
     $45 = 0;
    } else {
     $42 = HEAP8[$17>>0]|0;
     $43 = $42&255;
     $44 = $43 & 64;
     $phitmp = $44&255;
     $45 = $phitmp;
    }
    HEAP8[$16>>0] = $45;
    $status$1 = $status$03;
    break;
   }
   case 110:  {
    if ($18) {
     label = 20;
    } else {
     $46 = HEAP8[$22>>0]|0;
     $47 = $46 & 64;
     $48 = ($47<<24>>24)==(0);
     if ($48) {
      $49 = HEAP32[$23>>2]|0;
      $50 = (($49) + 18|0);
      $51 = HEAP8[$50>>0]|0;
      $52 = $51 & 1;
      $53 = ($52<<24>>24)==(0);
      if ($53) {
       label = 20;
      } else {
       $54 = (_getfuncname($L,$49,$24)|0);
       HEAP32[$25>>2] = $54;
       $55 = ($54|0)==(0|0);
       if (!($55)) {
        $status$1 = $status$03;
        break L6;
       }
      }
     } else {
      label = 20;
     }
    }
    if ((label|0) == 20) {
     label = 0;
     HEAP32[$19>>2] = 0;
    }
    HEAP32[$20>>2] = 4152;
    HEAP32[$21>>2] = 0;
    $status$1 = $status$03;
    break;
   }
   default: {
    $status$1 = 0;
   }
   }
  } while(0);
  $56 = (($$02) + 1|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = ($57<<24>>24)==(0);
  if ($58) {
   $status$0$lcssa = $status$1;
   break;
  } else {
   $$02 = $56;$27 = $57;$status$03 = $status$1;
  }
 }
 STACKTOP = sp;return ($status$0$lcssa|0);
}
function _collectvalidlines($L,$f) {
 $L = $L|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $v = sp;
 $0 = ($f|0)==(0|0);
 if (!($0)) {
  $1 = (($f) + 4|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(38);
  if (!($3)) {
   $9 = (($f) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (_luaH_new($L)|0);
   $14 = (($L) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$15>>2] = $13;
   $16 = (($15) + 8|0);
   HEAP32[$16>>2] = 69;
   $17 = HEAP32[$14>>2]|0;
   $18 = (($17) + 16|0);
   HEAP32[$14>>2] = $18;
   HEAP32[$v>>2] = 1;
   $19 = (($v) + 8|0);
   HEAP32[$19>>2] = 1;
   $20 = HEAP32[$9>>2]|0;
   $21 = (($20) + 52|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)>(0);
   if ($23) {
    $i$01 = 0;
   } else {
    STACKTOP = sp;return;
   }
   while(1) {
    $24 = (($12) + ($i$01<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    _luaH_setint($L,$13,$25,$v);
    $26 = (($i$01) + 1)|0;
    $27 = HEAP32[$9>>2]|0;
    $28 = (($27) + 52|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($26|0)<($29|0);
    if ($30) {
     $i$01 = $26;
    } else {
     break;
    }
   }
   STACKTOP = sp;return;
  }
 }
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[$4>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$4>>2] = $8;
 STACKTOP = sp;return;
}
function _luaG_typeerror($L,$o,$op) {
 $L = $L|0;
 $o = $o|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $kind$02 = 0, $name = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp;
 $name = sp + 16|0;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$name>>2] = 0;
 $2 = (($o) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 15;
 $5 = (($4) + 1)|0;
 $6 = (10488 + ($5<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 18|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 do {
  if (!($11)) {
   $12 = (_getupvalname($1,$o,$name)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = (_isinstack($1,$o)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
    $16 = HEAP32[$1>>2]|0;
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (_currentpc($1)|0);
    $21 = (($1) + 24|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $o;
    $24 = $22;
    $25 = (($23) - ($24))|0;
    $26 = $25 >> 4;
    $27 = (_getobjname($19,$20,$26,$name)|0);
    $28 = ($27|0)==(0|0);
    if ($28) {
     break;
    } else {
     $kind$02 = $27;
    }
   } else {
    $kind$02 = $12;
   }
   $29 = HEAP32[$name>>2]|0;
   HEAP32[$vararg_buffer4>>2] = $op;
   $vararg_ptr1 = (($vararg_buffer4) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $kind$02;
   $vararg_ptr2 = (($vararg_buffer4) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $29;
   $vararg_ptr3 = (($vararg_buffer4) + 12|0);
   HEAP32[$vararg_ptr3>>2] = $7;
   _luaG_runerror($L,3880,$vararg_buffer4);
   // unreachable;
  }
 } while(0);
 HEAP32[$vararg_buffer4>>2] = $op;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $7;
 _luaG_runerror($L,3920,$vararg_buffer4);
 // unreachable;
}
function _getupvalname($ci,$o,$name) {
 $ci = $ci|0;
 $o = $o|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ci>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 6|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($1) + 16|0);
 $i$02 = 0;
 while(1) {
  $10 = (($5) + ($i$02<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==($o|0);
  $8 = (($i$02) + 1)|0;
  if ($14) {
   break;
  }
  $6 = HEAP8[$2>>0]|0;
  $7 = $6&255;
  $9 = ($8|0)<($7|0);
  if ($9) {
   $i$02 = $8;
  } else {
   $$0 = 0;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($1) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_upvalname($16,$i$02)|0);
 HEAP32[$name>>2] = $17;
 $$0 = 4112;
 STACKTOP = sp;return ($$0|0);
}
function _isinstack($ci,$o) {
 $ci = $ci|0;
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ci) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ci) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 L1: do {
  if ($4) {
   $p$01 = $1;
   while(1) {
    $8 = ($p$01|0)==($o|0);
    $6 = (($p$01) + 16|0);
    if ($8) {
     $$0 = 1;
     break L1;
    }
    $5 = HEAP32[$2>>2]|0;
    $7 = ($6>>>0)<($5>>>0);
    if ($7) {
     $p$01 = $6;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _getobjname($p,$lastpc,$reg,$name) {
 $p = $p|0;
 $lastpc = $lastpc|0;
 $reg = $reg|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lastpc$tr = 0, $phitmp = 0, $reg$tr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 12|0);
 $lastpc$tr = $lastpc;$reg$tr = $reg;
 L1: while(1) {
  $1 = (($reg$tr) + 1)|0;
  $2 = (_luaF_getlocalname($p,$1,$lastpc$tr)|0);
  HEAP32[$name>>2] = $2;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$0 = 4080;
   break;
  }
  $4 = (_findsetreg($p,$lastpc$tr,$reg$tr)|0);
  $5 = ($4|0)==(-1);
  if ($5) {
   $$0 = 0;
   break;
  }
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + ($4<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & 63;
  switch ($9|0) {
  case 0:  {
   break;
  }
  case 7: case 6:  {
   label = 6;
   break L1;
   break;
  }
  case 5:  {
   label = 11;
   break L1;
   break;
  }
  case 2:  {
   label = 13;
   break L1;
   break;
  }
  case 12:  {
   label = 16;
   break L1;
   break;
  }
  case 1:  {
   label = 12;
   break L1;
   break;
  }
  default: {
   $$0 = 0;
   break L1;
  }
  }
  $10 = $8 >>> 23;
  $11 = $8 >>> 6;
  $12 = $11 & 255;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $lastpc$tr = $4;$reg$tr = $10;
  } else {
   $$0 = 0;
   break;
  }
 }
 if ((label|0) == 6) {
  $14 = $8 >>> 14;
  $15 = $14 & 511;
  $16 = $8 >>> 23;
  $17 = ($9|0)==(7);
  if ($17) {
   $18 = (($16) + 1)|0;
   $19 = (_luaF_getlocalname($p,$18,$4)|0);
   $21 = $19;
  } else {
   $20 = (_upvalname($p,$16)|0);
   $21 = $20;
  }
  _kname($p,$4,$15,$name);
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 4104;
  } else {
   $23 = (_strcmp($21,4088)|0);
   $24 = ($23|0)==(0);
   $phitmp = $24 ? 4096 : 4104;
   $$0 = $phitmp;
  }
 }
 else if ((label|0) == 11) {
  $25 = $8 >>> 23;
  $26 = (_upvalname($p,$25)|0);
  HEAP32[$name>>2] = $26;
  $$0 = 4112;
 }
 else if ((label|0) == 12) {
  $27 = $8 >>> 14;
  $35 = $27;
  label = 14;
 }
 else if ((label|0) == 13) {
  $28 = (($4) + 1)|0;
  $29 = (($6) + ($28<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 >>> 6;
  $35 = $31;
  label = 14;
 }
 else if ((label|0) == 16) {
  $42 = $8 >>> 14;
  $43 = $42 & 511;
  _kname($p,$4,$43,$name);
  $$0 = 4136;
 }
 if ((label|0) == 14) {
  $32 = (($p) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($33) + ($35<<4)|0) + 8|0);
  $36 = HEAP32[$34>>2]|0;
  $37 = $36 & 15;
  $38 = ($37|0)==(4);
  if ($38) {
   $39 = (($33) + ($35<<4)|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 16|0);
   HEAP32[$name>>2] = $41;
   $$0 = 4120;
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _currentpc($ci) {
 $ci = $ci|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ci) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$ci>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = $7;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($11) + -1)|0;
 STACKTOP = sp;return ($12|0);
}
function _luaG_runerror($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 _addinfo($L,$0);
 _luaG_errormsg($L);
 // unreachable;
}
function _luaG_concaterror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = ($2|0)==(4);
 $4 = ($1|0)==(3);
 $or$cond = $3 | $4;
 $$0 = $or$cond ? $p2 : $p1;
 _luaG_typeerror($L,$$0,3952);
 // unreachable;
}
function _luaG_aritherror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $p1$p2 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $temp = sp;
 $0 = (_luaV_tonumber($p1,$temp)|0);
 $1 = ($0|0)==(0|0);
 $p1$p2 = $1 ? $p1 : $p2;
 _luaG_typeerror($L,$p1$p2,3968);
 // unreachable;
}
function _luaG_ordererror($L,$p1,$p2) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($p1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 $3 = (($2) + 1)|0;
 $4 = (10488 + ($3<<2)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($p2) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 15;
 $9 = (($8) + 1)|0;
 $10 = (10488 + ($9<<2)|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($5|0)==($11|0);
 if ($12) {
  HEAP32[$vararg_buffer1>>2] = $5;
  _luaG_runerror($L,3992,$vararg_buffer1);
  // unreachable;
 } else {
  HEAP32[$vararg_buffer1>>2] = $5;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $11;
  _luaG_runerror($L,4032,$vararg_buffer1);
  // unreachable;
 }
}
function _luaG_errormsg($L) {
 $L = $L|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  _luaD_throw($L,2);
  // unreachable;
 }
 $3 = (($L) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($1) + 8)|0;
 $5 = (($4) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 15;
 $8 = ($7|0)==(6);
 if (!($8)) {
  _luaD_throw($L,6);
  // unreachable;
 }
 $9 = (($4) + ($1)|0);
 $10 = (($L) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -16|0);
 $13 = $12;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $11;
 $20 = $19;
 HEAP32[$20>>2] = $15;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = (($11) + -8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($11) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[$10>>2]|0;
 $27 = (($26) + -16|0);
 $28 = $9;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 4)|0;
 $32 = $31;
 $33 = HEAP32[$32>>2]|0;
 $34 = $27;
 $35 = $34;
 HEAP32[$35>>2] = $30;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $33;
 $38 = HEAP32[$5>>2]|0;
 $39 = (($26) + -8|0);
 HEAP32[$39>>2] = $38;
 $40 = HEAP32[$10>>2]|0;
 $41 = (($40) + 16|0);
 HEAP32[$10>>2] = $41;
 $42 = (($40) + -16|0);
 _luaD_call($L,$42,1,0);
 _luaD_throw($L,2);
 // unreachable;
}
function _addinfo($L,$msg) {
 $L = $L|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $buff = sp + 12|0;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (_currentline($1)|0);
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP8[$buff>>0] = 63;
  $15 = (($buff) + 1|0);
  HEAP8[$15>>0] = 0;
 } else {
  $14 = (($12) + 16|0);
  _luaO_chunkid($buff,$14,60);
 }
 HEAP32[$vararg_buffer>>2] = $buff;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 (_luaO_pushfstring($L,4064,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _currentline($ci) {
 $ci = $ci|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ci>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 $7 = (_currentpc($ci)|0);
 $8 = (($5) + ($7<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function _findsetreg($p,$lastpc,$reg) {
 $p = $p|0;
 $lastpc = $lastpc|0;
 $reg = $reg|0;
 var $$jmptarget$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $jmptarget$03 = 0, $jmptarget$1 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond1 = 0, $or$cond2 = 0;
 var $pc$05 = 0, $setreg$0$lcssa = 0, $setreg$04 = 0, $setreg$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($lastpc|0)>(0);
 if (!($0)) {
  $setreg$0$lcssa = -1;
  STACKTOP = sp;return ($setreg$0$lcssa|0);
 }
 $1 = (($p) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $jmptarget$03 = 0;$pc$05 = 0;$setreg$04 = -1;
 while(1) {
  $3 = (($2) + ($pc$05<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4 & 63;
  $6 = $4 >>> 6;
  $7 = $6 & 255;
  switch ($5|0) {
  case 34:  {
   $13 = (($7) + 2)|0;
   $14 = ($13|0)>($reg|0);
   if ($14) {
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
   } else {
    $15 = (_filterpc($pc$05,$jmptarget$03)|0);
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $15;
   }
   break;
  }
  case 30: case 29:  {
   $16 = ($7|0)>($reg|0);
   if ($16) {
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
   } else {
    $17 = (_filterpc($pc$05,$jmptarget$03)|0);
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $17;
   }
   break;
  }
  case 27:  {
   $22 = ($7|0)==($reg|0);
   if ($22) {
    $23 = (_filterpc($pc$05,$jmptarget$03)|0);
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $23;
   } else {
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
   }
   break;
  }
  case 4:  {
   $8 = ($7|0)>($reg|0);
   if ($8) {
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
   } else {
    $9 = $4 >>> 23;
    $10 = (($7) + ($9))|0;
    $11 = ($10|0)<($reg|0);
    if ($11) {
     $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
    } else {
     $12 = (_filterpc($pc$05,$jmptarget$03)|0);
     $jmptarget$1 = $jmptarget$03;$setreg$1 = $12;
    }
   }
   break;
  }
  case 23:  {
   $18 = $4 >>> 14;
   $19 = (($pc$05) + -131070)|0;
   $20 = (($19) + ($18))|0;
   $notlhs = ($pc$05|0)<($20|0);
   $notrhs = ($20|0)<=($lastpc|0);
   $or$cond$not = $notrhs & $notlhs;
   $21 = ($20|0)>($jmptarget$03|0);
   $or$cond1 = $or$cond$not & $21;
   $$jmptarget$0 = $or$cond1 ? $20 : $jmptarget$03;
   $jmptarget$1 = $$jmptarget$0;$setreg$1 = $setreg$04;
   break;
  }
  default: {
   $24 = (7536 + ($5)|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25 & 64;
   $27 = ($26<<24>>24)!=(0);
   $28 = ($7|0)==($reg|0);
   $or$cond2 = $27 & $28;
   if ($or$cond2) {
    $29 = (_filterpc($pc$05,$jmptarget$03)|0);
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $29;
   } else {
    $jmptarget$1 = $jmptarget$03;$setreg$1 = $setreg$04;
   }
  }
  }
  $30 = (($pc$05) + 1)|0;
  $exitcond = ($30|0)==($lastpc|0);
  if ($exitcond) {
   $setreg$0$lcssa = $setreg$1;
   break;
  } else {
   $jmptarget$03 = $jmptarget$1;$pc$05 = $30;$setreg$04 = $setreg$1;
  }
 }
 STACKTOP = sp;return ($setreg$0$lcssa|0);
}
function _upvalname($p,$uv) {
 $p = $p|0;
 $uv = $uv|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($uv<<3)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 4144;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($3) + 16|0);
 $$0 = $5;
 STACKTOP = sp;return ($$0|0);
}
function _kname($p,$pc,$c,$name) {
 $p = $p|0;
 $pc = $pc|0;
 $c = $c|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 256;
 $1 = ($0|0)==(0);
 if ($1) {
  $12 = (_getobjname($p,$pc,$c,$name)|0);
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = HEAP8[$12>>0]|0;
   $15 = ($14<<24>>24)==(99);
   if ($15) {
    STACKTOP = sp;return;
   }
  }
 } else {
  $2 = $c & -257;
  $3 = (($p) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($2<<4)|0) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 15;
  $8 = ($7|0)==(4);
  if ($8) {
   $9 = (($4) + ($2<<4)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 16|0);
   HEAP32[$name>>2] = $11;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$name>>2] = 4144;
 STACKTOP = sp;return;
}
function _filterpc($pc,$jmptarget) {
 $pc = $pc|0;
 $jmptarget = $jmptarget|0;
 var $$pc = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pc|0)<($jmptarget|0);
 $$pc = $0 ? -1 : $pc;
 STACKTOP = sp;return ($$pc|0);
}
function _funcinfo($ar,$cl) {
 $ar = $ar|0;
 $cl = $cl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cl|0)==(0|0);
 if (!($0)) {
  $1 = (($cl) + 4|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = ($2<<24>>24)==(38);
  if (!($3)) {
   $8 = (($cl) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $15 = 4208;
   } else {
    $13 = (($11) + 16|0);
    $15 = $13;
   }
   $14 = (($ar) + 16|0);
   HEAP32[$14>>2] = $15;
   $16 = (($9) + 64|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($ar) + 24|0);
   HEAP32[$18>>2] = $17;
   $19 = (($9) + 68|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($ar) + 28|0);
   HEAP32[$21>>2] = $20;
   $22 = HEAP32[$18>>2]|0;
   $23 = ($22|0)==(0);
   $24 = $23 ? 4216 : 4224;
   $25 = (($ar) + 12|0);
   HEAP32[$25>>2] = $24;
   $26 = (($ar) + 36|0);
   $27 = (($ar) + 16|0);
   $28 = HEAP32[$27>>2]|0;
   _luaO_chunkid($26,$28,60);
   STACKTOP = sp;return;
  }
 }
 $4 = (($ar) + 16|0);
 HEAP32[$4>>2] = 4192;
 $5 = (($ar) + 24|0);
 HEAP32[$5>>2] = -1;
 $6 = (($ar) + 28|0);
 HEAP32[$6>>2] = -1;
 $7 = (($ar) + 12|0);
 HEAP32[$7>>2] = 4200;
 $26 = (($ar) + 36|0);
 $27 = (($ar) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 _luaO_chunkid($26,$28,60);
 STACKTOP = sp;return;
}
function _getfuncname($L,$ci,$name) {
 $L = $L|0;
 $ci = $ci|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tm$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ci>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_currentpc($ci)|0);
 $5 = (($3) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 63;
 do {
  switch ($9|0) {
  case 24:  {
   $tm$0 = 5;
   break;
  }
  case 16:  {
   $tm$0 = 9;
   break;
  }
  case 13:  {
   $tm$0 = 6;
   break;
  }
  case 14:  {
   $tm$0 = 7;
   break;
  }
  case 18:  {
   $tm$0 = 11;
   break;
  }
  case 19:  {
   $tm$0 = 12;
   break;
  }
  case 15:  {
   $tm$0 = 8;
   break;
  }
  case 34:  {
   HEAP32[$name>>2] = 4160;
   $$0 = 4160;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 21:  {
   $tm$0 = 4;
   break;
  }
  case 30: case 29:  {
   $10 = $8 >>> 6;
   $11 = $10 & 255;
   $12 = (_getobjname($3,$4,$11,$name)|0);
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 22:  {
   $tm$0 = 15;
   break;
  }
  case 26:  {
   $tm$0 = 14;
   break;
  }
  case 10: case 8:  {
   $tm$0 = 1;
   break;
  }
  case 7: case 6: case 12:  {
   $tm$0 = 0;
   break;
  }
  case 17:  {
   $tm$0 = 10;
   break;
  }
  case 25:  {
   $tm$0 = 13;
   break;
  }
  default: {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $13 = (($L) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14) + ($tm$0<<2)|0) + 184|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 16|0);
 HEAP32[$name>>2] = $17;
 $$0 = 4176;
 STACKTOP = sp;return ($$0|0);
}
function _findvararg($ci,$n,$pos) {
 $ci = $ci|0;
 $n = $n|0;
 $pos = $pos|0;
 var $$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ci>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 76|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = (($ci) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $0;
 $11 = (($9) - ($10))|0;
 $12 = $11 >> 4;
 $13 = (($12) - ($6))|0;
 $14 = ($13|0)>($n|0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $$sum = (($6) + ($n))|0;
 $15 = (($0) + ($$sum<<4)|0);
 HEAP32[$pos>>2] = $15;
 $$0 = 4248;
 STACKTOP = sp;return ($$0|0);
}
function _luaD_throw($L,$errcode) {
 $L = $L|0;
 $errcode = $errcode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 160|0);
  HEAP32[$3>>2] = $errcode;
  $4 = HEAP32[$0>>2]|0;
  $5 = (($4) + 4|0);
  _longjmp(($5|0),1);
  // unreachable;
 }
 $6 = $errcode&255;
 $7 = (($L) + 6|0);
 HEAP8[$7>>0] = $6;
 $8 = (($L) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 172|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = (($L) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -16|0);
  $18 = (($11) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 16|0);
  HEAP32[$18>>2] = $20;
  $21 = $17;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $19;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = (($16) + -8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($19) + 8|0);
  HEAP32[$33>>2] = $32;
  $34 = HEAP32[$8>>2]|0;
  $35 = (($34) + 172|0);
  $36 = HEAP32[$35>>2]|0;
  _luaD_throw($36,$errcode);
  // unreachable;
 }
 $37 = (($9) + 168|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)==(0|0);
 if ($39) {
  _abort();
  // unreachable;
 }
 (FUNCTION_TABLE_ii[$38 & 255]($L)|0);
 _abort();
 // unreachable;
}
function _luaD_rawrunprotected($L,$f,$ud) {
 $L = $L|0;
 $f = $f|0;
 $ud = $ud|0;
 var $$reg2mem23$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lj = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 _setjmpTable = STACKTOP; STACKTOP = STACKTOP + 168|0;HEAP32[_setjmpTable>>2]=0;
 $lj = sp;
 $0 = (($L) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($lj) + 160|0);
 HEAP32[$2>>2] = 0;
 $3 = (($L) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$lj>>2] = $4;
 HEAP32[$3>>2] = $lj;
 $5 = (($lj) + 4|0);
 _saveSetjmp($5,1,_setjmpTable|0)|0;
 __THREW__ = 0;
 $6 = __THREW__; __THREW__ = 0;
 if ((($6|0) != 0) & ((threwValue|0) != 0)) { $7 = _testSetjmp(HEAP32[$6>>2]|0, _setjmpTable)|0; if (($7|0) == 0) { _longjmp($6|0, threwValue|0); } tempRet0 = threwValue; } else { $7 = -1; };
 $8 = tempRet0;
 if ((($7|0) == 1)) {
  $$reg2mem23$0 = $8;
 } else {
  $$reg2mem23$0 = 0;
 }
 while(1) {
  $9 = ($$reg2mem23$0|0)==(0);
  if (!($9)) {
   label = 6;
   break;
  }
  __THREW__ = 0;
  invoke_vii($f|0,($L|0),($ud|0));
  $10 = __THREW__; __THREW__ = 0;
  if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = threwValue; } else { $11 = -1; };
  $12 = tempRet0;
  if ((($11|0) == 1)) {
   $$reg2mem23$0 = $12;
  } else {
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = HEAP32[$lj>>2]|0;
  HEAP32[$3>>2] = $13;
  HEAP16[$0>>1] = $1;
  $14 = HEAP32[$2>>2]|0;
  STACKTOP = sp;return ($14|0);
 }
 $13 = HEAP32[$lj>>2]|0;
 HEAP32[$3>>2] = $13;
 HEAP16[$0>>1] = $1;
 $14 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($14|0);
}
function _luaD_reallocstack($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $lim$01 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($newsize) + 1)|0;
 $5 = ($4>>>0)>(268435455);
 if ($5) {
  _luaM_toobig($L);
  // unreachable;
 }
 $6 = $3 << 4;
 $7 = $newsize << 4;
 $8 = (_luaM_realloc_($L,$1,$6,$7)|0);
 HEAP32[$0>>2] = $8;
 $9 = ($3|0)<($newsize|0);
 if ($9) {
  $10 = HEAP32[$0>>2]|0;
  $lim$01 = $3;
  while(1) {
   $11 = ((($10) + ($lim$01<<4)|0) + 8|0);
   HEAP32[$11>>2] = 0;
   $12 = (($lim$01) + 1)|0;
   $exitcond = ($12|0)==($newsize|0);
   if ($exitcond) {
    break;
   } else {
    $lim$01 = $12;
   }
  }
 }
 HEAP32[$2>>2] = $newsize;
 $13 = HEAP32[$0>>2]|0;
 $$sum = (($newsize) + -5)|0;
 $14 = (($13) + ($$sum<<4)|0);
 $15 = (($L) + 24|0);
 HEAP32[$15>>2] = $14;
 _correctstack($L,$1);
 STACKTOP = sp;return;
}
function _correctstack($L,$oldstack) {
 $L = $L|0;
 $oldstack = $oldstack|0;
 var $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $ci$02 = 0, $ci$03 = 0, $up$0 = 0, $up$04 = 0, $up$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1;
 $3 = $oldstack;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 4;
 $6 = (($L) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($5<<4)|0);
 HEAP32[$0>>2] = $8;
 $9 = (($L) + 56|0);
 $up$04 = HEAP32[$9>>2]|0;
 $10 = ($up$04|0)==(0|0);
 if (!($10)) {
  $up$05 = $up$04;
  while(1) {
   $11 = (($up$05) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $12;
   $14 = (($13) - ($3))|0;
   $15 = $14 >> 4;
   $16 = HEAP32[$6>>2]|0;
   $17 = (($16) + ($15<<4)|0);
   HEAP32[$11>>2] = $17;
   $up$0 = HEAP32[$up$05>>2]|0;
   $18 = ($up$0|0)==(0|0);
   if ($18) {
    break;
   } else {
    $up$05 = $up$0;
   }
  }
 }
 $19 = (($L) + 16|0);
 $ci$02 = HEAP32[$19>>2]|0;
 $20 = ($ci$02|0)==(0|0);
 if ($20) {
  STACKTOP = sp;return;
 } else {
  $ci$03 = $ci$02;
 }
 while(1) {
  $21 = (($ci$03) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22;
  $24 = (($23) - ($3))|0;
  $25 = $24 >> 4;
  $26 = HEAP32[$6>>2]|0;
  $27 = (($26) + ($25<<4)|0);
  HEAP32[$21>>2] = $27;
  $28 = HEAP32[$ci$03>>2]|0;
  $29 = $28;
  $30 = (($29) - ($3))|0;
  $31 = $30 >> 4;
  $32 = HEAP32[$6>>2]|0;
  $33 = (($32) + ($31<<4)|0);
  HEAP32[$ci$03>>2] = $33;
  $34 = (($ci$03) + 18|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35 & 1;
  $37 = ($36<<24>>24)==(0);
  if (!($37)) {
   $38 = (($ci$03) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $39;
   $41 = (($40) - ($3))|0;
   $42 = $41 >> 4;
   $43 = HEAP32[$6>>2]|0;
   $44 = (($43) + ($42<<4)|0);
   $$c = $44;
   HEAP32[$38>>2] = $$c;
  }
  $45 = (($ci$03) + 8|0);
  $ci$0 = HEAP32[$45>>2]|0;
  $46 = ($ci$0|0)==(0|0);
  if ($46) {
   break;
  } else {
   $ci$03 = $ci$0;
  }
 }
 STACKTOP = sp;return;
}
function _luaD_growstack($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$ = 0, $$$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($L) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(1000000);
 if ($2) {
  _luaD_throw($L,6);
  // unreachable;
 }
 $3 = (($L) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = (($n) + 5)|0;
 $12 = (($11) + ($10))|0;
 $13 = $1 << 1;
 $14 = ($13|0)>(1000000);
 $$ = $14 ? 1000000 : $13;
 $15 = ($$|0)<($12|0);
 $$$ = $15 ? $12 : $$;
 $16 = ($$$|0)>(1000000);
 if ($16) {
  _luaD_reallocstack($L,1000200);
  _luaG_runerror($L,4264,$vararg_buffer);
  // unreachable;
 } else {
  _luaD_reallocstack($L,$$$);
  STACKTOP = sp;return;
 }
}
function _luaD_shrinkstack($L) {
 $L = $L|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_stackinuse($L)|0);
 $1 = (($0|0) / 8)&-1;
 $2 = (($0) + 10)|0;
 $3 = (($2) + ($1))|0;
 $4 = ($3|0)>(1000000);
 $$ = $4 ? 1000000 : $3;
 $5 = ($0|0)>(1000000);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($L) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($$|0)<($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 _luaD_reallocstack($L,$$);
 STACKTOP = sp;return;
}
function _stackinuse($L) {
 $L = $L|0;
 var $$lim$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$0 = 0, $ci$01 = 0, $ci$03 = 0;
 var $lim$0$lcssa = 0, $lim$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 16|0);
 $ci$01 = HEAP32[$2>>2]|0;
 $3 = ($ci$01|0)==(0|0);
 if ($3) {
  $lim$0$lcssa = $1;
 } else {
  $ci$03 = $ci$01;$lim$02 = $1;
  while(1) {
   $4 = (($ci$03) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($lim$02>>>0)<($5>>>0);
   $$lim$0 = $6 ? $5 : $lim$02;
   $7 = (($ci$03) + 8|0);
   $ci$0 = HEAP32[$7>>2]|0;
   $8 = ($ci$0|0)==(0|0);
   if ($8) {
    $lim$0$lcssa = $$lim$0;
    break;
   } else {
    $ci$03 = $ci$0;$lim$02 = $$lim$0;
   }
  }
 }
 $9 = (($L) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $lim$0$lcssa;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = $13 >> 4;
 $15 = (($14) + 1)|0;
 STACKTOP = sp;return ($15|0);
}
function _luaD_hook($L,$event,$line) {
 $L = $L|0;
 $event = $event|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $ar = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $ar = sp;
 $0 = (($L) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L) + 41|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($L) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($L) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($L) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9;
 $13 = $11;
 $14 = (($12) - ($13))|0;
 $15 = (($7) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16;
 $18 = (($17) - ($13))|0;
 HEAP32[$ar>>2] = $event;
 $19 = (($ar) + 20|0);
 HEAP32[$19>>2] = $line;
 $20 = (($ar) + 96|0);
 HEAP32[$20>>2] = $7;
 $21 = (($L) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$8>>2]|0;
 $24 = $22;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = ($26|0)<(336);
 if ($27) {
  _luaD_growstack($L,20);
 }
 $28 = HEAP32[$8>>2]|0;
 $29 = (($28) + 320|0);
 HEAP32[$15>>2] = $29;
 HEAP8[$3>>0] = 0;
 $30 = (($7) + 18|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 | 2;
 $34 = $33&255;
 HEAP8[$30>>0] = $34;
 FUNCTION_TABLE_vii[$1 & 31]($L,$ar);
 HEAP8[$3>>0] = 1;
 $35 = HEAP32[$10>>2]|0;
 $36 = (($35) + ($18)|0);
 HEAP32[$15>>2] = $36;
 $37 = HEAP32[$10>>2]|0;
 $38 = (($37) + ($14)|0);
 HEAP32[$8>>2] = $38;
 $39 = HEAP8[$30>>0]|0;
 $40 = $39&255;
 $41 = $40 & 253;
 $42 = $41&255;
 HEAP8[$30>>0] = $42;
 STACKTOP = sp;return;
}
function _luaD_precall($L,$func,$nresults) {
 $L = $L|0;
 $func = $func|0;
 $nresults = $nresults|0;
 var $$0 = 0, $$01$in = 0, $$pn = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base$0 = 0, $base$0$c = 0, $f$0 = 0, $f$0$in = 0, $func$tr = 0;
 var $n$0$lcssa = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $func$tr = $func;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = $func$tr;
  $3 = $1;
  $4 = (($2) - ($3))|0;
  $5 = (($func$tr) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & 63;
  if ((($7|0) == 38)) {
   label = 4;
   break;
  } else if ((($7|0) == 22)) {
   label = 3;
   break;
  } else if ((($7|0) == 6)) {
   label = 14;
   break;
  }
  $110 = (_tryfuncTM($L,$func$tr)|0);
  $func$tr = $110;
 }
 if ((label|0) == 3) {
  $f$0$in = $func$tr;
 }
 else if ((label|0) == 4) {
  $8 = HEAP32[$func$tr>>2]|0;
  $9 = (($8) + 12|0);
  $f$0$in = $9;
 }
 else if ((label|0) == 14) {
  $46 = HEAP32[$func$tr>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($L) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
  $52 = (($51) - ($2))|0;
  $53 = $52 >> 4;
  $54 = (($53) + -1)|0;
  $55 = (($L) + 24|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56;
  $58 = (($57) - ($51))|0;
  $59 = $58 >> 4;
  $60 = (($48) + 78|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ($59|0)>($62|0);
  if (!($63)) {
   _luaD_growstack($L,$62);
  }
  $64 = (($48) + 76|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = ($53|0)>($66|0);
  if ($67) {
   $n$0$lcssa = $54;
  } else {
   $n$02 = $54;
   while(1) {
    $68 = HEAP32[$49>>2]|0;
    $69 = (($68) + 16|0);
    HEAP32[$49>>2] = $69;
    $70 = (($68) + 8|0);
    HEAP32[$70>>2] = 0;
    $71 = (($n$02) + 1)|0;
    $72 = HEAP8[$64>>0]|0;
    $73 = $72&255;
    $74 = ($71|0)<($73|0);
    if ($74) {
     $n$02 = $71;
    } else {
     $n$0$lcssa = $71;
     break;
    }
   }
  }
  $75 = (($48) + 77|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = ($76<<24>>24)==(0);
  if ($77) {
   $78 = HEAP32[$0>>2]|0;
   $$sum = (($4) + 16)|0;
   $79 = (($78) + ($$sum)|0);
   $$pn = $78;$base$0 = $79;
  } else {
   $80 = (_adjust_varargs($L,$48,$n$0$lcssa)|0);
   $81 = HEAP32[$0>>2]|0;
   $$pn = $81;$base$0 = $80;
  }
  $$01$in = (($$pn) + ($4)|0);
  $82 = (($L) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = ($85|0)==(0|0);
  if ($86) {
   $87 = (_luaE_extendCI($L)|0);
   $88 = $87;
  } else {
   $88 = $85;
  }
  HEAP32[$82>>2] = $88;
  $89 = $nresults&65535;
  $90 = (($88) + 16|0);
  HEAP16[$90>>1] = $89;
  HEAP32[$88>>2] = $$01$in;
  $91 = (($88) + 24|0);
  $base$0$c = $base$0;
  HEAP32[$91>>2] = $base$0$c;
  $92 = HEAP8[$60>>0]|0;
  $93 = $92&255;
  $94 = (($base$0) + ($93<<4)|0);
  $95 = (($88) + 4|0);
  HEAP32[$95>>2] = $94;
  $96 = (($48) + 12|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($88) + 28|0);
  HEAP32[$98>>2] = $97;
  $99 = (($88) + 18|0);
  HEAP8[$99>>0] = 1;
  $100 = HEAP32[$95>>2]|0;
  HEAP32[$49>>2] = $100;
  $101 = (($L) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + 12|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)>(0);
  if ($105) {
   _luaC_step($L);
  }
  $106 = (($L) + 40|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107 & 1;
  $109 = ($108<<24>>24)==(0);
  if ($109) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  _callhook($L,$88);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $f$0 = HEAP32[$f$0$in>>2]|0;
 $10 = (($L) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($L) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = ($16|0)<(336);
 if ($17) {
  _luaD_growstack($L,20);
 }
 $18 = (($L) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (_luaE_extendCI($L)|0);
  $24 = $23;
 } else {
  $24 = $21;
 }
 HEAP32[$18>>2] = $24;
 $25 = $nresults&65535;
 $26 = (($24) + 16|0);
 HEAP16[$26>>1] = $25;
 $27 = HEAP32[$0>>2]|0;
 $28 = (($27) + ($4)|0);
 HEAP32[$24>>2] = $28;
 $29 = HEAP32[$12>>2]|0;
 $30 = (($29) + 320|0);
 $31 = (($24) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($24) + 18|0);
 HEAP8[$32>>0] = 0;
 $33 = (($L) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)>(0);
 if ($37) {
  _luaC_step($L);
 }
 $38 = (($L) + 40|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if (!($41)) {
  _luaD_hook($L,0,-1);
 }
 $42 = (FUNCTION_TABLE_ii[$f$0 & 255]($L)|0);
 $43 = HEAP32[$12>>2]|0;
 $44 = (0 - ($42))|0;
 $45 = (($43) + ($44<<4)|0);
 (_luaD_poscall($L,$45)|0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaD_poscall($L,$firstResult) {
 $L = $L|0;
 $firstResult = $firstResult|0;
 var $$0 = 0, $$1 = 0, $$25 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$11 = 0;
 var $res$04 = 0, $res$1$lcssa = 0, $res$12 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 6;
 $6 = ($5|0)==(0);
 if ($6) {
  $$1 = $firstResult;
 } else {
  $7 = $4 & 2;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $firstResult;
  } else {
   $9 = (($L) + 28|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $firstResult;
   $12 = $10;
   $13 = (($11) - ($12))|0;
   _luaD_hook($L,1,-1);
   $14 = HEAP32[$9>>2]|0;
   $15 = (($14) + ($13)|0);
   $$0 = $15;
  }
  $16 = (($1) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($L) + 20|0);
  HEAP32[$20>>2] = $19;
  $$1 = $$0;
 }
 $21 = HEAP32[$1>>2]|0;
 $22 = (($1) + 16|0);
 $23 = HEAP16[$22>>1]|0;
 $24 = $23 << 16 >> 16;
 $25 = (($1) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$0>>2] = $26;
 $27 = (($L) + 8|0);
 $28 = ($23<<16>>16)==(0);
 L7: do {
  if ($28) {
   $res$1$lcssa = $21;
  } else {
   $$25 = $$1;$i$03 = $24;$res$04 = $21;
   while(1) {
    $30 = HEAP32[$27>>2]|0;
    $31 = ($$25>>>0)<($30>>>0);
    if (!($31)) {
     break;
    }
    $32 = (($$25) + 16|0);
    $33 = (($res$04) + 16|0);
    $34 = $$25;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = (($34) + 4)|0;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = $res$04;
    $41 = $40;
    HEAP32[$41>>2] = $36;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $39;
    $44 = (($$25) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($res$04) + 8|0);
    HEAP32[$46>>2] = $45;
    $47 = (($i$03) + -1)|0;
    $48 = ($47|0)==(0);
    if ($48) {
     $res$1$lcssa = $33;
     break L7;
    } else {
     $$25 = $32;$i$03 = $47;$res$04 = $33;
    }
   }
   $29 = ($i$03|0)>(0);
   if ($29) {
    $i$11 = $i$03;$res$12 = $res$04;
    while(1) {
     $49 = (($i$11) + -1)|0;
     $50 = (($res$12) + 16|0);
     $51 = (($res$12) + 8|0);
     HEAP32[$51>>2] = 0;
     $52 = ($49|0)>(0);
     if ($52) {
      $i$11 = $49;$res$12 = $50;
     } else {
      break;
     }
    }
    $scevgep = (($res$04) + ($i$03<<4)|0);
    $res$1$lcssa = $scevgep;
   } else {
    $res$1$lcssa = $res$04;
   }
  }
 } while(0);
 $53 = (($L) + 8|0);
 HEAP32[$53>>2] = $res$1$lcssa;
 $54 = (($24) + 1)|0;
 STACKTOP = sp;return ($54|0);
}
function _adjust_varargs($L,$p,$actual) {
 $L = $L|0;
 $p = $p|0;
 $actual = $actual|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 76|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($L) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 4;
 $11 = (($p) + 78|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($10|0)>($13|0);
 if (!($14)) {
  _luaD_growstack($L,$13);
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($1<<24>>24)==(0);
 if ($16) {
  STACKTOP = sp;return ($15|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $$sum = (($i$01) - ($actual))|0;
  $17 = (($15) + ($$sum<<4)|0);
  $18 = HEAP32[$5>>2]|0;
  $19 = (($18) + 16|0);
  HEAP32[$5>>2] = $19;
  $20 = $17;
  $21 = $20;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + 4)|0;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = $18;
  $27 = $26;
  HEAP32[$27>>2] = $22;
  $28 = (($26) + 4)|0;
  $29 = $28;
  HEAP32[$29>>2] = $25;
  $30 = ((($15) + ($$sum<<4)|0) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($18) + 8|0);
  HEAP32[$32>>2] = $31;
  HEAP32[$30>>2] = 0;
  $33 = (($i$01) + 1)|0;
  $34 = ($33|0)<($2|0);
  if ($34) {
   $i$01 = $33;
  } else {
   break;
  }
 }
 STACKTOP = sp;return ($15|0);
}
function _callhook($L,$ci) {
 $L = $L|0;
 $ci = $ci|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $hook$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ci) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$0>>2] = $2;
 $3 = (($ci) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 18|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $hook$0 = 0;
 } else {
  $9 = (($4) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -4|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 63;
  $14 = ($13|0)==(30);
  if ($14) {
   $15 = (($ci) + 18|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = $16&255;
   $18 = $17 | 64;
   $19 = $18&255;
   HEAP8[$15>>0] = $19;
   $hook$0 = 4;
  } else {
   $hook$0 = 0;
  }
 }
 _luaD_hook($L,$hook$0,-1);
 $20 = HEAP32[$0>>2]|0;
 $21 = (($20) + -4|0);
 HEAP32[$0>>2] = $21;
 STACKTOP = sp;return;
}
function _tryfuncTM($L,$func) {
 $L = $L|0;
 $func = $func|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaT_gettmbyobj($L,$func,16)|0);
 $1 = (($L) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $func;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = (($0) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 15;
 $9 = ($8|0)==(6);
 if (!($9)) {
  _luaG_typeerror($L,$func,4560);
  // unreachable;
 }
 $10 = (($L) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)>($func>>>0);
 if ($12) {
  $p$01 = $11;
  while(1) {
   $13 = (($p$01) + -16|0);
   $14 = $13;
   $15 = $14;
   $16 = HEAP32[$15>>2]|0;
   $17 = (($14) + 4)|0;
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = $p$01;
   $21 = $20;
   HEAP32[$21>>2] = $16;
   $22 = (($20) + 4)|0;
   $23 = $22;
   HEAP32[$23>>2] = $19;
   $24 = (($p$01) + -8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($p$01) + 8|0);
   HEAP32[$26>>2] = $25;
   $27 = ($13>>>0)>($func>>>0);
   if ($27) {
    $p$01 = $13;
   } else {
    break;
   }
  }
 }
 $28 = HEAP32[$10>>2]|0;
 $29 = (($28) + 16|0);
 HEAP32[$10>>2] = $29;
 $30 = (($L) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31;
 $33 = $29;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)<(16);
 if ($35) {
  _luaD_growstack($L,0);
 }
 $36 = HEAP32[$1>>2]|0;
 $37 = (($36) + ($5)|0);
 $38 = $0;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $37;
 $45 = $44;
 HEAP32[$45>>2] = $40;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $43;
 $48 = HEAP32[$6>>2]|0;
 $$sum = (($5) + 8)|0;
 $49 = (($36) + ($$sum)|0);
 HEAP32[$49>>2] = $48;
 STACKTOP = sp;return ($37|0);
}
function _luaD_call($L,$func,$nResults,$allowyield) {
 $L = $L|0;
 $func = $func|0;
 $nResults = $nResults|0;
 $allowyield = $allowyield|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($L) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 $3 = ($2&65535)>(199);
 if ($3) {
  $4 = ($2<<16>>16)==(200);
  if ($4) {
   _luaG_runerror($L,4280,$vararg_buffer);
   // unreachable;
  }
  $5 = ($2&65535)>(224);
  if ($5) {
   _luaD_throw($L,6);
   // unreachable;
  }
 }
 $6 = ($allowyield|0)!=(0);
 if (!($6)) {
  $7 = (($L) + 36|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = (($8) + 1)<<16>>16;
  HEAP16[$7>>1] = $9;
 }
 $10 = (_luaD_precall($L,$func,$nResults)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _luaV_execute($L);
 }
 if ($6) {
  $15 = HEAP16[$0>>1]|0;
  $16 = (($15) + -1)<<16>>16;
  HEAP16[$0>>1] = $16;
  STACKTOP = sp;return;
 }
 $12 = (($L) + 36|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = (($13) + -1)<<16>>16;
 HEAP16[$12>>1] = $14;
 $15 = HEAP16[$0>>1]|0;
 $16 = (($15) + -1)<<16>>16;
 HEAP16[$0>>1] = $16;
 STACKTOP = sp;return;
}
function _lua_resume($L,$from,$nargs) {
 $L = $L|0;
 $from = $from|0;
 $nargs = $nargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $status$03 = 0, $status$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = ($from|0)==(0|0);
 if ($2) {
  $8 = 1;
 } else {
  $3 = (($from) + 38|0);
  $4 = HEAP16[$3>>1]|0;
  $5 = $4&65535;
  $6 = (($5) + 1)|0;
  $phitmp = $6&65535;
  $8 = $phitmp;
 }
 $7 = (($L) + 38|0);
 HEAP16[$7>>1] = $8;
 HEAP16[$0>>1] = 0;
 $9 = (($L) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (0 - ($nargs))|0;
 $12 = (($10) + ($11<<4)|0);
 $13 = (_luaD_rawrunprotected($L,21,$12)|0);
 $14 = ($13|0)==(-1);
 L4: do {
  if ($14) {
   $status$1 = 2;
  } else {
   $15 = ($13>>>0)>(1);
   if ($15) {
    $status$03 = $13;
    while(1) {
     $16 = (_recover($L,$status$03)|0);
     $17 = ($16|0)==(0);
     if ($17) {
      break;
     }
     $18 = (_luaD_rawrunprotected($L,22,0)|0);
     $19 = ($18>>>0)>(1);
     if ($19) {
      $status$03 = $18;
     } else {
      $status$1 = $18;
      break L4;
     }
    }
    $20 = $status$03&255;
    $21 = (($L) + 6|0);
    HEAP8[$21>>0] = $20;
    $22 = HEAP32[$9>>2]|0;
    _seterrorobj($L,$status$03,$22);
    $23 = HEAP32[$9>>2]|0;
    $24 = (($L) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($25) + 4|0);
    HEAP32[$26>>2] = $23;
    $status$1 = $status$03;
   } else {
    $status$1 = $13;
   }
  }
 } while(0);
 HEAP16[$0>>1] = $1;
 $27 = HEAP16[$7>>1]|0;
 $28 = (($27) + -1)<<16>>16;
 HEAP16[$7>>1] = $28;
 STACKTOP = sp;return ($status$1|0);
}
function _resume($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $firstArg$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 38|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($L) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1&65535)>(199);
 if ($4) {
  _resume_error($L,4280,$ud);
  // unreachable;
 }
 $5 = (($L) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 if ((($6<<24>>24) == 0)) {
  $7 = (($L) + 72|0);
  $8 = ($3|0)==($7|0);
  if (!($8)) {
   _resume_error($L,4488,$ud);
   // unreachable;
  }
  $9 = (($ud) + -16|0);
  $10 = (_luaD_precall($L,$9,-1)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   STACKTOP = sp;return;
  }
  _luaV_execute($L);
  STACKTOP = sp;return;
 } else if ((($6<<24>>24) == 1)) {
  HEAP8[$5>>0] = 0;
  $12 = (($L) + 28|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($3) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($13) + ($15)|0);
  HEAP32[$3>>2] = $16;
  $17 = (($3) + 18|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $21 = (($3) + 28|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0|0);
   if ($23) {
    $firstArg$0 = $ud;
   } else {
    $24 = (($3) + 37|0);
    HEAP8[$24>>0] = 1;
    $25 = HEAP8[$17>>0]|0;
    $26 = $25&255;
    $27 = $26 | 8;
    $28 = $27&255;
    HEAP8[$17>>0] = $28;
    $29 = HEAP32[$21>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 255]($L)|0);
    $31 = (($L) + 8|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (0 - ($30))|0;
    $34 = (($32) + ($33<<4)|0);
    $firstArg$0 = $34;
   }
   (_luaD_poscall($L,$firstArg$0)|0);
  } else {
   _luaV_execute($L);
  }
  _unroll($L,0);
  STACKTOP = sp;return;
 } else {
  _resume_error($L,4528,$ud);
  // unreachable;
 }
}
function _recover($L,$status) {
 $L = $L|0;
 $status = $status|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_findpcall($L)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($L) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($0) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($3) + ($5)|0);
 _luaF_close($L,$6);
 _seterrorobj($L,$status,$6);
 $7 = (($L) + 16|0);
 HEAP32[$7>>2] = $0;
 $8 = (($0) + 36|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (($L) + 41|0);
 HEAP8[$10>>0] = $9;
 $11 = (($L) + 36|0);
 HEAP16[$11>>1] = 0;
 _luaD_shrinkstack($L);
 $12 = (($0) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($L) + 68|0);
 HEAP32[$14>>2] = $13;
 $15 = (($0) + 18|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 | 32;
 $19 = $18&255;
 HEAP8[$15>>0] = $19;
 $20 = $status&255;
 $21 = (($0) + 37|0);
 HEAP8[$21>>0] = $20;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _unroll($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 72|0);
 $3 = ($1|0)==($2|0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  $5 = $1;
 }
 while(1) {
  $4 = (($5) + 18|0);
  $6 = HEAP8[$4>>0]|0;
  $7 = $6 & 1;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   _finishCcall($L);
  } else {
   _luaV_finishOp($L);
   _luaV_execute($L);
  }
  $9 = HEAP32[$0>>2]|0;
  $10 = ($9|0)==($2|0);
  if ($10) {
   break;
  } else {
   $5 = $9;
  }
 }
 STACKTOP = sp;return;
}
function _seterrorobj($L,$errcode,$oldtop) {
 $L = $L|0;
 $errcode = $errcode|0;
 $oldtop = $oldtop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($errcode|0) == 6)) {
  $9 = (_luaS_newlstr($L,4464,23)|0);
  HEAP32[$oldtop>>2] = $9;
  $10 = (($9) + 4|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $12 | 64;
  $14 = (($oldtop) + 8|0);
  HEAP32[$14>>2] = $13;
 } else if ((($errcode|0) == 4)) {
  $0 = (($L) + 12|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($1) + 180|0);
  $3 = HEAP32[$2>>2]|0;
  HEAP32[$oldtop>>2] = $3;
  $4 = (($3) + 4|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5&255;
  $7 = $6 | 64;
  $8 = (($oldtop) + 8|0);
  HEAP32[$8>>2] = $7;
 } else {
  $15 = (($L) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -16|0);
  $18 = $17;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) + 4)|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = $oldtop;
  $25 = $24;
  HEAP32[$25>>2] = $20;
  $26 = (($24) + 4)|0;
  $27 = $26;
  HEAP32[$27>>2] = $23;
  $28 = (($16) + -8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($oldtop) + 8|0);
  HEAP32[$30>>2] = $29;
 }
 $31 = (($oldtop) + 16|0);
 $32 = (($L) + 8|0);
 HEAP32[$32>>2] = $31;
 STACKTOP = sp;return;
}
function _lua_yieldk($L,$nresults,$ctx,$k) {
 $L = $L|0;
 $nresults = $nresults|0;
 $ctx = $ctx|0;
 $k = $k|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 36|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = ($3<<16>>16)==(0);
 if (!($4)) {
  $5 = (($L) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 172|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==($L|0);
  if ($9) {
   _luaG_runerror($L,4352,$vararg_buffer1);
   // unreachable;
  } else {
   _luaG_runerror($L,4304,$vararg_buffer1);
   // unreachable;
  }
 }
 $10 = (($L) + 6|0);
 HEAP8[$10>>0] = 1;
 $11 = HEAP32[$1>>2]|0;
 $12 = (($L) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $11;
 $15 = $13;
 $16 = (($14) - ($15))|0;
 $17 = (($1) + 20|0);
 HEAP32[$17>>2] = $16;
 $18 = (($1) + 18|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if (!($21)) {
  STACKTOP = sp;return 0;
 }
 $22 = (($1) + 28|0);
 HEAP32[$22>>2] = $k;
 $23 = ($k|0)==(0|0);
 if ($23) {
  $25 = (($L) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $$sum = $nresults ^ -1;
  $27 = (($26) + ($$sum<<4)|0);
  HEAP32[$1>>2] = $27;
  _luaD_throw($L,1);
  // unreachable;
 }
 $24 = (($1) + 24|0);
 HEAP32[$24>>2] = $ctx;
 $25 = (($L) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $$sum = $nresults ^ -1;
 $27 = (($26) + ($$sum<<4)|0);
 HEAP32[$1>>2] = $27;
 _luaD_throw($L,1);
 // unreachable;
 return 0|0;
}
function _luaD_pcall($L,$func,$u,$old_top,$ef) {
 $L = $L|0;
 $func = $func|0;
 $u = $u|0;
 $old_top = $old_top|0;
 $ef = $ef|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 41|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($L) + 36|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = (($L) + 68|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$6>>2] = $ef;
 $8 = (_luaD_rawrunprotected($L,$func,$u)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$6>>2] = $7;
  STACKTOP = sp;return ($8|0);
 }
 $10 = (($L) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($old_top)|0);
 _luaF_close($L,$12);
 _seterrorobj($L,$8,$12);
 HEAP32[$0>>2] = $1;
 HEAP8[$2>>0] = $3;
 HEAP16[$4>>1] = $5;
 _luaD_shrinkstack($L);
 HEAP32[$6>>2] = $7;
 STACKTOP = sp;return ($8|0);
}
function _luaD_protectedparser($L,$z,$name,$mode) {
 $L = $L|0;
 $z = $z|0;
 $name = $name|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $p = sp;
 $0 = (($L) + 36|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = (($1) + 1)<<16>>16;
 HEAP16[$0>>1] = $2;
 HEAP32[$p>>2] = $z;
 $3 = (($p) + 56|0);
 HEAP32[$3>>2] = $name;
 $4 = (($p) + 52|0);
 HEAP32[$4>>2] = $mode;
 $5 = (($p) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = (($p) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = (($p) + 28|0);
 HEAP32[$7>>2] = 0;
 $8 = (($p) + 36|0);
 HEAP32[$8>>2] = 0;
 $9 = (($p) + 40|0);
 HEAP32[$9>>2] = 0;
 $10 = (($p) + 48|0);
 HEAP32[$10>>2] = 0;
 $11 = (($p) + 4|0);
 HEAP32[$11>>2] = 0;
 $12 = (($p) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = (($L) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($L) + 28|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = (($L) + 68|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (_luaD_pcall($L,23,$p,$19,$21)|0);
 $23 = HEAP32[$11>>2]|0;
 $24 = HEAP32[$12>>2]|0;
 $25 = (_luaM_realloc_($L,$23,$24,0)|0);
 HEAP32[$11>>2] = $25;
 HEAP32[$12>>2] = 0;
 $26 = HEAP32[$5>>2]|0;
 $27 = HEAP32[$6>>2]|0;
 $28 = $27 << 1;
 (_luaM_realloc_($L,$26,$28,0)|0);
 $29 = HEAP32[$7>>2]|0;
 $30 = HEAP32[$8>>2]|0;
 $31 = $30 << 4;
 (_luaM_realloc_($L,$29,$31,0)|0);
 $32 = HEAP32[$9>>2]|0;
 $33 = HEAP32[$10>>2]|0;
 $34 = $33 << 4;
 (_luaM_realloc_($L,$32,$34,0)|0);
 $35 = HEAP16[$0>>1]|0;
 $36 = (($35) + -1)<<16>>16;
 HEAP16[$0>>1] = $36;
 STACKTOP = sp;return ($22|0);
}
function _f_parser($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cl$0 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ud>>2]|0;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 HEAP32[$0>>2] = $2;
 $3 = ($1|0)==(0);
 $4 = HEAP32[$ud>>2]|0;
 if ($3) {
  $10 = (_luaZ_fill($4)|0);
  $11 = $10;
 } else {
  $5 = (($4) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 1|0);
  HEAP32[$5>>2] = $7;
  $8 = HEAP8[$6>>0]|0;
  $9 = $8&255;
  $11 = $9;
 }
 $12 = ($11|0)==(27);
 $13 = (($ud) + 52|0);
 $14 = HEAP32[$13>>2]|0;
 if ($12) {
  _checkmode($L,$14,4400);
  $15 = HEAP32[$ud>>2]|0;
  $16 = (($ud) + 4|0);
  $17 = (($ud) + 56|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (_luaU_undump($L,$15,$16,$18)|0);
  $cl$0 = $19;
 } else {
  _checkmode($L,$14,4408);
  $20 = HEAP32[$ud>>2]|0;
  $21 = (($ud) + 4|0);
  $22 = (($ud) + 16|0);
  $23 = (($ud) + 56|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (_luaY_parser($L,$20,$21,$22,$24,$11)|0);
  $cl$0 = $25;
 }
 $26 = (($cl$0) + 6|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  STACKTOP = sp;return;
 }
 $29 = (($cl$0) + 16|0);
 $30 = (($cl$0) + 5|0);
 $i$01 = 0;
 while(1) {
  $31 = (_luaF_newupval($L)|0);
  $32 = (($29) + ($i$01<<2)|0);
  HEAP32[$32>>2] = $31;
  $33 = (($31) + 5|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34 & 3;
  $36 = ($35<<24>>24)==(0);
  if (!($36)) {
   $37 = HEAP8[$30>>0]|0;
   $38 = $37 & 4;
   $39 = ($38<<24>>24)==(0);
   if (!($39)) {
    _luaC_barrier_($L,$cl$0,$31);
   }
  }
  $40 = (($i$01) + 1)|0;
  $41 = HEAP8[$26>>0]|0;
  $42 = $41&255;
  $43 = ($40|0)<($42|0);
  if ($43) {
   $i$01 = $40;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _checkmode($L,$mode,$x) {
 $L = $L|0;
 $mode = $mode|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($mode|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP8[$x>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (_strchr($mode,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  HEAP32[$vararg_buffer>>2] = $x;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $mode;
  (_luaO_pushfstring($L,4416,$vararg_buffer)|0);
  _luaD_throw($L,3);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _finishCcall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 18|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 16;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $7 = $4 & 239;
  $8 = $7&255;
  HEAP8[$2>>0] = $8;
  $9 = (($1) + 32|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($L) + 68|0);
  HEAP32[$11>>2] = $10;
 }
 $12 = (($1) + 16|0);
 $13 = HEAP16[$12>>1]|0;
 $14 = ($13<<16>>16)==(-1);
 if ($14) {
  $15 = HEAP32[$0>>2]|0;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($L) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($17>>>0)<($19>>>0);
  if ($20) {
   HEAP32[$16>>2] = $19;
  }
 }
 $21 = HEAP8[$2>>0]|0;
 $22 = $21 & 32;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $24 = (($1) + 37|0);
  HEAP8[$24>>0] = 1;
 }
 $25 = HEAP8[$2>>0]|0;
 $26 = $25&255;
 $27 = $26 & 199;
 $28 = $27 | 8;
 $29 = $28&255;
 HEAP8[$2>>0] = $29;
 $30 = (($1) + 28|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (FUNCTION_TABLE_ii[$31 & 255]($L)|0);
 $33 = (($L) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (0 - ($32))|0;
 $36 = (($34) + ($35<<4)|0);
 (_luaD_poscall($L,$36)|0);
 STACKTOP = sp;return;
}
function _findpcall($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ci$0 = 0, $ci$01 = 0, $ci$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $ci$01 = HEAP32[$0>>2]|0;
 $1 = ($ci$01|0)==(0|0);
 L1: do {
  if ($1) {
   $$0 = 0;
  } else {
   $ci$02 = $ci$01;
   while(1) {
    $4 = (($ci$02) + 18|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = $5 & 16;
    $7 = ($6<<24>>24)==(0);
    if (!($7)) {
     $$0 = $ci$02;
     break L1;
    }
    $2 = (($ci$02) + 8|0);
    $ci$0 = HEAP32[$2>>2]|0;
    $3 = ($ci$0|0)==(0|0);
    if ($3) {
     $$0 = 0;
     break;
    } else {
     $ci$02 = $ci$0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _resume_error($L,$msg,$firstArg) {
 $L = $L|0;
 $msg = $msg|0;
 $firstArg = $firstArg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 HEAP32[$0>>2] = $firstArg;
 $1 = (_luaS_new($L,$msg)|0);
 HEAP32[$firstArg>>2] = $1;
 $2 = (($1) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 64;
 $6 = (($firstArg) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$0>>2]|0;
 $8 = (($7) + 16|0);
 HEAP32[$0>>2] = $8;
 _luaD_throw($L,-1);
 // unreachable;
}
function _luaU_dump($L,$f,$w,$data,$strip) {
 $L = $L|0;
 $f = $f|0;
 $w = $w|0;
 $data = $data|0;
 $strip = $strip|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $D = sp;
 HEAP32[$D>>2] = $L;
 $0 = (($D) + 4|0);
 HEAP32[$0>>2] = $w;
 $1 = (($D) + 8|0);
 HEAP32[$1>>2] = $data;
 $2 = (($D) + 12|0);
 HEAP32[$2>>2] = $strip;
 $3 = (($D) + 16|0);
 HEAP32[$3>>2] = 0;
 _DumpHeader($D);
 _DumpFunction($f,$D);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _DumpHeader($D) {
 $D = $D|0;
 var $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $h = sp;
 _luaU_header($h);
 _DumpBlock($h,18,$D);
 STACKTOP = sp;return;
}
function _DumpFunction($f,$D) {
 $f = $f|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 _DumpInt($1,$D);
 $2 = (($f) + 68|0);
 $3 = HEAP32[$2>>2]|0;
 _DumpInt($3,$D);
 $4 = (($f) + 76|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 _DumpChar($6,$D);
 $7 = (($f) + 77|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 _DumpChar($9,$D);
 $10 = (($f) + 78|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 _DumpChar($12,$D);
 $13 = (($f) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($f) + 48|0);
 $16 = HEAP32[$15>>2]|0;
 _DumpVector($14,$16,$D);
 _DumpConstants($f,$D);
 _DumpUpvalues($f,$D);
 _DumpDebug($f,$D);
 STACKTOP = sp;return;
}
function _DumpInt($x,$D) {
 $x = $x|0;
 $D = $D|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $x;
 _DumpBlock($0,4,$D);
 STACKTOP = sp;return;
}
function _DumpChar($y,$D) {
 $y = $y|0;
 $D = $D|0;
 var $0 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 $0 = $y&255;
 HEAP8[$x>>0] = $0;
 _DumpBlock($x,1,$D);
 STACKTOP = sp;return;
}
function _DumpVector($b,$n,$D) {
 $b = $b|0;
 $n = $n|0;
 $D = $D|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _DumpInt($n,$D);
 $0 = $n << 2;
 _DumpBlock($b,$0,$D);
 STACKTOP = sp;return;
}
function _DumpConstants($f,$D) {
 $f = $f|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond6 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 44|0);
 $1 = HEAP32[$0>>2]|0;
 _DumpInt($1,$D);
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($f) + 8|0);
  $i$02 = 0;
  while(1) {
   $4 = HEAP32[$3>>2]|0;
   $5 = (($4) + ($i$02<<4)|0);
   $6 = ((($4) + ($i$02<<4)|0) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 15;
   _DumpChar($8,$D);
   $9 = HEAP32[$6>>2]|0;
   $10 = $9 & 15;
   if ((($10|0) == 1)) {
    $11 = HEAP32[$5>>2]|0;
    _DumpChar($11,$D);
   } else if ((($10|0) == 4)) {
    $13 = HEAP32[$5>>2]|0;
    _DumpString($13,$D);
   } else if ((($10|0) == 3)) {
    $12 = +HEAPF64[$5>>3];
    _DumpNumber($12,$D);
   }
   $14 = (($i$02) + 1)|0;
   $exitcond6 = ($14|0)==($1|0);
   if ($exitcond6) {
    break;
   } else {
    $i$02 = $14;
   }
  }
 }
 $15 = (($f) + 56|0);
 $16 = HEAP32[$15>>2]|0;
 _DumpInt($16,$D);
 $17 = ($16|0)>(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($f) + 16|0);
 $i$11 = 0;
 while(1) {
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($i$11<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  _DumpFunction($21,$D);
  $22 = (($i$11) + 1)|0;
  $exitcond = ($22|0)==($16|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $22;
  }
 }
 STACKTOP = sp;return;
}
function _DumpUpvalues($f,$D) {
 $f = $f|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 _DumpInt($1,$D);
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($f) + 28|0);
 $i$01 = 0;
 while(1) {
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($4) + ($i$01<<3)|0) + 4|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  _DumpChar($7,$D);
  $8 = HEAP32[$3>>2]|0;
  $9 = ((($8) + ($i$01<<3)|0) + 5|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  _DumpChar($11,$D);
  $12 = (($i$01) + 1)|0;
  $exitcond = ($12|0)==($1|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $12;
  }
 }
 STACKTOP = sp;return;
}
function _DumpDebug($f,$D) {
 $f = $f|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $exitcond6 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($D) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (($f) + 36|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $4;
 } else {
  $5 = 0;
 }
 _DumpString($5,$D);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = (($f) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 } else {
  $12 = 0;
 }
 $10 = (($f) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 _DumpVector($11,$12,$D);
 $13 = HEAP32[$0>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = (($f) + 60|0);
  $16 = HEAP32[$15>>2]|0;
  _DumpInt($16,$D);
  $17 = ($16|0)>(0);
  if ($17) {
   $18 = (($f) + 24|0);
   $i$02 = 0;
   while(1) {
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + (($i$02*12)|0)|0);
    $21 = HEAP32[$20>>2]|0;
    _DumpString($21,$D);
    $22 = HEAP32[$18>>2]|0;
    $23 = ((($22) + (($i$02*12)|0)|0) + 4|0);
    $24 = HEAP32[$23>>2]|0;
    _DumpInt($24,$D);
    $25 = HEAP32[$18>>2]|0;
    $26 = ((($25) + (($i$02*12)|0)|0) + 8|0);
    $27 = HEAP32[$26>>2]|0;
    _DumpInt($27,$D);
    $28 = (($i$02) + 1)|0;
    $exitcond6 = ($28|0)==($16|0);
    if ($exitcond6) {
     break;
    } else {
     $i$02 = $28;
    }
   }
  }
 } else {
  _DumpInt(0,$D);
 }
 $29 = HEAP32[$0>>2]|0;
 $30 = ($29|0)==(0);
 if (!($30)) {
  _DumpInt(0,$D);
  STACKTOP = sp;return;
 }
 $31 = (($f) + 40|0);
 $32 = HEAP32[$31>>2]|0;
 _DumpInt($32,$D);
 $33 = ($32|0)>(0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $34 = (($f) + 28|0);
 $i$11 = 0;
 while(1) {
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + ($i$11<<3)|0);
  $37 = HEAP32[$36>>2]|0;
  _DumpString($37,$D);
  $38 = (($i$11) + 1)|0;
  $exitcond = ($38|0)==($32|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $38;
  }
 }
 STACKTOP = sp;return;
}
function _DumpString($s,$D) {
 $s = $s|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $size = 0, $size1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $size = sp + 4|0;
 $size1 = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  HEAP32[$size>>2] = 0;
  _DumpBlock($size,4,$D);
  STACKTOP = sp;return;
 } else {
  $1 = (($s) + 12|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + 1)|0;
  HEAP32[$size1>>2] = $3;
  _DumpBlock($size1,4,$D);
  $4 = (($s) + 16|0);
  $5 = HEAP32[$size1>>2]|0;
  _DumpBlock($4,$5,$D);
  STACKTOP = sp;return;
 }
}
function _DumpBlock($b,$size,$D) {
 $b = $b|0;
 $size = $size|0;
 $D = $D|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($D) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (($D) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$D>>2]|0;
 $6 = (($D) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_iiiii[$4 & 31]($5,$b,$size,$7)|0);
 HEAP32[$0>>2] = $8;
 STACKTOP = sp;return;
}
function _DumpNumber($x,$D) {
 $x = +$x;
 $D = $D|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAPF64[$0>>3] = $x;
 _DumpBlock($0,8,$D);
 STACKTOP = sp;return;
}
function _luaF_newCclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 4;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,38,$1,0,0)|0);
 $3 = $n&255;
 $4 = (($2) + 6|0);
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return ($2|0);
}
function _luaF_newLclosure($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $n << 2;
 $1 = (($0) + 16)|0;
 $2 = (_luaC_newobj($L,6,$1,0,0)|0);
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = $n&255;
 $5 = (($2) + 6|0);
 HEAP8[$5>>0] = $4;
 $6 = ($n|0)==(0);
 if ($6) {
  STACKTOP = sp;return ($2|0);
 }
 $7 = (($2) + 16|0);
 $$in = $n;
 while(1) {
  $8 = (($$in) + -1)|0;
  $9 = (($7) + ($8<<2)|0);
  HEAP32[$9>>2] = 0;
  $10 = ($8|0)==(0);
  if ($10) {
   break;
  } else {
   $$in = $8;
  }
 }
 STACKTOP = sp;return ($2|0);
}
function _luaF_newupval($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,10,32,0,0)|0);
 $1 = (($0) + 16|0);
 $2 = (($0) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($0) + 24|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function _luaF_findupval($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pp$0$lcssa = 0, $pp$03 = 0, $pp$03$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 L1: do {
  if ($4) {
   $pp$0$lcssa = $2;
  } else {
   $6 = $3;$pp$03 = $2;
   while(1) {
    $8 = (($6) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($9>>>0)<($level>>>0);
    if ($10) {
     $pp$0$lcssa = $pp$03;
     break L1;
    }
    $11 = ($9|0)==($level|0);
    if ($11) {
     break;
    }
    $5 = HEAP32[$6>>2]|0;
    $7 = ($5|0)==(0|0);
    if ($7) {
     $pp$0$lcssa = $6;
     break L1;
    } else {
     $pp$03$phi = $6;$6 = $5;$pp$03 = $pp$03$phi;
    }
   }
   $12 = (($6) + 5|0);
   $13 = HEAP8[$12>>0]|0;
   $14 = $13&255;
   $15 = $14 ^ 3;
   $16 = (($1) + 60|0);
   $17 = HEAP8[$16>>0]|0;
   $18 = $17&255;
   $19 = $18 ^ 3;
   $20 = $19 & $15;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $22 = $15&255;
   HEAP8[$12>>0] = $22;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $23 = (_luaC_newobj($L,10,32,$pp$0$lcssa,0)|0);
 $24 = (($23) + 8|0);
 HEAP32[$24>>2] = $level;
 $25 = (($1) + 112|0);
 $26 = (($23) + 16|0);
 HEAP32[$26>>2] = $25;
 $27 = (($1) + 128|0);
 $28 = (($27) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = (($29) + 16|0);
 HEAP32[$31>>2] = $23;
 HEAP32[$28>>2] = $23;
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _luaF_freeupval($L,$uv) {
 $L = $L|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($uv) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($uv) + 16|0);
 $3 = ($1|0)==($2|0);
 if (!($3)) {
  _unlinkupval($uv);
 }
 (_luaM_realloc_($L,$uv,32,0)|0);
 STACKTOP = sp;return;
}
function _unlinkupval($uv) {
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($uv) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 HEAP32[$4>>2] = $1;
 $5 = HEAP32[$2>>2]|0;
 $6 = HEAP32[$0>>2]|0;
 $7 = (($6) + 16|0);
 $8 = (($7) + 4|0);
 HEAP32[$8>>2] = $5;
 STACKTOP = sp;return;
}
function _luaF_close($L,$level) {
 $L = $L|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($1) + 60|0);
 $6 = (($1) + 68|0);
 $8 = $3;
 while(1) {
  $7 = (($8) + 8|0);
  $9 = HEAP32[$7>>2]|0;
  $10 = ($9>>>0)<($level>>>0);
  if ($10) {
   label = 8;
   break;
  }
  $11 = HEAP32[$8>>2]|0;
  HEAP32[$2>>2] = $11;
  $12 = (($8) + 5|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 ^ 3;
  $16 = HEAP8[$5>>0]|0;
  $17 = $16&255;
  $18 = $17 ^ 3;
  $19 = $18 & $15;
  $20 = ($19|0)==(0);
  if ($20) {
   _luaF_freeupval($L,$8);
  } else {
   _unlinkupval($8);
   $21 = HEAP32[$7>>2]|0;
   $22 = (($8) + 16|0);
   $23 = $21;
   $24 = $23;
   $25 = HEAP32[$24>>2]|0;
   $26 = (($23) + 4)|0;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = $22;
   $30 = $29;
   HEAP32[$30>>2] = $25;
   $31 = (($29) + 4)|0;
   $32 = $31;
   HEAP32[$32>>2] = $28;
   $33 = (($21) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($8) + 24|0);
   HEAP32[$35>>2] = $34;
   HEAP32[$7>>2] = $22;
   $36 = HEAP32[$6>>2]|0;
   HEAP32[$8>>2] = $36;
   HEAP32[$6>>2] = $8;
   _luaC_checkupvalcolor($1,$8);
  }
  $37 = HEAP32[$2>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   label = 8;
   break;
  } else {
   $8 = $37;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _luaF_newproto($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,9,80,0,0)|0);
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 44|0);
 HEAP32[$2>>2] = 0;
 $3 = (($0) + 16|0);
 HEAP32[$3>>2] = 0;
 $4 = (($0) + 56|0);
 HEAP32[$4>>2] = 0;
 $5 = (($0) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($0) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = (($0) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = (($0) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = (($0) + 52|0);
 HEAP32[$9>>2] = 0;
 $10 = (($0) + 28|0);
 HEAP32[$10>>2] = 0;
 $11 = (($0) + 40|0);
 HEAP32[$11>>2] = 0;
 $12 = (($0) + 76|0);
 HEAP8[$12>>0] = 0;
 $13 = (($0) + 77|0);
 HEAP8[$13>>0] = 0;
 $14 = (($0) + 78|0);
 HEAP8[$14>>0] = 0;
 $15 = (($0) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = (($0) + 60|0);
 HEAP32[$16>>2] = 0;
 $17 = (($0) + 64|0);
 HEAP32[$17>>2] = 0;
 $18 = (($0) + 68|0);
 HEAP32[$18>>2] = 0;
 $19 = (($0) + 36|0);
 HEAP32[$19>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function _luaF_freeproto($L,$f) {
 $L = $L|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 << 2;
 (_luaM_realloc_($L,$1,$4,0)|0);
 $5 = (($f) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($f) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = (($f) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($f) + 44|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 << 4;
 (_luaM_realloc_($L,$11,$14,0)|0);
 $15 = (($f) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($f) + 52|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 << 2;
 (_luaM_realloc_($L,$16,$19,0)|0);
 $20 = (($f) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($f) + 60|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23*12)|0;
 (_luaM_realloc_($L,$21,$24,0)|0);
 $25 = (($f) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($f) + 40|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28 << 3;
 (_luaM_realloc_($L,$26,$29,0)|0);
 (_luaM_realloc_($L,$f,80,0)|0);
 STACKTOP = sp;return;
}
function _luaF_getlocalname($f,$local_number,$pc) {
 $f = $f|0;
 $local_number = $local_number|0;
 $pc = $pc|0;
 var $$0 = 0, $$013 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($f) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $$013 = $local_number;$i$04 = 0;
 while(1) {
  $5 = ((($4) + (($i$04*12)|0)|0) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)>($pc|0);
  if ($7) {
   $$0 = 0;
   label = 8;
   break;
  }
  $8 = ((($4) + (($i$04*12)|0)|0) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>($pc|0);
  if ($10) {
   $11 = (($$013) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    label = 6;
    break;
   } else {
    $$1 = $11;
   }
  } else {
   $$1 = $$013;
  }
  $16 = (($i$04) + 1)|0;
  $17 = HEAP32[$0>>2]|0;
  $18 = ($16|0)<($17|0);
  if ($18) {
   $$013 = $$1;$i$04 = $16;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $13 = (($4) + (($i$04*12)|0)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 16|0);
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaC_barrier_($L,$o,$v) {
 $L = $L|0;
 $o = $o|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(2);
 if ($4) {
  _reallymarkobject($1,$v);
  STACKTOP = sp;return;
 } else {
  $5 = (($o) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = $7 & 184;
  $9 = (($1) + 60|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 & 3;
  $13 = $12 | $8;
  $14 = $13&255;
  HEAP8[$5>>0] = $14;
  STACKTOP = sp;return;
 }
}
function _reallymarkobject($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 252;
 $4 = $3&255;
 HEAP8[$0>>0] = $4;
 $5 = (($o) + 4|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 switch ($7|0) {
 case 20: case 4:  {
  $8 = (($o) + 12|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 17)|0;
  $size$0 = $10;
  break;
 }
 case 10:  {
  $28 = (($o) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 & 64;
  $33 = ($32|0)==(0);
  if (!($33)) {
   $34 = HEAP32[$29>>2]|0;
   $35 = (($34) + 5|0);
   $36 = HEAP8[$35>>0]|0;
   $37 = $36 & 3;
   $38 = ($37<<24>>24)==(0);
   if (!($38)) {
    _reallymarkobject($g,$34);
   }
  }
  $39 = HEAP32[$28>>2]|0;
  $40 = (($o) + 16|0);
  $41 = ($39|0)==($40|0);
  if ($41) {
   $size$0 = 32;
  } else {
   STACKTOP = sp;return;
  }
  break;
 }
 case 38:  {
  $45 = (($g) + 84|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($o) + 8|0);
  HEAP32[$47>>2] = $46;
  HEAP32[$45>>2] = $o;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $48 = (($g) + 84|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($o) + 24|0);
  $$c = $49;
  HEAP32[$50>>2] = $$c;
  HEAP32[$48>>2] = $o;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $42 = (($g) + 84|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($o) + 8|0);
  HEAP32[$44>>2] = $43;
  HEAP32[$42>>2] = $o;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $11 = (($o) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = (($12) + 5|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 3;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    _reallymarkobject($g,$12);
   }
  }
  $18 = (($o) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   $21 = (($19) + 5|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 3;
   $24 = ($23<<24>>24)==(0);
   if (!($24)) {
    _reallymarkobject($g,$19);
   }
  }
  $25 = (($o) + 16|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 24)|0;
  $size$0 = $27;
  break;
 }
 case 8:  {
  $51 = (($g) + 84|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($o) + 60|0);
  HEAP32[$53>>2] = $52;
  HEAP32[$51>>2] = $o;
  STACKTOP = sp;return;
  break;
 }
 case 9:  {
  $54 = (($g) + 84|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($o) + 72|0);
  HEAP32[$56>>2] = $55;
  HEAP32[$54>>2] = $o;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $57 = HEAP8[$0>>0]|0;
 $58 = $57&255;
 $59 = $58 | 4;
 $60 = $59&255;
 HEAP8[$0>>0] = $60;
 $61 = (($g) + 16|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($62) + ($size$0))|0;
 HEAP32[$61>>2] = $63;
 STACKTOP = sp;return;
}
function _luaC_barrierback_($L,$o) {
 $L = $L|0;
 $o = $o|0;
 var $$c = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($o) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 251;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 88|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($o) + 24|0);
 $$c = $8;
 HEAP32[$9>>2] = $$c;
 HEAP32[$7>>2] = $o;
 STACKTOP = sp;return;
}
function _luaC_barrierproto_($L,$p,$c) {
 $L = $L|0;
 $p = $p|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $11 = (($L) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($p) + 5|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $15 & 251;
  $17 = $16&255;
  HEAP8[$13>>0] = $17;
  $18 = (($12) + 88|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($p) + 72|0);
  HEAP32[$20>>2] = $19;
  HEAP32[$18>>2] = $p;
  STACKTOP = sp;return;
 }
 $3 = (($c) + 5|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4 & 3;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = (($p) + 5|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8 & 4;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 _luaC_barrier_($L,$p,$c);
 STACKTOP = sp;return;
}
function _luaC_checkupvalcolor($g,$uv) {
 $g = $g|0;
 $uv = $uv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($uv) + 5|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = $2 & 7;
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($g) + 62|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(2);
 if (!($7)) {
  $8 = (($g) + 61|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9&255)<(2);
  if (!($10)) {
   $27 = $2 & 184;
   $28 = (($g) + 60|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = $29&255;
   $31 = $30 & 3;
   $32 = $31 | $27;
   $33 = $32&255;
   HEAP8[$0>>0] = $33;
   STACKTOP = sp;return;
  }
 }
 $11 = HEAP8[$0>>0]|0;
 $12 = $11&255;
 $13 = $12 & 187;
 $14 = $13 | 4;
 $15 = $14&255;
 HEAP8[$0>>0] = $15;
 $16 = (($uv) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 64;
 $21 = ($20|0)==(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = HEAP32[$17>>2]|0;
 $23 = (($22) + 5|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 3;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  STACKTOP = sp;return;
 }
 _reallymarkobject($g,$22);
 STACKTOP = sp;return;
}
function _luaC_newobj($L,$tt,$sz,$list,$offset) {
 $L = $L|0;
 $tt = $tt|0;
 $sz = $sz|0;
 $list = $list|0;
 $offset = $offset|0;
 var $$list = 0, $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $tt & 15;
 $3 = (_luaM_realloc_($L,0,$2,$sz)|0);
 $4 = (($3) + ($offset)|0);
 $5 = ($list|0)==(0|0);
 $6 = (($1) + 68|0);
 $$list = $5 ? $6 : $list;
 $7 = (($1) + 60|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = $9 & 3;
 $11 = $10&255;
 $$sum = (($offset) + 5)|0;
 $12 = (($3) + ($$sum)|0);
 HEAP8[$12>>0] = $11;
 $13 = $tt&255;
 $$sum1 = (($offset) + 4)|0;
 $14 = (($3) + ($$sum1)|0);
 HEAP8[$14>>0] = $13;
 $15 = HEAP32[$$list>>2]|0;
 HEAP32[$4>>2] = $15;
 HEAP32[$$list>>2] = $4;
 STACKTOP = sp;return ($4|0);
}
function _luaC_checkfinalizer($L,$o,$mt) {
 $L = $L|0;
 $o = $o|0;
 $mt = $mt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$not = 0;
 var $or$cond3 = 0, $p$0 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($o) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 24;
 $or$cond$not = ($4<<24>>24)!=(0);
 $5 = ($mt|0)==(0|0);
 $or$cond3 = $or$cond$not | $5;
 if ($or$cond3) {
  STACKTOP = sp;return;
 }
 $6 = (($mt) + 6|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 4;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($1) + 192|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_luaT_gettm($mt,2,$11)|0);
 $phitmp = ($12|0)==(0|0);
 if ($phitmp) {
  STACKTOP = sp;return;
 }
 $13 = (($1) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==($o|0);
 if ($15) {
  $16 = (_sweeptolive($L,$14,0)|0);
  HEAP32[$13>>2] = $16;
 }
 $17 = (($1) + 68|0);
 $p$0 = $17;
 while(1) {
  $18 = HEAP32[$p$0>>2]|0;
  $19 = ($18|0)==($o|0);
  if ($19) {
   break;
  } else {
   $p$0 = $18;
  }
 }
 $20 = HEAP32[$o>>2]|0;
 HEAP32[$p$0>>2] = $20;
 $21 = (($1) + 72|0);
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$o>>2] = $22;
 HEAP32[$21>>2] = $o;
 $23 = HEAP8[$2>>0]|0;
 $24 = $23&255;
 $25 = $24 | 16;
 $26 = $25&255;
 HEAP8[$2>>0] = $26;
 $27 = (($1) + 61|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28&255)<(2);
 if ($29) {
  $37 = $25 & 191;
  $38 = $37&255;
  HEAP8[$2>>0] = $38;
  STACKTOP = sp;return;
 } else {
  $30 = $25 & 184;
  $31 = (($1) + 60|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33 & 3;
  $35 = $34 | $30;
  $36 = $35&255;
  HEAP8[$2>>0] = $36;
  STACKTOP = sp;return;
 }
}
function _sweeptolive($L,$p,$n) {
 $L = $L|0;
 $p = $p|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $i$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $p;$i$0 = 0;
 while(1) {
  $0 = (($i$0) + 1)|0;
  $1 = (_sweeplist($L,$$0,1)|0);
  $2 = ($1|0)==($p|0);
  if ($2) {
   $$0 = $1;$i$0 = $0;
  } else {
   break;
  }
 }
 $3 = ($n|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return ($1|0);
 }
 $4 = HEAP32[$n>>2]|0;
 $5 = (($4) + ($0))|0;
 HEAP32[$n>>2] = $5;
 STACKTOP = sp;return ($1|0);
}
function _luaC_changemode($L,$mode) {
 $L = $L|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($4|0)==($mode|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = ($mode|0)==(2);
 if ($6) {
  _luaC_runtilstate($L,1);
  $7 = (($1) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($1) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($8))|0;
  $12 = (($1) + 20|0);
  HEAP32[$12>>2] = $11;
  HEAP8[$2>>0] = 2;
  STACKTOP = sp;return;
 } else {
  HEAP8[$2>>0] = 0;
  (_entersweep($L)|0);
  _luaC_runtilstate($L,-29);
  STACKTOP = sp;return;
 }
}
function _luaC_runtilstate($L,$statesmask) {
 $L = $L|0;
 $statesmask = $statesmask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = $5 & $statesmask;
 $7 = ($6|0)==(0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 while(1) {
  (_singlestep($L)|0);
  $8 = HEAP8[$2>>0]|0;
  $9 = $8&255;
  $10 = 1 << $9;
  $11 = $10 & $statesmask;
  $12 = ($11|0)==(0);
  if (!($12)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _entersweep($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $n = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$n>>2] = 0;
 $2 = (($1) + 61|0);
 HEAP8[$2>>0] = 2;
 $3 = (($1) + 64|0);
 HEAP32[$3>>2] = 0;
 $4 = (($1) + 72|0);
 $5 = (_sweeptolive($L,$4,$n)|0);
 $6 = (($1) + 80|0);
 HEAP32[$6>>2] = $5;
 $7 = (($1) + 68|0);
 $8 = (_sweeptolive($L,$7,$n)|0);
 $9 = (($1) + 76|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$n>>2]|0;
 STACKTOP = sp;return ($10|0);
}
function _luaC_freeallobjects($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _separatetobefnz($L,1);
 _callallpendingfinalizers($L,0);
 $2 = (($1) + 60|0);
 HEAP8[$2>>0] = 3;
 $3 = (($1) + 62|0);
 HEAP8[$3>>0] = 0;
 $4 = (($1) + 72|0);
 (_sweeplist($L,$4,-3)|0);
 $5 = (($1) + 68|0);
 (_sweeplist($L,$5,-3)|0);
 $6 = (($1) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($1) + 24|0);
 $i$01 = 0;
 while(1) {
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + ($i$01<<2)|0);
  (_sweeplist($L,$11,-3)|0);
  $12 = (($i$01) + 1)|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = ($12|0)<($13|0);
  if ($14) {
   $i$01 = $12;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _separatetobefnz($L,$all) {
 $L = $L|0;
 $all = $all|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lastnext$0 = 0, $lastnext$1$ph5 = 0, $lastnext$13 = 0, $lastnext$13$phi = 0, $or$cond = 0, $p$0$ph4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 104|0);
 $lastnext$0 = $2;
 while(1) {
  $3 = HEAP32[$lastnext$0>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  } else {
   $lastnext$0 = $3;
  }
 }
 $5 = (($1) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ($all|0)==(0);
 $23 = $6;$lastnext$1$ph5 = $lastnext$0;$p$0$ph4 = $5;
 L7: while(1) {
  $10 = $23;$lastnext$13 = $lastnext$1$ph5;
  while(1) {
   $9 = (($10) + 5|0);
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 & 3;
   $13 = ($12<<24>>24)==(0);
   $or$cond = $13 & $8;
   if ($or$cond) {
    break;
   }
   $16 = $11&255;
   $17 = $16 | 8;
   $18 = $17&255;
   HEAP8[$9>>0] = $18;
   $19 = HEAP32[$10>>2]|0;
   HEAP32[$p$0$ph4>>2] = $19;
   $20 = HEAP32[$lastnext$13>>2]|0;
   HEAP32[$10>>2] = $20;
   HEAP32[$lastnext$13>>2] = $10;
   $21 = HEAP32[$p$0$ph4>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 9;
    break L7;
   } else {
    $lastnext$13$phi = $10;$10 = $21;$lastnext$13 = $lastnext$13$phi;
   }
  }
  $14 = HEAP32[$10>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   label = 9;
   break;
  } else {
   $23 = $14;$lastnext$1$ph5 = $lastnext$13;$p$0$ph4 = $10;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
}
function _callallpendingfinalizers($L,$propagateerrors) {
 $L = $L|0;
 $propagateerrors = $propagateerrors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 104|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $6 = $3;
 }
 while(1) {
  $5 = (($6) + 5|0);
  $7 = HEAP8[$5>>0]|0;
  $8 = $7&255;
  $9 = $8 & 191;
  $10 = $9&255;
  HEAP8[$5>>0] = $10;
  _GCTM($L,$propagateerrors);
  $11 = HEAP32[$2>>2]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   break;
  } else {
   $6 = $11;
  }
 }
 STACKTOP = sp;return;
}
function _sweeplist($L,$p,$count) {
 $L = $L|0;
 $p = $p|0;
 $count = $count|0;
 var $$ = 0, $$0 = 0, $$01$ph14 = 0, $$01$ph15 = 0, $$01$ph17 = 0, $$02$ph16 = 0, $$0210 = 0, $$3 = 0, $$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 60|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 ^ 3;
 $6 = (($1) + 62|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(2);
 $9 = $4 & 3;
 $$ = $8 ? 255 : 184;
 $$3 = $8 ? 64 : $9;
 $$4 = $8 ? 64 : 0;
 $10 = HEAP32[$p>>2]|0;
 $11 = ($10|0)==(0|0);
 L1: do {
  if ($11) {
   $$01$ph15 = $p;
   label = 3;
  } else {
   $$01$ph17 = $p;$$02$ph16 = $count;
   while(1) {
    $$0210 = $$02$ph16;
    while(1) {
     $13 = (($$0210) + -1)|0;
     $14 = ($$0210|0)==(0);
     $15 = HEAP32[$$01$ph17>>2]|0;
     if ($14) {
      $$01$ph14 = $$01$ph17;$35 = $15;
      break L1;
     }
     $16 = (($15) + 5|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = $18 ^ 3;
     $20 = $19 & $5;
     $21 = ($20|0)==(0);
     if (!($21)) {
      break;
     }
     $22 = HEAP32[$15>>2]|0;
     HEAP32[$$01$ph17>>2] = $22;
     _freeobj($L,$15);
     $23 = HEAP32[$$01$ph17>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      $$01$ph15 = $$01$ph17;
      label = 3;
      break L1;
     } else {
      $$0210 = $13;
     }
    }
    $25 = $18 & $$4;
    $26 = ($25|0)==(0);
    if (!($26)) {
     $$0 = 0;
     break;
    }
    $27 = (($15) + 4|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = ($28<<24>>24)==(8);
    if ($29) {
     _sweepthread($L,$15);
    }
    $30 = $18 & $$;
    $31 = $30 | $$3;
    $32 = $31&255;
    HEAP8[$16>>0] = $32;
    $33 = HEAP32[$15>>2]|0;
    $34 = ($33|0)==(0|0);
    if ($34) {
     $$01$ph15 = $15;
     label = 3;
     break L1;
    } else {
     $$01$ph17 = $15;$$02$ph16 = $13;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 if ((label|0) == 3) {
  $12 = HEAP32[$$01$ph15>>2]|0;
  $$01$ph14 = $$01$ph15;$35 = $12;
 }
 $36 = ($35|0)==(0|0);
 $37 = $36 ? 0 : $$01$ph14;
 $$0 = $37;
 STACKTOP = sp;return ($$0|0);
}
function _singlestep($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$01 = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mt = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 61|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 switch ($4|0) {
 case 2:  {
  $5 = (($1) + 64|0);
  $6 = (($1) + 32|0);
  $7 = (($1) + 24|0);
  $i$01 = 0;
  while(1) {
   $29 = HEAP32[$5>>2]|0;
   $30 = (($29) + ($i$01))|0;
   $31 = HEAP32[$6>>2]|0;
   $32 = ($30|0)<($31|0);
   if (!($32)) {
    $i$0$lcssa = $i$01;
    break;
   }
   $33 = HEAP32[$7>>2]|0;
   $34 = (($33) + ($30<<2)|0);
   (_sweeplist($L,$34,-3)|0);
   $35 = (($i$01) + 1)|0;
   $36 = ($35|0)<(80);
   if ($36) {
    $i$01 = $35;
   } else {
    $i$0$lcssa = $35;
    break;
   }
  }
  $37 = (($1) + 64|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + ($i$0$lcssa))|0;
  HEAP32[$37>>2] = $39;
  $40 = (($1) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)<($41|0);
  if (!($42)) {
   HEAP8[$2>>0] = 3;
  }
  $43 = ($i$0$lcssa*5)|0;
  $$0 = $43;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $48 = (($1) + 76|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)==(0|0);
  if ($50) {
   $52 = (($1) + 172|0);
   $53 = HEAP32[$52>>2]|0;
   HEAP32[$mt>>2] = $53;
   (_sweeplist($L,$mt,1)|0);
   _checkSizes($L);
   HEAP8[$2>>0] = 5;
   $$0 = 5;
   STACKTOP = sp;return ($$0|0);
  } else {
   $51 = (_sweeplist($L,$49,80)|0);
   HEAP32[$48>>2] = $51;
   $$0 = 400;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 0:  {
  $13 = (($1) + 84|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   HEAP8[$2>>0] = 1;
   $20 = (($1) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($1) + 20|0);
   HEAP32[$22>>2] = $21;
   $23 = (_atomic($L)|0);
   $24 = HEAP32[$22>>2]|0;
   $25 = (($24) + ($23))|0;
   HEAP32[$22>>2] = $25;
   $26 = (_entersweep($L)|0);
   $27 = ($26*5)|0;
   $28 = (($27) + ($23))|0;
   $$0 = $28;
   STACKTOP = sp;return ($$0|0);
  } else {
   $16 = (($1) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   _propagatemark($1);
   $18 = HEAP32[$16>>2]|0;
   $19 = (($18) - ($17))|0;
   $$0 = $19;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 case 5:  {
  $8 = (($1) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $9 << 2;
  $11 = (($1) + 16|0);
  HEAP32[$11>>2] = $10;
  _restartcollection($1);
  HEAP8[$2>>0] = 0;
  $12 = HEAP32[$11>>2]|0;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 3:  {
  $44 = (($1) + 80|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   HEAP8[$2>>0] = 4;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $47 = (_sweeplist($L,$45,80)|0);
   HEAP32[$44>>2] = $47;
   $$0 = 400;
   STACKTOP = sp;return ($$0|0);
  }
  break;
 }
 default: {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return 0|0;
}
function _luaC_forcestep($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(2);
 if ($4) {
  _generationalcollection($L);
 } else {
  _incstep($L);
 }
 $5 = (($1) + 61|0);
 $6 = (($1) + 104|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  STACKTOP = sp;return;
 } else {
  $i$02 = 0;
 }
 while(1) {
  $9 = ($i$02|0)<(4);
  if (!($9)) {
   $10 = HEAP8[$5>>0]|0;
   $11 = ($10<<24>>24)==(5);
   if (!($11)) {
    label = 8;
    break;
   }
  }
  _GCTM($L,1);
  $12 = (($i$02) + 1)|0;
  $13 = HEAP32[$6>>2]|0;
  $14 = ($13|0)==(0|0);
  if ($14) {
   label = 8;
   break;
  } else {
   $i$02 = $12;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
}
function _generationalcollection($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   _luaC_fullgc($L,0);
   $5 = (($1) + 8|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = (($1) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + ($6))|0;
   HEAP32[$2>>2] = $9;
  } else {
   _luaC_runtilstate($L,32);
   $10 = (($1) + 61|0);
   HEAP8[$10>>0] = 0;
   $11 = (($1) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($1) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + ($12))|0;
   $16 = (($3>>>0) / 100)&-1;
   $17 = (($1) + 160|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = Math_imul($18, $16)|0;
   $20 = ($15>>>0)>($19>>>0);
   if ($20) {
    HEAP32[$2>>2] = 0;
    break;
   } else {
    HEAP32[$2>>2] = $3;
    break;
   }
  }
 } while(0);
 $21 = (($1) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($1) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22))|0;
 _setpause($1,$25);
 STACKTOP = sp;return;
}
function _incstep($L) {
 $L = $L|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $debt$0 = 0, $debt$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 164|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(40);
 $$ = $6 ? 40 : $5;
 $7 = (($3|0) / 200)&-1;
 $8 = (($7) + 1)|0;
 $9 = (2147483644 / ($$|0))&-1;
 $10 = ($8|0)<($9|0);
 if ($10) {
  $11 = Math_imul($8, $$)|0;
  $debt$0$ph = $11;
 } else {
  $debt$0$ph = 2147483644;
 }
 $12 = (($1) + 61|0);
 $debt$0 = $debt$0$ph;
 while(1) {
  $13 = (_singlestep($L)|0);
  $14 = (($debt$0) - ($13))|0;
  $15 = ($14|0)>(-1600);
  if (!($15)) {
   break;
  }
  $16 = HEAP8[$12>>0]|0;
  $17 = ($16<<24>>24)==(5);
  if ($17) {
   break;
  } else {
   $debt$0 = $14;
  }
 }
 $18 = (($1) + 61|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(5);
 if ($20) {
  $21 = (($1) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  _setpause($1,$22);
  STACKTOP = sp;return;
 } else {
  $23 = (($14|0) / ($$|0))&-1;
  $24 = ($23*200)|0;
  _luaE_setdebt($1,$24);
  STACKTOP = sp;return;
 }
}
function _GCTM($L,$propagateerrors) {
 $L = $L|0;
 $propagateerrors = $propagateerrors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $status$0 = 0, $v = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp + 16|0;
 $v = sp;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_udata2finalize($1)|0);
 HEAP32[$v>>2] = $2;
 $3 = (($2) + 4|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = $5 | 64;
 $7 = (($v) + 8|0);
 HEAP32[$7>>2] = $6;
 $8 = (_luaT_gettmbyobj($L,$v,2)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  STACKTOP = sp;return;
 }
 $10 = (($8) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 15;
 $13 = ($12|0)==(6);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($L) + 41|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($1) + 63|0);
 $17 = HEAP8[$16>>0]|0;
 HEAP8[$14>>0] = 0;
 HEAP8[$16>>0] = 0;
 $18 = (($L) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $8;
 $21 = $20;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($20) + 4)|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = $19;
 $27 = $26;
 HEAP32[$27>>2] = $22;
 $28 = (($26) + 4)|0;
 $29 = $28;
 HEAP32[$29>>2] = $25;
 $30 = HEAP32[$10>>2]|0;
 $31 = (($19) + 8|0);
 HEAP32[$31>>2] = $30;
 $32 = HEAP32[$18>>2]|0;
 $33 = (($32) + 16|0);
 $34 = $v;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = $33;
 $41 = $40;
 HEAP32[$41>>2] = $36;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = HEAP32[$7>>2]|0;
 $45 = (($32) + 24|0);
 HEAP32[$45>>2] = $44;
 $46 = HEAP32[$18>>2]|0;
 $47 = (($46) + 32|0);
 HEAP32[$18>>2] = $47;
 $48 = (($L) + 28|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $46;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (_luaD_pcall($L,24,0,$52,0)|0);
 HEAP8[$14>>0] = $15;
 HEAP8[$16>>0] = $17;
 $54 = ($53|0)==(0);
 $55 = ($propagateerrors|0)==(0);
 $or$cond = $54 | $55;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $56 = ($53|0)==(2);
 if (!($56)) {
  $status$0 = $53;
  _luaD_throw($L,$status$0);
  // unreachable;
 }
 $57 = HEAP32[$18>>2]|0;
 $58 = (($57) + -8|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 & 15;
 $61 = ($60|0)==(4);
 if ($61) {
  $62 = (($57) + -16|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + 16|0);
  $65 = $64;
 } else {
  $65 = 4568;
 }
 HEAP32[$vararg_buffer>>2] = $65;
 (_luaO_pushfstring($L,4584,$vararg_buffer)|0);
 $status$0 = 5;
 _luaD_throw($L,$status$0);
 // unreachable;
}
function _luaC_step($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 63|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  _luaE_setdebt($1,-1600);
  STACKTOP = sp;return;
 } else {
  _luaC_forcestep($L);
  STACKTOP = sp;return;
 }
}
function _luaC_fullgc($L,$isemergency) {
 $L = $L|0;
 $isemergency = $isemergency|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($isemergency|0)!=(0);
 if ($4) {
  HEAP8[$2>>0] = 1;
  label = 4;
 } else {
  HEAP8[$2>>0] = 0;
  _callallpendingfinalizers($L,1);
  $$pr = HEAP8[$2>>0]|0;
  $5 = ($$pr<<24>>24)==(2);
  if ($5) {
   label = 5;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $6 = (($1) + 61|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7&255)<(2);
  if ($8) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  (_entersweep($L)|0);
 }
 _luaC_runtilstate($L,32);
 _luaC_runtilstate($L,-33);
 _luaC_runtilstate($L,32);
 $9 = ($3<<24>>24)==(2);
 if ($9) {
  _luaC_runtilstate($L,1);
 }
 HEAP8[$2>>0] = $3;
 $10 = (($1) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11))|0;
 _setpause($1,$14);
 if ($4) {
  STACKTOP = sp;return;
 }
 _callallpendingfinalizers($L,1);
 STACKTOP = sp;return;
}
function _setpause($g,$estimate) {
 $g = $g|0;
 $estimate = $estimate|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($estimate|0) / 100)&-1;
 $1 = (($g) + 156|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (2147483644 / ($0|0))&-1;
 $4 = ($2|0)<($3|0);
 if ($4) {
  $5 = Math_imul($2, $0)|0;
  $11 = $5;
 } else {
  $11 = 2147483644;
 }
 $6 = (($g) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($g) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($11))|0;
 $12 = (($10) + ($9))|0;
 _luaE_setdebt($g,$12);
 STACKTOP = sp;return;
}
function _udata2finalize($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = (($g) + 68|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$1>>2] = $4;
 HEAP32[$3>>2] = $1;
 $5 = (($1) + 5|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 & 239;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 $10 = (($g) + 61|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = ($11&255)<(2);
 if ($12) {
  STACKTOP = sp;return ($1|0);
 }
 $13 = $7 & 168;
 $14 = (($g) + 60|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 & 3;
 $18 = $17 | $13;
 $19 = $18&255;
 HEAP8[$5>>0] = $19;
 STACKTOP = sp;return ($1|0);
}
function _dothecall($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -32|0);
 _luaD_call($L,$2,0,0);
 STACKTOP = sp;return;
}
function _restartcollection($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 84|0);
 $1 = (($g) + 172|0);
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;HEAP32[$0+16>>2]=0|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = (($2) + 5|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = $5 & 3;
  $7 = ($6<<24>>24)==(0);
  if (!($7)) {
   _reallymarkobject($g,$2);
  }
 }
 $8 = (($g) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 64;
 $11 = ($10|0)==(0);
 if ($11) {
  _markmt($g);
  _markbeingfnz($g);
  STACKTOP = sp;return;
 }
 $12 = (($g) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 5|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 3;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  _markmt($g);
  _markbeingfnz($g);
  STACKTOP = sp;return;
 }
 _reallymarkobject($g,$13);
 _markmt($g);
 _markbeingfnz($g);
 STACKTOP = sp;return;
}
function _propagatemark($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 5|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 | 4;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = (($1) + 4|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 switch ($9|0) {
 case 9:  {
  $28 = (($1) + 72|0);
  $29 = HEAP32[$28>>2]|0;
  HEAP32[$0>>2] = $29;
  $30 = (_traverseproto($g,$1)|0);
  $size$0 = $30;
  break;
 }
 case 6:  {
  $13 = (($1) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  HEAP32[$0>>2] = $14;
  $15 = (_traverseLclosure($g,$1)|0);
  $size$0 = $15;
  break;
 }
 case 5:  {
  $10 = (($1) + 24|0);
  $11 = HEAP32[$10>>2]|0;
  HEAP32[$0>>2] = $11;
  $12 = (_traversetable($g,$1)|0);
  $size$0 = $12;
  break;
 }
 case 38:  {
  $16 = (($1) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$0>>2] = $17;
  $18 = (_traverseCclosure($g,$1)|0);
  $size$0 = $18;
  break;
 }
 case 8:  {
  $19 = (($1) + 60|0);
  $20 = HEAP32[$19>>2]|0;
  HEAP32[$0>>2] = $20;
  $21 = (($g) + 88|0);
  $22 = HEAP32[$21>>2]|0;
  HEAP32[$19>>2] = $22;
  HEAP32[$21>>2] = $1;
  $23 = HEAP8[$2>>0]|0;
  $24 = $23&255;
  $25 = $24 & 251;
  $26 = $25&255;
  HEAP8[$2>>0] = $26;
  $27 = (_traversestack($g,$1)|0);
  $size$0 = $27;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
 $31 = (($g) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($size$0))|0;
 HEAP32[$31>>2] = $33;
 STACKTOP = sp;return;
}
function _atomic($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($L|0)==(0|0);
 if (!($4)) {
  $5 = (($L) + 5|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6 & 3;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   _reallymarkobject($1,$L);
  }
 }
 $9 = (($1) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 64;
 $12 = ($11|0)==(0);
 if (!($12)) {
  $13 = (($1) + 40|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 5|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & 3;
  $18 = ($17<<24>>24)==(0);
  if (!($18)) {
   _reallymarkobject($1,$14);
  }
 }
 _markmt($1);
 _remarkupvals($1);
 _propagateall($1);
 $19 = HEAP32[$2>>2]|0;
 $20 = (($19) - ($3))|0;
 _retraversegrays($1);
 $21 = HEAP32[$2>>2]|0;
 $22 = (($20) - ($21))|0;
 _convergeephemerons($1);
 $23 = (($1) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 _clearvalues($1,$24,0);
 $25 = (($1) + 100|0);
 $26 = HEAP32[$25>>2]|0;
 _clearvalues($1,$26,0);
 $27 = HEAP32[$23>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = HEAP32[$2>>2]|0;
 $30 = (($22) + ($29))|0;
 _separatetobefnz($L,0);
 _markbeingfnz($1);
 _propagateall($1);
 $31 = HEAP32[$2>>2]|0;
 $32 = (($30) - ($31))|0;
 _convergeephemerons($1);
 $33 = (($1) + 96|0);
 $34 = HEAP32[$33>>2]|0;
 _clearkeys($1,$34);
 $35 = HEAP32[$25>>2]|0;
 _clearkeys($1,$35);
 $36 = HEAP32[$23>>2]|0;
 _clearvalues($1,$36,$27);
 $37 = HEAP32[$25>>2]|0;
 _clearvalues($1,$37,$28);
 $38 = (($1) + 60|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $40 ^ 3;
 $42 = $41&255;
 HEAP8[$38>>0] = $42;
 $43 = HEAP32[$2>>2]|0;
 $44 = (($32) + ($43))|0;
 STACKTOP = sp;return ($44|0);
}
function _checkSizes($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 62|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(1);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($1) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6|0) / 2)&-1;
 $8 = (($1) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)<($7>>>0);
 if ($10) {
  _luaS_resize($L,$7);
 }
 $11 = (($1) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($1) + 152|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (_luaM_realloc_($L,$12,$14,0)|0);
 HEAP32[$11>>2] = $15;
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _markmt($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 252|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   _reallymarkobject($g,$1);
  }
 }
 $7 = (($g) + 256|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($8) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 3;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   _reallymarkobject($g,$8);
  }
 }
 $14 = (($g) + 260|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  $17 = (($15) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 & 3;
  $20 = ($19<<24>>24)==(0);
  if (!($20)) {
   _reallymarkobject($g,$15);
  }
 }
 $21 = (($g) + 264|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = (($22) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 & 3;
  $27 = ($26<<24>>24)==(0);
  if (!($27)) {
   _reallymarkobject($g,$22);
  }
 }
 $28 = (($g) + 268|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  $31 = (($29) + 5|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & 3;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   _reallymarkobject($g,$29);
  }
 }
 $35 = (($g) + 272|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  $38 = (($36) + 5|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 & 3;
  $41 = ($40<<24>>24)==(0);
  if (!($41)) {
   _reallymarkobject($g,$36);
  }
 }
 $42 = (($g) + 276|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(0|0);
 if (!($44)) {
  $45 = (($43) + 5|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & 3;
  $48 = ($47<<24>>24)==(0);
  if (!($48)) {
   _reallymarkobject($g,$43);
  }
 }
 $49 = (($g) + 280|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)==(0|0);
 if (!($51)) {
  $52 = (($50) + 5|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53 & 3;
  $55 = ($54<<24>>24)==(0);
  if (!($55)) {
   _reallymarkobject($g,$50);
  }
 }
 $56 = (($g) + 284|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if ($58) {
  STACKTOP = sp;return;
 }
 $59 = (($57) + 5|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60 & 3;
 $62 = ($61<<24>>24)==(0);
 if ($62) {
  STACKTOP = sp;return;
 }
 _reallymarkobject($g,$57);
 STACKTOP = sp;return;
}
function _remarkupvals($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $uv$0 = 0, $uv$0$in = 0, $uv$0$in2 = 0, $uv$03 = 0, $uv$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 112|0);
 $1 = (($g) + 128|0);
 $uv$0$in2 = (($1) + 4|0);
 $uv$03 = HEAP32[$uv$0$in2>>2]|0;
 $2 = ($uv$03|0)==($0|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  $uv$04 = $uv$03;
 }
 while(1) {
  $3 = (($uv$04) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 7;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $7 = (($uv$04) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + 8|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10 & 64;
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = HEAP32[$8>>2]|0;
    $14 = (($13) + 5|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 & 3;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     _reallymarkobject($g,$13);
    }
   }
  }
  $18 = (($uv$04) + 16|0);
  $uv$0$in = (($18) + 4|0);
  $uv$0 = HEAP32[$uv$0$in>>2]|0;
  $19 = ($uv$0|0)==($0|0);
  if ($19) {
   break;
  } else {
   $uv$04 = $uv$0;
  }
 }
 STACKTOP = sp;return;
}
function _propagateall($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 while(1) {
  _propagatemark($g);
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _retraversegrays($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 92|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($g) + 88|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($g) + 96|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = 0;
 _propagateall($g);
 _propagatelist($g,$3);
 _propagatelist($g,$1);
 _propagatelist($g,$5);
 STACKTOP = sp;return;
}
function _convergeephemerons($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $changed$0$ph = 0, $next$0 = 0, $next$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 96|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  HEAP32[$0>>2] = 0;
  $changed$0$ph = 0;$next$0$ph = $1;
  L3: while(1) {
   $next$0 = $next$0$ph;
   while(1) {
    $2 = ($next$0|0)==(0|0);
    if ($2) {
     break L3;
    }
    $3 = (($next$0) + 24|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (_traverseephemeron($g,$next$0)|0);
    $6 = ($5|0)==(0);
    if ($6) {
     $next$0 = $4;
    } else {
     break;
    }
   }
   _propagateall($g);
   $changed$0$ph = 1;$next$0$ph = $4;
  }
  $7 = ($changed$0$ph|0)==(0);
  if ($7) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _clearvalues($g,$l,$f) {
 $g = $g|0;
 $l = $l|0;
 $f = $f|0;
 var $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $n$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==($f|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $$06 = $l;
 }
 while(1) {
  $1 = (($$06) + 7|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = 1 << $3;
  $5 = (($$06) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4<<5)|0);
  $8 = (($$06) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  if ($10) {
   $11 = (($$06) + 12|0);
   $i$01 = 0;
   while(1) {
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + ($i$01<<4)|0);
    $14 = (_iscleared($g,$13)|0);
    $15 = ($14|0)==(0);
    if (!($15)) {
     $16 = ((($12) + ($i$01<<4)|0) + 8|0);
     HEAP32[$16>>2] = 0;
    }
    $17 = (($i$01) + 1)|0;
    $18 = HEAP32[$8>>2]|0;
    $19 = ($17|0)<($18|0);
    if ($19) {
     $i$01 = $17;
    } else {
     break;
    }
   }
  }
  $20 = HEAP32[$5>>2]|0;
  $21 = ($20>>>0)<($7>>>0);
  if ($21) {
   $n$02 = $20;
   while(1) {
    $22 = (($n$02) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if (!($24)) {
     $25 = (_iscleared($g,$n$02)|0);
     $26 = ($25|0)==(0);
     if (!($26)) {
      HEAP32[$22>>2] = 0;
      _removeentry($n$02);
     }
    }
    $27 = (($n$02) + 32|0);
    $28 = ($27>>>0)<($7>>>0);
    if ($28) {
     $n$02 = $27;
    } else {
     break;
    }
   }
  }
  $29 = (($$06) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)==($f|0);
  if ($31) {
   break;
  } else {
   $$06 = $30;
  }
 }
 STACKTOP = sp;return;
}
function _markbeingfnz($g) {
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $o$0 = 0, $o$01 = 0, $o$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 104|0);
 $o$01 = HEAP32[$0>>2]|0;
 $1 = ($o$01|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($g) + 60|0);
 $o$02 = $o$01;
 while(1) {
  $3 = (($o$02) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 & 184;
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $9 = $8 & 3;
  $10 = $9 | $6;
  $11 = $10&255;
  HEAP8[$3>>0] = $11;
  _reallymarkobject($g,$o$02);
  $o$0 = HEAP32[$o$02>>2]|0;
  $12 = ($o$0|0)==(0|0);
  if ($12) {
   break;
  } else {
   $o$02 = $o$0;
  }
 }
 STACKTOP = sp;return;
}
function _clearkeys($g,$l) {
 $g = $g|0;
 $l = $l|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $$02 = $l;
 }
 while(1) {
  $1 = (($$02) + 7|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = 1 << $3;
  $5 = (($$02) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4<<5)|0);
  $8 = ($4|0)>(0);
  if ($8) {
   $n$01 = $6;
   while(1) {
    $9 = (($n$01) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ($10|0)==(0);
    if (!($11)) {
     $12 = (($n$01) + 16|0);
     $13 = (_iscleared($g,$12)|0);
     $14 = ($13|0)==(0);
     if (!($14)) {
      HEAP32[$9>>2] = 0;
      _removeentry($n$01);
     }
    }
    $15 = (($n$01) + 32|0);
    $16 = ($15>>>0)<($7>>>0);
    if ($16) {
     $n$01 = $15;
    } else {
     break;
    }
   }
  }
  $17 = (($$02) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   break;
  } else {
   $$02 = $18;
  }
 }
 STACKTOP = sp;return;
}
function _iscleared($g,$o) {
 $g = $g|0;
 $o = $o|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = $1 & 15;
   $5 = ($4|0)==(4);
   $6 = HEAP32[$o>>2]|0;
   if (!($5)) {
    $12 = (($6) + 5|0);
    $13 = HEAP8[$12>>0]|0;
    $14 = $13&255;
    $15 = $14 & 3;
    $$0 = $15;
    break;
   }
   $7 = ($6|0)==(0|0);
   if ($7) {
    $$0 = 0;
   } else {
    $8 = (($6) + 5|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = $9 & 3;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$0 = 0;
    } else {
     _reallymarkobject($g,$6);
     $$0 = 0;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _removeentry($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($n) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (($n) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 5|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 3;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  STACKTOP = sp;return;
 }
 HEAP32[$0>>2] = 11;
 STACKTOP = sp;return;
}
function _traverseephemeron($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hasclears$01 = 0;
 var $hasclears$1 = 0, $i$08 = 0, $marked$0$lcssa = 0, $marked$07 = 0, $marked$1 = 0, $marked$2$lcssa13 = 0, $marked$2$lcssa1416 = 0, $marked$24 = 0, $marked$3 = 0, $n$03 = 0, $prop$0$ = 0, $prop$02 = 0, $prop$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = (($h) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 $7 = (($h) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = (($h) + 12|0);
  $i$08 = 0;$marked$07 = 0;
  while(1) {
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11) + ($i$08<<4)|0) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 64;
   $15 = ($14|0)==(0);
   if ($15) {
    $marked$1 = $marked$07;
   } else {
    $16 = (($11) + ($i$08<<4)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 5|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 & 3;
    $21 = ($20<<24>>24)==(0);
    if ($21) {
     $marked$1 = $marked$07;
    } else {
     _reallymarkobject($g,$17);
     $marked$1 = 1;
    }
   }
   $22 = (($i$08) + 1)|0;
   $23 = HEAP32[$7>>2]|0;
   $24 = ($22|0)<($23|0);
   if ($24) {
    $i$08 = $22;$marked$07 = $marked$1;
   } else {
    $marked$0$lcssa = $marked$1;
    break;
   }
  }
 } else {
  $marked$0$lcssa = 0;
 }
 $25 = HEAP32[$4>>2]|0;
 $26 = ($25>>>0)<($6>>>0);
 if ($26) {
  $hasclears$01 = 0;$marked$24 = $marked$0$lcssa;$n$03 = $25;$prop$02 = 0;
  while(1) {
   $27 = (($n$03) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   do {
    if ($29) {
     _removeentry($n$03);
     $hasclears$1 = $hasclears$01;$marked$3 = $marked$24;$prop$1 = $prop$02;
    } else {
     $30 = (($n$03) + 16|0);
     $31 = (_iscleared($g,$30)|0);
     $32 = ($31|0)==(0);
     $33 = HEAP32[$27>>2]|0;
     $34 = $33 & 64;
     $35 = ($34|0)==(0);
     if (!($32)) {
      if ($35) {
       $hasclears$1 = 1;$marked$3 = $marked$24;$prop$1 = $prop$02;
       break;
      }
      $36 = HEAP32[$n$03>>2]|0;
      $37 = (($36) + 5|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 & 3;
      $40 = ($39<<24>>24)==(0);
      $prop$0$ = $40 ? $prop$02 : 1;
      $hasclears$1 = 1;$marked$3 = $marked$24;$prop$1 = $prop$0$;
      break;
     }
     if ($35) {
      $hasclears$1 = $hasclears$01;$marked$3 = $marked$24;$prop$1 = $prop$02;
     } else {
      $41 = HEAP32[$n$03>>2]|0;
      $42 = (($41) + 5|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43 & 3;
      $45 = ($44<<24>>24)==(0);
      if ($45) {
       $hasclears$1 = $hasclears$01;$marked$3 = $marked$24;$prop$1 = $prop$02;
      } else {
       _reallymarkobject($g,$41);
       $hasclears$1 = $hasclears$01;$marked$3 = 1;$prop$1 = $prop$02;
      }
     }
    }
   } while(0);
   $46 = (($n$03) + 32|0);
   $47 = ($46>>>0)<($6>>>0);
   if ($47) {
    $hasclears$01 = $hasclears$1;$marked$24 = $marked$3;$n$03 = $46;$prop$02 = $prop$1;
   } else {
    break;
   }
  }
  $48 = ($prop$1|0)==(0);
  if (!($48)) {
   $49 = (($g) + 96|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($h) + 24|0);
   HEAP32[$51>>2] = $50;
   HEAP32[$49>>2] = $h;
   $marked$2$lcssa13 = $marked$3;
   STACKTOP = sp;return ($marked$2$lcssa13|0);
  }
  $52 = ($hasclears$1|0)==(0);
  if ($52) {
   $marked$2$lcssa1416 = $marked$3;
  } else {
   $53 = (($g) + 100|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($h) + 24|0);
   HEAP32[$55>>2] = $54;
   HEAP32[$53>>2] = $h;
   $marked$2$lcssa13 = $marked$3;
   STACKTOP = sp;return ($marked$2$lcssa13|0);
  }
 } else {
  $marked$2$lcssa1416 = $marked$0$lcssa;
 }
 $56 = (($g) + 88|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($h) + 24|0);
 HEAP32[$58>>2] = $57;
 HEAP32[$56>>2] = $h;
 $marked$2$lcssa13 = $marked$2$lcssa1416;
 STACKTOP = sp;return ($marked$2$lcssa13|0);
}
function _propagatelist($g,$l) {
 $g = $g|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 84|0);
 HEAP32[$0>>2] = $l;
 _propagateall($g);
 STACKTOP = sp;return;
}
function _traversetable($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $$not = 0, $$ph = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   label = 15;
  } else {
   $3 = (($1) + 6|0);
   $4 = HEAP8[$3>>0]|0;
   $5 = $4 & 8;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $7 = (($g) + 196|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_luaT_gettm($1,3,$8)|0);
    $$ph = $9;
   } else {
    $$ph = 0;
   }
   $$pr = HEAP32[$0>>2]|0;
   $10 = ($$pr|0)==(0|0);
   if (!($10)) {
    $11 = (($$pr) + 5|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 & 3;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     _reallymarkobject($g,$$pr);
    }
   }
   $15 = ($$ph|0)==(0|0);
   if ($15) {
    label = 15;
   } else {
    $16 = (($$ph) + 8|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = $17 & 15;
    $19 = ($18|0)==(4);
    if ($19) {
     $20 = HEAP32[$$ph>>2]|0;
     $21 = (($20) + 16|0);
     $22 = (_strchr($21,107)|0);
     $23 = (_strchr($21,118)|0);
     $24 = ($22|0)!=(0|0);
     $$not = $24 ^ 1;
     $25 = ($23|0)==(0|0);
     $or$cond = $25 & $$not;
     if ($or$cond) {
      label = 15;
     } else {
      $26 = (($h) + 5|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $29 = $28 & 251;
      $30 = $29&255;
      HEAP8[$26>>0] = $30;
      if (!($24)) {
       _traverseweakvalue($g,$h);
       break;
      }
      if ($25) {
       (_traverseephemeron($g,$h)|0);
       break;
      } else {
       $31 = (($g) + 100|0);
       $32 = HEAP32[$31>>2]|0;
       $33 = (($h) + 24|0);
       HEAP32[$33>>2] = $32;
       HEAP32[$31>>2] = $h;
       break;
      }
     }
    } else {
     label = 15;
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  _traversestrongtable($g,$h);
 }
 $34 = (($h) + 28|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 4;
 $37 = (($36) + 32)|0;
 $38 = (($h) + 7|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = 32 << $40;
 $42 = (($37) + ($41))|0;
 STACKTOP = sp;return ($42|0);
}
function _traverseLclosure($g,$cl) {
 $g = $g|0;
 $cl = $cl|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cl) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   _reallymarkobject($g,$1);
  }
 }
 $7 = (($cl) + 6|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = ($8<<24>>24)==(0);
 if ($10) {
  $$lcssa = $9;
  $22 = $$lcssa << 2;
  $23 = (($22) + 16)|0;
  STACKTOP = sp;return ($23|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $11 = ((($cl) + ($i$01<<2)|0) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if (!($13)) {
   $14 = (($12) + 5|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 3;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    _reallymarkobject($g,$12);
   }
  }
  $18 = (($i$01) + 1)|0;
  $19 = HEAP8[$7>>0]|0;
  $20 = $19&255;
  $21 = ($18|0)<($20|0);
  if ($21) {
   $i$01 = $18;
  } else {
   $$lcssa = $20;
   break;
  }
 }
 $22 = $$lcssa << 2;
 $23 = (($22) + 16)|0;
 STACKTOP = sp;return ($23|0);
}
function _traverseCclosure($g,$cl) {
 $g = $g|0;
 $cl = $cl|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($cl) + 6|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = ($1<<24>>24)==(0);
 if ($3) {
  $$lcssa = $2;
  $18 = $$lcssa << 4;
  $19 = (($18) + 16)|0;
  STACKTOP = sp;return ($19|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $4 = ((($cl) + ($i$01<<4)|0) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 64;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($cl) + ($i$01<<4)|0) + 16|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 5|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11 & 3;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    _reallymarkobject($g,$9);
   }
  }
  $14 = (($i$01) + 1)|0;
  $15 = HEAP8[$0>>0]|0;
  $16 = $15&255;
  $17 = ($14|0)<($16|0);
  if ($17) {
   $i$01 = $14;
  } else {
   $$lcssa = $16;
   break;
  }
 }
 $18 = $$lcssa << 4;
 $19 = (($18) + 16)|0;
 STACKTOP = sp;return ($19|0);
}
function _traversestack($g,$th) {
 $g = $g|0;
 $th = $th|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci$04 = 0, $n$03 = 0, $n$1 = 0, $o$0$lcssa = 0, $o$06 = 0, $o$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($th) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($th) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1>>>0)<($4>>>0);
 if ($5) {
  $o$06 = $1;
  while(1) {
   $6 = (($o$06) + 8|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = $7 & 64;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = HEAP32[$o$06>>2]|0;
    $11 = (($10) + 5|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 & 3;
    $14 = ($13<<24>>24)==(0);
    if (!($14)) {
     _reallymarkobject($g,$10);
    }
   }
   $15 = (($o$06) + 16|0);
   $16 = HEAP32[$3>>2]|0;
   $17 = ($15>>>0)<($16>>>0);
   if ($17) {
    $o$06 = $15;
   } else {
    $o$0$lcssa = $15;
    break;
   }
  }
 } else {
  $o$0$lcssa = $1;
 }
 $18 = (($g) + 61|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(1);
 if ($20) {
  $21 = HEAP32[$0>>2]|0;
  $22 = (($th) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23<<4)|0);
  $25 = ($o$0$lcssa>>>0)<($24>>>0);
  if ($25) {
   $o$11 = $o$0$lcssa;
   while(1) {
    $26 = (($o$11) + 8|0);
    HEAP32[$26>>2] = 0;
    $27 = (($o$11) + 16|0);
    $28 = ($27>>>0)<($24>>>0);
    if ($28) {
     $o$11 = $27;
    } else {
     $n$1 = 0;
     break;
    }
   }
  } else {
   $n$1 = 0;
  }
 } else {
  $29 = (($th) + 72|0);
  $30 = (($th) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $n$1 = 0;
  } else {
   $33 = HEAP32[$30>>2]|0;
   $ci$04 = $29;$n$03 = 0;
   while(1) {
    $34 = (($n$03) + 1)|0;
    $35 = (($ci$04) + 12|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==($33|0);
    if ($37) {
     $n$1 = $34;
     break;
    } else {
     $ci$04 = $36;$n$03 = $34;
    }
   }
  }
 }
 $38 = (($th) + 32|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 << 4;
 $41 = ($n$1*40)|0;
 $42 = (($41) + 112)|0;
 $43 = (($42) + ($40))|0;
 $$0 = $43;
 STACKTOP = sp;return ($$0|0);
}
function _traverseproto($g,$f) {
 $g = $g|0;
 $f = $f|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $i$016 = 0, $i$111 = 0, $i$26 = 0, $i$33 = 0, $tmp = 0, $tmp1 = 0, $tmp2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($1) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 3;
  $6 = ($5<<24>>24)==(0);
  if (!($6)) {
   HEAP32[$0>>2] = 0;
  }
 }
 $7 = (($f) + 36|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  $10 = (($8) + 5|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 & 3;
  $13 = ($12<<24>>24)==(0);
  if (!($13)) {
   _reallymarkobject($g,$8);
  }
 }
 $14 = (($f) + 44|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)>(0);
 if ($16) {
  $17 = (($f) + 8|0);
  $i$016 = 0;
  while(1) {
   $22 = HEAP32[$17>>2]|0;
   $23 = ((($22) + ($i$016<<4)|0) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24 & 64;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = (($22) + ($i$016<<4)|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 5|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = $30 & 3;
    $32 = ($31<<24>>24)==(0);
    if (!($32)) {
     _reallymarkobject($g,$28);
    }
   }
   $33 = (($i$016) + 1)|0;
   $34 = HEAP32[$14>>2]|0;
   $35 = ($33|0)<($34|0);
   if ($35) {
    $i$016 = $33;
   } else {
    break;
   }
  }
 }
 $18 = (($f) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)>(0);
 if ($20) {
  $21 = (($f) + 28|0);
  $i$111 = 0;
  while(1) {
   $40 = HEAP32[$21>>2]|0;
   $41 = (($40) + ($i$111<<3)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $44 = (($42) + 5|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 & 3;
    $47 = ($46<<24>>24)==(0);
    if (!($47)) {
     _reallymarkobject($g,$42);
    }
   }
   $48 = (($i$111) + 1)|0;
   $49 = HEAP32[$18>>2]|0;
   $50 = ($48|0)<($49|0);
   if ($50) {
    $i$111 = $48;
   } else {
    break;
   }
  }
 }
 $36 = (($f) + 56|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)>(0);
 if ($38) {
  $39 = (($f) + 16|0);
  $i$26 = 0;
  while(1) {
   $55 = HEAP32[$39>>2]|0;
   $56 = (($55) + ($i$26<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($57|0)==(0|0);
   if (!($58)) {
    $59 = (($57) + 5|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60 & 3;
    $62 = ($61<<24>>24)==(0);
    if (!($62)) {
     _reallymarkobject($g,$57);
    }
   }
   $63 = (($i$26) + 1)|0;
   $64 = HEAP32[$36>>2]|0;
   $65 = ($63|0)<($64|0);
   if ($65) {
    $i$26 = $63;
   } else {
    break;
   }
  }
 }
 $51 = (($f) + 60|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)>(0);
 if (!($53)) {
  $$lcssa = $52;
  $77 = (($f) + 48|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = HEAP32[$36>>2]|0;
  $80 = HEAP32[$14>>2]|0;
  $81 = $80 << 4;
  $82 = (($f) + 52|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = ($$lcssa*12)|0;
  $85 = HEAP32[$18>>2]|0;
  $86 = $85 << 3;
  $tmp = (($79) + ($78))|0;
  $tmp1 = (($tmp) + ($83))|0;
  $tmp2 = $tmp1 << 2;
  $87 = (($84) + 80)|0;
  $88 = (($87) + ($81))|0;
  $89 = (($88) + ($86))|0;
  $90 = (($89) + ($tmp2))|0;
  STACKTOP = sp;return ($90|0);
 }
 $54 = (($f) + 24|0);
 $i$33 = 0;
 while(1) {
  $66 = HEAP32[$54>>2]|0;
  $67 = (($66) + (($i$33*12)|0)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  if (!($69)) {
   $70 = (($68) + 5|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = $71 & 3;
   $73 = ($72<<24>>24)==(0);
   if (!($73)) {
    _reallymarkobject($g,$68);
   }
  }
  $74 = (($i$33) + 1)|0;
  $75 = HEAP32[$51>>2]|0;
  $76 = ($74|0)<($75|0);
  if ($76) {
   $i$33 = $74;
  } else {
   $$lcssa = $75;
   break;
  }
 }
 $77 = (($f) + 48|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = HEAP32[$36>>2]|0;
 $80 = HEAP32[$14>>2]|0;
 $81 = $80 << 4;
 $82 = (($f) + 52|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($$lcssa*12)|0;
 $85 = HEAP32[$18>>2]|0;
 $86 = $85 << 3;
 $tmp = (($79) + ($78))|0;
 $tmp1 = (($tmp) + ($83))|0;
 $tmp2 = $tmp1 << 2;
 $87 = (($84) + 80)|0;
 $88 = (($87) + ($81))|0;
 $89 = (($88) + ($86))|0;
 $90 = (($89) + ($tmp2))|0;
 STACKTOP = sp;return ($90|0);
}
function _traverseweakvalue($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hasclears$0$ = 0, $hasclears$0$lcssa = 0, $hasclears$02 = 0;
 var $hasclears$1 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = (($h) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 $7 = (($h) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 $10 = $9&1;
 $11 = ($3|0)>(0);
 if ($11) {
  $hasclears$02 = $10;$n$01 = $5;
  while(1) {
   $12 = (($n$01) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if ($14) {
    _removeentry($n$01);
    $hasclears$1 = $hasclears$02;
   } else {
    $15 = (($n$01) + 24|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = $16 & 64;
    $18 = ($17|0)==(0);
    if (!($18)) {
     $19 = (($n$01) + 16|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + 5|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22 & 3;
     $24 = ($23<<24>>24)==(0);
     if (!($24)) {
      _reallymarkobject($g,$20);
     }
    }
    $25 = ($hasclears$02|0)==(0);
    if ($25) {
     $26 = (_iscleared($g,$n$01)|0);
     $27 = ($26|0)==(0);
     $hasclears$0$ = $27 ? $hasclears$02 : 1;
     $hasclears$1 = $hasclears$0$;
    } else {
     $hasclears$1 = $hasclears$02;
    }
   }
   $28 = (($n$01) + 32|0);
   $29 = ($28>>>0)<($6>>>0);
   if ($29) {
    $hasclears$02 = $hasclears$1;$n$01 = $28;
   } else {
    $hasclears$0$lcssa = $hasclears$1;
    break;
   }
  }
 } else {
  $hasclears$0$lcssa = $10;
 }
 $30 = ($hasclears$0$lcssa|0)==(0);
 if ($30) {
  $34 = (($g) + 88|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($h) + 24|0);
  HEAP32[$36>>2] = $35;
  HEAP32[$34>>2] = $h;
  STACKTOP = sp;return;
 } else {
  $31 = (($g) + 92|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($h) + 24|0);
  HEAP32[$33>>2] = $32;
  HEAP32[$31>>2] = $h;
  STACKTOP = sp;return;
 }
}
function _traversestrongtable($g,$h) {
 $g = $g|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($h) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = (($h) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + ($3<<5)|0);
 $7 = (($h) + 28|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)>(0);
 if ($9) {
  $10 = (($h) + 12|0);
  $i$03 = 0;
  while(1) {
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($11) + ($i$03<<4)|0) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $13 & 64;
   $15 = ($14|0)==(0);
   if (!($15)) {
    $16 = (($11) + ($i$03<<4)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($17) + 5|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19 & 3;
    $21 = ($20<<24>>24)==(0);
    if (!($21)) {
     _reallymarkobject($g,$17);
    }
   }
   $22 = (($i$03) + 1)|0;
   $23 = HEAP32[$7>>2]|0;
   $24 = ($22|0)<($23|0);
   if ($24) {
    $i$03 = $22;
   } else {
    break;
   }
  }
 }
 $25 = HEAP32[$4>>2]|0;
 $26 = ($25>>>0)<($6>>>0);
 if ($26) {
  $n$01 = $25;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $27 = (($n$01) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0);
  if ($29) {
   _removeentry($n$01);
  } else {
   $30 = (($n$01) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31 & 64;
   $33 = ($32|0)==(0);
   if (!($33)) {
    $34 = (($n$01) + 16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (($35) + 5|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37 & 3;
    $39 = ($38<<24>>24)==(0);
    if (!($39)) {
     _reallymarkobject($g,$35);
    }
   }
   $40 = HEAP32[$27>>2]|0;
   $41 = $40 & 64;
   $42 = ($41|0)==(0);
   if (!($42)) {
    $43 = HEAP32[$n$01>>2]|0;
    $44 = (($43) + 5|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 & 3;
    $47 = ($46<<24>>24)==(0);
    if (!($47)) {
     _reallymarkobject($g,$43);
    }
   }
  }
  $48 = (($n$01) + 32|0);
  $49 = ($48>>>0)<($6>>>0);
  if ($49) {
   $n$01 = $48;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _freeobj($L,$o) {
 $L = $L|0;
 $o = $o|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 switch ($2|0) {
 case 38:  {
  $8 = (($o) + 6|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $10 << 4;
  $12 = (($11) + 16)|0;
  (_luaM_realloc_($L,$o,$12,0)|0);
  break;
 }
 case 20:  {
  label = 10;
  break;
 }
 case 10:  {
  _luaF_freeupval($L,$o);
  break;
 }
 case 5:  {
  _luaH_free($L,$o);
  break;
 }
 case 4:  {
  $16 = (($L) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$18>>2] = $20;
  label = 10;
  break;
 }
 case 9:  {
  _luaF_freeproto($L,$o);
  break;
 }
 case 8:  {
  _luaE_freethread($L,$o);
  break;
 }
 case 6:  {
  $3 = (($o) + 6|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 2;
  $7 = (($6) + 16)|0;
  (_luaM_realloc_($L,$o,$7,0)|0);
  break;
 }
 case 7:  {
  $13 = (($o) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24)|0;
  (_luaM_realloc_($L,$o,$15,0)|0);
  break;
 }
 default: {
 }
 }
 if ((label|0) == 10) {
  $21 = (($o) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 17)|0;
  (_luaM_realloc_($L,$o,$23,0)|0);
 }
 STACKTOP = sp;return;
}
function _sweepthread($L,$L1) {
 $L = $L|0;
 $L1 = $L1|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L1) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L1) + 56|0);
 (_sweeplist($L,$3,-3)|0);
 _luaE_freeCI($L1);
 $4 = (($L) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 62|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(1);
 if ($8) {
  STACKTOP = sp;return;
 }
 _luaD_shrinkstack($L1);
 STACKTOP = sp;return;
}
function _luaL_openlibs($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_requiref($L,4632,144,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4640,145,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4648,146,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4664,147,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4672,148,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4680,149,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4688,150,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4696,151,1);
 _lua_settop($L,-2);
 _luaL_requiref($L,4704,152,1);
 _lua_settop($L,-2);
 (_luaL_getsubtable($L,-1001000,4616)|0);
 _lua_settop($L,-2);
 STACKTOP = sp;return;
}
function _luaX_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$01 = 0;
 while(1) {
  $0 = (4712 + ($i$01<<2)|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (_luaS_new($L,$1)|0);
  $3 = (($2) + 5|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 | 32;
  $7 = $6&255;
  HEAP8[$3>>0] = $7;
  $8 = (($i$01) + 1)|0;
  $9 = $8&255;
  $10 = (($2) + 6|0);
  HEAP8[$10>>0] = $9;
  $exitcond = ($8|0)==(22);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $8;
  }
 }
 STACKTOP = sp;return;
}
function _luaX_token2str($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer4 = sp;
 $0 = ($token|0)<(257);
 if (!($0)) {
  $10 = (($token) + -257)|0;
  $11 = (4712 + ($10<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($token|0)<(286);
  if (!($13)) {
   $$0 = $12;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = (($ls) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$vararg_buffer4>>2] = $12;
  $16 = (_luaO_pushfstring($15,4872,$vararg_buffer4)|0);
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($token) + 1)|0;
 $2 = (2696 + ($1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 4;
 $5 = ($4<<24>>24)==(0);
 $6 = (($ls) + 52|0);
 $7 = HEAP32[$6>>2]|0;
 if ($5) {
  HEAP32[$vararg_buffer4>>2] = $token;
  $9 = (_luaO_pushfstring($7,4856,$vararg_buffer4)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = $token;
  $8 = (_luaO_pushfstring($7,4848,$vararg_buffer4)|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaX_syntaxerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 _lexerror($ls,$msg,$1);
 // unreachable;
}
function _lexerror($ls,$msg,$token) {
 $ls = $ls|0;
 $msg = $msg|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer3 = sp;
 $buff = sp + 12|0;
 $0 = (($ls) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 _luaO_chunkid($buff,$2,60);
 $3 = (($ls) + 52|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($ls) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$vararg_buffer3>>2] = $buff;
 $vararg_ptr1 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $vararg_ptr2 = (($vararg_buffer3) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $msg;
 $7 = (_luaO_pushfstring($4,5208,$vararg_buffer3)|0);
 $8 = ($token|0)==(0);
 if ($8) {
  $11 = HEAP32[$3>>2]|0;
  _luaD_throw($11,3);
  // unreachable;
 }
 $9 = HEAP32[$3>>2]|0;
 $10 = (_txtToken($ls,$token)|0);
 HEAP32[$vararg_buffer3>>2] = $7;
 $vararg_ptr6 = (($vararg_buffer3) + 4|0);
 HEAP32[$vararg_ptr6>>2] = $10;
 (_luaO_pushfstring($9,5224,$vararg_buffer3)|0);
 $11 = HEAP32[$3>>2]|0;
 _luaD_throw($11,3);
 // unreachable;
}
function _luaX_newstring($ls,$str,$l) {
 $ls = $ls|0;
 $str = $str|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ts$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_newlstr($1,$str,$l)|0);
 $3 = (($1) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$3>>2] = $5;
 HEAP32[$4>>2] = $2;
 $6 = (($2) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 64;
 $10 = (($4) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($ls) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = (($15) + -16|0);
 $17 = (_luaH_set($1,$14,$16)|0);
 $18 = (($17) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  HEAP32[$17>>2] = 1;
  HEAP32[$18>>2] = 1;
  $21 = (($1) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)>(0);
  if ($25) {
   _luaC_step($1);
   $ts$0 = $2;
  } else {
   $ts$0 = $2;
  }
 } else {
  $26 = (($17) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $ts$0 = $27;
 }
 $28 = HEAP32[$3>>2]|0;
 $29 = (($28) + -16|0);
 HEAP32[$3>>2] = $29;
 STACKTOP = sp;return ($ts$0|0);
}
function _luaX_setinput($L,$ls,$z,$source,$firstchar) {
 $L = $L|0;
 $ls = $ls|0;
 $z = $z|0;
 $source = $source|0;
 $firstchar = $firstchar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 76|0);
 HEAP8[$0>>0] = 46;
 $1 = (($ls) + 52|0);
 HEAP32[$1>>2] = $L;
 HEAP32[$ls>>2] = $firstchar;
 $2 = (($ls) + 32|0);
 HEAP32[$2>>2] = 286;
 $3 = (($ls) + 56|0);
 HEAP32[$3>>2] = $z;
 $4 = (($ls) + 48|0);
 HEAP32[$4>>2] = 0;
 $5 = (($ls) + 4|0);
 HEAP32[$5>>2] = 1;
 $6 = (($ls) + 8|0);
 HEAP32[$6>>2] = 1;
 $7 = (($ls) + 68|0);
 HEAP32[$7>>2] = $source;
 $8 = (_luaS_new($L,4880)|0);
 $9 = (($ls) + 72|0);
 HEAP32[$9>>2] = $8;
 $10 = (($8) + 5|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 $13 = $12 | 32;
 $14 = $13&255;
 HEAP8[$10>>0] = $14;
 $15 = HEAP32[$1>>2]|0;
 $16 = (($ls) + 60|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($17) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (_luaM_realloc_($15,$18,$20,32)|0);
 $22 = HEAP32[$16>>2]|0;
 HEAP32[$22>>2] = $21;
 $23 = HEAP32[$16>>2]|0;
 $24 = (($23) + 8|0);
 HEAP32[$24>>2] = 32;
 STACKTOP = sp;return;
}
function _luaX_next($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 8|0);
 HEAP32[$2>>2] = $1;
 $3 = (($ls) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(286);
 if ($5) {
  $7 = (($ls) + 24|0);
  $8 = (_llex($ls,$7)|0);
  $9 = (($ls) + 16|0);
  HEAP32[$9>>2] = $8;
  STACKTOP = sp;return;
 } else {
  $6 = (($ls) + 16|0);
  ;HEAP32[$6+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$3+12>>2]|0;
  HEAP32[$3>>2] = 286;
  STACKTOP = sp;return;
 }
}
function _llex($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $$pr35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (($ls) + 56|0);
 $4 = (($ls) + 56|0);
 L1: while(1) {
  $$pr35 = HEAP32[$ls>>2]|0;
  $5 = $$pr35;
  L3: while(1) {
   switch ($5|0) {
   case 45:  {
    break L3;
    break;
   }
   case 91:  {
    label = 25;
    break L1;
    break;
   }
   case 13: case 10:  {
    label = 4;
    break L3;
    break;
   }
   case 11: case 9: case 12: case 32:  {
    break;
   }
   case 61:  {
    label = 29;
    break L1;
    break;
   }
   case 60:  {
    label = 37;
    break L1;
    break;
   }
   case 62:  {
    label = 45;
    break L1;
    break;
   }
   case 126:  {
    label = 53;
    break L1;
    break;
   }
   case 58:  {
    label = 61;
    break L1;
    break;
   }
   case 39: case 34:  {
    label = 69;
    break L1;
    break;
   }
   case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
    break L1;
    break;
   }
   case 46:  {
    label = 70;
    break L1;
    break;
   }
   case -1:  {
    $$0 = 286;
    label = 89;
    break L1;
    break;
   }
   default: {
    label = 77;
    break L1;
   }
   }
   $6 = HEAP32[$3>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + -1)|0;
   HEAP32[$6>>2] = $8;
   $9 = ($7|0)==(0);
   $10 = HEAP32[$3>>2]|0;
   if ($9) {
    $16 = (_luaZ_fill($10)|0);
    $17 = $16;
   } else {
    $11 = (($10) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 1|0);
    HEAP32[$11>>2] = $13;
    $14 = HEAP8[$12>>0]|0;
    $15 = $14&255;
    $17 = $15;
   }
   HEAP32[$ls>>2] = $17;
   $5 = $17;
  }
  if ((label|0) == 4) {
   label = 0;
   _inclinenumber($ls);
   continue;
  }
  $18 = HEAP32[$4>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + -1)|0;
  HEAP32[$18>>2] = $20;
  $21 = ($19|0)==(0);
  $22 = HEAP32[$4>>2]|0;
  if ($21) {
   $28 = (_luaZ_fill($22)|0);
   $29 = $28;
  } else {
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1|0);
   HEAP32[$23>>2] = $25;
   $26 = HEAP8[$24>>0]|0;
   $27 = $26&255;
   $29 = $27;
  }
  HEAP32[$ls>>2] = $29;
  $30 = ($29|0)==(45);
  if (!($30)) {
   $$0 = 45;
   label = 89;
   break;
  }
  $31 = HEAP32[$4>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
  $34 = ($32|0)==(0);
  $35 = HEAP32[$4>>2]|0;
  if ($34) {
   $41 = (_luaZ_fill($35)|0);
   $42 = $41;
  } else {
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 1|0);
   HEAP32[$36>>2] = $38;
   $39 = HEAP8[$37>>0]|0;
   $40 = $39&255;
   $42 = $40;
  }
  HEAP32[$ls>>2] = $42;
  $43 = ($42|0)==(91);
  do {
   if ($43) {
    $44 = (_skip_sep($ls)|0);
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + 4|0);
    HEAP32[$46>>2] = 0;
    $47 = ($44|0)>(-1);
    if ($47) {
     _read_long_string($ls,0,$44);
     $48 = HEAP32[$0>>2]|0;
     $49 = (($48) + 4|0);
     HEAP32[$49>>2] = 0;
     continue L1;
    } else {
     $$pr = HEAP32[$ls>>2]|0;
     $268 = $$pr;
     break;
    }
   } else {
    $268 = $42;
   }
  } while(0);
  while(1) {
   if ((($268|0) == -1) | (($268|0) == 13) | (($268|0) == 10)) {
    continue L1;
   }
   $50 = HEAP32[$4>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + -1)|0;
   HEAP32[$50>>2] = $52;
   $53 = ($51|0)==(0);
   $54 = HEAP32[$4>>2]|0;
   if ($53) {
    $60 = (_luaZ_fill($54)|0);
    $61 = $60;
   } else {
    $55 = (($54) + 4|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) + 1|0);
    HEAP32[$55>>2] = $57;
    $58 = HEAP8[$56>>0]|0;
    $59 = $58&255;
    $61 = $59;
   }
   HEAP32[$ls>>2] = $61;
   $268 = $61;
  }
 }
 switch (label|0) {
  case 25: {
   $62 = (_skip_sep($ls)|0);
   $63 = ($62|0)>(-1);
   if ($63) {
    _read_long_string($ls,$seminfo,$62);
    $$0 = 289;
    STACKTOP = sp;return ($$0|0);
   }
   $64 = ($62|0)==(-1);
   if ($64) {
    $$0 = 91;
    STACKTOP = sp;return ($$0|0);
   } else {
    _lexerror($ls,4888,289);
    // unreachable;
   }
   break;
  }
  case 29: {
   $65 = (($ls) + 56|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + -1)|0;
   HEAP32[$66>>2] = $68;
   $69 = ($67|0)==(0);
   $70 = HEAP32[$65>>2]|0;
   if ($69) {
    $76 = (_luaZ_fill($70)|0);
    $77 = $76;
   } else {
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + 1|0);
    HEAP32[$71>>2] = $73;
    $74 = HEAP8[$72>>0]|0;
    $75 = $74&255;
    $77 = $75;
   }
   HEAP32[$ls>>2] = $77;
   $78 = ($77|0)==(61);
   if (!($78)) {
    $$0 = 61;
    STACKTOP = sp;return ($$0|0);
   }
   $79 = HEAP32[$65>>2]|0;
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + -1)|0;
   HEAP32[$79>>2] = $81;
   $82 = ($80|0)==(0);
   $83 = HEAP32[$65>>2]|0;
   if ($82) {
    $89 = (_luaZ_fill($83)|0);
    $90 = $89;
   } else {
    $84 = (($83) + 4|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($85) + 1|0);
    HEAP32[$84>>2] = $86;
    $87 = HEAP8[$85>>0]|0;
    $88 = $87&255;
    $90 = $88;
   }
   HEAP32[$ls>>2] = $90;
   $$0 = 281;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 37: {
   $91 = (($ls) + 56|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + -1)|0;
   HEAP32[$92>>2] = $94;
   $95 = ($93|0)==(0);
   $96 = HEAP32[$91>>2]|0;
   if ($95) {
    $102 = (_luaZ_fill($96)|0);
    $103 = $102;
   } else {
    $97 = (($96) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + 1|0);
    HEAP32[$97>>2] = $99;
    $100 = HEAP8[$98>>0]|0;
    $101 = $100&255;
    $103 = $101;
   }
   HEAP32[$ls>>2] = $103;
   $104 = ($103|0)==(61);
   if (!($104)) {
    $$0 = 60;
    STACKTOP = sp;return ($$0|0);
   }
   $105 = HEAP32[$91>>2]|0;
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + -1)|0;
   HEAP32[$105>>2] = $107;
   $108 = ($106|0)==(0);
   $109 = HEAP32[$91>>2]|0;
   if ($108) {
    $115 = (_luaZ_fill($109)|0);
    $116 = $115;
   } else {
    $110 = (($109) + 4|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + 1|0);
    HEAP32[$110>>2] = $112;
    $113 = HEAP8[$111>>0]|0;
    $114 = $113&255;
    $116 = $114;
   }
   HEAP32[$ls>>2] = $116;
   $$0 = 283;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 45: {
   $117 = (($ls) + 56|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = HEAP32[$118>>2]|0;
   $120 = (($119) + -1)|0;
   HEAP32[$118>>2] = $120;
   $121 = ($119|0)==(0);
   $122 = HEAP32[$117>>2]|0;
   if ($121) {
    $128 = (_luaZ_fill($122)|0);
    $129 = $128;
   } else {
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + 1|0);
    HEAP32[$123>>2] = $125;
    $126 = HEAP8[$124>>0]|0;
    $127 = $126&255;
    $129 = $127;
   }
   HEAP32[$ls>>2] = $129;
   $130 = ($129|0)==(61);
   if (!($130)) {
    $$0 = 62;
    STACKTOP = sp;return ($$0|0);
   }
   $131 = HEAP32[$117>>2]|0;
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + -1)|0;
   HEAP32[$131>>2] = $133;
   $134 = ($132|0)==(0);
   $135 = HEAP32[$117>>2]|0;
   if ($134) {
    $141 = (_luaZ_fill($135)|0);
    $142 = $141;
   } else {
    $136 = (($135) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = (($137) + 1|0);
    HEAP32[$136>>2] = $138;
    $139 = HEAP8[$137>>0]|0;
    $140 = $139&255;
    $142 = $140;
   }
   HEAP32[$ls>>2] = $142;
   $$0 = 282;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 53: {
   $143 = (($ls) + 56|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($145) + -1)|0;
   HEAP32[$144>>2] = $146;
   $147 = ($145|0)==(0);
   $148 = HEAP32[$143>>2]|0;
   if ($147) {
    $154 = (_luaZ_fill($148)|0);
    $155 = $154;
   } else {
    $149 = (($148) + 4|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = (($150) + 1|0);
    HEAP32[$149>>2] = $151;
    $152 = HEAP8[$150>>0]|0;
    $153 = $152&255;
    $155 = $153;
   }
   HEAP32[$ls>>2] = $155;
   $156 = ($155|0)==(61);
   if (!($156)) {
    $$0 = 126;
    STACKTOP = sp;return ($$0|0);
   }
   $157 = HEAP32[$143>>2]|0;
   $158 = HEAP32[$157>>2]|0;
   $159 = (($158) + -1)|0;
   HEAP32[$157>>2] = $159;
   $160 = ($158|0)==(0);
   $161 = HEAP32[$143>>2]|0;
   if ($160) {
    $167 = (_luaZ_fill($161)|0);
    $168 = $167;
   } else {
    $162 = (($161) + 4|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = (($163) + 1|0);
    HEAP32[$162>>2] = $164;
    $165 = HEAP8[$163>>0]|0;
    $166 = $165&255;
    $168 = $166;
   }
   HEAP32[$ls>>2] = $168;
   $$0 = 284;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 61: {
   $169 = (($ls) + 56|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + -1)|0;
   HEAP32[$170>>2] = $172;
   $173 = ($171|0)==(0);
   $174 = HEAP32[$169>>2]|0;
   if ($173) {
    $180 = (_luaZ_fill($174)|0);
    $181 = $180;
   } else {
    $175 = (($174) + 4|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) + 1|0);
    HEAP32[$175>>2] = $177;
    $178 = HEAP8[$176>>0]|0;
    $179 = $178&255;
    $181 = $179;
   }
   HEAP32[$ls>>2] = $181;
   $182 = ($181|0)==(58);
   if (!($182)) {
    $$0 = 58;
    STACKTOP = sp;return ($$0|0);
   }
   $183 = HEAP32[$169>>2]|0;
   $184 = HEAP32[$183>>2]|0;
   $185 = (($184) + -1)|0;
   HEAP32[$183>>2] = $185;
   $186 = ($184|0)==(0);
   $187 = HEAP32[$169>>2]|0;
   if ($186) {
    $193 = (_luaZ_fill($187)|0);
    $194 = $193;
   } else {
    $188 = (($187) + 4|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($189) + 1|0);
    HEAP32[$188>>2] = $190;
    $191 = HEAP8[$189>>0]|0;
    $192 = $191&255;
    $194 = $192;
   }
   HEAP32[$ls>>2] = $194;
   $$0 = 285;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 69: {
   $195 = HEAP32[$ls>>2]|0;
   _read_string($ls,$195,$seminfo);
   $$0 = 289;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 70: {
   _save($ls,$5);
   $196 = (($ls) + 56|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + -1)|0;
   HEAP32[$197>>2] = $199;
   $200 = ($198|0)==(0);
   $201 = HEAP32[$196>>2]|0;
   if ($200) {
    $207 = (_luaZ_fill($201)|0);
    $208 = $207;
   } else {
    $202 = (($201) + 4|0);
    $203 = HEAP32[$202>>2]|0;
    $204 = (($203) + 1|0);
    HEAP32[$202>>2] = $204;
    $205 = HEAP8[$203>>0]|0;
    $206 = $205&255;
    $208 = $206;
   }
   HEAP32[$ls>>2] = $208;
   $209 = (_check_next($ls,4920)|0);
   $210 = ($209|0)==(0);
   if ($210) {
    $213 = HEAP32[$ls>>2]|0;
    $214 = (($213) + 1)|0;
    $215 = (2696 + ($214)|0);
    $216 = HEAP8[$215>>0]|0;
    $217 = $216 & 2;
    $218 = ($217<<24>>24)==(0);
    if ($218) {
     $$0 = 46;
    } else {
     break;
    }
    STACKTOP = sp;return ($$0|0);
   } else {
    $211 = (_check_next($ls,4920)|0);
    $212 = ($211|0)==(0);
    $$ = $212 ? 279 : 280;
    $$0 = $$;
    STACKTOP = sp;return ($$0|0);
   }
   break;
  }
  case 77: {
   $219 = (($5) + 1)|0;
   $220 = (2696 + ($219)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221 & 1;
   $223 = ($222<<24>>24)==(0);
   $224 = (($ls) + 56|0);
   if ($223) {
    $256 = HEAP32[$224>>2]|0;
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + -1)|0;
    HEAP32[$256>>2] = $258;
    $259 = ($257|0)==(0);
    $260 = HEAP32[$224>>2]|0;
    if ($259) {
     $266 = (_luaZ_fill($260)|0);
     $267 = $266;
    } else {
     $261 = (($260) + 4|0);
     $262 = HEAP32[$261>>2]|0;
     $263 = (($262) + 1|0);
     HEAP32[$261>>2] = $263;
     $264 = HEAP8[$262>>0]|0;
     $265 = $264&255;
     $267 = $265;
    }
    HEAP32[$ls>>2] = $267;
    $$0 = $5;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $225 = HEAP32[$ls>>2]|0;
    _save($ls,$225);
    $226 = HEAP32[$224>>2]|0;
    $227 = HEAP32[$226>>2]|0;
    $228 = (($227) + -1)|0;
    HEAP32[$226>>2] = $228;
    $229 = ($227|0)==(0);
    $230 = HEAP32[$224>>2]|0;
    if ($229) {
     $236 = (_luaZ_fill($230)|0);
     $237 = $236;
    } else {
     $231 = (($230) + 4|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = (($232) + 1|0);
     HEAP32[$231>>2] = $233;
     $234 = HEAP8[$232>>0]|0;
     $235 = $234&255;
     $237 = $235;
    }
    HEAP32[$ls>>2] = $237;
    $238 = (($237) + 1)|0;
    $239 = (2696 + ($238)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240 & 3;
    $242 = ($241<<24>>24)==(0);
    if ($242) {
     break;
    }
   }
   $243 = HEAP32[$0>>2]|0;
   $244 = HEAP32[$243>>2]|0;
   $245 = (($243) + 4|0);
   $246 = HEAP32[$245>>2]|0;
   $247 = (_luaX_newstring($ls,$244,$246)|0);
   HEAP32[$seminfo>>2] = $247;
   $248 = (($247) + 4|0);
   $249 = HEAP8[$248>>0]|0;
   $250 = ($249<<24>>24)==(4);
   if (!($250)) {
    $$0 = 288;
    STACKTOP = sp;return ($$0|0);
   }
   $251 = (($247) + 6|0);
   $252 = HEAP8[$251>>0]|0;
   $253 = ($252<<24>>24)==(0);
   if ($253) {
    $$0 = 288;
    STACKTOP = sp;return ($$0|0);
   }
   $254 = $252&255;
   $255 = $254 | 256;
   $$0 = $255;
   STACKTOP = sp;return ($$0|0);
   break;
  }
  case 89: {
   STACKTOP = sp;return ($$0|0);
   break;
  }
 }
 _read_numeral($ls,$seminfo);
 $$0 = 287;
 STACKTOP = sp;return ($$0|0);
}
function _luaX_lookahead($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 40|0);
 $1 = (_llex($ls,$0)|0);
 $2 = (($ls) + 32|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return ($1|0);
}
function _inclinenumber($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $12 = (_luaZ_fill($6)|0);
  $13 = $12;
 } else {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1|0);
  HEAP32[$7>>2] = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $13 = $11;
 }
 HEAP32[$ls>>2] = $13;
 if ((($13|0) == 13) | (($13|0) == 10)) {
  $14 = HEAP32[$ls>>2]|0;
  $15 = ($14|0)==($0|0);
  if (!($15)) {
   $16 = HEAP32[$1>>2]|0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + -1)|0;
   HEAP32[$16>>2] = $18;
   $19 = ($17|0)==(0);
   $20 = HEAP32[$1>>2]|0;
   if ($19) {
    $26 = (_luaZ_fill($20)|0);
    $27 = $26;
   } else {
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 1|0);
    HEAP32[$21>>2] = $23;
    $24 = HEAP8[$22>>0]|0;
    $25 = $24&255;
    $27 = $25;
   }
   HEAP32[$ls>>2] = $27;
  }
 }
 $28 = (($ls) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 HEAP32[$28>>2] = $30;
 $31 = ($29|0)>(2147483643);
 if ($31) {
  _luaX_syntaxerror($ls,5176);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _skip_sep($ls) {
 $ls = $ls|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count$0$ = 0, $count$0$lcssa = 0, $count$01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 _save($ls,$0);
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $12 = (_luaZ_fill($6)|0);
  $13 = $12;
 } else {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1|0);
  HEAP32[$7>>2] = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $13 = $11;
 }
 HEAP32[$ls>>2] = $13;
 $14 = ($13|0)==(61);
 if ($14) {
  $count$01 = 0;
 } else {
  $$lcssa = $13;$count$0$lcssa = 0;
  $not$ = ($$lcssa|0)!=($0|0);
  $29 = $not$ << 31 >> 31;
  $count$0$ = $29 ^ $count$0$lcssa;
  STACKTOP = sp;return ($count$0$|0);
 }
 while(1) {
  _save($ls,61);
  $15 = HEAP32[$1>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -1)|0;
  HEAP32[$15>>2] = $17;
  $18 = ($16|0)==(0);
  $19 = HEAP32[$1>>2]|0;
  if ($18) {
   $25 = (_luaZ_fill($19)|0);
   $26 = $25;
  } else {
   $20 = (($19) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1|0);
   HEAP32[$20>>2] = $22;
   $23 = HEAP8[$21>>0]|0;
   $24 = $23&255;
   $26 = $24;
  }
  HEAP32[$ls>>2] = $26;
  $27 = (($count$01) + 1)|0;
  $28 = ($26|0)==(61);
  if ($28) {
   $count$01 = $27;
  } else {
   $$lcssa = $26;$count$0$lcssa = $27;
   break;
  }
 }
 $not$ = ($$lcssa|0)!=($0|0);
 $29 = $not$ << 31 >> 31;
 $count$0$ = $29 ^ $count$0$lcssa;
 STACKTOP = sp;return ($count$0$|0);
}
function _read_long_string($ls,$seminfo,$sep) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 $sep = $sep|0;
 var $$ph = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 _save($ls,$0);
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $12 = (_luaZ_fill($6)|0);
  $13 = $12;
 } else {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1|0);
  HEAP32[$7>>2] = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $13 = $11;
 }
 HEAP32[$ls>>2] = $13;
 if ((($13|0) == 13) | (($13|0) == 10)) {
  _inclinenumber($ls);
  label = 6;
 } else {
  $$ph = $13;
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $$pr = HEAP32[$ls>>2]|0;
   $$ph = $$pr;
  }
  $14 = ($seminfo|0)==(0|0);
  $37 = $$ph;
  while(1) {
   if ((($37|0) == 13) | (($37|0) == 10)) {
    break;
   } else if ((($37|0) == 93)) {
    label = 10;
    break;
   } else if ((($37|0) == -1)) {
    label = 9;
    break L7;
   }
   do {
    if ($14) {
     $49 = HEAP32[$1>>2]|0;
     $50 = HEAP32[$49>>2]|0;
     $51 = (($50) + -1)|0;
     HEAP32[$49>>2] = $51;
     $52 = ($50|0)==(0);
     $53 = HEAP32[$1>>2]|0;
     if ($52) {
      $59 = (_luaZ_fill($53)|0);
      $storemerge = $59;
      break;
     } else {
      $54 = (($53) + 4|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = (($55) + 1|0);
      HEAP32[$54>>2] = $56;
      $57 = HEAP8[$55>>0]|0;
      $58 = $57&255;
      $storemerge = $58;
      break;
     }
    } else {
     _save($ls,$37);
     $38 = HEAP32[$1>>2]|0;
     $39 = HEAP32[$38>>2]|0;
     $40 = (($39) + -1)|0;
     HEAP32[$38>>2] = $40;
     $41 = ($39|0)==(0);
     $42 = HEAP32[$1>>2]|0;
     if ($41) {
      $48 = (_luaZ_fill($42)|0);
      $storemerge = $48;
      break;
     } else {
      $43 = (($42) + 4|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + 1|0);
      HEAP32[$43>>2] = $45;
      $46 = HEAP8[$44>>0]|0;
      $47 = $46&255;
      $storemerge = $47;
      break;
     }
    }
   } while(0);
   HEAP32[$ls>>2] = $storemerge;
   $37 = $storemerge;
  }
  if ((label|0) == 10) {
   label = 0;
   $17 = (_skip_sep($ls)|0);
   $18 = ($17|0)==($sep|0);
   if ($18) {
    break;
   } else {
    label = 6;
    continue;
   }
  }
  _save($ls,10);
  _inclinenumber($ls);
  $33 = ($seminfo|0)==(0|0);
  if (!($33)) {
   label = 6;
   continue;
  }
  $34 = (($ls) + 60|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 4|0);
  HEAP32[$36>>2] = 0;
  label = 6;
 }
 if ((label|0) == 9) {
  $15 = ($seminfo|0)!=(0|0);
  $16 = $15 ? 5128 : 5152;
  _lexerror($ls,$16,286);
  // unreachable;
 }
 $19 = HEAP32[$ls>>2]|0;
 _save($ls,$19);
 $20 = HEAP32[$1>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + -1)|0;
 HEAP32[$20>>2] = $22;
 $23 = ($21|0)==(0);
 $24 = HEAP32[$1>>2]|0;
 if ($23) {
  $30 = (_luaZ_fill($24)|0);
  $31 = $30;
 } else {
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1|0);
  HEAP32[$25>>2] = $27;
  $28 = HEAP8[$26>>0]|0;
  $29 = $28&255;
  $31 = $29;
 }
 HEAP32[$ls>>2] = $31;
 $32 = ($seminfo|0)==(0|0);
 if ($32) {
  STACKTOP = sp;return;
 }
 $60 = (($ls) + 60|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($sep) + 2)|0;
 $64 = (($62) + ($63)|0);
 $65 = (($61) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $63 << 1;
 $68 = (($66) - ($67))|0;
 $69 = (_luaX_newstring($ls,$64,$68)|0);
 HEAP32[$seminfo>>2] = $69;
 STACKTOP = sp;return;
}
function _read_string($ls,$del,$seminfo) {
 $ls = $ls|0;
 $del = $del|0;
 $seminfo = $seminfo|0;
 var $$be = 0, $$be3 = 0, $$lcssa = 0, $$pr = 0, $$pr1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 _save($ls,$0);
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $12 = (_luaZ_fill($6)|0);
  $13 = $12;
 } else {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1|0);
  HEAP32[$7>>2] = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $13 = $11;
 }
 HEAP32[$ls>>2] = $13;
 $14 = ($13|0)==($del|0);
 L5: do {
  if ($14) {
   $$lcssa = $13;
  } else {
   $82 = $13;
   L6: while(1) {
    L8: do {
     if ((($82|0) == 13) | (($82|0) == 10)) {
      label = 8;
      break L6;
     } else if ((($82|0) == -1)) {
      label = 7;
      break L6;
     } else if ((($82|0) == 92)) {
      $15 = HEAP32[$1>>2]|0;
      $16 = HEAP32[$15>>2]|0;
      $17 = (($16) + -1)|0;
      HEAP32[$15>>2] = $17;
      $18 = ($16|0)==(0);
      $19 = HEAP32[$1>>2]|0;
      if ($18) {
       $25 = (_luaZ_fill($19)|0);
       $26 = $25;
      } else {
       $20 = (($19) + 4|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (($21) + 1|0);
       HEAP32[$20>>2] = $22;
       $23 = HEAP8[$21>>0]|0;
       $24 = $23&255;
       $26 = $24;
      }
      HEAP32[$ls>>2] = $26;
      do {
       switch ($26|0) {
       case -1:  {
        $$be3 = -1;
        break L8;
        break;
       }
       case 120:  {
        $28 = (_readhexaesc($ls)|0);
        $c$0 = $28;
        label = 37;
        break;
       }
       case 110:  {
        $c$0 = 10;
        label = 37;
        break;
       }
       case 97:  {
        $c$0 = 7;
        label = 37;
        break;
       }
       case 39: case 34: case 92:  {
        $29 = HEAP32[$ls>>2]|0;
        $c$0 = $29;
        label = 37;
        break;
       }
       case 102:  {
        $c$0 = 12;
        label = 37;
        break;
       }
       case 13: case 10:  {
        _inclinenumber($ls);
        $c$1 = 10;
        label = 41;
        break;
       }
       case 116:  {
        $c$0 = 9;
        label = 37;
        break;
       }
       case 118:  {
        $c$0 = 11;
        label = 37;
        break;
       }
       case 122:  {
        $30 = HEAP32[$1>>2]|0;
        $31 = HEAP32[$30>>2]|0;
        $32 = (($31) + -1)|0;
        HEAP32[$30>>2] = $32;
        $33 = ($31|0)==(0);
        $34 = HEAP32[$1>>2]|0;
        if ($33) {
         $40 = (_luaZ_fill($34)|0);
         $41 = $40;
        } else {
         $35 = (($34) + 4|0);
         $36 = HEAP32[$35>>2]|0;
         $37 = (($36) + 1|0);
         HEAP32[$35>>2] = $37;
         $38 = HEAP8[$36>>0]|0;
         $39 = $38&255;
         $41 = $39;
        }
        HEAP32[$ls>>2] = $41;
        $42 = (($41) + 1)|0;
        $43 = (2696 + ($42)|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44 & 8;
        $46 = ($45<<24>>24)==(0);
        if (!($46)) {
         $115 = $41;
         while(1) {
          if ((($115|0) == 13) | (($115|0) == 10)) {
           _inclinenumber($ls);
           $$pr1 = HEAP32[$ls>>2]|0;
           $$be = $$pr1;
          } else {
           $47 = HEAP32[$1>>2]|0;
           $48 = HEAP32[$47>>2]|0;
           $49 = (($48) + -1)|0;
           HEAP32[$47>>2] = $49;
           $50 = ($48|0)==(0);
           $51 = HEAP32[$1>>2]|0;
           if ($50) {
            $57 = (_luaZ_fill($51)|0);
            $58 = $57;
           } else {
            $52 = (($51) + 4|0);
            $53 = HEAP32[$52>>2]|0;
            $54 = (($53) + 1|0);
            HEAP32[$52>>2] = $54;
            $55 = HEAP8[$53>>0]|0;
            $56 = $55&255;
            $58 = $56;
           }
           HEAP32[$ls>>2] = $58;
           $$be = $58;
          }
          $59 = (($$be) + 1)|0;
          $60 = (2696 + ($59)|0);
          $61 = HEAP8[$60>>0]|0;
          $62 = $61 & 8;
          $63 = ($62<<24>>24)==(0);
          if ($63) {
           break;
          } else {
           $115 = $$be;
          }
         }
        }
        break;
       }
       case 114:  {
        $c$0 = 13;
        label = 37;
        break;
       }
       case 98:  {
        $c$0 = 8;
        label = 37;
        break;
       }
       default: {
        $64 = (($26) + 1)|0;
        $65 = (2696 + ($64)|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66 & 2;
        $68 = ($67<<24>>24)==(0);
        if ($68) {
         label = 35;
         break L6;
        }
        $69 = (_readdecesc($ls)|0);
        $c$1 = $69;
        label = 41;
       }
       }
      } while(0);
      if ((label|0) == 37) {
       label = 0;
       $70 = HEAP32[$1>>2]|0;
       $71 = HEAP32[$70>>2]|0;
       $72 = (($71) + -1)|0;
       HEAP32[$70>>2] = $72;
       $73 = ($71|0)==(0);
       $74 = HEAP32[$1>>2]|0;
       if ($73) {
        $80 = (_luaZ_fill($74)|0);
        $81 = $80;
       } else {
        $75 = (($74) + 4|0);
        $76 = HEAP32[$75>>2]|0;
        $77 = (($76) + 1|0);
        HEAP32[$75>>2] = $77;
        $78 = HEAP8[$76>>0]|0;
        $79 = $78&255;
        $81 = $79;
       }
       HEAP32[$ls>>2] = $81;
       $c$1 = $c$0;
       label = 41;
      }
      if ((label|0) == 41) {
       label = 0;
       _save($ls,$c$1);
      }
      $$pr = HEAP32[$ls>>2]|0;
      $$be3 = $$pr;
     } else {
      _save($ls,$82);
      $83 = HEAP32[$1>>2]|0;
      $84 = HEAP32[$83>>2]|0;
      $85 = (($84) + -1)|0;
      HEAP32[$83>>2] = $85;
      $86 = ($84|0)==(0);
      $87 = HEAP32[$1>>2]|0;
      if ($86) {
       $93 = (_luaZ_fill($87)|0);
       $94 = $93;
      } else {
       $88 = (($87) + 4|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (($89) + 1|0);
       HEAP32[$88>>2] = $90;
       $91 = HEAP8[$89>>0]|0;
       $92 = $91&255;
       $94 = $92;
      }
      HEAP32[$ls>>2] = $94;
      $$be3 = $94;
     }
    } while(0);
    $27 = ($$be3|0)==($del|0);
    if ($27) {
     $$lcssa = $$be3;
     break L5;
    } else {
     $82 = $$be3;
    }
   }
   if ((label|0) == 7) {
    _lexerror($ls,5016,286);
    // unreachable;
   }
   else if ((label|0) == 8) {
    _lexerror($ls,5016,289);
    // unreachable;
   }
   else if ((label|0) == 35) {
    _escerror($ls,$ls,1,5040);
    // unreachable;
   }
  }
 } while(0);
 _save($ls,$$lcssa);
 $95 = HEAP32[$1>>2]|0;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + -1)|0;
 HEAP32[$95>>2] = $97;
 $98 = ($96|0)==(0);
 $99 = HEAP32[$1>>2]|0;
 if ($98) {
  $105 = (_luaZ_fill($99)|0);
  $106 = $105;
  HEAP32[$ls>>2] = $106;
  $107 = (($ls) + 60|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + 1|0);
  $111 = (($108) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + -2)|0;
  $114 = (_luaX_newstring($ls,$110,$113)|0);
  HEAP32[$seminfo>>2] = $114;
  STACKTOP = sp;return;
 } else {
  $100 = (($99) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + 1|0);
  HEAP32[$100>>2] = $102;
  $103 = HEAP8[$101>>0]|0;
  $104 = $103&255;
  $106 = $104;
  HEAP32[$ls>>2] = $106;
  $107 = (($ls) + 60|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = HEAP32[$108>>2]|0;
  $110 = (($109) + 1|0);
  $111 = (($108) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + -2)|0;
  $114 = (_luaX_newstring($ls,$110,$113)|0);
  HEAP32[$seminfo>>2] = $114;
  STACKTOP = sp;return;
 }
}
function _save($ls,$c) {
 $ls = $ls|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (($1) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)>($6>>>0);
 do {
  if ($7) {
   $8 = ($6>>>0)>(2147483645);
   if ($8) {
    _lexerror($ls,4984,0);
    // unreachable;
   }
   $9 = $6 << 1;
   $10 = ($9|0)==(-2);
   $11 = (($ls) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   if ($10) {
    _luaM_toobig($12);
    // unreachable;
   } else {
    $13 = HEAP32[$1>>2]|0;
    $14 = (_luaM_realloc_($12,$13,$6,$9)|0);
    HEAP32[$1>>2] = $14;
    HEAP32[$5>>2] = $9;
    break;
   }
  }
 } while(0);
 $15 = $c&255;
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$2>>2] = $17;
 $18 = HEAP32[$1>>2]|0;
 $19 = (($18) + ($16)|0);
 HEAP8[$19>>0] = $15;
 STACKTOP = sp;return;
}
function _check_next($ls,$set) {
 $ls = $ls|0;
 $set = $set|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strchr($set,$0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _save($ls,$0);
 $4 = (($ls) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 HEAP32[$5>>2] = $7;
 $8 = ($6|0)==(0);
 $9 = HEAP32[$4>>2]|0;
 if ($8) {
  $15 = (_luaZ_fill($9)|0);
  $16 = $15;
 } else {
  $10 = (($9) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 1|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $14 = $13&255;
  $16 = $14;
 }
 HEAP32[$ls>>2] = $16;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _read_numeral($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $expo$0$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$ls>>2]|0;
 _save($ls,$0);
 $1 = (($ls) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -1)|0;
 HEAP32[$2>>2] = $4;
 $5 = ($3|0)==(0);
 $6 = HEAP32[$1>>2]|0;
 if ($5) {
  $12 = (_luaZ_fill($6)|0);
  $13 = $12;
 } else {
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 1|0);
  HEAP32[$7>>2] = $9;
  $10 = HEAP8[$8>>0]|0;
  $11 = $10&255;
  $13 = $11;
 }
 HEAP32[$ls>>2] = $13;
 $14 = ($0|0)==(48);
 if ($14) {
  $15 = (_check_next($ls,4936)|0);
  $16 = ($15|0)==(0);
  $$ = $16 ? 4928 : 4944;
  $expo$0$ph = $$;
 } else {
  $expo$0$ph = 4928;
 }
 while(1) {
  $17 = (_check_next($ls,$expo$0$ph)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   (_check_next($ls,4952)|0);
  }
  $19 = HEAP32[$ls>>2]|0;
  $20 = (($19) + 1)|0;
  $21 = (2696 + ($20)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 & 16;
  $24 = ($23<<24>>24)!=(0);
  $25 = ($19|0)==(46);
  $or$cond = $24 | $25;
  if (!($or$cond)) {
   break;
  }
  _save($ls,$19);
  $26 = HEAP32[$1>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($27|0)==(0);
  $30 = HEAP32[$1>>2]|0;
  if ($29) {
   $36 = (_luaZ_fill($30)|0);
   $37 = $36;
  } else {
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 1|0);
   HEAP32[$31>>2] = $33;
   $34 = HEAP8[$32>>0]|0;
   $35 = $34&255;
   $37 = $35;
  }
  HEAP32[$ls>>2] = $37;
 }
 _save($ls,0);
 $38 = (($ls) + 76|0);
 $39 = HEAP8[$38>>0]|0;
 _buffreplace($ls,46,$39);
 $40 = (($ls) + 60|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($41) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + -1)|0;
 $46 = (_luaO_str2d($42,$45,$seminfo)|0);
 $47 = ($46|0)==(0);
 if (!($47)) {
  STACKTOP = sp;return;
 }
 _trydecpoint($ls,$seminfo);
 STACKTOP = sp;return;
}
function _buffreplace($ls,$from,$to) {
 $ls = $ls|0;
 $from = $from|0;
 $to = $to|0;
 var $$in = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($3|0)==(0);
 if ($5) {
  STACKTOP = sp;return;
 } else {
  $$in = $3;
 }
 while(1) {
  $6 = (($$in) + -1)|0;
  $7 = (($4) + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==($from<<24>>24);
  if ($9) {
   HEAP8[$7>>0] = $to;
  }
  $10 = ($6|0)==(0);
  if ($10) {
   break;
  } else {
   $$in = $6;
  }
 }
 STACKTOP = sp;return;
}
function _trydecpoint($ls,$seminfo) {
 $ls = $ls|0;
 $seminfo = $seminfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 76|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (_localeconv()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[$3>>0]|0;
 HEAP8[$0>>0] = $4;
 _buffreplace($ls,$1,$4);
 $5 = (($ls) + 60|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($6) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (_luaO_str2d($7,$10,$seminfo)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP8[$0>>0]|0;
  _buffreplace($ls,$13,46);
  _lexerror($ls,4960,287);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _readhexaesc($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 HEAP32[$c>>2] = 120;
 $0 = (($ls) + 56|0);
 $i$03 = 1;$r$04 = 0;
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  $2 = HEAP32[$1>>2]|0;
  $3 = (($2) + -1)|0;
  HEAP32[$1>>2] = $3;
  $4 = ($2|0)==(0);
  $5 = HEAP32[$0>>2]|0;
  if ($4) {
   $11 = (_luaZ_fill($5)|0);
   $12 = $11;
  } else {
   $6 = (($5) + 4|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($7) + 1|0);
   HEAP32[$6>>2] = $8;
   $9 = HEAP8[$7>>0]|0;
   $10 = $9&255;
   $12 = $10;
  }
  HEAP32[$ls>>2] = $12;
  $13 = (($c) + ($i$03<<2)|0);
  HEAP32[$13>>2] = $12;
  $14 = (($12) + 1)|0;
  $15 = (2696 + ($14)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 & 16;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   label = 6;
   break;
  }
  $20 = $r$04 << 4;
  $21 = (_luaO_hexavalue($12)|0);
  $22 = (($21) + ($20))|0;
  $23 = (($i$03) + 1)|0;
  $24 = ($23|0)<(3);
  if ($24) {
   $i$03 = $23;$r$04 = $22;
  } else {
   label = 8;
   break;
  }
 }
 if ((label|0) == 6) {
  $19 = (($i$03) + 1)|0;
  _escerror($ls,$c,$19,5096);
  // unreachable;
 }
 else if ((label|0) == 8) {
  STACKTOP = sp;return ($22|0);
 }
 return 0|0;
}
function _escerror($ls,$c,$n,$msg) {
 $ls = $ls|0;
 $c = $c|0;
 $n = $n|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 _save($ls,92);
 $3 = ($n|0)>(0);
 L1: do {
  if ($3) {
   $i$01 = 0;
   while(1) {
    $4 = (($c) + ($i$01<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5|0)==(-1);
    if ($6) {
     break L1;
    }
    _save($ls,$5);
    $7 = (($i$01) + 1)|0;
    $8 = ($7|0)<($n|0);
    if ($8) {
     $i$01 = $7;
    } else {
     break;
    }
   }
  }
 } while(0);
 _lexerror($ls,$msg,289);
 // unreachable;
}
function _readdecesc($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $i$0$lcssa = 0, $i$01 = 0, $r$0$lcssa = 0, $r$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($ls) + 56|0);
 $i$01 = 0;$r$02 = 0;
 while(1) {
  $1 = HEAP32[$ls>>2]|0;
  $2 = (($1) + 1)|0;
  $3 = (2696 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4 & 2;
  $6 = ($5<<24>>24)==(0);
  if ($6) {
   $i$0$lcssa = $i$01;$r$0$lcssa = $r$02;
   break;
  }
  $7 = (($c) + ($i$01<<2)|0);
  HEAP32[$7>>2] = $1;
  $8 = ($r$02*10)|0;
  $9 = (($8) + -48)|0;
  $10 = (($9) + ($1))|0;
  $11 = HEAP32[$0>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$11>>2] = $13;
  $14 = ($12|0)==(0);
  $15 = HEAP32[$0>>2]|0;
  if ($14) {
   $21 = (_luaZ_fill($15)|0);
   $22 = $21;
  } else {
   $16 = (($15) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 1|0);
   HEAP32[$16>>2] = $18;
   $19 = HEAP8[$17>>0]|0;
   $20 = $19&255;
   $22 = $20;
  }
  HEAP32[$ls>>2] = $22;
  $23 = (($i$01) + 1)|0;
  $24 = ($23|0)<(3);
  if ($24) {
   $i$01 = $23;$r$02 = $10;
  } else {
   $i$0$lcssa = $23;$r$0$lcssa = $10;
   break;
  }
 }
 $25 = ($r$0$lcssa|0)>(255);
 if ($25) {
  _escerror($ls,$c,$i$0$lcssa,5064);
  // unreachable;
 } else {
  STACKTOP = sp;return ($r$0$lcssa|0);
 }
 return 0|0;
}
function _txtToken($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $switch = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $$off = (($token) + -287)|0;
 $switch = ($$off>>>0)<(3);
 if ($switch) {
  _save($ls,0);
  $0 = (($ls) + 52|0);
  $1 = HEAP32[$0>>2]|0;
  $2 = (($ls) + 60|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$vararg_buffer>>2] = $4;
  $5 = (_luaO_pushfstring($1,4872,$vararg_buffer)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 } else {
  $6 = (_luaX_token2str($ls,$token)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaopen_math($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,28);
 _luaL_setfuncs($L,5528,0);
 _lua_pushnumber($L,3.141592653589793116);
 _lua_setfield($L,-2,5760);
 _lua_pushnumber($L,inf);
 _lua_setfield($L,-2,5768);
 STACKTOP = sp;return 1;
}
function _math_abs($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_abs((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_acos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_acos((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_asin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_asin((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_atan2($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+Math_atan2((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 STACKTOP = sp;return 1;
}
function _math_atan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_atan((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_ceil($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_ceil((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_cosh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_cosh((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_cos($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_cos((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_deg($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 / 0.0174532925199432954744;
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_exp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_exp((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_floor($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_floor((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_fmod($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+_fmod((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 STACKTOP = sp;return 1;
}
function _math_frexp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $e = sp;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_frexp($0,$e));
 _lua_pushnumber($L,$1);
 $2 = HEAP32[$e>>2]|0;
 _lua_pushinteger($L,$2);
 STACKTOP = sp;return 2;
}
function _math_ldexp($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (+_ldexp($0,$1));
 _lua_pushnumber($L,$2);
 STACKTOP = sp;return 1;
}
function _math_log10($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_log10((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_log($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $res$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 do {
  if ($2) {
   $3 = (+Math_log((+$0)));
   $res$0 = $3;
  } else {
   $4 = (+_luaL_checknumber($L,2));
   $5 = $4 == 10.0;
   if ($5) {
    $6 = (+_log10((+$0)));
    $res$0 = $6;
    break;
   } else {
    $7 = (+Math_log((+$0)));
    $8 = (+Math_log((+$4)));
    $9 = $7 / $8;
    $res$0 = $9;
    break;
   }
  }
 } while(0);
 _lua_pushnumber($L,$res$0);
 STACKTOP = sp;return 1;
}
function _math_max($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $dmax$0$lcssa = 0.0, $dmax$02 = 0.0, $dmax$1 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (+_luaL_checknumber($L,1));
 $2 = ($0|0)<(2);
 if ($2) {
  $dmax$0$lcssa = $1;
 } else {
  $dmax$02 = $1;$i$01 = 2;
  while(1) {
   $3 = (+_luaL_checknumber($L,$i$01));
   $4 = $3 > $dmax$02;
   $dmax$1 = $4 ? $3 : $dmax$02;
   $5 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $dmax$0$lcssa = $dmax$1;
    break;
   } else {
    $dmax$02 = $dmax$1;$i$01 = $5;
   }
  }
 }
 _lua_pushnumber($L,$dmax$0$lcssa);
 STACKTOP = sp;return 1;
}
function _math_min($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $dmin$0$lcssa = 0.0, $dmin$02 = 0.0, $dmin$1 = 0.0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 $1 = (+_luaL_checknumber($L,1));
 $2 = ($0|0)<(2);
 if ($2) {
  $dmin$0$lcssa = $1;
 } else {
  $dmin$02 = $1;$i$01 = 2;
  while(1) {
   $3 = (+_luaL_checknumber($L,$i$01));
   $4 = $3 < $dmin$02;
   $dmin$1 = $4 ? $3 : $dmin$02;
   $5 = (($i$01) + 1)|0;
   $exitcond = ($i$01|0)==($0|0);
   if ($exitcond) {
    $dmin$0$lcssa = $dmin$1;
    break;
   } else {
    $dmin$02 = $dmin$1;$i$01 = $5;
   }
  }
 }
 _lua_pushnumber($L,$dmin$0$lcssa);
 STACKTOP = sp;return 1;
}
function _math_modf($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $ip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ip = sp;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_modf((+$0),($ip|0)));
 $2 = +HEAPF64[$ip>>3];
 _lua_pushnumber($L,$2);
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 2;
}
function _math_pow($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_luaL_checknumber($L,2));
 $2 = (+Math_pow((+$0),(+$1)));
 _lua_pushnumber($L,$2);
 STACKTOP = sp;return 1;
}
function _math_rad($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = $0 * 0.0174532925199432954744;
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_random($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_rand()|0);
 $1 = (($0|0) % 2147483647)&-1;
 $2 = (+($1|0));
 $3 = $2 / 2147483647.0;
 $4 = (_lua_gettop($L)|0);
 if ((($4|0) == 2)) {
  $10 = (+_luaL_checknumber($L,1));
  $11 = (+_luaL_checknumber($L,2));
  $12 = !($10 <= $11);
  if ($12) {
   (_luaL_argerror($L,2,6008)|0);
  }
  $13 = $11 - $10;
  $14 = $13 + 1.0;
  $15 = $3 * $14;
  $16 = (+Math_floor((+$15)));
  $17 = $10 + $16;
  _lua_pushnumber($L,$17);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($4|0) == 1)) {
  $5 = (+_luaL_checknumber($L,1));
  $6 = !($5 >= 1.0);
  if ($6) {
   (_luaL_argerror($L,1,6008)|0);
  }
  $7 = $3 * $5;
  $8 = (+Math_floor((+$7)));
  $9 = $8 + 1.0;
  _lua_pushnumber($L,$9);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else if ((($4|0) == 0)) {
  _lua_pushnumber($L,$3);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = (_luaL_error($L,6032,$vararg_buffer)|0);
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _math_randomseed($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checkunsigned($L,1)|0);
 _srand($0);
 (_rand()|0);
 STACKTOP = sp;return 0;
}
function _math_sinh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_sinh((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_sin($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sin((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_sqrt($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_sqrt((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_tanh($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+_tanh((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _math_tan($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (+Math_tan((+$0)));
 _lua_pushnumber($L,$1);
 STACKTOP = sp;return 1;
}
function _luaM_growaux_($L,$block,$size,$size_elems,$limit,$what) {
 $L = $L|0;
 $block = $block|0;
 $size = $size|0;
 $size_elems = $size_elems|0;
 $limit = $limit|0;
 $what = $what|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $newsize$0 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$size>>2]|0;
 $1 = (($limit|0) / 2)&-1;
 $2 = ($0|0)<($1|0);
 if ($2) {
  $4 = $0 << 1;
  $5 = ($4|0)<(4);
  $$ = $5 ? 4 : $4;
  $newsize$0 = $$;
 } else {
  $3 = ($0|0)<($limit|0);
  if ($3) {
   $newsize$0 = $limit;
  } else {
   HEAP32[$vararg_buffer>>2] = $what;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $limit;
   _luaG_runerror($L,6064,$vararg_buffer);
   // unreachable;
  }
 }
 $6 = (($newsize$0) + 1)|0;
 $7 = (4294967293 / ($size_elems>>>0))&-1;
 $8 = ($6>>>0)>($7>>>0);
 if ($8) {
  _luaM_toobig($L);
  // unreachable;
 } else {
  $9 = HEAP32[$size>>2]|0;
  $10 = Math_imul($9, $size_elems)|0;
  $11 = Math_imul($newsize$0, $size_elems)|0;
  $12 = (_luaM_realloc_($L,$block,$10,$11)|0);
  HEAP32[$size>>2] = $newsize$0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _luaM_toobig($L) {
 $L = $L|0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _luaG_runerror($L,6096,$vararg_buffer);
 // unreachable;
}
function _luaM_realloc_($L,$block,$osize,$nsize) {
 $L = $L|0;
 $block = $block|0;
 $osize = $osize|0;
 $nsize = $nsize|0;
 var $$neg = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $newblock$0 = 0, $newblock$1 = 0, $or$cond = 0, $osize$op = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($block|0)!=(0|0);
 $3 = HEAP32[$1>>2]|0;
 $4 = (($1) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiiii[$3 & 31]($5,$block,$osize,$nsize)|0);
 $7 = ($6|0)!=(0|0);
 $8 = ($nsize|0)==(0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  $newblock$1 = $6;
 } else {
  $9 = (($1) + 63|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $newblock$0 = $6;
  } else {
   _luaC_fullgc($L,1);
   $12 = HEAP32[$1>>2]|0;
   $13 = HEAP32[$4>>2]|0;
   $14 = (FUNCTION_TABLE_iiiii[$12 & 31]($13,$block,$osize,$nsize)|0);
   $newblock$0 = $14;
  }
  $15 = ($newblock$0|0)==(0|0);
  if ($15) {
   _luaD_throw($L,4);
   // unreachable;
  } else {
   $newblock$1 = $newblock$0;
  }
 }
 $16 = (($1) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $osize$op = (0 - ($osize))|0;
 $$neg = $2 ? $osize$op : 0;
 $18 = (($$neg) + ($nsize))|0;
 $19 = (($18) + ($17))|0;
 HEAP32[$16>>2] = $19;
 STACKTOP = sp;return ($newblock$1|0);
}
function _luaopen_package($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_getsubtable($L,-1001000,6136)|0);
 _lua_createtable($L,0,1);
 _lua_pushcclosure($L,153,0);
 _lua_setfield($L,-2,6144);
 (_lua_setmetatable($L,-2)|0);
 _lua_createtable($L,0,3);
 _luaL_setfuncs($L,6152,0);
 _createsearcherstable($L);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-3,6184);
 _lua_setfield($L,-2,6192);
 _setpath($L,6208,6216,6232,6248);
 _setpath($L,6392,6400,6416,6432);
 (_lua_pushlstring($L,6504,10)|0);
 _lua_setfield($L,-2,6520);
 (_luaL_getsubtable($L,-1001000,6528)|0);
 _lua_setfield($L,-2,6536);
 (_luaL_getsubtable($L,-1001000,6544)|0);
 _lua_setfield($L,-2,6560);
 _lua_rawgeti($L,-1001000,2);
 _lua_pushvalue($L,-2);
 _luaL_setfuncs($L,6568,1);
 _lua_settop($L,-2);
 STACKTOP = sp;return 1;
}
function _gctm($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_len($L,1)|0);
 $1 = ($0|0)>(0);
 if ($1) {
  $n$01 = $0;
 } else {
  STACKTOP = sp;return 0;
 }
 while(1) {
  _lua_rawgeti($L,1,$n$01);
  _lua_settop($L,-2);
  $2 = (($n$01) + -1)|0;
  $3 = ($2|0)>(0);
  if ($3) {
   $n$01 = $2;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 0;
}
function _createsearcherstable($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,4,0);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,154,1);
 _lua_rawseti($L,-2,1);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,155,1);
 _lua_rawseti($L,-2,2);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,156,1);
 _lua_rawseti($L,-2,3);
 _lua_pushvalue($L,-2);
 _lua_pushcclosure($L,157,1);
 _lua_rawseti($L,-2,4);
 STACKTOP = sp;return;
}
function _setpath($L,$fieldname,$envname1,$envname2,$def) {
 $L = $L|0;
 $fieldname = $fieldname|0;
 $envname1 = $envname1|0;
 $envname2 = $envname2|0;
 $def = $def|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $path$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_getenv(($envname1|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_getenv(($envname2|0))|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $path$01 = $2;
   label = 3;
  }
 } else {
  $path$01 = $0;
  label = 3;
 }
 if ((label|0) == 3) {
  $4 = (_noenv($L)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = (_luaL_gsub($L,$path$01,6760,6768)|0);
   (_luaL_gsub($L,$6,6776,$def)|0);
   _lua_remove($L,-2);
   _lua_setfield($L,-2,$fieldname);
   STACKTOP = sp;return;
  }
 }
 (_lua_pushstring($L,$def)|0);
 _lua_setfield($L,-2,$fieldname);
 STACKTOP = sp;return;
}
function _ll_module($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_lua_gettop($L)|0);
 _luaL_pushmodule($L,$0,1);
 _lua_getfield($L,-1,6680);
 $2 = (_lua_type($L,-1)|0);
 $3 = ($2|0)==(0);
 _lua_settop($L,-2);
 if ($3) {
  _modinit($L,$0);
 }
 _lua_pushvalue($L,-1);
 _set_env($L);
 _dooptions($L,$1);
 STACKTOP = sp;return 1;
}
function _ll_require($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_settop($L,1);
 _lua_getfield($L,-1001000,6528);
 _lua_getfield($L,2,$0);
 $1 = (_lua_toboolean($L,-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 _lua_settop($L,-2);
 _findloader($L,$0);
 (_lua_pushstring($L,$0)|0);
 _lua_insert($L,-2);
 _lua_callk($L,2,1,0,0);
 $3 = (_lua_type($L,-1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  _lua_setfield($L,2,$0);
 }
 _lua_getfield($L,2,$0);
 $5 = (_lua_type($L,-1)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return 1;
 }
 _lua_pushboolean($L,1);
 _lua_pushvalue($L,-1);
 _lua_setfield($L,2,$0);
 STACKTOP = sp;return 1;
}
function _findloader($L,$name) {
 $L = $L|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $msg = 0, $vararg_buffer1 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $vararg_buffer1 = sp;
 $msg = sp + 8|0;
 _luaL_buffinit($L,$msg);
 _lua_getfield($L,-1001001,6192);
 $0 = (_lua_type($L,3)|0);
 $1 = ($0|0)==(5);
 if ($1) {
  $i$0 = 1;
 } else {
  (_luaL_error($L,6608,$vararg_buffer1)|0);
  $i$0 = 1;
 }
 while(1) {
  _lua_rawgeti($L,3,$i$0);
  $2 = (_lua_type($L,-1)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   _lua_settop($L,-2);
   _luaL_pushresult($msg);
   $4 = (_lua_tolstring($L,-1,0)|0);
   HEAP32[$vararg_buffer1>>2] = $name;
   $vararg_ptr3 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr3>>2] = $4;
   (_luaL_error($L,6648,$vararg_buffer1)|0);
  }
  (_lua_pushstring($L,$name)|0);
  _lua_callk($L,1,2,0,0);
  $5 = (_lua_type($L,-2)|0);
  $6 = ($5|0)==(6);
  if ($6) {
   break;
  }
  $7 = (_lua_isstring($L,-2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   _lua_settop($L,-3);
  } else {
   _lua_settop($L,-2);
   _luaL_addvalue($msg);
  }
  $9 = (($i$0) + 1)|0;
  $i$0 = $9;
 }
 STACKTOP = sp;return;
}
function _modinit($L,$modname) {
 $L = $L|0;
 $modname = $modname|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $dot$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushvalue($L,-1);
 _lua_setfield($L,-2,6736);
 (_lua_pushstring($L,$modname)|0);
 _lua_setfield($L,-2,6680);
 $0 = (_strrchr($modname,46)|0);
 $1 = ($0|0)==(0|0);
 $2 = (($0) + 1|0);
 $dot$0 = $1 ? $modname : $2;
 $3 = $dot$0;
 $4 = $modname;
 $5 = (($3) - ($4))|0;
 (_lua_pushlstring($L,$modname,$5)|0);
 _lua_setfield($L,-2,6744);
 STACKTOP = sp;return;
}
function _set_env($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ar = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer = sp;
 $ar = sp + 4|0;
 $0 = (_lua_getstack($L,1,$ar)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  label = 4;
 } else {
  $2 = (_lua_getinfo($L,6688,$ar)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   label = 4;
  } else {
   $4 = (_lua_iscfunction($L,-1)|0);
   $5 = ($4|0)==(0);
   if (!($5)) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  (_luaL_error($L,6696,$vararg_buffer)|0);
 }
 _lua_pushvalue($L,-2);
 (_lua_setupvalue($L,-2,1)|0);
 _lua_settop($L,-2);
 STACKTOP = sp;return;
}
function _dooptions($L,$n) {
 $L = $L|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)<(2);
 if ($0) {
  STACKTOP = sp;return;
 } else {
  $i$01 = 2;
 }
 while(1) {
  $1 = (_lua_type($L,$i$01)|0);
  $2 = ($1|0)==(6);
  if ($2) {
   _lua_pushvalue($L,$i$01);
   _lua_pushvalue($L,-2);
   _lua_callk($L,1,0,0,0);
  }
  $3 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($n|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $3;
  }
 }
 STACKTOP = sp;return;
}
function _noenv($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,6784);
 $0 = (_lua_toboolean($L,-1)|0);
 _lua_settop($L,-2);
 STACKTOP = sp;return ($0|0);
}
function _searcher_preload($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 _lua_getfield($L,-1001000,6544);
 _lua_getfield($L,-1,$0);
 $1 = (_lua_type($L,-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return 1;
 }
 HEAP32[$vararg_buffer>>2] = $0;
 (_lua_pushfstring($L,7048,$vararg_buffer)|0);
 STACKTOP = sp;return 1;
}
function _searcher_Lua($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_findfile($L,$0,6208)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_luaL_loadfilex($L,$1,0)|0);
 $4 = ($3|0)==(0);
 $5 = $4&1;
 $6 = (_checkload($L,$5,$1)|0);
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _searcher_C($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_findfile($L,$0,6392)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_loadfunc($L,$1,$0)|0);
 $4 = ($3|0)==(0);
 $5 = $4&1;
 $6 = (_checkload($L,$5,$1)|0);
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _searcher_Croot($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_strchr($0,46)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = $1;
   $4 = $0;
   $5 = (($3) - ($4))|0;
   (_lua_pushlstring($L,$0,$5)|0);
   $6 = (_lua_tolstring($L,-1,0)|0);
   $7 = (_findfile($L,$6,6392)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 1;
   } else {
    $9 = (_loadfunc($L,$7,$0)|0);
    if ((($9|0) == 0)) {
     (_lua_pushstring($L,$7)|0);
     $$0 = 2;
     break;
    } else if ((($9|0) == 2)) {
     HEAP32[$vararg_buffer>>2] = $0;
     $vararg_ptr1 = (($vararg_buffer) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $7;
     (_lua_pushfstring($L,6808,$vararg_buffer)|0);
     $$0 = 1;
     break;
    } else {
     $10 = (_checkload($L,0,$7)|0);
     $$0 = $10;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _findfile($L,$name,$pname) {
 $L = $L|0;
 $name = $name|0;
 $pname = $pname|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _lua_getfield($L,-1001001,$pname);
 $0 = (_lua_tolstring($L,-1,0)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$vararg_buffer>>2] = $pname;
  (_luaL_error($L,6984,$vararg_buffer)|0);
 }
 $2 = (_searchpath($L,$name,$0,6888,6800)|0);
 STACKTOP = sp;return ($2|0);
}
function _loadfunc($L,$filename,$modname) {
 $L = $L|0;
 $filename = $filename|0;
 $modname = $modname|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (_luaL_gsub($L,$modname,6888,6896)|0);
 $1 = (_strchr($0,45)|0);
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $$01 = $0;
  } else {
   $3 = $1;
   $4 = $0;
   $5 = (($3) - ($4))|0;
   $6 = (_lua_pushlstring($L,$0,$5)|0);
   HEAP32[$vararg_buffer1>>2] = $6;
   $7 = (_lua_pushfstring($L,6904,$vararg_buffer1)|0);
   $8 = (_ll_loadfunc($L,$filename,$7)|0);
   $9 = ($8|0)==(2);
   if ($9) {
    $10 = (($1) + 1|0);
    $$01 = $10;
    break;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$vararg_buffer1>>2] = $$01;
 $11 = (_lua_pushfstring($L,6904,$vararg_buffer1)|0);
 $12 = (_ll_loadfunc($L,$filename,$11)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _checkload($L,$stat,$filename) {
 $L = $L|0;
 $stat = $stat|0;
 $filename = $filename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($stat|0)==(0);
 if ($0) {
  $1 = (_lua_tolstring($L,1,0)|0);
  $2 = (_lua_tolstring($L,-1,0)|0);
  HEAP32[$vararg_buffer>>2] = $1;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $filename;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $2;
  $3 = (_luaL_error($L,6840,$vararg_buffer)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_lua_pushstring($L,$filename)|0);
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _ll_loadfunc($L,$path,$sym) {
 $L = $L|0;
 $path = $path|0;
 $sym = $sym|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_ll_checkclib($L,$path)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   _ll_load($L);
   $$0 = 1;
  } else {
   $2 = HEAP8[$sym>>0]|0;
   $3 = ($2<<24>>24)==(42);
   if ($3) {
    _lua_pushboolean($L,1);
    $$0 = 0;
    break;
   } else {
    _ll_sym($L);
    $$0 = 2;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ll_checkclib($L,$path) {
 $L = $L|0;
 $path = $path|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1001000,6136);
 _lua_getfield($L,-1,$path);
 $0 = (_lua_touserdata($L,-1)|0);
 _lua_settop($L,-3);
 STACKTOP = sp;return ($0|0);
}
function _ll_load($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_pushlstring($L,6920,58)|0);
 STACKTOP = sp;return;
}
function _ll_sym($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_lua_pushlstring($L,6920,58)|0);
 STACKTOP = sp;return;
}
function _searchpath($L,$name,$path,$sep,$dirsep) {
 $L = $L|0;
 $name = $name|0;
 $path = $path|0;
 $sep = $sep|0;
 $dirsep = $dirsep|0;
 var $$0 = 0, $$01$ph = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $msg = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $vararg_buffer = sp;
 $msg = sp + 8|0;
 _luaL_buffinit($L,$msg);
 $0 = HEAP8[$sep>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$01$ph = $name;
 } else {
  $2 = (_luaL_gsub($L,$name,$sep,$dirsep)|0);
  $$01$ph = $2;
 }
 $3 = (_pushnexttemplate($L,$path)|0);
 $4 = ($3|0)==(0|0);
 L4: do {
  if (!($4)) {
   $9 = $3;
   while(1) {
    $5 = (_lua_tolstring($L,-1,0)|0);
    $6 = (_luaL_gsub($L,$5,7016,$$01$ph)|0);
    _lua_remove($L,-2);
    $7 = (_readable($6)|0);
    $8 = ($7|0)==(0);
    if (!($8)) {
     $$0 = $6;
     break;
    }
    HEAP32[$vararg_buffer>>2] = $6;
    (_lua_pushfstring($L,7024,$vararg_buffer)|0);
    _lua_remove($L,-2);
    _luaL_addvalue($msg);
    $10 = (_pushnexttemplate($L,$9)|0);
    $11 = ($10|0)==(0|0);
    if ($11) {
     break L4;
    } else {
     $9 = $10;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _luaL_pushresult($msg);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pushnexttemplate($L,$path) {
 $L = $L|0;
 $path = $path|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $l$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $path;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  if ((($0<<24>>24) == 0)) {
   $$01 = 0;
   label = 7;
   break;
  } else if (!((($0<<24>>24) == 59))) {
   break;
  }
  $1 = (($$0) + 1|0);
  $$0 = $1;
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$01|0);
 }
 $2 = (_strchr($$0,59)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (_strlen(($$0|0))|0);
  $5 = (($$0) + ($4)|0);
  $l$0 = $5;
 } else {
  $l$0 = $2;
 }
 $6 = $l$0;
 $7 = $$0;
 $8 = (($6) - ($7))|0;
 (_lua_pushlstring($L,$$0,$8)|0);
 $$01 = $l$0;
 STACKTOP = sp;return ($$01|0);
}
function _readable($filename) {
 $filename = $filename|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen(($filename|0),(7040|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  (_fclose(($0|0))|0);
  $$0 = 1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _ll_loadlib($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_ll_loadfunc($L,$0,$1)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_insert($L,-2);
 $4 = ($2|0)==(1);
 $5 = $4 ? 7128 : 7136;
 (_lua_pushstring($L,$5)|0);
 $$0 = 3;
 STACKTOP = sp;return ($$0|0);
}
function _ll_searchpath($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_luaL_optlstring($L,3,6888,0)|0);
 $3 = (_luaL_optlstring($L,4,6800,0)|0);
 $4 = (_searchpath($L,$0,$1,$2,$3)|0);
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 _lua_pushnil($L);
 _lua_insert($L,-2);
 $$0 = 2;
 STACKTOP = sp;return ($$0|0);
}
function _ll_seeall($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_lua_getmetatable($L,1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _lua_createtable($L,0,1);
  _lua_pushvalue($L,-1);
  (_lua_setmetatable($L,1)|0);
 }
 _lua_rawgeti($L,-1001000,2);
 _lua_setfield($L,-2,7120);
 STACKTOP = sp;return 0;
}
function _luaO_int2fb($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $e$0$lcssa = 0, $e$03 = 0, $phitmp = 0, $phitmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x>>>0)<(8);
 if ($0) {
  $$01 = $x;
  STACKTOP = sp;return ($$01|0);
 }
 $1 = ($x>>>0)>(15);
 if ($1) {
  $$02 = $x;$e$03 = 1;
  while(1) {
   $2 = (($$02) + 1)|0;
   $3 = $2 >>> 1;
   $phitmp = (($e$03) + 1)|0;
   $4 = ($2>>>0)>(31);
   if ($4) {
    $$02 = $3;$e$03 = $phitmp;
   } else {
    break;
   }
  }
  $phitmp5 = $phitmp << 3;
  $$0$lcssa = $3;$e$0$lcssa = $phitmp5;
 } else {
  $$0$lcssa = $x;$e$0$lcssa = 8;
 }
 $5 = (($$0$lcssa) + -8)|0;
 $6 = $e$0$lcssa | $5;
 $$01 = $6;
 STACKTOP = sp;return ($$01|0);
}
function _luaO_fb2int($x) {
 $x = $x|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x >>> 3;
 $1 = $0 & 31;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = $x;
 } else {
  $3 = $x & 7;
  $4 = $3 | 8;
  $5 = (($1) + -1)|0;
  $6 = $4 << $5;
  $$0 = $6;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaO_ceillog2($x) {
 $x = $x|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $l$0$lcssa = 0, $l$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($x) + -1)|0;
 $1 = ($0>>>0)>(255);
 if ($1) {
  $$01 = $0;$l$02 = 0;
  while(1) {
   $2 = (($l$02) + 8)|0;
   $3 = $$01 >>> 8;
   $4 = ($$01>>>0)>(65535);
   if ($4) {
    $$01 = $3;$l$02 = $2;
   } else {
    $$0$lcssa = $3;$l$0$lcssa = $2;
    break;
   }
  }
 } else {
  $$0$lcssa = $0;$l$0$lcssa = 0;
 }
 $5 = (7160 + ($$0$lcssa)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + ($l$0$lcssa))|0;
 STACKTOP = sp;return ($8|0);
}
function _luaO_arith($op,$v1,$v2) {
 $op = $op|0;
 $v1 = +$v1;
 $v2 = +$v2;
 var $$0 = 0.0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($op|0) {
 case 5:  {
  $8 = (+Math_pow((+$v1),(+$v2)));
  $$0 = $8;
  break;
 }
 case 1:  {
  $1 = $v1 - $v2;
  $$0 = $1;
  break;
 }
 case 0:  {
  $0 = $v1 + $v2;
  $$0 = $0;
  break;
 }
 case 3:  {
  $3 = $v1 / $v2;
  $$0 = $3;
  break;
 }
 case 6:  {
  $9 = -$v1;
  $$0 = $9;
  break;
 }
 case 4:  {
  $4 = $v1 / $v2;
  $5 = (+Math_floor((+$4)));
  $6 = $5 * $v2;
  $7 = $v1 - $6;
  $$0 = $7;
  break;
 }
 case 2:  {
  $2 = $v1 * $v2;
  $$0 = $2;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 STACKTOP = sp;return (+$$0);
}
function _luaO_hexavalue($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + 1)|0;
 $1 = (2696 + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 & 2;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $6 = $c | 32;
  $7 = (($6) + -87)|0;
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 } else {
  $5 = (($c) + -48)|0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaO_str2d($s,$len,$result) {
 $s = $s|0;
 $len = $len|0;
 $result = $result|0;
 var $$0 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $endptr = sp;
 $0 = (_strpbrk($s,7416)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_strpbrk($s,7424)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = (+_strtod($s,$endptr));
  $storemerge = $5;
 } else {
  $4 = (+_lua_strx2number($s,$endptr));
  $storemerge = $4;
 }
 HEAPF64[$result>>3] = $storemerge;
 $6 = HEAP32[$endptr>>2]|0;
 $7 = ($6|0)==($s|0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$endptr>>2]|0;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = (($10) + 1)|0;
 $12 = (2696 + ($11)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13 & 8;
 $15 = ($14<<24>>24)==(0);
 if ($15) {
  $$lcssa = $8;
 } else {
  $17 = $8;
  while(1) {
   $16 = (($17) + 1|0);
   $18 = HEAP8[$16>>0]|0;
   $19 = $18&255;
   $20 = (($19) + 1)|0;
   $21 = (2696 + ($20)|0);
   $22 = HEAP8[$21>>0]|0;
   $23 = $22 & 8;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    break;
   } else {
    $17 = $16;
   }
  }
  HEAP32[$endptr>>2] = $16;
  $$lcssa = $16;
 }
 $25 = (($s) + ($len)|0);
 $26 = ($$lcssa|0)==($25|0);
 $27 = $26&1;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _lua_strx2number($s,$endptr) {
 $s = $s|0;
 $endptr = $endptr|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0.0, $81 = 0, $82 = 0.0, $9 = 0, $e = 0, $exp1$0$ = 0, $exp1$0$lcssa = 0, $exp1$01 = 0, $i = 0, $r$0 = 0.0, $r$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 8|0;
 $e = sp + 4|0;
 $i = sp;
 HEAP32[$0>>2] = $s;
 HEAP32[$e>>2] = 0;
 HEAP32[$i>>2] = 0;
 HEAP32[$endptr>>2] = $s;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = (($3) + 1)|0;
 $5 = (2696 + ($4)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 8;
 $8 = ($7<<24>>24)==(0);
 if (!($8)) {
  $10 = $1;
  while(1) {
   $9 = (($10) + 1|0);
   HEAP32[$0>>2] = $9;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11&255;
   $13 = (($12) + 1)|0;
   $14 = (2696 + ($13)|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 8;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    break;
   } else {
    $10 = $9;
   }
  }
 }
 $18 = (_isneg($0)|0);
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP8[$19>>0]|0;
 $21 = ($20<<24>>24)==(48);
 if (!($21)) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $22 = (($19) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 if (!((($23<<24>>24) == 88) | (($23<<24>>24) == 120))) {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $24 = HEAP32[$0>>2]|0;
 $25 = (($24) + 2|0);
 HEAP32[$0>>2] = $25;
 $26 = (+_readhexa($0,0.0,$i));
 $27 = HEAP32[$0>>2]|0;
 $28 = HEAP8[$27>>0]|0;
 $29 = ($28<<24>>24)==(46);
 if ($29) {
  $30 = (($27) + 1|0);
  HEAP32[$0>>2] = $30;
  $31 = (+_readhexa($0,$26,$e));
  $r$0 = $31;
 } else {
  $r$0 = $26;
 }
 $32 = HEAP32[$i>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  $34 = HEAP32[$e>>2]|0;
  $35 = ($34|0)==(0);
  if ($35) {
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  }
 }
 $36 = HEAP32[$e>>2]|0;
 $37 = Math_imul($36, -4)|0;
 HEAP32[$e>>2] = $37;
 $38 = HEAP32[$0>>2]|0;
 HEAP32[$endptr>>2] = $38;
 $39 = HEAP32[$0>>2]|0;
 $40 = HEAP8[$39>>0]|0;
 if ((($40<<24>>24) == 80) | (($40<<24>>24) == 112)) {
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + 1|0);
  HEAP32[$0>>2] = $42;
  $43 = (_isneg($0)|0);
  $44 = HEAP32[$0>>2]|0;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($46) + 1)|0;
  $48 = (2696 + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 & 2;
  $51 = ($50<<24>>24)==(0);
  if (!($51)) {
   $52 = HEAP32[$0>>2]|0;
   $53 = HEAP8[$52>>0]|0;
   $54 = $53&255;
   $55 = (($54) + 1)|0;
   $56 = (2696 + ($55)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 & 2;
   $59 = ($58<<24>>24)==(0);
   if ($59) {
    $exp1$0$lcssa = 0;
   } else {
    $62 = $52;$exp1$01 = 0;
    while(1) {
     $60 = ($exp1$01*10)|0;
     $61 = (($62) + 1|0);
     HEAP32[$0>>2] = $61;
     $63 = HEAP8[$62>>0]|0;
     $64 = $63 << 24 >> 24;
     $65 = (($60) + -48)|0;
     $66 = (($65) + ($64))|0;
     $67 = HEAP8[$61>>0]|0;
     $68 = $67&255;
     $69 = (($68) + 1)|0;
     $70 = (2696 + ($69)|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = $71 & 2;
     $73 = ($72<<24>>24)==(0);
     if ($73) {
      $exp1$0$lcssa = $66;
      break;
     } else {
      $62 = $61;$exp1$01 = $66;
     }
    }
   }
   $74 = ($43|0)==(0);
   $75 = (0 - ($exp1$0$lcssa))|0;
   $exp1$0$ = $74 ? $exp1$0$lcssa : $75;
   $76 = HEAP32[$e>>2]|0;
   $77 = (($76) + ($exp1$0$))|0;
   HEAP32[$e>>2] = $77;
   label = 14;
  }
 } else {
  label = 14;
 }
 if ((label|0) == 14) {
  $78 = HEAP32[$0>>2]|0;
  HEAP32[$endptr>>2] = $78;
 }
 $79 = ($18|0)==(0);
 if ($79) {
  $r$1 = $r$0;
 } else {
  $80 = -$r$0;
  $r$1 = $80;
 }
 $81 = HEAP32[$e>>2]|0;
 $82 = (+_ldexp($r$1,$81));
 $$0 = $82;
 STACKTOP = sp;return (+$$0);
}
function _luaO_pushvfstring($L,$fmt,$argp) {
 $L = $L|0;
 $fmt = $fmt|0;
 $argp = $argp|0;
 var $$ = 0, $$0$lcssa = 0, $$08 = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current2 = 0, $arglist_current5 = 0, $arglist_current8 = 0;
 var $arglist_next = 0, $arglist_next12 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $buff = 0, $buff2 = 0, $n$0$lcssa = 0, $n$07 = 0, $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer13 = sp;
 $buff = sp + 32|0;
 $buff2 = sp + 8|0;
 $0 = (_strchr($fmt,37)|0);
 $1 = ($0|0)==(0|0);
 $2 = (($L) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($L) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 L1: do {
  if ($1) {
   $$0$lcssa = $fmt;$$lcssa4 = $8;$n$0$lcssa = 0;
  } else {
   $$08 = $fmt;$11 = $0;$9 = $8;$n$07 = 0;
   L3: while(1) {
    $10 = ($9|0)<(48);
    if ($10) {
     _luaD_growstack($L,2);
    }
    $12 = $11;
    $13 = $$08;
    $14 = (($12) - ($13))|0;
    _pushstr($L,$$08,$14);
    $15 = (($11) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16 << 24 >> 24;
    switch ($17|0) {
    case 115:  {
     $arglist_current = HEAP32[$argp>>2]|0;
     $18 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$argp>>2] = $arglist_next;
     $19 = ($18|0)==(0|0);
     $$ = $19 ? 7432 : $18;
     $20 = (_strlen(($$|0))|0);
     _pushstr($L,$$,$20);
     break;
    }
    case 112:  {
     $arglist_current11 = HEAP32[$argp>>2]|0;
     $32 = HEAP32[$arglist_current11>>2]|0;
     $arglist_next12 = (($arglist_current11) + 4|0);
     HEAP32[$argp>>2] = $arglist_next12;
     HEAP32[$vararg_buffer13>>2] = $32;
     $33 = (_sprintf($buff2,7440,$vararg_buffer13)|0);
     _pushstr($L,$buff2,$33);
     break;
    }
    case 102:  {
     $28 = HEAP32[$4>>2]|0;
     $29 = (($28) + 16|0);
     HEAP32[$4>>2] = $29;
     $arglist_current8 = HEAP32[$argp>>2]|0;
     HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current8>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current8+4>>2];$30 = +HEAPF64[tempDoublePtr>>3];
     $arglist_next9 = (($arglist_current8) + 8|0);
     HEAP32[$argp>>2] = $arglist_next9;
     HEAPF64[$28>>3] = $30;
     $31 = (($28) + 8|0);
     HEAP32[$31>>2] = 3;
     break;
    }
    case 99:  {
     $arglist_current2 = HEAP32[$argp>>2]|0;
     $21 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$argp>>2] = $arglist_next3;
     $22 = $21&255;
     HEAP8[$buff>>0] = $22;
     _pushstr($L,$buff,1);
     break;
    }
    case 37:  {
     _pushstr($L,7448,1);
     break;
    }
    case 100:  {
     $23 = HEAP32[$4>>2]|0;
     $24 = (($23) + 16|0);
     HEAP32[$4>>2] = $24;
     $arglist_current5 = HEAP32[$argp>>2]|0;
     $25 = HEAP32[$arglist_current5>>2]|0;
     $arglist_next6 = (($arglist_current5) + 4|0);
     HEAP32[$argp>>2] = $arglist_next6;
     $26 = (+($25|0));
     HEAPF64[$23>>3] = $26;
     $27 = (($23) + 8|0);
     HEAP32[$27>>2] = 3;
     break;
    }
    default: {
     break L3;
    }
    }
    $34 = (($n$07) + 2)|0;
    $35 = (($11) + 2|0);
    $36 = (_strchr($35,37)|0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$2>>2]|0;
    $39 = HEAP32[$4>>2]|0;
    $40 = $38;
    $41 = $39;
    $42 = (($40) - ($41))|0;
    if ($37) {
     $$0$lcssa = $35;$$lcssa4 = $42;$n$0$lcssa = $34;
     break L1;
    } else {
     $$08 = $35;$11 = $36;$9 = $42;$n$07 = $34;
    }
   }
   HEAP32[$vararg_buffer13>>2] = $17;
   _luaG_runerror($L,7456,$vararg_buffer13);
   // unreachable;
  }
 } while(0);
 $43 = ($$lcssa4|0)<(32);
 if ($43) {
  _luaD_growstack($L,1);
 }
 $44 = (_strlen(($$0$lcssa|0))|0);
 _pushstr($L,$$0$lcssa,$44);
 $45 = ($n$0$lcssa|0)>(0);
 if (!($45)) {
  $47 = HEAP32[$4>>2]|0;
  $48 = (($47) + -16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 16|0);
  STACKTOP = sp;return ($50|0);
 }
 $46 = $n$0$lcssa | 1;
 _luaV_concat($L,$46);
 $47 = HEAP32[$4>>2]|0;
 $48 = (($47) + -16|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 16|0);
 STACKTOP = sp;return ($50|0);
}
function _pushstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 HEAP32[$0>>2] = $2;
 $3 = (_luaS_newlstr($L,$str,$l)|0);
 HEAP32[$1>>2] = $3;
 $4 = (($3) + 4|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 | 64;
 $8 = (($1) + 8|0);
 HEAP32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function _luaO_pushfstring($L,$fmt,$varargs) {
 $L = $L|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $argp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $argp = sp;
 HEAP32[$argp>>2] = $varargs;
 $0 = (_luaO_pushvfstring($L,$fmt,$argp)|0);
 STACKTOP = sp;return ($0|0);
}
function _luaO_chunkid($out,$source,$bufflen) {
 $out = $out|0;
 $source = $source|0;
 $bufflen = $bufflen|0;
 var $$0 = 0, $$l$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum2$pn = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$0 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_strlen(($source|0))|0);
 $1 = HEAP8[$source>>0]|0;
 if ((($1<<24>>24) == 64)) {
  $6 = ($0>>>0)>($bufflen>>>0);
  if ($6) {
   ;HEAP8[$out+0>>0]=HEAP8[7504+0>>0]|0;HEAP8[$out+1>>0]=HEAP8[7504+1>>0]|0;HEAP8[$out+2>>0]=HEAP8[7504+2>>0]|0;
   $8 = (($out) + 3|0);
   $9 = (($bufflen) + -3)|0;
   $$sum3 = (4 - ($bufflen))|0;
   $$sum4 = (($$sum3) + ($0))|0;
   $10 = (($source) + ($$sum4)|0);
   _memcpy(($8|0),($10|0),($9|0))|0;
   STACKTOP = sp;return;
  } else {
   $7 = (($source) + 1|0);
   _memcpy(($out|0),($7|0),($0|0))|0;
   STACKTOP = sp;return;
  }
 } else if ((($1<<24>>24) == 61)) {
  $2 = ($0>>>0)>($bufflen>>>0);
  $3 = (($source) + 1|0);
  if ($2) {
   $4 = (($bufflen) + -1)|0;
   _memcpy(($out|0),($3|0),($4|0))|0;
   $5 = (($out) + ($4)|0);
   HEAP8[$5>>0] = 0;
   STACKTOP = sp;return;
  } else {
   _memcpy(($out|0),($3|0),($0|0))|0;
   STACKTOP = sp;return;
  }
 } else {
  $11 = (_strchr($source,10)|0);
  dest=$out+0|0; src=7512+0|0; stop=dest+9|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $12 = (($out) + 9|0);
  $13 = (($bufflen) + -15)|0;
  $14 = ($0>>>0)<($13>>>0);
  $15 = ($11|0)==(0|0);
  $or$cond = $14 & $15;
  if ($or$cond) {
   _memcpy(($12|0),($source|0),($0|0))|0;
   $$sum2 = (($0) + 9)|0;
   $$sum2$pn = $$sum2;
  } else {
   if ($15) {
    $l$0 = $0;
   } else {
    $16 = $11;
    $17 = $source;
    $18 = (($16) - ($17))|0;
    $l$0 = $18;
   }
   $19 = ($l$0>>>0)>($13>>>0);
   $$l$0 = $19 ? $13 : $l$0;
   _memcpy(($12|0),($source|0),($$l$0|0))|0;
   $$sum = (($$l$0) + 9)|0;
   $20 = (($out) + ($$sum)|0);
   ;HEAP8[$20+0>>0]=HEAP8[7504+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[7504+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[7504+2>>0]|0;
   $$sum1 = (($$l$0) + 12)|0;
   $$sum2$pn = $$sum1;
  }
  $$0 = (($out) + ($$sum2$pn)|0);
  ;HEAP8[$$0+0>>0]=HEAP8[7528+0>>0]|0;HEAP8[$$0+1>>0]=HEAP8[7528+1>>0]|0;HEAP8[$$0+2>>0]=HEAP8[7528+2>>0]|0;
  STACKTOP = sp;return;
 }
}
function _isneg($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 if ((($1<<24>>24) == 43)) {
  $3 = (($0) + 1|0);
  HEAP32[$s>>2] = $3;
  $$0 = 0;
 } else if ((($1<<24>>24) == 45)) {
  $2 = (($0) + 1|0);
  HEAP32[$s>>2] = $2;
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _readhexa($s,$r,$count) {
 $s = $s|0;
 $r = +$r;
 $count = $count|0;
 var $$0$lcssa = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$s>>2]|0;
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($2) + 1)|0;
 $4 = (2696 + ($3)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 16;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0$lcssa = $r;
  STACKTOP = sp;return (+$$0$lcssa);
 } else {
  $$01 = $r;$9 = $2;
 }
 while(1) {
  $8 = $$01 * 16.0;
  $10 = (_luaO_hexavalue($9)|0);
  $11 = (+($10|0));
  $12 = $8 + $11;
  $13 = HEAP32[$count>>2]|0;
  $14 = (($13) + 1)|0;
  HEAP32[$count>>2] = $14;
  $15 = HEAP32[$s>>2]|0;
  $16 = (($15) + 1|0);
  HEAP32[$s>>2] = $16;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($18) + 1)|0;
  $20 = (2696 + ($19)|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21 & 16;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $$0$lcssa = $12;
   break;
  } else {
   $$01 = $12;$9 = $18;
  }
 }
 STACKTOP = sp;return (+$$0$lcssa);
}
function _luaopen_os($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,11);
 _luaL_setfuncs($L,7576,0);
 STACKTOP = sp;return 1;
}
function _os_clock($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_clock()|0);
 $1 = (+($0|0));
 $2 = $1 / 1.0E+6;
 _lua_pushnumber($L,$2);
 STACKTOP = sp;return 1;
}
function _os_date($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $buff = 0, $cc = 0, $s$0 = 0, $s$1 = 0, $stm$0 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1264|0;
 $t = sp + 1040|0;
 $cc = sp + 1248|0;
 $b = sp;
 $buff = sp + 1048|0;
 $0 = (_luaL_optlstring($L,1,8016,0)|0);
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = (_time((0|0))|0);
  $6 = $3;
 } else {
  $4 = (+_luaL_checknumber($L,2));
  $5 = (~~(($4)));
  $6 = $5;
 }
 HEAP32[$t>>2] = $6;
 $7 = HEAP8[$0>>0]|0;
 $8 = ($7<<24>>24)==(33);
 if ($8) {
  $9 = (_gmtime(($t|0))|0);
  $10 = (($0) + 1|0);
  $s$0 = $10;$stm$0 = $9;
 } else {
  $11 = (_localtime(($t|0))|0);
  $s$0 = $0;$stm$0 = $11;
 }
 $12 = ($stm$0|0)==(0|0);
 if ($12) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 }
 $13 = (_strcmp($s$0,8024)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _lua_createtable($L,0,9);
  $15 = HEAP32[$stm$0>>2]|0;
  _setfield($L,7816,$15);
  $16 = (($stm$0) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  _setfield($L,7824,$17);
  $18 = (($stm$0) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  _setfield($L,7832,$19);
  $20 = (($stm$0) + 12|0);
  $21 = HEAP32[$20>>2]|0;
  _setfield($L,7840,$21);
  $22 = (($stm$0) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1)|0;
  _setfield($L,7848,$24);
  $25 = (($stm$0) + 20|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1900)|0;
  _setfield($L,7856,$27);
  $28 = (($stm$0) + 24|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 1)|0;
  _setfield($L,8032,$30);
  $31 = (($stm$0) + 28|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  _setfield($L,8040,$33);
  $34 = (($stm$0) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  _setboolfield($L,$35);
  STACKTOP = sp;return 1;
 }
 HEAP8[$cc>>0] = 37;
 _luaL_buffinit($L,$b);
 $36 = (($b) + 8|0);
 $37 = (($b) + 4|0);
 $s$1 = $s$0;
 while(1) {
  $38 = HEAP8[$s$1>>0]|0;
  if ((($38<<24>>24) == 37)) {
   $48 = (($s$1) + 1|0);
   $49 = (_checkoption($L,$48,$cc)|0);
   $50 = (_strftime(($buff|0),200,($cc|0),($stm$0|0))|0);
   _luaL_addlstring($b,$buff,$50);
   $s$1 = $49;
   continue;
  } else if ((($38<<24>>24) == 0)) {
   break;
  }
  $39 = HEAP32[$36>>2]|0;
  $40 = HEAP32[$37>>2]|0;
  $41 = ($39>>>0)<($40>>>0);
  if (!($41)) {
   (_luaL_prepbuffsize($b,1)|0);
  }
  $42 = (($s$1) + 1|0);
  $43 = HEAP8[$s$1>>0]|0;
  $44 = HEAP32[$36>>2]|0;
  $45 = (($44) + 1)|0;
  HEAP32[$36>>2] = $45;
  $46 = HEAP32[$b>>2]|0;
  $47 = (($46) + ($44)|0);
  HEAP8[$47>>0] = $43;
  $s$1 = $42;
 }
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _os_difftime($L) {
 $L = $L|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $4 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_luaL_checknumber($L,1));
 $1 = (~~(($0)));
 $2 = (+_luaL_optnumber($L,2,0.0));
 $3 = (~~(($2)));
 $4 = (+_difftime(($1|0),($3|0)));
 _lua_pushnumber($L,$4);
 STACKTOP = sp;return 1;
}
function _os_execute($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_system(($0|0))|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  _lua_pushboolean($L,$1);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $3 = (_luaL_execresult($L,$1)|0);
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _os_exit($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $not$ = 0, $status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)==(1);
 if ($1) {
  $2 = (_lua_toboolean($L,1)|0);
  $not$ = ($2|0)==(0);
  $3 = $not$&1;
  $status$0 = $3;
 } else {
  $4 = (_luaL_optinteger($L,1,0)|0);
  $status$0 = $4;
 }
 $5 = (_lua_toboolean($L,2)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  _lua_close($L);
 }
 $7 = ($L|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return 0;
 } else {
  _exit(($status$0|0));
  // unreachable;
 }
 return 0|0;
}
function _os_getenv($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_getenv(($0|0))|0);
 (_lua_pushstring($L,$1)|0);
 STACKTOP = sp;return 1;
}
function _os_remove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_remove(($0|0))|0);
 $2 = ($1|0)==(0);
 $3 = $2&1;
 $4 = (_luaL_fileresult($L,$3,$0)|0);
 STACKTOP = sp;return ($4|0);
}
function _os_rename($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_checklstring($L,1,0)|0);
 $1 = (_luaL_checklstring($L,2,0)|0);
 $2 = (_rename(($0|0),($1|0))|0);
 $3 = ($2|0)==(0);
 $4 = $3&1;
 $5 = (_luaL_fileresult($L,$4,0)|0);
 STACKTOP = sp;return ($5|0);
}
function _os_setlocale($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaL_optlstring($L,1,0,0)|0);
 $1 = (_luaL_checkoption($L,2,7968,7936)|0);
 $2 = (7912 + ($1<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_setlocale(($3|0),($0|0))|0);
 (_lua_pushstring($L,$4)|0);
 STACKTOP = sp;return 1;
}
function _os_time($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $t$0 = 0, $ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $ts = sp;
 $0 = (_lua_type($L,1)|0);
 $1 = ($0|0)<(1);
 if ($1) {
  $2 = (_time((0|0))|0);
  $t$0 = $2;
 } else {
  _luaL_checktype($L,1,5);
  _lua_settop($L,1);
  $3 = (_getfield($L,7816,0)|0);
  HEAP32[$ts>>2] = $3;
  $4 = (_getfield($L,7824,0)|0);
  $5 = (($ts) + 4|0);
  HEAP32[$5>>2] = $4;
  $6 = (_getfield($L,7832,12)|0);
  $7 = (($ts) + 8|0);
  HEAP32[$7>>2] = $6;
  $8 = (_getfield($L,7840,-1)|0);
  $9 = (($ts) + 12|0);
  HEAP32[$9>>2] = $8;
  $10 = (_getfield($L,7848,-1)|0);
  $11 = (($10) + -1)|0;
  $12 = (($ts) + 16|0);
  HEAP32[$12>>2] = $11;
  $13 = (_getfield($L,7856,-1)|0);
  $14 = (($13) + -1900)|0;
  $15 = (($ts) + 20|0);
  HEAP32[$15>>2] = $14;
  $16 = (_getboolfield($L)|0);
  $17 = (($ts) + 32|0);
  HEAP32[$17>>2] = $16;
  $18 = (_mktime(($ts|0))|0);
  $t$0 = $18;
 }
 $19 = ($t$0|0)==(-1);
 if ($19) {
  _lua_pushnil($L);
  STACKTOP = sp;return 1;
 } else {
  $20 = (+($t$0|0));
  _lua_pushnumber($L,$20);
  STACKTOP = sp;return 1;
 }
 return 0|0;
}
function _os_tmpname($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $buff = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $buff = sp + 4|0;
 $0 = (_tmpnam(($buff|0))|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $2 = (_luaL_error($L,7776,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  (_lua_pushstring($L,$buff)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _getfield($L,$key,$d) {
 $L = $L|0;
 $key = $key|0;
 $d = $d|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isnum = 0, $res$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $isnum = sp + 4|0;
 _lua_getfield($L,-1,$key);
 $0 = (_lua_tointegerx($L,-1,$isnum)|0);
 $1 = HEAP32[$isnum>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = ($d|0)<(0);
  if ($3) {
   HEAP32[$vararg_buffer>>2] = $key;
   $4 = (_luaL_error($L,7872,$vararg_buffer)|0);
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  } else {
   $res$0 = $d;
  }
 } else {
  $res$0 = $0;
 }
 _lua_settop($L,-2);
 $$0 = $res$0;
 STACKTOP = sp;return ($$0|0);
}
function _getboolfield($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _lua_getfield($L,-1,7864);
 $0 = (_lua_type($L,-1)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $3 = -1;
 } else {
  $2 = (_lua_toboolean($L,-1)|0);
  $3 = $2;
 }
 _lua_settop($L,-2);
 STACKTOP = sp;return ($3|0);
}
function _setfield($L,$key,$value) {
 $L = $L|0;
 $key = $key|0;
 $value = $value|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_pushinteger($L,$value);
 _lua_setfield($L,-2,$key);
 STACKTOP = sp;return;
}
function _setboolfield($L,$value) {
 $L = $L|0;
 $value = $value|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($value|0)<(0);
 if (!($0)) {
  _lua_pushboolean($L,$value);
  _lua_setfield($L,-2,7864);
 }
 STACKTOP = sp;return;
}
function _checkoption($L,$conv,$buff) {
 $L = $L|0;
 $conv = $conv|0;
 $buff = $buff|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $memchr = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($buff) + 1|0);
 $1 = HEAP8[$conv>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = $1 << 24 >> 24;
  $memchr = (_memchr(8048,$3,23)|0);
  $4 = ($memchr|0)==(0|0);
  if (!($4)) {
   HEAP8[$0>>0] = $1;
   $5 = (($buff) + 2|0);
   HEAP8[$5>>0] = 0;
   $6 = (($conv) + 1|0);
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 HEAP32[$vararg_buffer>>2] = $conv;
 $7 = (_lua_pushfstring($L,8072,$vararg_buffer)|0);
 (_luaL_argerror($L,1,$7)|0);
 $$0 = $conv;
 STACKTOP = sp;return ($$0|0);
}
function _luaY_parser($L,$z,$buff,$dyd,$name,$firstchar) {
 $L = $L|0;
 $z = $z|0;
 $buff = $buff|0;
 $dyd = $dyd|0;
 $name = $name|0;
 $firstchar = $firstchar|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $funcstate = 0, $lexstate = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $lexstate = sp;
 $funcstate = sp + 80|0;
 $0 = (_luaF_newLclosure($L,1)|0);
 $1 = (($L) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 8|0);
 HEAP32[$3>>2] = 70;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 16|0);
 HEAP32[$1>>2] = $5;
 $6 = (($L) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 $9 = $5;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(16);
 if ($11) {
  _luaD_growstack($L,0);
 }
 $12 = (_luaF_newproto($L)|0);
 $13 = (($0) + 12|0);
 HEAP32[$13>>2] = $12;
 HEAP32[$funcstate>>2] = $12;
 $14 = (_luaS_new($L,$name)|0);
 $15 = HEAP32[$funcstate>>2]|0;
 $16 = (($15) + 36|0);
 HEAP32[$16>>2] = $14;
 $17 = (($lexstate) + 60|0);
 HEAP32[$17>>2] = $buff;
 $18 = (($lexstate) + 64|0);
 HEAP32[$18>>2] = $dyd;
 $19 = (($dyd) + 28|0);
 HEAP32[$19>>2] = 0;
 $20 = (($dyd) + 16|0);
 HEAP32[$20>>2] = 0;
 $21 = (($dyd) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = HEAP32[$funcstate>>2]|0;
 $23 = (($22) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 _luaX_setinput($L,$lexstate,$z,$24,$firstchar);
 _mainfunc($lexstate,$funcstate);
 STACKTOP = sp;return ($0|0);
}
function _mainfunc($ls,$fs) {
 $ls = $ls|0;
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $bl = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $bl = sp + 24|0;
 $v = sp;
 _open_func($ls,$fs,$bl);
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 77|0);
 HEAP8[$1>>0] = 1;
 _init_exp($v,7,0);
 $2 = (($ls) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 (_newupvalue($fs,$3,$v)|0);
 _luaX_next($ls);
 _statlist($ls);
 _check($ls,286);
 _close_func($ls);
 STACKTOP = sp;return;
}
function _open_func($ls,$fs,$bl) {
 $ls = $ls|0;
 $fs = $fs|0;
 $bl = $bl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($fs) + 8|0);
 HEAP32[$4>>2] = $3;
 $5 = (($fs) + 12|0);
 HEAP32[$5>>2] = $ls;
 HEAP32[$2>>2] = $fs;
 $6 = (($fs) + 20|0);
 HEAP32[$6>>2] = 0;
 $7 = (($fs) + 24|0);
 HEAP32[$7>>2] = 0;
 $8 = (($fs) + 28|0);
 HEAP32[$8>>2] = -1;
 $9 = (($fs) + 32|0);
 HEAP32[$9>>2] = 0;
 $10 = (($fs) + 36|0);
 HEAP32[$10>>2] = 0;
 $11 = (($fs) + 44|0);
 $12 = (($ls) + 64|0);
 ;HEAP16[$11+0>>1]=0|0;HEAP16[$11+2>>1]=0|0;HEAP8[$11+4>>0]=0|0;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($fs) + 40|0);
 HEAP32[$16>>2] = $15;
 $17 = (($fs) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$fs>>2]|0;
 $19 = (($ls) + 68|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 36|0);
 HEAP32[$21>>2] = $20;
 $22 = (($18) + 78|0);
 HEAP8[$22>>0] = 2;
 $23 = (_luaH_new($1)|0);
 $24 = (($fs) + 4|0);
 HEAP32[$24>>2] = $23;
 $25 = (($1) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 HEAP32[$26>>2] = $23;
 $27 = (($26) + 8|0);
 HEAP32[$27>>2] = 69;
 $28 = HEAP32[$25>>2]|0;
 $29 = (($28) + 16|0);
 HEAP32[$25>>2] = $29;
 $30 = (($1) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $31;
 $33 = $29;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)<(16);
 if (!($35)) {
  _enterblock($fs,$bl,0);
  STACKTOP = sp;return;
 }
 _luaD_growstack($1,0);
 _enterblock($fs,$bl,0);
 STACKTOP = sp;return;
}
function _init_exp($e,$k,$i) {
 $e = $e|0;
 $k = $k|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($e) + 16|0);
 HEAP32[$0>>2] = -1;
 $1 = (($e) + 20|0);
 HEAP32[$1>>2] = -1;
 HEAP32[$e>>2] = $k;
 $2 = (($e) + 8|0);
 HEAP32[$2>>2] = $i;
 STACKTOP = sp;return;
}
function _newupvalue($fs,$name,$v) {
 $fs = $fs|0;
 $name = $name|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $oldsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 40|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($fs) + 47|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 1)|0;
 _checklimit($fs,$6,255,8832);
 $7 = HEAP8[$3>>0]|0;
 $8 = $7&255;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($8|0)<($9|0);
 if (!($10)) {
  $11 = (($fs) + 12|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 52|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($0) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_luaM_growaux_($14,$16,$1,8,255,8832)|0);
  HEAP32[$15>>2] = $17;
 }
 $18 = HEAP32[$1>>2]|0;
 $19 = ($2|0)<($18|0);
 if ($19) {
  $20 = (($0) + 28|0);
  $21 = HEAP32[$1>>2]|0;
  $oldsize$01 = $2;
  while(1) {
   $22 = (($oldsize$01) + 1)|0;
   $23 = HEAP32[$20>>2]|0;
   $24 = (($23) + ($oldsize$01<<3)|0);
   HEAP32[$24>>2] = 0;
   $25 = ($22|0)<($21|0);
   if ($25) {
    $oldsize$01 = $22;
   } else {
    break;
   }
  }
 }
 $26 = HEAP32[$v>>2]|0;
 $27 = ($26|0)==(7);
 $28 = $27&1;
 $29 = HEAP8[$3>>0]|0;
 $30 = $29&255;
 $31 = (($0) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($32) + ($30<<3)|0) + 4|0);
 HEAP8[$33>>0] = $28;
 $34 = (($v) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35&255;
 $37 = HEAP8[$3>>0]|0;
 $38 = $37&255;
 $39 = HEAP32[$31>>2]|0;
 $40 = ((($39) + ($38<<3)|0) + 5|0);
 HEAP8[$40>>0] = $36;
 $41 = HEAP8[$3>>0]|0;
 $42 = $41&255;
 $43 = HEAP32[$31>>2]|0;
 $44 = (($43) + ($42<<3)|0);
 HEAP32[$44>>2] = $name;
 $45 = (($name) + 5|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46 & 3;
 $48 = ($47<<24>>24)==(0);
 if ($48) {
  $57 = HEAP8[$3>>0]|0;
  $58 = (($57) + 1)<<24>>24;
  HEAP8[$3>>0] = $58;
  $59 = $57&255;
  STACKTOP = sp;return ($59|0);
 }
 $49 = (($0) + 5|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50 & 4;
 $52 = ($51<<24>>24)==(0);
 if ($52) {
  $57 = HEAP8[$3>>0]|0;
  $58 = (($57) + 1)<<24>>24;
  HEAP8[$3>>0] = $58;
  $59 = $57&255;
  STACKTOP = sp;return ($59|0);
 }
 $53 = (($fs) + 12|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 52|0);
 $56 = HEAP32[$55>>2]|0;
 _luaC_barrier_($56,$0,$name);
 $57 = HEAP8[$3>>0]|0;
 $58 = (($57) + 1)<<24>>24;
 HEAP8[$3>>0] = $58;
 $59 = $57&255;
 STACKTOP = sp;return ($59|0);
}
function _statlist($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 while(1) {
  $1 = (_block_follow($ls,1)|0);
  $2 = ($1|0)==(0);
  if (!($2)) {
   label = 4;
   break;
  }
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3|0)==(274);
  _statement($ls);
  if ($4) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
}
function _check($ls,$c) {
 $ls = $ls|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($c|0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _error_expected($ls,$c);
  // unreachable;
 }
}
function _close_func($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 _luaK_ret($3,0,0);
 _leaveblock($3);
 $5 = (($3) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = ($7>>>0)>(1073741823);
 if ($8) {
  _luaM_toobig($1);
  // unreachable;
 }
 $9 = (($4) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($4) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 << 2;
 $14 = $6 << 2;
 $15 = (_luaM_realloc_($1,$10,$13,$14)|0);
 HEAP32[$9>>2] = $15;
 $16 = HEAP32[$5>>2]|0;
 HEAP32[$11>>2] = $16;
 $17 = HEAP32[$5>>2]|0;
 $18 = (($17) + 1)|0;
 $19 = ($18>>>0)>(1073741823);
 if ($19) {
  _luaM_toobig($1);
  // unreachable;
 }
 $20 = (($4) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($4) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 << 2;
 $25 = $17 << 2;
 $26 = (_luaM_realloc_($1,$21,$24,$25)|0);
 HEAP32[$20>>2] = $26;
 $27 = HEAP32[$5>>2]|0;
 HEAP32[$22>>2] = $27;
 $28 = (($3) + 32|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 1)|0;
 $31 = ($30>>>0)>(268435455);
 if ($31) {
  _luaM_toobig($1);
  // unreachable;
 }
 $32 = (($4) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($4) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 4;
 $37 = $29 << 4;
 $38 = (_luaM_realloc_($1,$33,$36,$37)|0);
 HEAP32[$32>>2] = $38;
 $39 = HEAP32[$28>>2]|0;
 HEAP32[$34>>2] = $39;
 $40 = (($3) + 36|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 1)|0;
 $43 = ($42>>>0)>(1073741823);
 if ($43) {
  _luaM_toobig($1);
  // unreachable;
 }
 $44 = (($4) + 16|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (($4) + 56|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 << 2;
 $49 = $41 << 2;
 $50 = (_luaM_realloc_($1,$45,$48,$49)|0);
 HEAP32[$44>>2] = $50;
 $51 = HEAP32[$40>>2]|0;
 HEAP32[$46>>2] = $51;
 $52 = (($3) + 44|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53 << 16 >> 16;
 $55 = (($54) + 1)|0;
 $56 = ($55>>>0)>(357913941);
 if ($56) {
  _luaM_toobig($1);
  // unreachable;
 }
 $57 = (($4) + 24|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($4) + 60|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60*12)|0;
 $62 = ($54*12)|0;
 $63 = (_luaM_realloc_($1,$58,$61,$62)|0);
 HEAP32[$57>>2] = $63;
 $64 = HEAP16[$52>>1]|0;
 $65 = $64 << 16 >> 16;
 HEAP32[$59>>2] = $65;
 $66 = (($3) + 47|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $67&255;
 $69 = (($4) + 28|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($4) + 40|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $72 << 3;
 $74 = $68 << 3;
 $75 = (_luaM_realloc_($1,$70,$73,$74)|0);
 HEAP32[$69>>2] = $75;
 $76 = HEAP8[$66>>0]|0;
 $77 = $76&255;
 HEAP32[$71>>2] = $77;
 $78 = (($3) + 8|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[$2>>2] = $79;
 _anchor_token($ls);
 $80 = (($1) + 8|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($81) + -16|0);
 HEAP32[$80>>2] = $82;
 $83 = (($1) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($84) + 12|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)>(0);
 if (!($87)) {
  STACKTOP = sp;return;
 }
 _luaC_step($1);
 STACKTOP = sp;return;
}
function _leaveblock($fs) {
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($fs) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (($1) + 9|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if (!($8)) {
   $9 = (_luaK_jump($fs)|0);
   $10 = (($1) + 8|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = $11&255;
   _luaK_patchclose($fs,$9,$12);
   _luaK_patchtohere($fs,$9);
  }
 }
 $13 = (($1) + 10|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ($14<<24>>24)==(0);
 if (!($15)) {
  _breaklabel($3);
 }
 $16 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $16;
 $17 = (($1) + 8|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 _removevars($fs,$19);
 $20 = (($fs) + 46|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = (($fs) + 48|0);
 HEAP8[$22>>0] = $21;
 $23 = (($1) + 4|0);
 $24 = HEAP16[$23>>1]|0;
 $25 = $24 << 16 >> 16;
 $26 = (($3) + 64|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 28|0);
 HEAP32[$28>>2] = $25;
 $29 = HEAP32[$1>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  _movegotosout($fs,$1);
  STACKTOP = sp;return;
 }
 $31 = (($1) + 6|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32 << 16 >> 16;
 $34 = HEAP32[$26>>2]|0;
 $35 = (($34) + 16|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($33|0)<($36|0);
 if ($37) {
  $38 = (($34) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + ($33<<4)|0);
  _undefgoto($3,$40);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _anchor_token($ls) {
 $ls = $ls|0;
 var $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -288)|0;
 $switch = ($$off>>>0)<(2);
 if (!($switch)) {
  STACKTOP = sp;return;
 }
 $2 = (($ls) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = (($3) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 (_luaX_newstring($ls,$4,$6)|0);
 STACKTOP = sp;return;
}
function _breaklabel($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaS_new($1,8256)|0);
 $3 = (($ls) + 64|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 24|0);
 $6 = (($ls) + 48|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_newlabelentry($ls,$5,$2,0,$9)|0);
 $11 = HEAP32[$3>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10<<4)|0);
 _findgotos($ls,$14);
 STACKTOP = sp;return;
}
function _removevars($fs,$tolevel) {
 $fs = $fs|0;
 $tolevel = $tolevel|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 46|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = (($fs) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($tolevel) - ($2))|0;
 $10 = (($9) + ($8))|0;
 HEAP32[$7>>2] = $10;
 $11 = HEAP8[$0>>0]|0;
 $12 = $11&255;
 $13 = ($12|0)>($tolevel|0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = (($fs) + 20|0);
 $17 = $11;
 while(1) {
  $15 = HEAP32[$14>>2]|0;
  $16 = (($17) + -1)<<24>>24;
  HEAP8[$0>>0] = $16;
  $18 = $16&255;
  $19 = (_getlocvar($fs,$18)|0);
  $20 = (($19) + 8|0);
  HEAP32[$20>>2] = $15;
  $21 = HEAP8[$0>>0]|0;
  $22 = $21&255;
  $23 = ($22|0)>($tolevel|0);
  if ($23) {
   $17 = $21;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _movegotosout($fs,$bl) {
 $fs = $fs|0;
 $bl = $bl|0;
 var $$i$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bl) + 6|0);
 $1 = HEAP16[$0>>1]|0;
 $2 = $1 << 16 >> 16;
 $3 = (($fs) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($2|0)<($8|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($6) + 12|0);
 $11 = (($bl) + 8|0);
 $12 = (($bl) + 9|0);
 $i$01 = $2;
 while(1) {
  $13 = HEAP32[$10>>2]|0;
  $14 = ((($13) + ($i$01<<4)|0) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = HEAP8[$11>>0]|0;
  $17 = $16&255;
  $18 = ($15&255)>($16&255);
  if ($18) {
   $19 = HEAP8[$12>>0]|0;
   $20 = ($19<<24>>24)==(0);
   if (!($20)) {
    $21 = ((($13) + ($i$01<<4)|0) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    _luaK_patchclose($fs,$22,$17);
   }
   $23 = HEAP8[$11>>0]|0;
   HEAP8[$14>>0] = $23;
  }
  $24 = HEAP32[$3>>2]|0;
  $25 = (_findlabel($24,$i$01)|0);
  $26 = ($25|0)==(0);
  $27 = $26&1;
  $$i$0 = (($27) + ($i$01))|0;
  $28 = HEAP32[$7>>2]|0;
  $29 = ($$i$0|0)<($28|0);
  if ($29) {
   $i$01 = $$i$0;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _undefgoto($ls,$gt) {
 $ls = $ls|0;
 $gt = $gt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$gt>>2]|0;
 $1 = (($0) + 4|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(4);
 if ($3) {
  $4 = (($0) + 6|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  $phitmp = $6 ? 8112 : 8152;
  $13 = $phitmp;
 } else {
  $13 = 8152;
 }
 $7 = (($ls) + 52|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$gt>>2]|0;
 $10 = (($9) + 16|0);
 $11 = (($gt) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$vararg_buffer>>2] = $10;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $12;
 $14 = (_luaO_pushfstring($8,$13,$vararg_buffer)|0);
 _semerror($ls,$14);
 // unreachable;
}
function _semerror($ls,$msg) {
 $ls = $ls|0;
 $msg = $msg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 HEAP32[$0>>2] = 0;
 _luaX_syntaxerror($ls,$msg);
 // unreachable;
}
function _findlabel($ls,$g) {
 $ls = $ls|0;
 $g = $g|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($ls) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($3) + 4|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = (($5) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10|0)<($12|0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($5) + 24|0);
 $15 = (($7) + ($g<<4)|0);
 $i$04 = $10;
 while(1) {
  $19 = HEAP32[$14>>2]|0;
  $20 = (($19) + ($i$04<<4)|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$15>>2]|0;
  $23 = (_luaS_eqstr($21,$22)|0);
  $24 = ($23|0)==(0);
  $17 = (($i$04) + 1)|0;
  if (!($24)) {
   break;
  }
  $16 = HEAP32[$11>>2]|0;
  $18 = ($17|0)<($16|0);
  if ($18) {
   $i$04 = $17;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $25 = ((($7) + ($g<<4)|0) + 12|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ((($19) + ($i$04<<4)|0) + 12|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = ($26&255)>($28&255);
 do {
  if ($29) {
   $30 = (($3) + 9|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $33 = HEAP32[$11>>2]|0;
    $34 = HEAP16[$8>>1]|0;
    $35 = $34 << 16 >> 16;
    $36 = ($33|0)>($35|0);
    if (!($36)) {
     break;
    }
   }
   $37 = HEAP32[$0>>2]|0;
   $38 = ((($7) + ($g<<4)|0) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP8[$27>>0]|0;
   $41 = $40&255;
   _luaK_patchclose($37,$39,$41);
  }
 } while(0);
 _closegoto($ls,$g,$20);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _closegoto($ls,$g,$label) {
 $ls = $ls|0;
 $g = $g|0;
 $label = $label|0;
 var $$lcssa1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0;
 var $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($5) + ($g<<4)|0) + 12|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($label) + 12|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($7&255)<($9&255);
 if ($10) {
  $11 = $7&255;
  $12 = (_getlocvar($1,$11)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($ls) + 52|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (($5) + ($g<<4)|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 16|0);
  $19 = ((($5) + ($g<<4)|0) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($13) + 16|0);
  HEAP32[$vararg_buffer>>2] = $18;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $20;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $21;
  $22 = (_luaO_pushfstring($15,8200,$vararg_buffer)|0);
  _semerror($ls,$22);
  // unreachable;
 }
 $23 = ((($5) + ($g<<4)|0) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($label) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 _luaK_patchlist($1,$24,$26);
 $27 = (($3) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + -1)|0;
 $30 = ($29|0)>($g|0);
 if ($30) {
  $i$02 = $g;
 } else {
  $$lcssa1 = $29;
  HEAP32[$27>>2] = $$lcssa1;
  STACKTOP = sp;return;
 }
 while(1) {
  $31 = HEAP32[$4>>2]|0;
  $32 = (($31) + ($i$02<<4)|0);
  $33 = (($i$02) + 1)|0;
  $34 = (($31) + ($33<<4)|0);
  ;HEAP32[$32+0>>2]=HEAP32[$34+0>>2]|0;HEAP32[$32+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$34+12>>2]|0;
  $35 = HEAP32[$27>>2]|0;
  $36 = (($35) + -1)|0;
  $37 = ($33|0)<($36|0);
  if ($37) {
   $i$02 = $33;
  } else {
   $$lcssa1 = $36;
   break;
  }
 }
 HEAP32[$27>>2] = $$lcssa1;
 STACKTOP = sp;return;
}
function _getlocvar($fs,$i) {
 $fs = $fs|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + ($i))|0;
 $3 = (($fs) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($2<<1)|0);
 $9 = HEAP16[$8>>1]|0;
 $10 = $9 << 16 >> 16;
 $11 = HEAP32[$fs>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + (($10*12)|0)|0);
 STACKTOP = sp;return ($14|0);
}
function _newlabelentry($ls,$l,$name,$line,$pc) {
 $ls = $ls|0;
 $l = $l|0;
 $name = $name|0;
 $line = $line|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($l) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 if (!($4)) {
  $5 = (($ls) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = HEAP32[$l>>2]|0;
  $8 = (_luaM_growaux_($6,$7,$2,16,32767,8264)|0);
  HEAP32[$l>>2] = $8;
 }
 $9 = HEAP32[$l>>2]|0;
 $10 = (($9) + ($1<<4)|0);
 HEAP32[$10>>2] = $name;
 $11 = HEAP32[$l>>2]|0;
 $12 = ((($11) + ($1<<4)|0) + 8|0);
 HEAP32[$12>>2] = $line;
 $13 = (($ls) + 48|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 46|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = HEAP32[$l>>2]|0;
 $18 = ((($17) + ($1<<4)|0) + 12|0);
 HEAP8[$18>>0] = $16;
 $19 = HEAP32[$l>>2]|0;
 $20 = ((($19) + ($1<<4)|0) + 4|0);
 HEAP32[$20>>2] = $pc;
 $21 = HEAP32[$0>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$0>>2] = $22;
 STACKTOP = sp;return ($1|0);
}
function _findgotos($ls,$lb) {
 $ls = $ls|0;
 $lb = $lb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$ph1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 64|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 6|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = (($1) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8|0)<($10|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($1) + 12|0);
 $i$0$ph1 = $8;
 L4: while(1) {
  while(1) {
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + ($i$0$ph1<<4)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = HEAP32[$lb>>2]|0;
   $17 = (_luaS_eqstr($15,$16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    break;
   }
   _closegoto($ls,$i$0$ph1,$lb);
   $19 = HEAP32[$9>>2]|0;
   $20 = ($i$0$ph1|0)<($19|0);
   if (!($20)) {
    label = 7;
    break L4;
   }
  }
  $21 = (($i$0$ph1) + 1)|0;
  $22 = HEAP32[$9>>2]|0;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $i$0$ph1 = $21;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function _error_expected($ls,$token) {
 $ls = $ls|0;
 $token = $token|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaX_token2str($ls,$token)|0);
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (_luaO_pushfstring($1,8280,$vararg_buffer)|0);
 _luaX_syntaxerror($ls,$3);
 // unreachable;
}
function _block_follow($ls,$withuntil) {
 $ls = $ls|0;
 $withuntil = $withuntil|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 switch ($1|0) {
 case 286: case 262: case 261: case 260:  {
  $$0 = 1;
  break;
 }
 case 277:  {
  $$0 = $withuntil;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 STACKTOP = sp;return ($$0|0);
}
function _statement($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 _enterlevel($ls);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 L1: do {
  switch ($3|0) {
  case 278:  {
   _whilestat($ls,$1);
   break;
  }
  case 265:  {
   _funcstat($ls,$1);
   break;
  }
  case 264:  {
   _forstat($ls,$1);
   break;
  }
  case 285:  {
   _luaX_next($ls);
   $6 = (_str_checkname($ls)|0);
   _labelstat($ls,$6,$1);
   break;
  }
  case 267:  {
   _ifstat($ls,$1);
   break;
  }
  case 259:  {
   _luaX_next($ls);
   _block($ls);
   _check_match($ls,262,259,$1);
   break;
  }
  case 274:  {
   _luaX_next($ls);
   _retstat($ls);
   break;
  }
  case 269:  {
   _luaX_next($ls);
   $4 = (_testnext($ls,265)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    _localstat($ls);
    break L1;
   } else {
    _localfunc($ls);
    break L1;
   }
   break;
  }
  case 59:  {
   _luaX_next($ls);
   break;
  }
  case 273:  {
   _repeatstat($ls,$1);
   break;
  }
  case 266: case 258:  {
   $7 = (($ls) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_luaK_jump($8)|0);
   _gotostat($ls,$9);
   break;
  }
  default: {
   _exprstat($ls);
  }
  }
 } while(0);
 $10 = (($ls) + 48|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 46|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($11) + 48|0);
 HEAP8[$14>>0] = $13;
 $15 = (($ls) + 52|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 38|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = (($18) + -1)<<16>>16;
 HEAP16[$17>>1] = $19;
 STACKTOP = sp;return;
}
function _enterlevel($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 38|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = (($3) + 1)<<16>>16;
 HEAP16[$2>>1] = $4;
 $5 = (($ls) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4&65535;
 _checklimit($6,$7,200,8312);
 STACKTOP = sp;return;
}
function _ifstat($ls,$line) {
 $ls = $ls|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $escapelist = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $escapelist = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$escapelist>>2] = -1;
 _test_then_block($ls,$escapelist);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(261);
 if ($4) {
  while(1) {
   _test_then_block($ls,$escapelist);
   $5 = HEAP32[$2>>2]|0;
   $6 = ($5|0)==(261);
   if (!($6)) {
    break;
   }
  }
 }
 $7 = (_testnext($ls,260)|0);
 $8 = ($7|0)==(0);
 if (!($8)) {
  _block($ls);
 }
 _check_match($ls,262,267,$line);
 $9 = HEAP32[$escapelist>>2]|0;
 _luaK_patchtohere($1,$9);
 STACKTOP = sp;return;
}
function _whilestat($ls,$line) {
 $ls = $ls|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_next($ls);
 $2 = (_luaK_getlabel($1)|0);
 $3 = (_cond($ls)|0);
 _enterblock($1,$bl,1);
 _checknext($ls,259);
 _block($ls);
 $4 = (_luaK_jump($1)|0);
 _luaK_patchlist($1,$4,$2);
 _check_match($ls,262,278,$line);
 _leaveblock($1);
 _luaK_patchtohere($1,$3);
 STACKTOP = sp;return;
}
function _block($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $bl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _enterblock($1,$bl,0);
 _statlist($ls);
 _leaveblock($1);
 STACKTOP = sp;return;
}
function _check_match($ls,$what,$who,$where) {
 $ls = $ls|0;
 $what = $what|0;
 $who = $who|0;
 $where = $where|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (_testnext($ls,$what)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($where|0);
 if ($4) {
  _error_expected($ls,$what);
  // unreachable;
 } else {
  $5 = (($ls) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_luaX_token2str($ls,$what)|0);
  $8 = (_luaX_token2str($ls,$who)|0);
  HEAP32[$vararg_buffer>>2] = $7;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $8;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $where;
  $9 = (_luaO_pushfstring($6,8792,$vararg_buffer)|0);
  _luaX_syntaxerror($ls,$9);
  // unreachable;
 }
}
function _forstat($ls,$line) {
 $ls = $ls|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $bl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _enterblock($1,$bl,1);
 _luaX_next($ls);
 $2 = (_str_checkname($ls)|0);
 $3 = (($ls) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 268) | (($4|0) == 44)) {
  _forlist($ls,$2);
 } else if ((($4|0) == 61)) {
  _fornum($ls,$2,$line);
 } else {
  _luaX_syntaxerror($ls,8672);
  // unreachable;
 }
 _check_match($ls,262,264,$line);
 _leaveblock($1);
 STACKTOP = sp;return;
}
function _repeatstat($ls,$line) {
 $ls = $ls|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bl1 = 0, $bl2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $bl1 = sp + 12|0;
 $bl2 = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaK_getlabel($1)|0);
 _enterblock($1,$bl1,1);
 _enterblock($1,$bl2,0);
 _luaX_next($ls);
 _statlist($ls);
 _check_match($ls,277,273,$line);
 $3 = (_cond($ls)|0);
 $4 = (($bl2) + 9|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  _leaveblock($1);
  _luaK_patchlist($1,$3,$2);
  _leaveblock($1);
  STACKTOP = sp;return;
 }
 $7 = (($bl2) + 8|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 _luaK_patchclose($1,$3,$9);
 _leaveblock($1);
 _luaK_patchlist($1,$3,$2);
 _leaveblock($1);
 STACKTOP = sp;return;
}
function _funcstat($ls,$line) {
 $ls = $ls|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $b = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $v = sp + 24|0;
 $b = sp;
 _luaX_next($ls);
 $0 = (_funcname($ls,$v)|0);
 _body($ls,$b,$0,$line);
 $1 = (($ls) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 _luaK_storevar($2,$v,$b);
 $3 = HEAP32[$1>>2]|0;
 _luaK_fixline($3,$line);
 STACKTOP = sp;return;
}
function _testnext($ls,$c) {
 $ls = $ls|0;
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($c|0);
 if ($2) {
  _luaX_next($ls);
  $$0 = 1;
 } else {
  $$0 = 0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _localfunc($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $b = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_str_checkname($ls)|0);
 _new_localvar($ls,$2);
 _adjustlocalvars($ls,1);
 $3 = (($ls) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 _body($ls,$b,0,$4);
 $5 = (($1) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($b) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_getlocvar($1,$8)|0);
 $10 = (($9) + 4|0);
 HEAP32[$10>>2] = $6;
 STACKTOP = sp;return;
}
function _localstat($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $e = 0, $nexps$0 = 0, $nvars$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $e = sp;
 $nvars$0 = 0;
 while(1) {
  $0 = (_str_checkname($ls)|0);
  _new_localvar($ls,$0);
  $1 = (($nvars$0) + 1)|0;
  $2 = (_testnext($ls,44)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   break;
  } else {
   $nvars$0 = $1;
  }
 }
 $4 = (_testnext($ls,61)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  HEAP32[$e>>2] = 0;
  $nexps$0 = 0;
 } else {
  $6 = (_explist($ls,$e)|0);
  $nexps$0 = $6;
 }
 _adjust_assign($ls,$1,$nexps$0,$e);
 _adjustlocalvars($ls,$1);
 STACKTOP = sp;return;
}
function _labelstat($ls,$label,$line) {
 $ls = $ls|0;
 $label = $label|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 _checkrepeated($1,$4,$label);
 _checknext($ls,285);
 $5 = (($1) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_newlabelentry($ls,$4,$label,$line,$6)|0);
 _skipnoopstat($ls);
 $8 = (_block_follow($ls,0)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $16 = HEAP32[$4>>2]|0;
  $17 = (($16) + ($7<<4)|0);
  _findgotos($ls,$17);
  STACKTOP = sp;return;
 }
 $10 = (($1) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 8|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = HEAP32[$4>>2]|0;
 $15 = ((($14) + ($7<<4)|0) + 12|0);
 HEAP8[$15>>0] = $13;
 $16 = HEAP32[$4>>2]|0;
 $17 = (($16) + ($7<<4)|0);
 _findgotos($ls,$17);
 STACKTOP = sp;return;
}
function _str_checkname($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _check($ls,288);
 $0 = (($ls) + 24|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_next($ls);
 STACKTOP = sp;return ($1|0);
}
function _retstat($ls) {
 $ls = $ls|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $first$0 = 0, $nret$0 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $e = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_block_follow($ls,1)|0);
 $3 = ($2|0)==(0);
 do {
  if ($3) {
   $4 = (($ls) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(59);
   if ($6) {
    $first$0 = 0;$nret$0 = 0;
   } else {
    $7 = (_explist($ls,$e)|0);
    $8 = HEAP32[$e>>2]|0;
    $$off = (($8) + -12)|0;
    $switch = ($$off>>>0)<(2);
    if ($switch) {
     _luaK_setreturns($1,$e,-1);
     $9 = HEAP32[$e>>2]|0;
     $10 = ($9|0)==(12);
     $11 = ($7|0)==(1);
     $or$cond = $10 & $11;
     if ($or$cond) {
      $12 = (($e) + 8|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = HEAP32[$1>>2]|0;
      $15 = (($14) + 12|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = (($16) + ($13<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $18 & -64;
      $20 = $19 | 30;
      HEAP32[$17>>2] = $20;
     }
     $21 = (($1) + 46|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $first$0 = $23;$nret$0 = -1;
     break;
    } else {
     $24 = ($7|0)==(1);
     if ($24) {
      $25 = (_luaK_exp2anyreg($1,$e)|0);
      $first$0 = $25;$nret$0 = 1;
      break;
     } else {
      _luaK_exp2nextreg($1,$e);
      $26 = (($1) + 46|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $first$0 = $28;$nret$0 = $7;
      break;
     }
    }
   }
  } else {
   $first$0 = 0;$nret$0 = 0;
  }
 } while(0);
 _luaK_ret($1,$first$0,$nret$0);
 (_testnext($ls,59)|0);
 STACKTOP = sp;return;
}
function _gotostat($ls,$pc) {
 $ls = $ls|0;
 $pc = $pc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $label$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_testnext($ls,266)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  _luaX_next($ls);
  $5 = (($ls) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_luaS_new($6,8256)|0);
  $label$0 = $7;
 } else {
  $4 = (_str_checkname($ls)|0);
  $label$0 = $4;
 }
 $8 = (($ls) + 64|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 12|0);
 $11 = (_newlabelentry($ls,$10,$label$0,$1,$pc)|0);
 (_findlabel($ls,$11)|0);
 STACKTOP = sp;return;
}
function _exprstat($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $v = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($v) + 8|0);
 _suffixedexp($ls,$2);
 $3 = (($ls) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 if ((($4|0) == 44) | (($4|0) == 61)) {
  HEAP32[$v>>2] = 0;
  _assignment($ls,$v,1);
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$2>>2]|0;
 $6 = ($5|0)==(12);
 if (!($6)) {
  _luaX_syntaxerror($ls,8296);
  // unreachable;
 }
 $7 = (($v) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$1>>2]|0;
 $10 = (($9) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($8<<2)|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & -8372225;
 $15 = $14 | 16384;
 HEAP32[$12>>2] = $15;
 STACKTOP = sp;return;
}
function _suffixedexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $key = 0, $key1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $key = sp + 24|0;
 $key1 = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _primaryexp($ls,$v);
 $4 = (($ls) + 16|0);
 L1: while(1) {
  $5 = HEAP32[$4>>2]|0;
  switch ($5|0) {
  case 91:  {
   _luaK_exp2anyregup($1,$v);
   _yindex($ls,$key);
   _luaK_indexed($1,$v,$key);
   continue L1;
   break;
  }
  case 123: case 289: case 40:  {
   _luaK_exp2nextreg($1,$v);
   _funcargs($ls,$v,$3);
   continue L1;
   break;
  }
  case 58:  {
   _luaX_next($ls);
   _checkname($ls,$key1);
   _luaK_self($1,$v,$key1);
   _funcargs($ls,$v,$3);
   continue L1;
   break;
  }
  case 46:  {
   _fieldsel($ls,$v);
   continue L1;
   break;
  }
  default: {
   break L1;
  }
  }
 }
 STACKTOP = sp;return;
}
function _assignment($ls,$lh,$nvars) {
 $ls = $ls|0;
 $lh = $lh|0;
 $nvars = $nvars|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0;
 var $nv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $e = sp + 32|0;
 $nv = sp;
 $0 = (($lh) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $$off = (($1) + -7)|0;
 $2 = ($$off>>>0)<(3);
 if (!($2)) {
  _luaX_syntaxerror($ls,8296);
  // unreachable;
 }
 $3 = (_testnext($ls,44)|0);
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   _checknext($ls,61);
   $17 = (_explist($ls,$e)|0);
   $18 = ($17|0)==($nvars|0);
   if ($18) {
    $28 = (($ls) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    _luaK_setoneret($29,$e);
    $30 = HEAP32[$28>>2]|0;
    _luaK_storevar($30,$0,$e);
    STACKTOP = sp;return;
   } else {
    _adjust_assign($ls,$nvars,$17,$e);
    $19 = ($17|0)>($nvars|0);
    if (!($19)) {
     break;
    }
    $20 = (($ls) + 48|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + 48|0);
    $23 = HEAP8[$22>>0]|0;
    $24 = $23&255;
    $25 = (($nvars) - ($17))|0;
    $26 = (($25) + ($24))|0;
    $27 = $26&255;
    HEAP8[$22>>0] = $27;
    break;
   }
  } else {
   HEAP32[$nv>>2] = $lh;
   $5 = (($nv) + 8|0);
   _suffixedexp($ls,$5);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(9);
   if (!($7)) {
    _check_conflict($ls,$lh,$5);
   }
   $8 = (($ls) + 48|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = (($ls) + 52|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 38|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13&65535;
   $15 = (($14) + ($nvars))|0;
   _checklimit($9,$15,200,8312);
   $16 = (($nvars) + 1)|0;
   _assignment($ls,$nv,$16);
  }
 } while(0);
 $31 = (($ls) + 48|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + 48|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = (($35) + -1)|0;
 _init_exp($e,6,$36);
 $37 = HEAP32[$31>>2]|0;
 _luaK_storevar($37,$0,$e);
 STACKTOP = sp;return;
}
function _check_conflict($ls,$lh,$v) {
 $ls = $ls|0;
 $lh = $lh|0;
 $v = $v|0;
 var $$02 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $conflict$01 = 0;
 var $conflict$1 = 0, $conflict$1$ph = 0, $conflict$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($lh|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = (($v) + 8|0);
 $7 = (($v) + 8|0);
 $8 = $3&255;
 $$02 = $lh;$conflict$01 = 0;
 while(1) {
  $9 = (($$02) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(9);
  if ($11) {
   $12 = (($$02) + 16|0);
   $13 = (($12) + 3|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   $16 = HEAP32[$v>>2]|0;
   $17 = ($15|0)==($16|0);
   if ($17) {
    $18 = (($12) + 2|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = $19&255;
    $21 = HEAP32[$6>>2]|0;
    $22 = ($20|0)==($21|0);
    if ($22) {
     HEAP8[$13>>0] = 7;
     HEAP8[$18>>0] = $3;
     $conflict$1$ph = 1;
    } else {
     $conflict$1$ph = $conflict$01;
    }
    $$pr = HEAP32[$v>>2]|0;
    $23 = $$pr;$conflict$1 = $conflict$1$ph;
   } else {
    $23 = $16;$conflict$1 = $conflict$01;
   }
   $24 = ($23|0)==(7);
   if ($24) {
    $25 = HEAP16[$12>>1]|0;
    $26 = $25 << 16 >> 16;
    $27 = HEAP32[$7>>2]|0;
    $28 = ($26|0)==($27|0);
    if ($28) {
     HEAP16[$12>>1] = $8;
     $conflict$2 = 1;
    } else {
     $conflict$2 = $conflict$1;
    }
   } else {
    $conflict$2 = $conflict$1;
   }
  } else {
   $conflict$2 = $conflict$01;
  }
  $29 = HEAP32[$$02>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   break;
  } else {
   $$02 = $29;$conflict$01 = $conflict$2;
  }
 }
 $31 = ($conflict$2|0)==(0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = HEAP32[$v>>2]|0;
 $33 = ($32|0)==(7);
 $34 = $33 ? 0 : 5;
 $35 = (($v) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 (_luaK_codeABC($1,$34,$4,$36,0)|0);
 _luaK_reserveregs($1,1);
 STACKTOP = sp;return;
}
function _checklimit($fs,$v,$l,$what) {
 $fs = $fs|0;
 $v = $v|0;
 $l = $l|0;
 $what = $what|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($v|0)>($l|0);
 if ($0) {
  _errorlimit($fs,$l,$what);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _checknext($ls,$c) {
 $ls = $ls|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _check($ls,$c);
 _luaX_next($ls);
 STACKTOP = sp;return;
}
function _explist($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $n$0$lcssa = 0, $n$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _expr($ls,$v);
 $0 = (_testnext($ls,44)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $n$0$lcssa = 1;
  STACKTOP = sp;return ($n$0$lcssa|0);
 }
 $2 = (($ls) + 48|0);
 $n$01 = 1;
 while(1) {
  $3 = HEAP32[$2>>2]|0;
  _luaK_exp2nextreg($3,$v);
  _expr($ls,$v);
  $4 = (($n$01) + 1)|0;
  $5 = (_testnext($ls,44)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   $n$0$lcssa = $4;
   break;
  } else {
   $n$01 = $4;
  }
 }
 STACKTOP = sp;return ($n$0$lcssa|0);
}
function _adjust_assign($ls,$nvars,$nexps,$e) {
 $ls = $ls|0;
 $nvars = $nvars|0;
 $nexps = $nexps|0;
 $e = $e|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($nvars) - ($nexps))|0;
 $3 = HEAP32[$e>>2]|0;
 if ((($3|0) == 13) | (($3|0) == 12)) {
  $4 = (($2) + 1)|0;
  $5 = ($4|0)<(0);
  $$ = $5 ? 0 : $4;
  _luaK_setreturns($1,$e,$$);
  $6 = ($$|0)>(1);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = (($$) + -1)|0;
  _luaK_reserveregs($1,$7);
  STACKTOP = sp;return;
 } else if (!((($3|0) == 0))) {
  _luaK_exp2nextreg($1,$e);
 }
 $8 = ($2|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = (($1) + 48|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 _luaK_reserveregs($1,$2);
 _luaK_nil($1,$11,$2);
 STACKTOP = sp;return;
}
function _expr($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_subexpr($ls,$v,0)|0);
 STACKTOP = sp;return;
}
function _subexpr($ls,$v,$limit) {
 $ls = $ls|0;
 $v = $v|0;
 $limit = $limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $op$0$lcssa = 0, $op$01 = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $v2 = sp;
 _enterlevel($ls);
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_getunopr($1)|0);
 $3 = ($2|0)==(3);
 if ($3) {
  _simpleexp($ls,$v);
 } else {
  $4 = (($ls) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  _luaX_next($ls);
  (_subexpr($ls,$v,8)|0);
  $6 = (($ls) + 48|0);
  $7 = HEAP32[$6>>2]|0;
  _luaK_prefix($7,$2,$v,$5);
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = (_getbinopr($8)|0);
 $10 = ($9|0)==(15);
 L5: do {
  if ($10) {
   $op$0$lcssa = 15;
  } else {
   $11 = (($ls) + 4|0);
   $12 = (($ls) + 48|0);
   $op$01 = $9;
   while(1) {
    $13 = (8328 + ($op$01<<1)|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = $14&255;
    $16 = ($15|0)>($limit|0);
    if (!($16)) {
     $op$0$lcssa = $op$01;
     break L5;
    }
    $17 = HEAP32[$11>>2]|0;
    _luaX_next($ls);
    $18 = HEAP32[$12>>2]|0;
    _luaK_infix($18,$op$01,$v);
    $19 = ((8328 + ($op$01<<1)|0) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = (_subexpr($ls,$v2,$21)|0);
    $23 = HEAP32[$12>>2]|0;
    _luaK_posfix($23,$op$01,$v,$v2,$17);
    $24 = ($22|0)==(15);
    if ($24) {
     $op$0$lcssa = 15;
     break;
    } else {
     $op$01 = $22;
    }
   }
  }
 } while(0);
 $25 = (($ls) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 38|0);
 $28 = HEAP16[$27>>1]|0;
 $29 = (($28) + -1)<<16>>16;
 HEAP16[$27>>1] = $29;
 STACKTOP = sp;return ($op$0$lcssa|0);
}
function _getunopr($op) {
 $op = $op|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 if ((($op|0) == 35)) {
  $$0 = 2;
 } else if ((($op|0) == 271)) {
  $$0 = 1;
 } else if ((($op|0) == 45)) {
  $$0 = 0;
 } else {
  $$0 = 3;
 }
 STACKTOP = sp;return ($$0|0);
}
function _simpleexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 L1: do {
  switch ($1|0) {
  case 287:  {
   _init_exp($v,5,0);
   $2 = (($ls) + 24|0);
   $3 = +HEAPF64[$2>>3];
   $4 = (($v) + 8|0);
   HEAPF64[$4>>3] = $3;
   break;
  }
  case 263:  {
   _init_exp($v,3,0);
   break;
  }
  case 289:  {
   $5 = (($ls) + 24|0);
   $6 = HEAP32[$5>>2]|0;
   _codestring($ls,$v,$6);
   break;
  }
  case 265:  {
   _luaX_next($ls);
   $14 = (($ls) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   _body($ls,$v,0,$15);
   STACKTOP = sp;return;
   break;
  }
  case 123:  {
   _constructor($ls,$v);
   STACKTOP = sp;return;
   break;
  }
  case 270:  {
   _init_exp($v,1,0);
   break;
  }
  case 280:  {
   $7 = (($ls) + 48|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($9) + 77|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    _luaX_syntaxerror($ls,8360);
    // unreachable;
   } else {
    $13 = (_luaK_codeABC($8,38,0,1,0)|0);
    _init_exp($v,13,$13);
    break L1;
   }
   break;
  }
  case 276:  {
   _init_exp($v,2,0);
   break;
  }
  default: {
   _suffixedexp($ls,$v);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 _luaX_next($ls);
 STACKTOP = sp;return;
}
function _getbinopr($op) {
 $op = $op|0;
 var $$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($op|0) {
  case 45:  {
   $$0 = 1;
   break;
  }
  case 282:  {
   $$0 = 12;
   break;
  }
  case 94:  {
   $$0 = 5;
   break;
  }
  case 284:  {
   $$0 = 10;
   break;
  }
  case 42:  {
   $$0 = 2;
   break;
  }
  case 281:  {
   $$0 = 7;
   break;
  }
  case 60:  {
   $$0 = 8;
   break;
  }
  case 272:  {
   $$0 = 14;
   break;
  }
  case 47:  {
   $$0 = 3;
   break;
  }
  case 283:  {
   $$0 = 9;
   break;
  }
  case 279:  {
   $$0 = 6;
   break;
  }
  case 43:  {
   $$0 = 0;
   break;
  }
  case 257:  {
   $$0 = 13;
   break;
  }
  case 37:  {
   $$0 = 4;
   break;
  }
  case 62:  {
   $$0 = 11;
   break;
  }
  default: {
   $$0 = 15;
  }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _codestring($ls,$e,$s) {
 $ls = $ls|0;
 $e = $e|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaK_stringK($1,$s)|0);
 _init_exp($e,4,$2);
 STACKTOP = sp;return;
}
function _constructor($ls,$t) {
 $ls = $ls|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $cc = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaK_codeABC($1,11,0,0,0)|0);
 $5 = (($cc) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = (($cc) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = (($cc) + 32|0);
 HEAP32[$7>>2] = 0;
 $8 = (($cc) + 24|0);
 HEAP32[$8>>2] = $t;
 _init_exp($t,11,$4);
 _init_exp($cc,0,0);
 $9 = HEAP32[$0>>2]|0;
 _luaK_exp2nextreg($9,$t);
 _checknext($ls,123);
 $10 = (($ls) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(125);
 L1: do {
  if (!($12)) {
   while(1) {
    _closelistfield($1,$cc);
    _field($ls,$cc);
    $13 = (_testnext($ls,44)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     $17 = (_testnext($ls,59)|0);
     $18 = ($17|0)==(0);
     if ($18) {
      break L1;
     }
    }
    $15 = HEAP32[$10>>2]|0;
    $16 = ($15|0)==(125);
    if ($16) {
     break;
    }
   }
  }
 } while(0);
 _check_match($ls,125,123,$3);
 _lastlistfield($1,$cc);
 $19 = HEAP32[$1>>2]|0;
 $20 = (($19) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + ($4<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 & 8388607;
 $25 = HEAP32[$7>>2]|0;
 $26 = (_luaO_int2fb($25)|0);
 $27 = $26 << 23;
 $28 = $27 | $24;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($29) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + ($4<<2)|0);
 HEAP32[$32>>2] = $28;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + ($4<<2)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & -8372225;
 $39 = HEAP32[$6>>2]|0;
 $40 = (_luaO_int2fb($39)|0);
 $41 = $40 << 14;
 $42 = $41 & 8372224;
 $43 = $42 | $38;
 $44 = HEAP32[$1>>2]|0;
 $45 = (($44) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($4<<2)|0);
 HEAP32[$47>>2] = $43;
 STACKTOP = sp;return;
}
function _body($ls,$e,$ismethod,$line) {
 $ls = $ls|0;
 $e = $e|0;
 $ismethod = $ismethod|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $bl = 0, $new_fs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $new_fs = sp + 12|0;
 $bl = sp;
 $0 = (_addprototype($ls)|0);
 HEAP32[$new_fs>>2] = $0;
 $1 = (($0) + 64|0);
 HEAP32[$1>>2] = $line;
 _open_func($ls,$new_fs,$bl);
 _checknext($ls,40);
 $2 = ($ismethod|0)==(0);
 if (!($2)) {
  _new_localvarliteral_($ls,8408,4);
  _adjustlocalvars($ls,1);
 }
 _parlist($ls);
 _checknext($ls,41);
 _statlist($ls);
 $3 = (($ls) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$new_fs>>2]|0;
 $6 = (($5) + 68|0);
 HEAP32[$6>>2] = $4;
 _check_match($ls,262,265,$line);
 _codeclosure($ls,$e);
 _close_func($ls);
 STACKTOP = sp;return;
}
function _addprototype($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $oldsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($3) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 56|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6|0)<($8|0);
 if (!($9)) {
  $10 = (($4) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_luaM_growaux_($1,$11,$7,4,262143,8464)|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP32[$7>>2]|0;
  $14 = ($8|0)<($13|0);
  if ($14) {
   $15 = (($4) + 16|0);
   $16 = HEAP32[$7>>2]|0;
   $oldsize$01 = $8;
   while(1) {
    $17 = (($oldsize$01) + 1)|0;
    $18 = HEAP32[$15>>2]|0;
    $19 = (($18) + ($oldsize$01<<2)|0);
    HEAP32[$19>>2] = 0;
    $20 = ($17|0)<($16|0);
    if ($20) {
     $oldsize$01 = $17;
    } else {
     break;
    }
   }
  }
 }
 $21 = (_luaF_newproto($1)|0);
 $22 = HEAP32[$5>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$5>>2] = $23;
 $24 = (($4) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($22<<2)|0);
 HEAP32[$26>>2] = $21;
 $27 = (($21) + 5|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 3;
 $30 = ($29<<24>>24)==(0);
 if ($30) {
  STACKTOP = sp;return ($21|0);
 }
 $31 = (($4) + 5|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32 & 4;
 $34 = ($33<<24>>24)==(0);
 if ($34) {
  STACKTOP = sp;return ($21|0);
 }
 _luaC_barrier_($1,$4,$21);
 STACKTOP = sp;return ($21|0);
}
function _new_localvarliteral_($ls,$name,$sz) {
 $ls = $ls|0;
 $name = $name|0;
 $sz = $sz|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaX_newstring($ls,$name,$sz)|0);
 _new_localvar($ls,$0);
 STACKTOP = sp;return;
}
function _adjustlocalvars($ls,$nvars) {
 $ls = $ls|0;
 $nvars = $nvars|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 46|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($4) + ($nvars))|0;
 $6 = $5&255;
 HEAP8[$2>>0] = $6;
 $7 = ($nvars|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = (($1) + 20|0);
 $$01 = $nvars;
 while(1) {
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$2>>0]|0;
  $11 = $10&255;
  $12 = (($11) - ($$01))|0;
  $13 = (_getlocvar($1,$12)|0);
  $14 = (($13) + 4|0);
  HEAP32[$14>>2] = $9;
  $15 = (($$01) + -1)|0;
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  } else {
   $$01 = $15;
  }
 }
 STACKTOP = sp;return;
}
function _parlist($ls) {
 $ls = $ls|0;
 var $$pr = 0, $$pr1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $nparams$0 = 0, $nparams$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 77|0);
 HEAP8[$3>>0] = 0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(41);
 L1: do {
  if ($6) {
   $nparams$2 = 0;
  } else {
   $17 = $5;$nparams$0 = 0;
   while(1) {
    if ((($17|0) == 280)) {
     label = 4;
     break;
    } else if (!((($17|0) == 288))) {
     label = 5;
     break;
    }
    $7 = (_str_checkname($ls)|0);
    _new_localvar($ls,$7);
    $8 = (($nparams$0) + 1)|0;
    $$pr1 = HEAP8[$3>>0]|0;
    $9 = ($$pr1<<24>>24)==(0);
    if (!($9)) {
     $nparams$2 = $8;
     break L1;
    }
    $10 = (_testnext($ls,44)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $nparams$2 = $8;
     break L1;
    }
    $$pr = HEAP32[$4>>2]|0;
    $17 = $$pr;$nparams$0 = $8;
   }
   if ((label|0) == 4) {
    _luaX_next($ls);
    HEAP8[$3>>0] = 1;
    $nparams$2 = $nparams$0;
    break;
   }
   else if ((label|0) == 5) {
    _luaX_syntaxerror($ls,8416);
    // unreachable;
   }
  }
 } while(0);
 _adjustlocalvars($ls,$nparams$2);
 $12 = (($1) + 46|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($2) + 76|0);
 HEAP8[$14>>0] = $13;
 $15 = HEAP8[$12>>0]|0;
 $16 = $15&255;
 _luaK_reserveregs($1,$16);
 STACKTOP = sp;return;
}
function _codeclosure($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (_luaK_codeABx($3,37,0,$6)|0);
 _init_exp($v,11,$7);
 _luaK_exp2nextreg($3,$v);
 STACKTOP = sp;return;
}
function _new_localvar($ls,$name) {
 $ls = $ls|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 64|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_registerlocalvar($ls,$name)|0);
 $5 = (($3) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1)|0;
 $8 = (($1) + 40|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) - ($9))|0;
 _checklimit($1,$10,200,8448);
 $11 = HEAP32[$5>>2]|0;
 $12 = (($11) + 2)|0;
 $13 = (($3) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)>($14|0);
 if ($15) {
  $16 = (($ls) + 52|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$3>>2]|0;
  $19 = (_luaM_growaux_($17,$18,$13,2,2147483645,8448)|0);
  HEAP32[$3>>2] = $19;
 }
 $20 = $4&65535;
 $21 = HEAP32[$5>>2]|0;
 $22 = (($21) + 1)|0;
 HEAP32[$5>>2] = $22;
 $23 = HEAP32[$3>>2]|0;
 $24 = (($23) + ($21<<1)|0);
 HEAP16[$24>>1] = $20;
 STACKTOP = sp;return;
}
function _registerlocalvar($ls,$varname) {
 $ls = $ls|0;
 $varname = $varname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $oldsize$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 60|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + 44|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 << 16 >> 16;
 $8 = ($7|0)<($4|0);
 if (!($8)) {
  $9 = (($ls) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($2) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_luaM_growaux_($10,$12,$3,12,32767,8448)|0);
  HEAP32[$11>>2] = $13;
 }
 $14 = HEAP32[$3>>2]|0;
 $15 = ($4|0)<($14|0);
 if ($15) {
  $16 = (($2) + 24|0);
  $17 = HEAP32[$3>>2]|0;
  $oldsize$01 = $4;
  while(1) {
   $18 = (($oldsize$01) + 1)|0;
   $19 = HEAP32[$16>>2]|0;
   $20 = (($19) + (($oldsize$01*12)|0)|0);
   HEAP32[$20>>2] = 0;
   $21 = ($18|0)<($17|0);
   if ($21) {
    $oldsize$01 = $18;
   } else {
    break;
   }
  }
 }
 $22 = HEAP16[$5>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = (($2) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + (($23*12)|0)|0);
 HEAP32[$26>>2] = $varname;
 $27 = (($varname) + 5|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28 & 3;
 $30 = ($29<<24>>24)==(0);
 if (!($30)) {
  $31 = (($2) + 5|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32 & 4;
  $34 = ($33<<24>>24)==(0);
  if (!($34)) {
   $35 = (($ls) + 52|0);
   $36 = HEAP32[$35>>2]|0;
   _luaC_barrier_($36,$2,$varname);
  }
 }
 $37 = HEAP16[$5>>1]|0;
 $38 = (($37) + 1)<<16>>16;
 HEAP16[$5>>1] = $38;
 $39 = $37 << 16 >> 16;
 STACKTOP = sp;return ($39|0);
}
function _closelistfield($fs,$cc) {
 $fs = $fs|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$cc>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 _luaK_exp2nextreg($fs,$cc);
 HEAP32[$cc>>2] = 0;
 $2 = (($cc) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(50);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($cc) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($cc) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 _luaK_setlist($fs,$8,$10,$3);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function _field($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 do {
  if ((($1|0) == 288)) {
   $2 = (_luaX_lookahead($ls)|0);
   $3 = ($2|0)==(61);
   if ($3) {
    _recfield($ls,$cc);
    break;
   } else {
    _listfield($ls,$cc);
    break;
   }
  } else if ((($1|0) == 91)) {
   _recfield($ls,$cc);
  } else {
   _listfield($ls,$cc);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _lastlistfield($fs,$cc) {
 $fs = $fs|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($cc) + 36|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = HEAP32[$cc>>2]|0;
 if ((($3|0) == 13) | (($3|0) == 12)) {
  _luaK_setreturns($fs,$cc,-1);
  $4 = (($cc) + 24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($cc) + 32|0);
  $9 = HEAP32[$8>>2]|0;
  _luaK_setlist($fs,$7,$9,-1);
  $10 = HEAP32[$8>>2]|0;
  $11 = (($10) + -1)|0;
  HEAP32[$8>>2] = $11;
  STACKTOP = sp;return;
 } else if (!((($3|0) == 0))) {
  _luaK_exp2nextreg($fs,$cc);
 }
 $12 = (($cc) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($cc) + 32|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$0>>2]|0;
 _luaK_setlist($fs,$15,$17,$18);
 STACKTOP = sp;return;
}
function _listfield($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _expr($ls,$cc);
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($cc) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 _checklimit($1,$3,2147483645,8480);
 $4 = HEAP32[$2>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$2>>2] = $5;
 $6 = (($cc) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _recfield($ls,$cc) {
 $ls = $ls|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, $val = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $key = sp + 24|0;
 $val = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = (($ls) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(288);
 if ($6) {
  $7 = (($cc) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  _checklimit($1,$8,2147483645,8480);
  _checkname($ls,$key);
 } else {
  _yindex($ls,$key);
 }
 $9 = (($cc) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + 1)|0;
 HEAP32[$9>>2] = $11;
 _checknext($ls,61);
 $12 = (_luaK_exp2RK($1,$key)|0);
 _expr($ls,$val);
 $13 = (($cc) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_luaK_exp2RK($1,$val)|0);
 (_luaK_codeABC($1,10,$16,$12,$17)|0);
 HEAP8[$2>>0] = $3;
 STACKTOP = sp;return;
}
function _checkname($ls,$e) {
 $ls = $ls|0;
 $e = $e|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_checkname($ls)|0);
 _codestring($ls,$e,$0);
 STACKTOP = sp;return;
}
function _yindex($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaX_next($ls);
 _expr($ls,$v);
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2val($1,$v);
 _checknext($ls,93);
 STACKTOP = sp;return;
}
function _errorlimit($fs,$limit,$what) {
 $fs = $fs|0;
 $limit = $limit|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($fs) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$fs>>2]|0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $9 = 8504;
 } else {
  HEAP32[$vararg_buffer1>>2] = $6;
  $8 = (_luaO_pushfstring($3,8520,$vararg_buffer1)|0);
  $9 = $8;
 }
 HEAP32[$vararg_buffer1>>2] = $what;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $limit;
 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $9;
 $10 = (_luaO_pushfstring($3,8544,$vararg_buffer1)|0);
 $11 = HEAP32[$0>>2]|0;
 _luaX_syntaxerror($11,$10);
 // unreachable;
}
function _primaryexp($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 40)) {
  $2 = (($ls) + 4|0);
  $3 = HEAP32[$2>>2]|0;
  _luaX_next($ls);
  _expr($ls,$v);
  _check_match($ls,41,40,$3);
  $4 = (($ls) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  _luaK_dischargevars($5,$v);
  STACKTOP = sp;return;
 } else if ((($1|0) == 288)) {
  _singlevar($ls,$v);
  STACKTOP = sp;return;
 } else {
  _luaX_syntaxerror($ls,8608);
  // unreachable;
 }
}
function _fieldsel($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $key = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2anyregup($1,$v);
 _luaX_next($ls);
 _checkname($ls,$key);
 _luaK_indexed($1,$v,$key);
 STACKTOP = sp;return;
}
function _funcargs($ls,$f,$line) {
 $ls = $ls|0;
 $f = $f|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $nparams$0 = 0;
 var $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $args = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 289)) {
  $6 = (($ls) + 24|0);
  $7 = HEAP32[$6>>2]|0;
  _codestring($ls,$args,$7);
  _luaX_next($ls);
 } else if ((($3|0) == 40)) {
  _luaX_next($ls);
  $4 = HEAP32[$2>>2]|0;
  $5 = ($4|0)==(41);
  if ($5) {
   HEAP32[$args>>2] = 0;
  } else {
   (_explist($ls,$args)|0);
   _luaK_setreturns($1,$args,-1);
  }
  _check_match($ls,41,40,$line);
 } else if ((($3|0) == 123)) {
  _constructor($ls,$args);
 } else {
  _luaX_syntaxerror($ls,8576);
  // unreachable;
 }
 $8 = (($f) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$args>>2]|0;
 if ((($10|0) == 0)) {
  label = 11;
 } else if ((($10|0) == 13) | (($10|0) == 12)) {
  $nparams$0 = 0;
 } else {
  _luaK_exp2nextreg($1,$args);
  label = 11;
 }
 if ((label|0) == 11) {
  $11 = (($1) + 48|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $phitmp = (($13) - ($9))|0;
  $nparams$0 = $phitmp;
 }
 $14 = (_luaK_codeABC($1,29,$9,$nparams$0,2)|0);
 _init_exp($f,12,$14);
 _luaK_fixline($1,$line);
 $15 = (($9) + 1)|0;
 $16 = $15&255;
 $17 = (($1) + 48|0);
 HEAP8[$17>>0] = $16;
 STACKTOP = sp;return;
}
function _singlevar($ls,$var) {
 $ls = $ls|0;
 $var = $var|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $key = sp;
 $0 = (_str_checkname($ls)|0);
 $1 = (($ls) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_singlevaraux($2,$0,$var,1)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (($ls) + 72|0);
 $6 = HEAP32[$5>>2]|0;
 (_singlevaraux($2,$6,$var,1)|0);
 _codestring($ls,$key,$0);
 _luaK_indexed($2,$var,$key);
 STACKTOP = sp;return;
}
function _singlevaraux($fs,$n,$var,$base) {
 $fs = $fs|0;
 $n = $n|0;
 $var = $var|0;
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fs|0)==(0|0);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (_searchvar($fs,$n)|0);
   $2 = ($1|0)>(-1);
   if ($2) {
    _init_exp($var,7,$1);
    $3 = ($base|0)==(0);
    if (!($3)) {
     $$0 = 7;
     break;
    }
    _markupval($fs,$1);
    $$0 = 7;
    break;
   }
   $4 = (_searchupvalue($fs,$n)|0);
   $5 = ($4|0)<(0);
   if ($5) {
    $6 = (($fs) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_singlevaraux($7,$n,$var,0)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $$0 = 0;
     break;
    }
    $10 = (_newupvalue($fs,$n,$var)|0);
    $idx$0 = $10;
   } else {
    $idx$0 = $4;
   }
   _init_exp($var,8,$idx$0);
   $$0 = 8;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _searchvar($fs,$n) {
 $fs = $fs|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 46|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $i$0$in = $2;
 while(1) {
  $i$0 = (($i$0$in) + -1)|0;
  $3 = ($i$0$in|0)>(0);
  if (!($3)) {
   $$0 = -1;
   label = 4;
   break;
  }
  $4 = (_getlocvar($fs,$i$0)|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_luaS_eqstr($n,$5)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $i$0$in = $i$0;
  } else {
   $$0 = $i$0;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _markupval($fs,$level) {
 $fs = $fs|0;
 $level = $level|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $bl$0 = 0, $bl$0$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($fs) + 16|0);
 $bl$0$in = $0;
 while(1) {
  $bl$0 = HEAP32[$bl$0$in>>2]|0;
  $1 = (($bl$0) + 8|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)>($level|0);
  if ($4) {
   $bl$0$in = $bl$0;
  } else {
   break;
  }
 }
 $5 = (($bl$0) + 9|0);
 HEAP8[$5>>0] = 1;
 STACKTOP = sp;return;
}
function _searchupvalue($fs,$name) {
 $fs = $fs|0;
 $name = $name|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$fs>>2]|0;
 $1 = (($0) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($fs) + 47|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $i$01 = 0;
 }
 while(1) {
  $10 = (($2) + ($i$01<<3)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (_luaS_eqstr($11,$name)|0);
  $13 = ($12|0)==(0);
  $8 = (($i$01) + 1)|0;
  if (!($13)) {
   $$0 = $i$01;
   label = 4;
   break;
  }
  $6 = HEAP8[$3>>0]|0;
  $7 = $6&255;
  $9 = ($8|0)<($7|0);
  if ($9) {
   $i$01 = $8;
  } else {
   $$0 = -1;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _checkrepeated($fs,$ll,$label) {
 $fs = $fs|0;
 $ll = $ll|0;
 $label = $label|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($fs) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 << 16 >> 16;
 $5 = (($ll) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)<($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $i$02 = $4;
 while(1) {
  $11 = HEAP32[$ll>>2]|0;
  $12 = (($11) + ($i$02<<4)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (_luaS_eqstr($label,$13)|0);
  $15 = ($14|0)==(0);
  $9 = (($i$02) + 1)|0;
  if (!($15)) {
   label = 5;
   break;
  }
  $8 = HEAP32[$5>>2]|0;
  $10 = ($9|0)<($8|0);
  if ($10) {
   $i$02 = $9;
  } else {
   label = 6;
   break;
  }
 }
 if ((label|0) == 5) {
  $16 = (($fs) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 52|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($label) + 16|0);
  $21 = HEAP32[$ll>>2]|0;
  $22 = ((($21) + ($i$02<<4)|0) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  HEAP32[$vararg_buffer>>2] = $20;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $23;
  $24 = (_luaO_pushfstring($19,8632,$vararg_buffer)|0);
  $25 = HEAP32[$16>>2]|0;
  _semerror($25,$24);
  // unreachable;
 }
 else if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
}
function _skipnoopstat($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  if (!((($1|0) == 285) | (($1|0) == 59))) {
   break;
  }
  _statement($ls);
 }
 STACKTOP = sp;return;
}
function _funcname($ls,$v) {
 $ls = $ls|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $ismethod$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _singlevar($ls,$v);
 $0 = (($ls) + 16|0);
 while(1) {
  $1 = HEAP32[$0>>2]|0;
  if ((($1|0) == 58)) {
   label = 4;
   break;
  } else if (!((($1|0) == 46))) {
   $ismethod$0 = 0;
   break;
  }
  _fieldsel($ls,$v);
 }
 if ((label|0) == 4) {
  _fieldsel($ls,$v);
  $ismethod$0 = 1;
 }
 STACKTOP = sp;return ($ismethod$0|0);
}
function _enterblock($fs,$bl,$isloop) {
 $fs = $fs|0;
 $bl = $bl|0;
 $isloop = $isloop|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($bl) + 10|0);
 HEAP8[$0>>0] = $isloop;
 $1 = (($fs) + 46|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = (($bl) + 8|0);
 HEAP8[$3>>0] = $2;
 $4 = (($fs) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 64|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9&65535;
 $11 = (($bl) + 4|0);
 HEAP16[$11>>1] = $10;
 $12 = HEAP32[$4>>2]|0;
 $13 = (($12) + 64|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16&65535;
 $18 = (($bl) + 6|0);
 HEAP16[$18>>1] = $17;
 $19 = (($bl) + 9|0);
 HEAP8[$19>>0] = 0;
 $20 = (($fs) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 HEAP32[$bl>>2] = $21;
 HEAP32[$20>>2] = $bl;
 STACKTOP = sp;return;
}
function _cond($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $v = sp;
 _expr($ls,$v);
 $0 = HEAP32[$v>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  HEAP32[$v>>2] = 3;
 }
 $2 = (($ls) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 _luaK_goiftrue($3,$v);
 $4 = (($v) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 STACKTOP = sp;return ($5|0);
}
function _fornum($ls,$varname,$line) {
 $ls = $ls|0;
 $varname = $varname|0;
 $line = $line|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 _new_localvarliteral_($ls,8744,11);
 _new_localvarliteral_($ls,8760,11);
 _new_localvarliteral_($ls,8776,10);
 _new_localvar($ls,$varname);
 _checknext($ls,61);
 _exp1($ls);
 _checknext($ls,44);
 _exp1($ls);
 $5 = (_testnext($ls,44)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = HEAP8[$2>>0]|0;
  $8 = $7&255;
  $9 = (_luaK_numberK($1,1.0)|0);
  (_luaK_codek($1,$8,$9)|0);
  _luaK_reserveregs($1,1);
  _forbody($ls,$4,$line,1,1);
  STACKTOP = sp;return;
 } else {
  _exp1($ls);
  _forbody($ls,$4,$line,1,1);
  STACKTOP = sp;return;
 }
}
function _forlist($ls,$indexname) {
 $ls = $ls|0;
 $indexname = $indexname|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $e = 0, $nvars$0$lcssa = 0, $nvars$01 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $e = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 48|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 _new_localvarliteral_($ls,8696,15);
 _new_localvarliteral_($ls,8712,11);
 _new_localvarliteral_($ls,8728,13);
 _new_localvar($ls,$indexname);
 $5 = (_testnext($ls,44)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $nvars$0$lcssa = 1;
 } else {
  $nvars$01 = 4;
  while(1) {
   $7 = (_str_checkname($ls)|0);
   _new_localvar($ls,$7);
   $8 = (($nvars$01) + 1)|0;
   $9 = (_testnext($ls,44)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    break;
   } else {
    $nvars$01 = $8;
   }
  }
  $phitmp = (($nvars$01) + -2)|0;
  $nvars$0$lcssa = $phitmp;
 }
 _checknext($ls,268);
 $11 = (($ls) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_explist($ls,$e)|0);
 _adjust_assign($ls,3,$13,$e);
 _luaK_checkstack($1,3);
 _forbody($ls,$4,$12,$nvars$0$lcssa,0);
 STACKTOP = sp;return;
}
function _forbody($ls,$base,$line,$nvars,$isnum) {
 $ls = $ls|0;
 $base = $base|0;
 $line = $line|0;
 $nvars = $nvars|0;
 $isnum = $isnum|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bl = 0, $endfor$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bl = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _adjustlocalvars($ls,3);
 _checknext($ls,259);
 $2 = ($isnum|0)!=(0);
 if ($2) {
  $3 = (_luaK_codeABx($1,33,$base,131070)|0);
  $5 = $3;
 } else {
  $4 = (_luaK_jump($1)|0);
  $5 = $4;
 }
 _enterblock($1,$bl,0);
 _adjustlocalvars($ls,$nvars);
 _luaK_reserveregs($1,$nvars);
 _block($ls);
 _leaveblock($1);
 _luaK_patchtohere($1,$5);
 if ($2) {
  $6 = (_luaK_codeABx($1,32,$base,131070)|0);
  $endfor$0 = $6;
  $9 = (($5) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$9);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 } else {
  (_luaK_codeABC($1,34,$base,0,$nvars)|0);
  _luaK_fixline($1,$line);
  $7 = (($base) + 2)|0;
  $8 = (_luaK_codeABx($1,35,$7,131070)|0);
  $endfor$0 = $8;
  $9 = (($5) + 1)|0;
  _luaK_patchlist($1,$endfor$0,$9);
  _luaK_fixline($1,$line);
  STACKTOP = sp;return;
 }
}
function _exp1($ls) {
 $ls = $ls|0;
 var $0 = 0, $1 = 0, $e = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $e = sp;
 _expr($ls,$e);
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaK_exp2nextreg($1,$e);
 STACKTOP = sp;return;
}
function _test_then_block($ls,$escapelist) {
 $ls = $ls|0;
 $escapelist = $escapelist|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bl = 0, $jf$0 = 0, $switch = 0, $v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $bl = sp + 24|0;
 $v = sp;
 $0 = (($ls) + 48|0);
 $1 = HEAP32[$0>>2]|0;
 _luaX_next($ls);
 _expr($ls,$v);
 _checknext($ls,275);
 $2 = (($ls) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 do {
  if ((($3|0) == 258) | (($3|0) == 266)) {
   $4 = HEAP32[$0>>2]|0;
   _luaK_goiffalse($4,$v);
   _enterblock($1,$bl,0);
   $5 = (($v) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   _gotostat($ls,$6);
   _skipnoopstat($ls);
   $7 = (_block_follow($ls,0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $9 = (_luaK_jump($1)|0);
    $jf$0 = $9;
    break;
   }
   _leaveblock($1);
   STACKTOP = sp;return;
  } else {
   $10 = HEAP32[$0>>2]|0;
   _luaK_goiftrue($10,$v);
   _enterblock($1,$bl,0);
   $11 = (($v) + 20|0);
   $12 = HEAP32[$11>>2]|0;
   $jf$0 = $12;
  }
 } while(0);
 _statlist($ls);
 _leaveblock($1);
 $13 = HEAP32[$2>>2]|0;
 $$off = (($13) + -260)|0;
 $switch = ($$off>>>0)<(2);
 if ($switch) {
  $14 = (_luaK_jump($1)|0);
  _luaK_concat($1,$escapelist,$14);
 }
 _luaK_patchtohere($1,$jf$0);
 STACKTOP = sp;return;
}
function _luaE_setdebt($g,$debt) {
 $g = $g|0;
 $debt = $debt|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($g) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($g) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) - ($debt))|0;
 $5 = (($4) + ($3))|0;
 HEAP32[$2>>2] = $5;
 HEAP32[$0>>2] = $debt;
 STACKTOP = sp;return;
}
function _luaE_extendCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,40)|0);
 $1 = (($L) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($0) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = (($0) + 12|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return ($0|0);
}
function _luaE_freeCI($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $next$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 } else {
  $next$01 = $3;
 }
 while(1) {
  $5 = (($next$01) + 12|0);
  $6 = HEAP32[$5>>2]|0;
  (_luaM_realloc_($L,$next$01,40,0)|0);
  $7 = ($6|0)==(0|0);
  if ($7) {
   break;
  } else {
   $next$01 = $6;
  }
 }
 STACKTOP = sp;return;
}
function _lua_newthread($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(0);
 if ($4) {
  _luaC_step($L);
 }
 $5 = (_luaC_newobj($L,8,112,0,0)|0);
 $6 = (($L) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$7>>2] = $5;
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 72;
 $9 = HEAP32[$6>>2]|0;
 $10 = (($9) + 16|0);
 HEAP32[$6>>2] = $10;
 $11 = HEAP32[$0>>2]|0;
 _preinit_state($5,$11);
 $12 = (($L) + 40|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (($5) + 40|0);
 HEAP8[$14>>0] = $13;
 $15 = (($L) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($5) + 44|0);
 HEAP32[$17>>2] = $16;
 $18 = (($L) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($5) + 52|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$17>>2]|0;
 $22 = (($5) + 48|0);
 HEAP32[$22>>2] = $21;
 _stack_init($5,$L);
 STACKTOP = sp;return ($5|0);
}
function _preinit_state($L,$g) {
 $L = $L|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 HEAP32[$0>>2] = $g;
 $1 = (($L) + 28|0);
 HEAP32[$1>>2] = 0;
 $2 = (($L) + 16|0);
 HEAP32[$2>>2] = 0;
 $3 = (($L) + 32|0);
 HEAP32[$3>>2] = 0;
 $4 = (($L) + 64|0);
 HEAP32[$4>>2] = 0;
 $5 = (($L) + 38|0);
 HEAP16[$5>>1] = 0;
 $6 = (($L) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = (($L) + 40|0);
 HEAP8[$7>>0] = 0;
 $8 = (($L) + 44|0);
 HEAP32[$8>>2] = 0;
 $9 = (($L) + 41|0);
 HEAP8[$9>>0] = 1;
 $10 = HEAP32[$8>>2]|0;
 $11 = (($L) + 48|0);
 HEAP32[$11>>2] = $10;
 $12 = (($L) + 56|0);
 HEAP32[$12>>2] = 0;
 $13 = (($L) + 36|0);
 HEAP16[$13>>1] = 1;
 $14 = (($L) + 6|0);
 HEAP8[$14>>0] = 0;
 $15 = (($L) + 68|0);
 HEAP32[$15>>2] = 0;
 STACKTOP = sp;return;
}
function _stack_init($L1,$L) {
 $L1 = $L1|0;
 $L = $L|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaM_realloc_($L,0,0,640)|0);
 $1 = (($L1) + 28|0);
 HEAP32[$1>>2] = $0;
 $2 = (($L1) + 32|0);
 HEAP32[$2>>2] = 40;
 $3 = HEAP32[$1>>2]|0;
 $i$01 = 0;
 while(1) {
  $4 = ((($3) + ($i$01<<4)|0) + 8|0);
  HEAP32[$4>>2] = 0;
  $5 = (($i$01) + 1)|0;
  $exitcond = ($5|0)==(40);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 $6 = (($L1) + 8|0);
 HEAP32[$6>>2] = $3;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $$sum = (($8) + -5)|0;
 $9 = (($7) + ($$sum<<4)|0);
 $10 = (($L1) + 24|0);
 HEAP32[$10>>2] = $9;
 $11 = (($L1) + 72|0);
 $12 = (($L1) + 80|0);
 HEAP32[$12>>2] = 0;
 $13 = (($L1) + 84|0);
 HEAP32[$13>>2] = 0;
 $14 = (($L1) + 90|0);
 HEAP8[$14>>0] = 0;
 $15 = HEAP32[$6>>2]|0;
 HEAP32[$11>>2] = $15;
 $16 = HEAP32[$6>>2]|0;
 $17 = (($16) + 16|0);
 HEAP32[$6>>2] = $17;
 $18 = (($16) + 8|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP32[$6>>2]|0;
 $20 = (($19) + 320|0);
 $21 = (($L1) + 76|0);
 HEAP32[$21>>2] = $20;
 $22 = (($L1) + 16|0);
 HEAP32[$22>>2] = $11;
 STACKTOP = sp;return;
}
function _luaE_freethread($L,$L1) {
 $L = $L|0;
 $L1 = $L1|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L1) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 _luaF_close($L1,$1);
 _freestack($L1);
 (_luaM_realloc_($L,$L1,112,0)|0);
 STACKTOP = sp;return;
}
function _freestack($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($L) + 72|0);
 $4 = (($L) + 16|0);
 HEAP32[$4>>2] = $3;
 _luaE_freeCI($L);
 $5 = HEAP32[$0>>2]|0;
 $6 = (($L) + 32|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 << 4;
 (_luaM_realloc_($L,$5,$8,0)|0);
 STACKTOP = sp;return;
}
function _lua_newstate($f,$ud) {
 $f = $f|0;
 $ud = $ud|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $scevgep = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (FUNCTION_TABLE_iiiii[$f & 31]($ud,0,8,400)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($0) + 112|0);
 HEAP32[$0>>2] = 0;
 $3 = (($0) + 4|0);
 HEAP8[$3>>0] = 8;
 $4 = (($0) + 172|0);
 HEAP8[$4>>0] = 33;
 $5 = (($0) + 5|0);
 HEAP8[$5>>0] = 1;
 $6 = (($0) + 174|0);
 HEAP8[$6>>0] = 0;
 _preinit_state($0,$2);
 HEAP32[$2>>2] = $f;
 $7 = (($0) + 116|0);
 HEAP32[$7>>2] = $ud;
 $8 = (($0) + 284|0);
 HEAP32[$8>>2] = $0;
 $9 = (_makeseed($0)|0);
 $10 = (($0) + 168|0);
 HEAP32[$10>>2] = $9;
 $11 = (($0) + 224|0);
 $12 = (($0) + 240|0);
 HEAP32[$12>>2] = $11;
 $13 = (($0) + 244|0);
 HEAP32[$13>>2] = $11;
 $14 = (($0) + 175|0);
 HEAP8[$14>>0] = 0;
 $15 = (($0) + 132|0);
 $16 = (($0) + 160|0);
 HEAP32[$16>>2] = 0;
 $17 = (($0) + 256|0);
 HEAP32[$17>>2] = 0;
 $18 = (($0) + 264|0);
 HEAP32[$18>>2] = 0;
 $19 = (($0) + 280|0);
 HEAP32[$19>>2] = 0;
 $20 = (($0) + 288|0);
 HEAP32[$20>>2] = 0;
 $21 = (($0) + 173|0);
 ;HEAP32[$15+0>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;
 HEAP8[$21>>0] = 5;
 $22 = (($0) + 180|0);
 $23 = (($0) + 120|0);
 dest=$22+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$23>>2] = 400;
 $24 = (($0) + 124|0);
 HEAP32[$24>>2] = 0;
 $25 = (($0) + 268|0);
 HEAP32[$25>>2] = 200;
 $26 = (($0) + 272|0);
 HEAP32[$26>>2] = 200;
 $27 = (($0) + 276|0);
 HEAP32[$27>>2] = 200;
 $scevgep = (($0) + 364|0);
 dest=$scevgep+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $28 = (_luaD_rawrunprotected($0,25,0)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 _close_state($0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _makeseed($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $buff = 0, $h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $buff = sp + 8|0;
 $h = sp;
 $0 = (_time((0|0))|0);
 HEAP32[$h>>2] = $0;
 $1 = $L;
 HEAP32[$buff>>2] = $1;
 $2 = $h;
 $3 = (($buff) + 4|0);
 HEAP32[$3>>2] = $2;
 $4 = (($buff) + 8|0);
 HEAP32[$4>>2] = (7144);
 $5 = (($buff) + 12|0);
 HEAP32[$5>>2] = (18);
 $6 = HEAP32[$h>>2]|0;
 $7 = (_luaS_hash($buff,16,$6)|0);
 STACKTOP = sp;return ($7|0);
}
function _f_luaopen($L,$ud) {
 $L = $L|0;
 $ud = $ud|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 _stack_init($L,$L);
 _init_registry($L,$1);
 _luaS_resize($L,32);
 _luaT_init($L);
 _luaX_init($L);
 $2 = (_luaS_newlstr($L,8848,17)|0);
 $3 = (($1) + 180|0);
 HEAP32[$3>>2] = $2;
 $4 = (($2) + 5|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = $6 | 32;
 $8 = $7&255;
 HEAP8[$4>>0] = $8;
 $9 = (($1) + 63|0);
 HEAP8[$9>>0] = 1;
 $10 = (_lua_version(0)|0);
 $11 = (($1) + 176|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function _close_state($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 _luaF_close($L,$3);
 _luaC_freeallobjects($L);
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 << 2;
 (_luaM_realloc_($L,$6,$9,0)|0);
 $10 = (($1) + 144|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($1) + 152|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (_luaM_realloc_($L,$11,$13,0)|0);
 HEAP32[$10>>2] = $14;
 HEAP32[$12>>2] = 0;
 _freestack($L);
 $15 = HEAP32[$1>>2]|0;
 $16 = (($1) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 (FUNCTION_TABLE_iiiii[$15 & 31]($17,$L,400,0)|0);
 STACKTOP = sp;return;
}
function _lua_close($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 172|0);
 $3 = HEAP32[$2>>2]|0;
 _close_state($3);
 STACKTOP = sp;return;
}
function _init_registry($L,$g) {
 $L = $L|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $mt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $mt = sp;
 $0 = (_luaH_new($L)|0);
 $1 = (($g) + 40|0);
 HEAP32[$1>>2] = $0;
 $2 = (($g) + 48|0);
 HEAP32[$2>>2] = 69;
 _luaH_resize($L,$0,2,0);
 HEAP32[$mt>>2] = $L;
 $3 = (($mt) + 8|0);
 HEAP32[$3>>2] = 72;
 _luaH_setint($L,$0,1,$mt);
 $4 = (_luaH_new($L)|0);
 HEAP32[$mt>>2] = $4;
 HEAP32[$3>>2] = 69;
 _luaH_setint($L,$0,2,$mt);
 STACKTOP = sp;return;
}
function _luaS_eqlngstr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($a|0)==($b|0);
 if ($2) {
  $11 = 1;
 } else {
  $3 = (($b) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)==($4|0);
  if ($5) {
   $6 = (($a) + 16|0);
   $7 = (($b) + 16|0);
   $8 = (_memcmp($6,$7,$1)|0);
   $9 = ($8|0)==(0);
   $11 = $9;
  } else {
   $11 = 0;
  }
 }
 $10 = $11&1;
 STACKTOP = sp;return ($10|0);
}
function _luaS_eqstr($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($a) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = (($b) + 4|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($1<<24>>24)==($3<<24>>24);
 if (!($4)) {
  $12 = 0;
  $11 = $12&1;
  STACKTOP = sp;return ($11|0);
 }
 $5 = ($1<<24>>24)==(4);
 if ($5) {
  $6 = ($a|0)==($b|0);
  $7 = $6&1;
  $9 = $7;
 } else {
  $8 = (_luaS_eqlngstr($a,$b)|0);
  $9 = $8;
 }
 $10 = ($9|0)!=(0);
 $12 = $10;
 $11 = $12&1;
 STACKTOP = sp;return ($11|0);
}
function _luaS_hash($str,$l,$seed) {
 $str = $str|0;
 $l = $l|0;
 $seed = $seed|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h$0$lcssa = 0, $h$02 = 0, $l1$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $seed ^ $l;
 $1 = $l >>> 5;
 $2 = (($1) + 1)|0;
 $3 = ($2>>>0)>($l>>>0);
 if ($3) {
  $h$0$lcssa = $0;
  STACKTOP = sp;return ($h$0$lcssa|0);
 } else {
  $h$02 = $0;$l1$01 = $l;
 }
 while(1) {
  $4 = $h$02 << 5;
  $5 = $h$02 >>> 2;
  $6 = (($4) + ($5))|0;
  $7 = (($l1$01) + -1)|0;
  $8 = (($str) + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = (($6) + ($10))|0;
  $12 = $11 ^ $h$02;
  $13 = (($l1$01) - ($2))|0;
  $14 = ($13>>>0)<($2>>>0);
  if ($14) {
   $h$0$lcssa = $12;
   break;
  } else {
   $h$02 = $12;$l1$01 = $13;
  }
 }
 STACKTOP = sp;return ($h$0$lcssa|0);
}
function _luaS_resize($L,$newsize) {
 $L = $L|0;
 $newsize = $newsize|0;
 var $$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$05 = 0, $i$12 = 0, $p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 24|0);
 _luaC_runtilstate($L,-5);
 $3 = (($1) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)<($newsize|0);
 if ($5) {
  $9 = (($newsize) + 1)|0;
  $10 = ($9>>>0)>(1073741823);
  if ($10) {
   _luaM_toobig($L);
   // unreachable;
  }
  $11 = HEAP32[$2>>2]|0;
  $12 = $4 << 2;
  $13 = $newsize << 2;
  $14 = (_luaM_realloc_($L,$11,$12,$13)|0);
  HEAP32[$2>>2] = $14;
  $15 = HEAP32[$3>>2]|0;
  $16 = ($15|0)<($newsize|0);
  if ($16) {
   $i$05 = $15;
   while(1) {
    $17 = HEAP32[$2>>2]|0;
    $18 = (($17) + ($i$05<<2)|0);
    HEAP32[$18>>2] = 0;
    $19 = (($i$05) + 1)|0;
    $exitcond = ($19|0)==($newsize|0);
    if ($exitcond) {
     break;
    } else {
     $i$05 = $19;
    }
   }
   $$pr = HEAP32[$3>>2]|0;
   $6 = $$pr;
  } else {
   $6 = $15;
  }
 } else {
  $6 = $4;
 }
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = (($newsize) + -1)|0;
  $i$12 = 0;
  while(1) {
   $20 = HEAP32[$2>>2]|0;
   $21 = (($20) + ($i$12<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$21>>2] = 0;
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    $p$01 = $22;
    while(1) {
     $24 = HEAP32[$p$01>>2]|0;
     $25 = (($p$01) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = $26 & $8;
     $28 = HEAP32[$2>>2]|0;
     $29 = (($28) + ($27<<2)|0);
     $30 = HEAP32[$29>>2]|0;
     HEAP32[$p$01>>2] = $30;
     $31 = HEAP32[$2>>2]|0;
     $32 = (($31) + ($27<<2)|0);
     HEAP32[$32>>2] = $p$01;
     $33 = (($p$01) + 5|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 191;
     $37 = $36&255;
     HEAP8[$33>>0] = $37;
     $38 = ($24|0)==(0|0);
     if ($38) {
      break;
     } else {
      $p$01 = $24;
     }
    }
   }
   $39 = (($i$12) + 1)|0;
   $40 = HEAP32[$3>>2]|0;
   $41 = ($39|0)<($40|0);
   if ($41) {
    $i$12 = $39;
   } else {
    $$lcssa = $40;
    break;
   }
  }
 } else {
  $$lcssa = $6;
 }
 $42 = ($$lcssa|0)>($newsize|0);
 if (!($42)) {
  HEAP32[$3>>2] = $newsize;
  STACKTOP = sp;return;
 }
 $43 = (($newsize) + 1)|0;
 $44 = ($43>>>0)>(1073741823);
 if ($44) {
  _luaM_toobig($L);
  // unreachable;
 }
 $45 = HEAP32[$2>>2]|0;
 $46 = $$lcssa << 2;
 $47 = $newsize << 2;
 $48 = (_luaM_realloc_($L,$45,$46,$47)|0);
 HEAP32[$2>>2] = $48;
 HEAP32[$3>>2] = $newsize;
 STACKTOP = sp;return;
}
function _luaS_newlstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l>>>0)<(41);
 if ($0) {
  $1 = (_internshrstr($L,$str,$l)|0);
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($l) + 1)|0;
 $3 = ($2>>>0)>(4294967277);
 if ($3) {
  _luaM_toobig($L);
  // unreachable;
 }
 $4 = (($L) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 56|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_createstrobj($L,$str,$l,20,$7,0)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _internshrstr($L,$str,$l) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $o$0 = 0, $o$02 = 0, $o$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 56|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaS_hash($str,$l,$3)|0);
 $5 = (($1) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + -1)|0;
 $8 = $7 & $4;
 $9 = (($1) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + ($8<<2)|0);
 $o$02 = HEAP32[$11>>2]|0;
 $12 = ($o$02|0)==(0|0);
 L1: do {
  if (!($12)) {
   $o$03 = $o$02;
   while(1) {
    $13 = (($o$03) + 8|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($4|0)==($14|0);
    if ($15) {
     $16 = (($o$03) + 12|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ($17|0)==($l|0);
     if ($18) {
      $19 = (($o$03) + 16|0);
      $20 = (_memcmp($str,$19,$l)|0);
      $21 = ($20|0)==(0);
      if ($21) {
       break;
      }
     }
    }
    $o$0 = HEAP32[$o$03>>2]|0;
    $34 = ($o$0|0)==(0|0);
    if ($34) {
     break L1;
    } else {
     $o$03 = $o$0;
    }
   }
   $22 = (($o$03) + 5|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23&255;
   $25 = $24 ^ 3;
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 60|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = $29 ^ 3;
   $31 = $30 & $25;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $$0 = $o$03;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = $25&255;
   HEAP8[$22>>0] = $33;
   $$0 = $o$03;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $35 = (_newshrstr($L,$str,$l,$4)|0);
 $$0 = $35;
 STACKTOP = sp;return ($$0|0);
}
function _createstrobj($L,$str,$l,$tag,$h,$list) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 $tag = $tag|0;
 $h = $h|0;
 $list = $list|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $h$c = 0, $l$c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 17)|0;
 $1 = (_luaC_newobj($L,$tag,$0,$list,0)|0);
 $2 = (($1) + 12|0);
 $l$c = $l;
 HEAP32[$2>>2] = $l$c;
 $3 = (($1) + 8|0);
 $h$c = $h;
 HEAP32[$3>>2] = $h$c;
 $4 = (($1) + 6|0);
 HEAP8[$4>>0] = 0;
 $5 = (($1) + 16|0);
 _memcpy(($5|0),($str|0),($l|0))|0;
 $6 = (($5) + ($l)|0);
 HEAP8[$6>>0] = 0;
 STACKTOP = sp;return ($1|0);
}
function _luaS_new($L,$str) {
 $L = $L|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($str|0))|0);
 $1 = (_luaS_newlstr($L,$str,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function _luaS_newudata($L,$s,$e) {
 $L = $L|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s>>>0)>(4294967269);
 if ($0) {
  _luaM_toobig($L);
  // unreachable;
 } else {
  $1 = (($s) + 24)|0;
  $2 = (_luaC_newobj($L,7,$1,0,0)|0);
  $3 = (($2) + 16|0);
  HEAP32[$3>>2] = $s;
  $4 = (($2) + 8|0);
  HEAP32[$4>>2] = 0;
  $5 = (($2) + 12|0);
  HEAP32[$5>>2] = $e;
  STACKTOP = sp;return ($2|0);
 }
 return 0|0;
}
function _newshrstr($L,$str,$l,$h) {
 $L = $L|0;
 $str = $str|0;
 $l = $l|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 32|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)>=($5>>>0);
 $7 = ($5|0)<(1073741823);
 $or$cond = $6 & $7;
 if ($or$cond) {
  $8 = $5 << 1;
  _luaS_resize($L,$8);
 }
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = $10 & $h;
 $12 = (($1) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($11<<2)|0);
 $15 = (_createstrobj($L,$str,$l,4,$h,$14)|0);
 $16 = HEAP32[$2>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$2>>2] = $17;
 STACKTOP = sp;return ($15|0);
}
function _luaopen_string($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,14);
 _luaL_setfuncs($L,8872,0);
 _createmetatable($L);
 STACKTOP = sp;return 1;
}
function _createmetatable($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,1);
 (_lua_pushlstring($L,8992,0)|0);
 _lua_pushvalue($L,-2);
 (_lua_setmetatable($L,-2)|0);
 _lua_settop($L,-2);
 _lua_pushvalue($L,-2);
 _lua_setfield($L,-2,9000);
 _lua_settop($L,-2);
 STACKTOP = sp;return;
}
function _str_byte($L) {
 $L = $L|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $l = 0, $pose$0 = 0, $umax = 0, $umax2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_optinteger($L,2,1)|0);
 $2 = HEAP32[$l>>2]|0;
 $3 = (_posrelat($1,$2)|0);
 $4 = (_luaL_optinteger($L,3,$3)|0);
 $5 = HEAP32[$l>>2]|0;
 $6 = (_posrelat($4,$5)|0);
 $7 = ($3|0)==(0);
 $$ = $7 ? 1 : $3;
 $8 = ($6>>>0)>($5>>>0);
 $pose$0 = $8 ? $5 : $6;
 $9 = ($$>>>0)>($pose$0>>>0);
 if ($9) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($pose$0) - ($$))|0;
 $11 = (($10) + 1)|0;
 $12 = ($pose$0|0)==(-1);
 if ($12) {
  $13 = (_luaL_error($L,9904,$vararg_buffer)|0);
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 _luaL_checkstack($L,$11,9904);
 $14 = ($11|0)>(0);
 if (!($14)) {
  $$0 = $11;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($$) + -1)|0;
 $16 = $6 ^ -1;
 $17 = $5 ^ -1;
 $18 = ($16>>>0)>($17>>>0);
 $umax = $18 ? $16 : $17;
 $19 = (0 - ($umax))|0;
 $20 = ($3>>>0)>(1);
 $umax2 = $20 ? $3 : 1;
 $21 = (($19) - ($umax2))|0;
 $i$01 = 0;
 while(1) {
  $22 = (($15) + ($i$01))|0;
  $23 = (($0) + ($22)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  _lua_pushinteger($L,$25);
  $26 = (($i$01) + 1)|0;
  $exitcond = ($26|0)==($21|0);
  if ($exitcond) {
   $$0 = $11;
   break;
  } else {
   $i$01 = $26;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _str_char($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0;
 $b = sp;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_buffinitsize($L,$b,$0)|0);
 $2 = ($0|0)<(1);
 if ($2) {
  _luaL_pushresultsize($b,$0);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 1;
 }
 while(1) {
  $3 = (_luaL_checkinteger($L,$i$01)|0);
  $4 = $3&255;
  $5 = $3 & 255;
  $6 = ($5|0)==($3|0);
  if (!($6)) {
   (_luaL_argerror($L,$i$01,9880)|0);
  }
  $7 = (($i$01) + -1)|0;
  $8 = (($1) + ($7)|0);
  HEAP8[$8>>0] = $4;
  $9 = (($i$01) + 1)|0;
  $exitcond = ($i$01|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $9;
  }
 }
 _luaL_pushresultsize($b,$0);
 STACKTOP = sp;return 1;
}
function _str_dump($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $b = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $vararg_buffer = sp;
 $b = sp + 8|0;
 _luaL_checktype($L,1,6);
 _lua_settop($L,1);
 _luaL_buffinit($L,$b);
 $0 = (_lua_dump($L,19,$b)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _luaL_pushresult($b);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $2 = (_luaL_error($L,9848,$vararg_buffer)|0);
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _str_find($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,1)|0);
 STACKTOP = sp;return ($0|0);
}
function _str_format($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $arg$0$ph7 = 0, $b = 0, $form = 0, $l = 0, $nb$0 = 0, $or$cond = 0, $or$cond3 = 0, $sfl = 0, $strfrmt$0$be = 0, $strfrmt$0$ph6 = 0;
 var $strfrmt$04 = 0, $vararg_buffer13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $vararg_buffer13 = sp;
 $sfl = sp + 1056|0;
 $b = sp + 16|0;
 $form = sp + 1060|0;
 $l = sp + 8|0;
 $0 = (_lua_gettop($L)|0);
 $1 = (_luaL_checklstring($L,1,$sfl)|0);
 $2 = HEAP32[$sfl>>2]|0;
 $3 = (($1) + ($2)|0);
 _luaL_buffinit($L,$b);
 $4 = ($2|0)>(0);
 L1: do {
  if ($4) {
   $5 = (($b) + 8|0);
   $6 = (($b) + 4|0);
   $7 = (($b) + 8|0);
   $8 = (($b) + 4|0);
   $9 = (($b) + 8|0);
   $arg$0$ph7 = 1;$strfrmt$0$ph6 = $1;
   L3: while(1) {
    $strfrmt$04 = $strfrmt$0$ph6;
    while(1) {
     $10 = HEAP8[$strfrmt$04>>0]|0;
     $11 = ($10<<24>>24)==(37);
     if ($11) {
      $21 = (($strfrmt$04) + 1|0);
      $22 = HEAP8[$21>>0]|0;
      $23 = ($22<<24>>24)==(37);
      if (!($23)) {
       break;
      }
      $24 = HEAP32[$5>>2]|0;
      $25 = HEAP32[$6>>2]|0;
      $26 = ($24>>>0)<($25>>>0);
      if (!($26)) {
       (_luaL_prepbuffsize($b,1)|0);
      }
      $27 = (($strfrmt$04) + 2|0);
      $28 = HEAP8[$21>>0]|0;
      $29 = HEAP32[$5>>2]|0;
      $30 = (($29) + 1)|0;
      HEAP32[$5>>2] = $30;
      $31 = HEAP32[$b>>2]|0;
      $32 = (($31) + ($29)|0);
      HEAP8[$32>>0] = $28;
      $strfrmt$0$be = $27;
     } else {
      $12 = HEAP32[$7>>2]|0;
      $13 = HEAP32[$8>>2]|0;
      $14 = ($12>>>0)<($13>>>0);
      if (!($14)) {
       (_luaL_prepbuffsize($b,1)|0);
      }
      $15 = (($strfrmt$04) + 1|0);
      $16 = HEAP8[$strfrmt$04>>0]|0;
      $17 = HEAP32[$7>>2]|0;
      $18 = (($17) + 1)|0;
      HEAP32[$7>>2] = $18;
      $19 = HEAP32[$b>>2]|0;
      $20 = (($19) + ($17)|0);
      HEAP8[$20>>0] = $16;
      $strfrmt$0$be = $15;
     }
     $33 = ($strfrmt$0$be>>>0)<($3>>>0);
     if ($33) {
      $strfrmt$04 = $strfrmt$0$be;
     } else {
      break L1;
     }
    }
    $34 = (_luaL_prepbuffsize($b,512)|0);
    $35 = (($arg$0$ph7) + 1)|0;
    $36 = ($arg$0$ph7|0)<($0|0);
    if (!($36)) {
     (_luaL_argerror($L,$35,9600)|0);
    }
    $37 = (_scanformat($L,$21,$form)|0);
    $38 = (($37) + 1|0);
    $39 = HEAP8[$37>>0]|0;
    $40 = $39 << 24 >> 24;
    L22: do {
     switch ($40|0) {
     case 105: case 100:  {
      $43 = (+_luaL_checknumber($L,$35));
      $44 = (~~(($43)));
      $45 = (+($44|0));
      $46 = $43 - $45;
      $47 = $46 > -1.0;
      $48 = $46 < 1.0;
      $or$cond = $47 & $48;
      if (!($or$cond)) {
       (_luaL_argerror($L,$35,9616)|0);
      }
      _addlenmod($form,9648);
      HEAP32[$vararg_buffer13>>2] = $44;
      $49 = (_sprintf($34,$form,$vararg_buffer13)|0);
      $nb$0 = $49;
      break;
     }
     case 113:  {
      _addquoted($L,$b,$35);
      $nb$0 = 0;
      break;
     }
     case 71: case 103: case 102: case 69: case 101:  {
      _addlenmod($form,8992);
      $57 = (+_luaL_checknumber($L,$35));
      HEAPF64[tempDoublePtr>>3]=$57;HEAP32[$vararg_buffer13>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer13+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $58 = (_sprintf($34,$form,$vararg_buffer13)|0);
      $nb$0 = $58;
      break;
     }
     case 99:  {
      $41 = (_luaL_checkinteger($L,$35)|0);
      HEAP32[$vararg_buffer13>>2] = $41;
      $42 = (_sprintf($34,$form,$vararg_buffer13)|0);
      $nb$0 = $42;
      break;
     }
     case 115:  {
      $59 = (_luaL_tolstring($L,$35,$l)|0);
      $60 = (_strchr($form,46)|0);
      $61 = ($60|0)==(0|0);
      if ($61) {
       $62 = HEAP32[$l>>2]|0;
       $63 = ($62>>>0)>(99);
       if ($63) {
        _luaL_addvalue($b);
        $nb$0 = 0;
        break L22;
       }
      }
      HEAP32[$vararg_buffer13>>2] = $59;
      $64 = (_sprintf($34,$form,$vararg_buffer13)|0);
      _lua_settop($L,-2);
      $nb$0 = $64;
      break;
     }
     case 88: case 120: case 117: case 111:  {
      $50 = (+_luaL_checknumber($L,$35));
      $51 = (~~(($50))>>>0);
      $52 = (+($51>>>0));
      $53 = $50 - $52;
      $54 = $53 > -1.0;
      $55 = $53 < 1.0;
      $or$cond3 = $54 & $55;
      if (!($or$cond3)) {
       (_luaL_argerror($L,$35,9656)|0);
      }
      _addlenmod($form,9648);
      HEAP32[$vararg_buffer13>>2] = $51;
      $56 = (_sprintf($34,$form,$vararg_buffer13)|0);
      $nb$0 = $56;
      break;
     }
     default: {
      break L3;
     }
     }
    } while(0);
    $66 = HEAP32[$9>>2]|0;
    $67 = (($66) + ($nb$0))|0;
    HEAP32[$9>>2] = $67;
    $68 = ($38>>>0)<($3>>>0);
    if ($68) {
     $arg$0$ph7 = $35;$strfrmt$0$ph6 = $38;
    } else {
     break L1;
    }
   }
   HEAP32[$vararg_buffer13>>2] = $40;
   $65 = (_luaL_error($L,9704,$vararg_buffer13)|0);
   $$0 = $65;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 _luaL_pushresult($b);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _gmatch($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_luaL_checklstring($L,1,0)|0);
 (_luaL_checklstring($L,2,0)|0);
 _lua_settop($L,2);
 _lua_pushinteger($L,0);
 _lua_pushcclosure($L,158,3);
 STACKTOP = sp;return 1;
}
function _str_gsub($L) {
 $L = $L|0;
 var $$off = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $lp = 0, $ms = 0, $n$0 = 0, $n$17 = 0, $n$18 = 0, $n$2 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p$0 = 0, $src$0 = 0, $src$1 = 0, $src$2 = 0;
 var $srcl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1328|0;
 $srcl = sp + 1324|0;
 $lp = sp + 1320|0;
 $ms = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$srcl)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_lua_type($L,3)|0);
 $3 = HEAP32[$srcl>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (_luaL_optinteger($L,4,$4)|0);
 $6 = HEAP8[$1>>0]|0;
 $7 = ($6<<24>>24)==(94);
 $$off = (($2) + -3)|0;
 $8 = ($$off>>>0)<(2);
 $9 = ($2|0)==(6);
 $or$cond3 = $8 | $9;
 $10 = ($2|0)==(5);
 $or$cond5 = $or$cond3 | $10;
 if (!($or$cond5)) {
  (_luaL_argerror($L,3,9480)|0);
 }
 _luaL_buffinit($L,$b);
 if ($7) {
  $11 = (($1) + 1|0);
  $12 = HEAP32[$lp>>2]|0;
  $13 = (($12) + -1)|0;
  HEAP32[$lp>>2] = $13;
  $p$0 = $11;
 } else {
  $p$0 = $1;
 }
 $14 = (($ms) + 16|0);
 HEAP32[$14>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $15 = (($ms) + 4|0);
 HEAP32[$15>>2] = $0;
 $16 = HEAP32[$srcl>>2]|0;
 $17 = (($0) + ($16)|0);
 $18 = (($ms) + 8|0);
 HEAP32[$18>>2] = $17;
 $19 = HEAP32[$lp>>2]|0;
 $20 = (($p$0) + ($19)|0);
 $21 = (($ms) + 12|0);
 HEAP32[$21>>2] = $20;
 $22 = (($ms) + 20|0);
 $23 = (($b) + 8|0);
 $24 = (($b) + 4|0);
 $n$0 = 0;$src$0 = $0;
 while(1) {
  $25 = ($n$0>>>0)<($5>>>0);
  if (!($25)) {
   $n$2 = $n$0;$src$2 = $src$0;
   break;
  }
  HEAP32[$22>>2] = 0;
  $26 = (_match($ms,$src$0,$p$0)|0);
  $27 = ($26|0)!=(0|0);
  if ($27) {
   $28 = (($n$0) + 1)|0;
   _add_value($ms,$b,$src$0,$26,$2);
   $29 = ($26>>>0)>($src$0>>>0);
   $or$cond = $27 & $29;
   if ($or$cond) {
    $n$18 = $28;$src$1 = $26;
   } else {
    $n$17 = $28;
    label = 9;
   }
  } else {
   $n$17 = $n$0;
   label = 9;
  }
  if ((label|0) == 9) {
   label = 0;
   $30 = HEAP32[$18>>2]|0;
   $31 = ($src$0>>>0)<($30>>>0);
   if (!($31)) {
    $n$2 = $n$17;$src$2 = $src$0;
    break;
   }
   $32 = HEAP32[$23>>2]|0;
   $33 = HEAP32[$24>>2]|0;
   $34 = ($32>>>0)<($33>>>0);
   if (!($34)) {
    (_luaL_prepbuffsize($b,1)|0);
   }
   $35 = (($src$0) + 1|0);
   $36 = HEAP8[$src$0>>0]|0;
   $37 = HEAP32[$23>>2]|0;
   $38 = (($37) + 1)|0;
   HEAP32[$23>>2] = $38;
   $39 = HEAP32[$b>>2]|0;
   $40 = (($39) + ($37)|0);
   HEAP8[$40>>0] = $36;
   $n$18 = $n$17;$src$1 = $35;
  }
  if ($7) {
   $n$2 = $n$18;$src$2 = $src$1;
   break;
  } else {
   $n$0 = $n$18;$src$0 = $src$1;
  }
 }
 $41 = HEAP32[$18>>2]|0;
 $42 = $41;
 $43 = $src$2;
 $44 = (($42) - ($43))|0;
 _luaL_addlstring($b,$src$2,$44);
 _luaL_pushresult($b);
 _lua_pushinteger($L,$n$2);
 STACKTOP = sp;return 2;
}
function _str_len($L) {
 $L = $L|0;
 var $0 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $l = sp;
 (_luaL_checklstring($L,1,$l)|0);
 $0 = HEAP32[$l>>2]|0;
 _lua_pushinteger($L,$0);
 STACKTOP = sp;return 1;
}
function _str_lower($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_tolower($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_match($L) {
 $L = $L|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_str_find_aux($L,0)|0);
 STACKTOP = sp;return ($0|0);
}
function _str_rep($L) {
 $L = $L|0;
 var $$0 = 0, $$in = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l = 0, $lsep = 0, $p$0$be = 0, $p$01 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $vararg_buffer = sp;
 $l = sp + 1044|0;
 $lsep = sp + 1040|0;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = (_luaL_optlstring($L,3,8992,$lsep)|0);
 $3 = ($1|0)<(1);
 if ($3) {
  (_lua_pushlstring($L,8992,0)|0);
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$l>>2]|0;
 $5 = HEAP32[$lsep>>2]|0;
 $6 = (($5) + ($4))|0;
 $7 = ($6>>>0)<($4>>>0);
 if (!($7)) {
  $8 = (2147483647 / ($1>>>0))&-1;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   $11 = Math_imul($4, $1)|0;
   $12 = (($1) + -1)|0;
   $13 = Math_imul($5, $12)|0;
   $14 = (($13) + ($11))|0;
   $15 = (_luaL_buffinitsize($L,$vararg_buffer,$14)|0);
   $16 = ($1|0)>(1);
   $17 = HEAP32[$l>>2]|0;
   _memcpy(($15|0),($0|0),($17|0))|0;
   if ($16) {
    $$in = $1;$p$01 = $15;
    while(1) {
     $18 = (($$in) + -1)|0;
     $19 = HEAP32[$l>>2]|0;
     $20 = (($p$01) + ($19)|0);
     $21 = HEAP32[$lsep>>2]|0;
     $22 = ($21|0)==(0);
     if ($22) {
      $p$0$be = $20;
     } else {
      _memcpy(($20|0),($2|0),($21|0))|0;
      $23 = HEAP32[$lsep>>2]|0;
      $$sum = (($23) + ($19))|0;
      $24 = (($p$01) + ($$sum)|0);
      $p$0$be = $24;
     }
     $25 = ($18|0)>(1);
     $26 = HEAP32[$l>>2]|0;
     _memcpy(($p$0$be|0),($0|0),($26|0))|0;
     if ($25) {
      $$in = $18;$p$01 = $p$0$be;
     } else {
      break;
     }
    }
   }
   _luaL_pushresultsize($vararg_buffer,$14);
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = (_luaL_error($L,9120,$vararg_buffer)|0);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _str_reverse($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $7 = $3;$i$01 = 0;
 }
 while(1) {
  $5 = $i$01 ^ -1;
  $6 = (($7) + ($5))|0;
  $8 = (($0) + ($6)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $7 = $12;$i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _str_sub($L) {
 $L = $L|0;
 var $$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end$0 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $l = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = (_luaL_checkinteger($L,2)|0);
 $2 = HEAP32[$l>>2]|0;
 $3 = (_posrelat($1,$2)|0);
 $4 = (_luaL_optinteger($L,3,-1)|0);
 $5 = HEAP32[$l>>2]|0;
 $6 = (_posrelat($4,$5)|0);
 $7 = ($3|0)==(0);
 $$ = $7 ? 1 : $3;
 $8 = ($6>>>0)>($5>>>0);
 $end$0 = $8 ? $5 : $6;
 $9 = ($$>>>0)>($end$0>>>0);
 if ($9) {
  (_lua_pushlstring($L,8992,0)|0);
  STACKTOP = sp;return 1;
 } else {
  $$sum = (($$) + -1)|0;
  $10 = (($0) + ($$sum)|0);
  $11 = (1 - ($$))|0;
  $12 = (($11) + ($end$0))|0;
  (_lua_pushlstring($L,$10,$12)|0);
  STACKTOP = sp;return 1;
 }
 return 0|0;
}
function _str_upper($L) {
 $L = $L|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $i$01 = 0, $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $l = sp + 1040|0;
 $b = sp;
 $0 = (_luaL_checklstring($L,1,$l)|0);
 $1 = HEAP32[$l>>2]|0;
 $2 = (_luaL_buffinitsize($L,$b,$1)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $$lcssa = 0;
  _luaL_pushresultsize($b,$$lcssa);
  STACKTOP = sp;return 1;
 } else {
  $i$01 = 0;
 }
 while(1) {
  $5 = (($0) + ($i$01)|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = $6&255;
  $8 = (_toupper($7)|0);
  $9 = $8&255;
  $10 = (($2) + ($i$01)|0);
  HEAP8[$10>>0] = $9;
  $11 = (($i$01) + 1)|0;
  $12 = HEAP32[$l>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $i$01 = $11;
  } else {
   $$lcssa = $12;
   break;
  }
 }
 _luaL_pushresultsize($b,$$lcssa);
 STACKTOP = sp;return 1;
}
function _posrelat($pos,$len) {
 $pos = $pos|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($pos|0)>(-1);
 if ($0) {
  $$0 = $pos;
 } else {
  $1 = (0 - ($pos))|0;
  $2 = ($1>>>0)>($len>>>0);
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (($pos) + 1)|0;
   $4 = (($3) + ($len))|0;
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _str_find_aux($L,$find) {
 $L = $L|0;
 $find = $find|0;
 var $$1 = 0, $$sum = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $init$0 = 0;
 var $lp = 0, $ls = 0, $ms = 0, $p$0 = 0, $s1$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $ls = sp + 284|0;
 $lp = sp + 280|0;
 $ms = sp;
 $0 = (_luaL_checklstring($L,1,$ls)|0);
 $1 = (_luaL_checklstring($L,2,$lp)|0);
 $2 = (_luaL_optinteger($L,3,1)|0);
 $3 = HEAP32[$ls>>2]|0;
 $4 = (_posrelat($2,$3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $init$0 = 1;
 } else {
  $6 = (($3) + 1)|0;
  $7 = ($4>>>0)>($6>>>0);
  if ($7) {
   _lua_pushnil($L);
   $$1 = 1;
   STACKTOP = sp;return ($$1|0);
  } else {
   $init$0 = $4;
  }
 }
 $8 = ($find|0)!=(0);
 do {
  if ($8) {
   $9 = (_lua_toboolean($L,4)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = HEAP32[$lp>>2]|0;
    $12 = (_nospecials($1,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     label = 9;
     break;
    }
   }
   $$sum2 = (($init$0) + -1)|0;
   $14 = (($0) + ($$sum2)|0);
   $15 = HEAP32[$ls>>2]|0;
   $16 = (1 - ($init$0))|0;
   $17 = (($16) + ($15))|0;
   $18 = HEAP32[$lp>>2]|0;
   $19 = (_lmemfind($14,$17,$1,$18)|0);
   $20 = ($19|0)==(0|0);
   if (!($20)) {
    $21 = $19;
    $22 = $0;
    $23 = (($21) - ($22))|0;
    $24 = (($23) + 1)|0;
    _lua_pushinteger($L,$24);
    $25 = HEAP32[$lp>>2]|0;
    $26 = (($25) + ($23))|0;
    _lua_pushinteger($L,$26);
    $$1 = 2;
    STACKTOP = sp;return ($$1|0);
   }
  } else {
   label = 9;
  }
 } while(0);
 L13: do {
  if ((label|0) == 9) {
   $$sum = (($init$0) + -1)|0;
   $27 = (($0) + ($$sum)|0);
   $28 = HEAP8[$1>>0]|0;
   $29 = ($28<<24>>24)==(94);
   if ($29) {
    $30 = (($1) + 1|0);
    $31 = HEAP32[$lp>>2]|0;
    $32 = (($31) + -1)|0;
    HEAP32[$lp>>2] = $32;
    $p$0 = $30;
   } else {
    $p$0 = $1;
   }
   $33 = (($ms) + 16|0);
   HEAP32[$33>>2] = $L;
   HEAP32[$ms>>2] = 200;
   $34 = (($ms) + 4|0);
   HEAP32[$34>>2] = $0;
   $35 = HEAP32[$ls>>2]|0;
   $36 = (($0) + ($35)|0);
   $37 = (($ms) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$lp>>2]|0;
   $39 = (($p$0) + ($38)|0);
   $40 = (($ms) + 12|0);
   HEAP32[$40>>2] = $39;
   $41 = (($ms) + 20|0);
   $s1$0 = $27;
   while(1) {
    HEAP32[$41>>2] = 0;
    $42 = (_match($ms,$s1$0,$p$0)|0);
    $43 = ($42|0)==(0|0);
    if (!($43)) {
     break;
    }
    $53 = HEAP32[$37>>2]|0;
    $54 = ($s1$0>>>0)<($53>>>0);
    if (!($54)) {
     break L13;
    }
    $55 = (($s1$0) + 1|0);
    if ($29) {
     break L13;
    } else {
     $s1$0 = $55;
    }
   }
   if ($8) {
    $44 = $s1$0;
    $45 = $0;
    $46 = (1 - ($45))|0;
    $47 = (($46) + ($44))|0;
    _lua_pushinteger($L,$47);
    $48 = $42;
    $49 = (($48) - ($45))|0;
    _lua_pushinteger($L,$49);
    $50 = (_push_captures($ms,0,0)|0);
    $51 = (($50) + 2)|0;
    $$1 = $51;
    STACKTOP = sp;return ($$1|0);
   } else {
    $52 = (_push_captures($ms,$s1$0,$42)|0);
    $$1 = $52;
    STACKTOP = sp;return ($$1|0);
   }
  }
 } while(0);
 _lua_pushnil($L);
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function _nospecials($p,$l) {
 $p = $p|0;
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $upto$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $upto$0 = 0;
 while(1) {
  $0 = (($p) + ($upto$0)|0);
  $1 = (_strpbrk($0,9464)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (_strlen(($0|0))|0);
  $4 = (($upto$0) + 1)|0;
  $5 = (($4) + ($3))|0;
  $6 = ($5>>>0)>($l>>>0);
  if ($6) {
   $$0 = 1;
   label = 4;
   break;
  } else {
   $upto$0 = $5;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _lmemfind($s1,$l1,$s2,$l2) {
 $s1 = $s1|0;
 $l1 = $l1|0;
 $s2 = $s2|0;
 $l2 = $l2|0;
 var $$0 = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($l2|0)==(0);
 L1: do {
  if ($0) {
   $$0 = $s1;
  } else {
   $1 = ($l2>>>0)>($l1>>>0);
   if ($1) {
    $$0 = 0;
   } else {
    $2 = (($l2) + -1)|0;
    $3 = ($2|0)==($l1|0);
    if ($3) {
     $$0 = 0;
    } else {
     $4 = (($l1) - ($2))|0;
     $5 = HEAP8[$s2>>0]|0;
     $6 = $5 << 24 >> 24;
     $7 = (($s2) + 1|0);
     $$014 = $4;$$023 = $s1;
     while(1) {
      $8 = (_memchr($$023,$6,$$014)|0);
      $9 = ($8|0)==(0|0);
      if ($9) {
       $$0 = 0;
       break L1;
      }
      $10 = (($8) + 1|0);
      $11 = (_memcmp($10,$7,$2)|0);
      $12 = ($11|0)==(0);
      if ($12) {
       $$0 = $8;
       break L1;
      }
      $13 = $10;
      $14 = $$023;
      $15 = (($$014) + ($14))|0;
      $16 = (($15) - ($13))|0;
      $17 = ($15|0)==($13|0);
      if ($17) {
       $$0 = 0;
       break;
      } else {
       $$014 = $16;$$023 = $10;
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _match($ms,$s,$p) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 var $$0$ph$be = 0, $$0$ph29 = 0, $$01$be = 0, $$01$ph$be = 0, $$01$ph28 = 0, $$0117 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = HEAP32[$ms>>2]|0;
 $1 = (($0) + -1)|0;
 HEAP32[$ms>>2] = $1;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (($ms) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  (_luaL_error($4,9224,$vararg_buffer1)|0);
 }
 $5 = (($ms) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($p|0);
 L4: do {
  if ($7) {
   $$2 = $s;
  } else {
   $8 = (($ms) + 4|0);
   $9 = (($ms) + 16|0);
   $$0$ph29 = $s;$$01$ph28 = $p;$77 = $6;
   L6: while(1) {
    $10 = (($$0$ph29) + 1|0);
    $11 = (($$0$ph29) + -1|0);
    $$0117 = $$01$ph28;$24 = $77;
    L8: while(1) {
     $12 = HEAP8[$$0117>>0]|0;
     $13 = $12 << 24 >> 24;
     L10: do {
      if ((($13|0) == 37)) {
       $29 = (($$0117) + 1|0);
       $30 = HEAP8[$29>>0]|0;
       $31 = $30 << 24 >> 24;
       switch ($31|0) {
       case 98:  {
        label = 14;
        break L8;
        break;
       }
       case 102:  {
        break;
       }
       case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49: case 48:  {
        label = 22;
        break L8;
        break;
       }
       default: {
        label = 24;
        break L10;
       }
       }
       $36 = (($$0117) + 2|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = ($37<<24>>24)==(91);
       if (!($38)) {
        $39 = HEAP32[$9>>2]|0;
        (_luaL_error($39,9248,$vararg_buffer1)|0);
       }
       $40 = (_classend($ms,$36)|0);
       $41 = HEAP32[$8>>2]|0;
       $42 = ($$0$ph29|0)==($41|0);
       if ($42) {
        $45 = 0;
       } else {
        $43 = HEAP8[$11>>0]|0;
        $45 = $43;
       }
       $44 = $45&255;
       $46 = (($40) + -1|0);
       $47 = (_matchbracketclass($44,$36,$46)|0);
       $48 = ($47|0)==(0);
       if (!($48)) {
        $$2 = 0;
        break L4;
       }
       $49 = HEAP8[$$0$ph29>>0]|0;
       $50 = $49&255;
       $51 = (_matchbracketclass($50,$36,$46)|0);
       $52 = ($51|0)==(0);
       if ($52) {
        $$2 = 0;
        break L4;
       } else {
        $$01$be = $40;
       }
      } else if ((($13|0) == 40)) {
       label = 7;
       break L6;
      } else if ((($13|0) == 36)) {
       $22 = (($$0117) + 1|0);
       $23 = ($22|0)==($24|0);
       if ($23) {
        label = 12;
        break L6;
       } else {
        label = 24;
       }
      } else if ((($13|0) == 41)) {
       label = 10;
       break L6;
      } else {
       label = 24;
      }
     } while(0);
     do {
      if ((label|0) == 24) {
       label = 0;
       $58 = (_classend($ms,$$0117)|0);
       $59 = (_singlematch($ms,$$0$ph29,$$0117,$58)|0);
       $60 = ($59|0)==(0);
       $61 = HEAP8[$58>>0]|0;
       if ($60) {
        if (!((($61<<24>>24) == 45) | (($61<<24>>24) == 63) | (($61<<24>>24) == 42))) {
         $$2 = 0;
         break L4;
        }
        $62 = (($58) + 1|0);
        $$01$be = $62;
        break;
       } else {
        $65 = $61 << 24 >> 24;
        if ((($65|0) == 43)) {
         label = 30;
         break L6;
        } else if ((($65|0) == 42)) {
         $$1 = $$0$ph29;
         break L6;
        } else if ((($65|0) == 45)) {
         label = 32;
         break L6;
        } else if (!((($65|0) == 63))) {
         label = 33;
         break L8;
        }
        $66 = (($58) + 1|0);
        $67 = (_match($ms,$10,$66)|0);
        $68 = ($67|0)==(0|0);
        if ($68) {
         $$01$be = $66;
         break;
        } else {
         $$2 = $67;
         break L4;
        }
       }
      }
     } while(0);
     $63 = HEAP32[$5>>2]|0;
     $64 = ($$01$be|0)==($63|0);
     if ($64) {
      $$2 = $$0$ph29;
      break L4;
     } else {
      $$0117 = $$01$be;$24 = $63;
     }
    }
    if ((label|0) == 14) {
     label = 0;
     $32 = (($$0117) + 2|0);
     $33 = (_matchbalance($ms,$$0$ph29,$32)|0);
     $34 = ($33|0)==(0|0);
     if ($34) {
      $$2 = 0;
      break L4;
     }
     $35 = (($$0117) + 4|0);
     $$0$ph$be = $33;$$01$ph$be = $35;
    }
    else if ((label|0) == 22) {
     label = 0;
     $53 = HEAP8[$29>>0]|0;
     $54 = $53&255;
     $55 = (_match_capture($ms,$$0$ph29,$54)|0);
     $56 = ($55|0)==(0|0);
     if ($56) {
      $$2 = 0;
      break L4;
     }
     $57 = (($$0117) + 2|0);
     $$0$ph$be = $55;$$01$ph$be = $57;
    }
    else if ((label|0) == 33) {
     label = 0;
     $72 = (($$0$ph29) + 1|0);
     $$0$ph$be = $72;$$01$ph$be = $58;
    }
    $73 = HEAP32[$5>>2]|0;
    $74 = ($$01$ph$be|0)==($73|0);
    if ($74) {
     $$2 = $$0$ph$be;
     break L4;
    } else {
     $$0$ph29 = $$0$ph$be;$$01$ph28 = $$01$ph$be;$77 = $73;
    }
   }
   if ((label|0) == 7) {
    $14 = (($$0117) + 1|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = ($15<<24>>24)==(41);
    if ($16) {
     $17 = (($$0117) + 2|0);
     $18 = (_start_capture($ms,$$0$ph29,$17,-2)|0);
     $$2 = $18;
     break;
    } else {
     $19 = (_start_capture($ms,$$0$ph29,$14,-1)|0);
     $$2 = $19;
     break;
    }
   }
   else if ((label|0) == 10) {
    $20 = (($$0117) + 1|0);
    $21 = (_end_capture($ms,$$0$ph29,$20)|0);
    $$2 = $21;
    break;
   }
   else if ((label|0) == 12) {
    $25 = (($ms) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($$0$ph29|0)==($26|0);
    $28 = $27 ? $$0$ph29 : 0;
    $$2 = $28;
    break;
   }
   else if ((label|0) == 30) {
    $69 = (($$0$ph29) + 1|0);
    $$1 = $69;
   }
   else if ((label|0) == 32) {
    $71 = (_min_expand($ms,$$0$ph29,$$0117,$58)|0);
    $$2 = $71;
    break;
   }
   $70 = (_max_expand($ms,$$1,$$0117,$58)|0);
   $$2 = $70;
  }
 } while(0);
 $75 = HEAP32[$ms>>2]|0;
 $76 = (($75) + 1)|0;
 HEAP32[$ms>>2] = $76;
 STACKTOP = sp;return ($$2|0);
}
function _push_captures($ms,$s,$e) {
 $ms = $ms|0;
 $s = $s|0;
 $e = $e|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $i$01 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ms) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0);
 $3 = ($s|0)==(0|0);
 $or$cond = $2 | $3;
 $$ = $or$cond ? $1 : 1;
 $4 = (($ms) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 _luaL_checkstack($5,$$,9152);
 $6 = ($$|0)>(0);
 if ($6) {
  $i$01 = 0;
 } else {
  STACKTOP = sp;return ($$|0);
 }
 while(1) {
  _push_onecapture($ms,$i$01,$s,$e);
  $7 = (($i$01) + 1)|0;
  $exitcond = ($7|0)==($$|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $7;
  }
 }
 STACKTOP = sp;return ($$|0);
}
function _push_onecapture($ms,$i,$s,$e) {
 $ms = $ms|0;
 $i = $i|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($ms) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>($i|0);
 if (!($2)) {
  $3 = ($i|0)==(0);
  $4 = (($ms) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  if ($3) {
   $6 = $e;
   $7 = $s;
   $8 = (($6) - ($7))|0;
   (_lua_pushlstring($5,$s,$8)|0);
   STACKTOP = sp;return;
  } else {
   (_luaL_error($5,9176,$vararg_buffer1)|0);
   STACKTOP = sp;return;
  }
 }
 $9 = ((($ms) + ($i<<3)|0) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(-1);
 if ($11) {
  $12 = (($ms) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  (_luaL_error($13,9200,$vararg_buffer1)|0);
  $14 = (($ms) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ((($ms) + ($i<<3)|0) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  $29 = $15;$30 = $17;
 } else {
  $18 = ($10|0)==(-2);
  $19 = (($ms) + 16|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($ms) + ($i<<3)|0) + 24|0);
  $22 = HEAP32[$21>>2]|0;
  if ($18) {
   $23 = (($ms) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $22;
   $26 = $24;
   $27 = (($25) + 1)|0;
   $28 = (($27) - ($26))|0;
   _lua_pushinteger($20,$28);
   STACKTOP = sp;return;
  } else {
   $29 = $20;$30 = $22;
  }
 }
 (_lua_pushlstring($29,$30,$10)|0);
 STACKTOP = sp;return;
}
function _start_capture($ms,$s,$p,$what) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 $what = $what|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ms) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(31);
 if ($2) {
  $3 = (($ms) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  (_luaL_error($4,9152,$vararg_buffer)|0);
 }
 $5 = ((($ms) + ($1<<3)|0) + 24|0);
 HEAP32[$5>>2] = $s;
 $6 = ((($ms) + ($1<<3)|0) + 28|0);
 HEAP32[$6>>2] = $what;
 $7 = (($1) + 1)|0;
 HEAP32[$0>>2] = $7;
 $8 = (_match($ms,$s,$p)|0);
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  STACKTOP = sp;return ($8|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = (($10) + -1)|0;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($8|0);
}
function _end_capture($ms,$s,$p) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_capture_to_close($ms)|0);
 $1 = ((($ms) + ($0<<3)|0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $s;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = ((($ms) + ($0<<3)|0) + 28|0);
 HEAP32[$6>>2] = $5;
 $7 = (_match($ms,$s,$p)|0);
 $8 = ($7|0)==(0|0);
 if (!($8)) {
  STACKTOP = sp;return ($7|0);
 }
 HEAP32[$6>>2] = -1;
 STACKTOP = sp;return ($7|0);
}
function _matchbalance($ms,$s,$p) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 var $$0 = 0, $$013 = 0, $$013$phi = 0, $$cont$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cont$0$be = 0, $cont$04 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ms) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1|0);
 $3 = ($2>>>0)>($p>>>0);
 if (!($3)) {
  $4 = (($ms) + 16|0);
  $5 = HEAP32[$4>>2]|0;
  (_luaL_error($5,9392,$vararg_buffer)|0);
 }
 $6 = HEAP8[$s>>0]|0;
 $7 = HEAP8[$p>>0]|0;
 $8 = ($6<<24>>24)==($7<<24>>24);
 if (!($8)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = (($p) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = (($s) + 1|0);
 $12 = (($ms) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)<($13>>>0);
 if ($14) {
  $$013 = $s;$16 = $11;$cont$04 = 1;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $15 = HEAP8[$16>>0]|0;
  $17 = ($15<<24>>24)==($10<<24>>24);
  if ($17) {
   $18 = (($cont$04) + -1)|0;
   $19 = ($18|0)==(0);
   if ($19) {
    break;
   } else {
    $cont$0$be = $18;
   }
  } else {
   $24 = ($15<<24>>24)==($7<<24>>24);
   $25 = $24&1;
   $$cont$0 = (($25) + ($cont$04))|0;
   $cont$0$be = $$cont$0;
  }
  $20 = (($16) + 1|0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($20>>>0)<($21>>>0);
  if ($22) {
   $$013$phi = $16;$16 = $20;$cont$04 = $cont$0$be;$$013 = $$013$phi;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (($$013) + 2|0);
 $$0 = $23;
 STACKTOP = sp;return ($$0|0);
}
function _classend($ms,$p) {
 $ms = $ms|0;
 $p = $p|0;
 var $$ = 0, $$0 = 0, $$01 = 0, $$1 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($p) + 1|0);
 $1 = HEAP8[$p>>0]|0;
 $2 = $1 << 24 >> 24;
 if ((($2|0) == 37)) {
  $3 = (($ms) + 12|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($0|0)==($4|0);
  if ($5) {
   $6 = (($ms) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   (_luaL_error($7,9320,$vararg_buffer1)|0);
  }
  $8 = (($p) + 2|0);
  $$01 = $8;
  STACKTOP = sp;return ($$01|0);
 } else if ((($2|0) == 91)) {
  $9 = HEAP8[$0>>0]|0;
  $10 = ($9<<24>>24)==(94);
  $11 = (($p) + 2|0);
  $$ = $10 ? $11 : $0;
  $12 = (($ms) + 12|0);
  $13 = (($ms) + 16|0);
  $$0 = $$;
  while(1) {
   $14 = HEAP32[$12>>2]|0;
   $15 = ($$0|0)==($14|0);
   if ($15) {
    $16 = HEAP32[$13>>2]|0;
    (_luaL_error($16,9360,$vararg_buffer1)|0);
   }
   $17 = (($$0) + 1|0);
   $18 = HEAP8[$$0>>0]|0;
   $19 = ($18<<24>>24)==(37);
   if ($19) {
    $20 = HEAP32[$12>>2]|0;
    $21 = ($17>>>0)<($20>>>0);
    $22 = (($$0) + 2|0);
    $$2 = $21 ? $22 : $17;
    $$1 = $$2;
   } else {
    $$1 = $17;
   }
   $23 = HEAP8[$$1>>0]|0;
   $24 = ($23<<24>>24)==(93);
   if ($24) {
    break;
   } else {
    $$0 = $$1;
   }
  }
  $25 = (($$1) + 1|0);
  $$01 = $25;
  STACKTOP = sp;return ($$01|0);
 } else {
  $$01 = $0;
  STACKTOP = sp;return ($$01|0);
 }
 return 0|0;
}
function _matchbracketclass($c,$p,$ec) {
 $c = $c|0;
 $p = $p|0;
 $ec = $ec|0;
 var $$ = 0, $$0 = 0, $$01$be = 0, $$012 = 0, $$p = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 1|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(94);
 $$p = $2 ? $0 : $p;
 $3 = $2&1;
 $$ = $3 ^ 1;
 $4 = (($$p) + 1|0);
 $5 = ($4>>>0)<($ec>>>0);
 if ($5) {
  $$012 = $$p;$7 = $4;
 } else {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 L3: while(1) {
  $6 = HEAP8[$7>>0]|0;
  $8 = ($6<<24>>24)==(37);
  $9 = (($$012) + 2|0);
  $10 = HEAP8[$9>>0]|0;
  do {
   if ($8) {
    $11 = $10&255;
    $12 = (_match_class($c,$11)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $$01$be = $9;
    } else {
     $$0 = $$;
     label = 10;
     break L3;
    }
   } else {
    $14 = ($10<<24>>24)==(45);
    if ($14) {
     $15 = (($$012) + 3|0);
     $16 = ($15>>>0)<($ec>>>0);
     if ($16) {
      $17 = $6&255;
      $18 = ($17|0)>($c|0);
      if ($18) {
       $$01$be = $15;
       break;
      }
      $19 = HEAP8[$15>>0]|0;
      $20 = $19&255;
      $21 = ($20|0)<($c|0);
      if ($21) {
       $$01$be = $15;
       break;
      } else {
       $$0 = $$;
       label = 10;
       break L3;
      }
     }
    }
    $22 = HEAP8[$7>>0]|0;
    $23 = $22&255;
    $24 = ($23|0)==($c|0);
    if ($24) {
     $$0 = $$;
     label = 10;
     break L3;
    } else {
     $$01$be = $7;
    }
   }
  } while(0);
  $25 = (($$01$be) + 1|0);
  $26 = ($25>>>0)<($ec>>>0);
  if ($26) {
   $$012 = $$01$be;$7 = $25;
  } else {
   $$0 = $3;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _match_capture($ms,$s,$l) {
 $ms = $ms|0;
 $s = $s|0;
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_check_capture($ms,$l)|0);
 $1 = ((($ms) + ($0<<3)|0) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($ms) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = $s;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<($2>>>0);
 if ($8) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($ms) + ($0<<3)|0) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (_memcmp($10,$s,$2)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = (($s) + ($2)|0);
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _singlematch($ms,$s,$p,$ep) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 $ep = $ep|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ms) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)>($s>>>0);
 do {
  if ($2) {
   $3 = HEAP8[$s>>0]|0;
   $4 = $3&255;
   $5 = HEAP8[$p>>0]|0;
   $6 = $5 << 24 >> 24;
   if ((($6|0) == 37)) {
    $7 = (($p) + 1|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8&255;
    $10 = (_match_class($4,$9)|0);
    $$0 = $10;
    break;
   } else if ((($6|0) == 46)) {
    $$0 = 1;
    break;
   } else if ((($6|0) == 91)) {
    $11 = (($ep) + -1|0);
    $12 = (_matchbracketclass($4,$p,$11)|0);
    $$0 = $12;
    break;
   } else {
    $13 = ($5<<24>>24)==($3<<24>>24);
    $14 = $13&1;
    $$0 = $14;
    break;
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _max_expand($ms,$s,$p,$ep) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 $ep = $ep|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $i$0 = 0;
 while(1) {
  $0 = (($s) + ($i$0)|0);
  $1 = (_singlematch($ms,$0,$p,$ep)|0);
  $2 = ($1|0)==(0);
  $3 = (($i$0) + 1)|0;
  if ($2) {
   break;
  } else {
   $i$0 = $3;
  }
 }
 $4 = ($i$0|0)>(-1);
 L4: do {
  if ($4) {
   $5 = (($ep) + 1|0);
   $i$11 = $i$0;
   while(1) {
    $8 = (($s) + ($i$11)|0);
    $9 = (_match($ms,$8,$5)|0);
    $10 = ($9|0)==(0|0);
    if (!($10)) {
     $$0 = $9;
     break L4;
    }
    $6 = (($i$11) + -1)|0;
    $7 = ($i$11|0)>(0);
    if ($7) {
     $i$11 = $6;
    } else {
     $$0 = 0;
     break;
    }
   }
  } else {
   $$0 = 0;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _min_expand($ms,$s,$p,$ep) {
 $ms = $ms|0;
 $s = $s|0;
 $p = $p|0;
 $ep = $ep|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ep) + 1|0);
 $1 = (_match($ms,$s,$0)|0);
 $2 = ($1|0)==(0|0);
 L1: do {
  if ($2) {
   $$012 = $s;
   while(1) {
    $6 = (_singlematch($ms,$$012,$p,$ep)|0);
    $7 = ($6|0)==(0);
    $3 = (($$012) + 1|0);
    if ($7) {
     $$0 = 0;
     break L1;
    }
    $4 = (_match($ms,$3,$0)|0);
    $5 = ($4|0)==(0|0);
    if ($5) {
     $$012 = $3;
    } else {
     $$0 = $4;
     break;
    }
   }
  } else {
   $$0 = $1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _match_class($c,$cl) {
 $c = $c|0;
 $cl = $cl|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $isdigit = 0, $isdigittmp = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_tolower($cl)|0);
 do {
  switch ($0|0) {
  case 122:  {
   $11 = ($c|0)==(0);
   $12 = $11&1;
   $res$0 = $12;
   break;
  }
  case 120:  {
   $10 = (_isxdigit($c)|0);
   $res$0 = $10;
   break;
  }
  case 100:  {
   $isdigittmp = (($c) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   $3 = $isdigit&1;
   $res$0 = $3;
   break;
  }
  case 97:  {
   $1 = (_isalpha($c)|0);
   $res$0 = $1;
   break;
  }
  case 99:  {
   $2 = (_iscntrl($c)|0);
   $res$0 = $2;
   break;
  }
  case 112:  {
   $6 = (_ispunct($c)|0);
   $res$0 = $6;
   break;
  }
  case 117:  {
   $8 = (_isupper($c)|0);
   $res$0 = $8;
   break;
  }
  case 108:  {
   $5 = (_islower($c)|0);
   $res$0 = $5;
   break;
  }
  case 115:  {
   $7 = (_isspace($c)|0);
   $res$0 = $7;
   break;
  }
  case 103:  {
   $4 = (_isgraph($c)|0);
   $res$0 = $4;
   break;
  }
  case 119:  {
   $9 = (_isalnum($c)|0);
   $res$0 = $9;
   break;
  }
  default: {
   $13 = ($cl|0)==($c|0);
   $14 = $13&1;
   $$0 = $14;
   STACKTOP = sp;return ($$0|0);
  }
  }
 } while(0);
 $15 = (_islower($cl)|0);
 $16 = ($15|0)==(0);
 if (!($16)) {
  $$0 = $res$0;
  STACKTOP = sp;return ($$0|0);
 }
 $17 = ($res$0|0)==(0);
 $18 = $17&1;
 $$0 = $18;
 STACKTOP = sp;return ($$0|0);
}
function _check_capture($ms,$l) {
 $ms = $ms|0;
 $l = $l|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($l) + -49)|0;
 $1 = ($0|0)<(0);
 if (!($1)) {
  $2 = (($ms) + 20|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($0|0)<($3|0);
  if ($4) {
   $5 = ((($ms) + ($0<<3)|0) + 28|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(-1);
   if (!($7)) {
    $$0 = $0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $8 = (($ms) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($l) + -48)|0;
 HEAP32[$vararg_buffer>>2] = $10;
 $11 = (_luaL_error($9,9288,$vararg_buffer)|0);
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function _capture_to_close($ms) {
 $ms = $ms|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $level$0 = 0, $level$0$in = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ms) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $level$0$in = $1;
 while(1) {
  $level$0 = (($level$0$in) + -1)|0;
  $2 = ($level$0$in|0)>(0);
  if (!($2)) {
   break;
  }
  $3 = ((($ms) + ($level$0<<3)|0) + 28|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(-1);
  if ($5) {
   $$0 = $level$0;
   label = 5;
   break;
  } else {
   $level$0$in = $level$0;
  }
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($ms) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (_luaL_error($7,9440,$vararg_buffer)|0);
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function _add_value($ms,$b,$s,$e,$tr) {
 $ms = $ms|0;
 $b = $b|0;
 $s = $s|0;
 $e = $e|0;
 $tr = $tr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($ms) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($tr|0) == 6)) {
  _lua_pushvalue($1,3);
  $2 = (_push_captures($ms,$s,$e)|0);
  _lua_callk($1,$2,1,0,0);
 } else if ((($tr|0) == 5)) {
  _push_onecapture($ms,0,$s,$e);
  _lua_gettable($1,3);
 } else {
  _add_s($ms,$b,$s,$e);
  STACKTOP = sp;return;
 }
 $3 = (_lua_toboolean($1,-1)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _lua_settop($1,-2);
  $5 = $e;
  $6 = $s;
  $7 = (($5) - ($6))|0;
  (_lua_pushlstring($1,$s,$7)|0);
 } else {
  $8 = (_lua_isstring($1,-1)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (_lua_type($1,-1)|0);
   $11 = (_lua_typename($1,$10)|0);
   HEAP32[$vararg_buffer>>2] = $11;
   (_luaL_error($1,9512,$vararg_buffer)|0);
  }
 }
 _luaL_addvalue($b);
 STACKTOP = sp;return;
}
function _add_s($ms,$b,$s,$e) {
 $ms = $ms|0;
 $b = $b|0;
 $s = $s|0;
 $e = $e|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $i$1 = 0, $isdigit = 0, $isdigittmp = 0, $l = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $l = sp + 4|0;
 $0 = (($ms) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_lua_tolstring($1,3,$l)|0);
 $3 = HEAP32[$l>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = $e;
 $6 = $s;
 $7 = (($5) - ($6))|0;
 $8 = (($b) + 8|0);
 $9 = (($b) + 4|0);
 $10 = (($b) + 8|0);
 $11 = (($b) + 4|0);
 $i$01 = 0;
 while(1) {
  $12 = (($2) + ($i$01)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = ($13<<24>>24)==(37);
  do {
   if ($14) {
    $23 = (($i$01) + 1)|0;
    $24 = (($2) + ($23)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $isdigittmp = (($26) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $27 = $25 << 24 >> 24;
    if ($isdigit) {
     $38 = ($25<<24>>24)==(48);
     if ($38) {
      _luaL_addlstring($b,$s,$7);
      $i$1 = $23;
      break;
     } else {
      $39 = (($27) + -49)|0;
      _push_onecapture($ms,$39,$s,$e);
      _luaL_addvalue($b);
      $i$1 = $23;
      break;
     }
    }
    $28 = ($25<<24>>24)==(37);
    if (!($28)) {
     $29 = HEAP32[$0>>2]|0;
     HEAP32[$vararg_buffer>>2] = 37;
     (_luaL_error($29,9552,$vararg_buffer)|0);
    }
    $30 = HEAP32[$8>>2]|0;
    $31 = HEAP32[$9>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if (!($32)) {
     (_luaL_prepbuffsize($b,1)|0);
    }
    $33 = HEAP8[$24>>0]|0;
    $34 = HEAP32[$8>>2]|0;
    $35 = (($34) + 1)|0;
    HEAP32[$8>>2] = $35;
    $36 = HEAP32[$b>>2]|0;
    $37 = (($36) + ($34)|0);
    HEAP8[$37>>0] = $33;
    $i$1 = $23;
   } else {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = ($15>>>0)<($16>>>0);
    if (!($17)) {
     (_luaL_prepbuffsize($b,1)|0);
    }
    $18 = HEAP8[$12>>0]|0;
    $19 = HEAP32[$10>>2]|0;
    $20 = (($19) + 1)|0;
    HEAP32[$10>>2] = $20;
    $21 = HEAP32[$b>>2]|0;
    $22 = (($21) + ($19)|0);
    HEAP8[$22>>0] = $18;
    $i$1 = $i$01;
   }
  } while(0);
  $40 = (($i$1) + 1)|0;
  $41 = HEAP32[$l>>2]|0;
  $42 = ($40>>>0)<($41>>>0);
  if ($42) {
   $i$01 = $40;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _gmatch_aux($L) {
 $L = $L|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lp = 0, $ls = 0, $ms = 0, $src$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $ms = sp + 8|0;
 $ls = sp + 4|0;
 $lp = sp;
 $0 = (_lua_tolstring($L,-1001001,$ls)|0);
 $1 = (_lua_tolstring($L,-1001002,$lp)|0);
 $2 = (($ms) + 16|0);
 HEAP32[$2>>2] = $L;
 HEAP32[$ms>>2] = 200;
 $3 = (($ms) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = HEAP32[$ls>>2]|0;
 $5 = (($0) + ($4)|0);
 $6 = (($ms) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$lp>>2]|0;
 $8 = (($1) + ($7)|0);
 $9 = (($ms) + 12|0);
 HEAP32[$9>>2] = $8;
 $10 = (_lua_tointegerx($L,-1001003,0)|0);
 $11 = (($0) + ($10)|0);
 $12 = HEAP32[$6>>2]|0;
 $13 = ($11>>>0)>($12>>>0);
 if ($13) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = (($ms) + 20|0);
 $src$02 = $11;
 while(1) {
  HEAP32[$14>>2] = 0;
  $18 = (_match($ms,$src$02,$1)|0);
  $19 = ($18|0)==(0|0);
  $16 = (($src$02) + 1|0);
  if (!($19)) {
   break;
  }
  $15 = HEAP32[$6>>2]|0;
  $17 = ($16>>>0)>($15>>>0);
  if ($17) {
   $$0 = 0;
   label = 6;
   break;
  } else {
   $src$02 = $16;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $18;
 $21 = $0;
 $22 = (($20) - ($21))|0;
 $23 = ($18|0)==($src$02|0);
 $24 = $23&1;
 $$ = (($22) + ($24))|0;
 _lua_pushinteger($L,$$);
 _lua_replace($L,-1001003);
 $25 = (_push_captures($ms,$src$02,$18)|0);
 $$0 = $25;
 STACKTOP = sp;return ($$0|0);
}
function _scanformat($L,$strfrmt,$form) {
 $L = $L|0;
 $strfrmt = $strfrmt|0;
 $form = $form|0;
 var $$ = 0, $$$ = 0, $$p$0 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit2 = 0;
 var $isdigit4 = 0, $isdigit6 = 0, $isdigit8 = 0, $isdigittmp = 0, $isdigittmp1 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $isdigittmp7 = 0, $memchr = 0, $p$0$lcssa = 0, $p$09 = 0, $p$2 = 0, $p$4 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = HEAP8[$strfrmt>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $p$0$lcssa = $strfrmt;
  } else {
   $6 = $0;$p$09 = $strfrmt;
   while(1) {
    $5 = $6 << 24 >> 24;
    $memchr = (_memchr(9760,$5,6)|0);
    $7 = ($memchr|0)==(0|0);
    $3 = (($p$09) + 1|0);
    if ($7) {
     $p$0$lcssa = $p$09;
     break L1;
    }
    $2 = HEAP8[$3>>0]|0;
    $4 = ($2<<24>>24)==(0);
    if ($4) {
     $p$0$lcssa = $3;
     break;
    } else {
     $6 = $2;$p$09 = $3;
    }
   }
  }
 } while(0);
 $8 = $p$0$lcssa;
 $9 = $strfrmt;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)>(5);
 if ($11) {
  (_luaL_error($L,9768,$vararg_buffer1)|0);
 }
 $12 = HEAP8[$p$0$lcssa>>0]|0;
 $13 = $12&255;
 $isdigittmp = (($13) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $14 = (($p$0$lcssa) + 1|0);
 $$p$0 = $isdigit ? $14 : $p$0$lcssa;
 $15 = HEAP8[$$p$0>>0]|0;
 $16 = $15&255;
 $isdigittmp1 = (($16) + -48)|0;
 $isdigit2 = ($isdigittmp1>>>0)<(10);
 $17 = (($$p$0) + 1|0);
 $p$2 = $isdigit2 ? $17 : $$p$0;
 $18 = HEAP8[$p$2>>0]|0;
 $19 = ($18<<24>>24)==(46);
 if ($19) {
  $20 = (($p$2) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $isdigittmp5 = (($22) + -48)|0;
  $isdigit6 = ($isdigittmp5>>>0)<(10);
  $23 = (($p$2) + 2|0);
  $$ = $isdigit6 ? $23 : $20;
  $24 = HEAP8[$$>>0]|0;
  $25 = $24&255;
  $isdigittmp7 = (($25) + -48)|0;
  $isdigit8 = ($isdigittmp7>>>0)<(10);
  $26 = (($$) + 1|0);
  $$$ = $isdigit8 ? $26 : $$;
  $p$4 = $$$;
 } else {
  $p$4 = $p$2;
 }
 $27 = HEAP8[$p$4>>0]|0;
 $28 = $27&255;
 $isdigittmp3 = (($28) + -48)|0;
 $isdigit4 = ($isdigittmp3>>>0)<(10);
 if (!($isdigit4)) {
  $29 = (($form) + 1|0);
  HEAP8[$form>>0] = 37;
  $30 = $p$4;
  $31 = (($30) - ($9))|0;
  $32 = (($31) + 1)|0;
  _memcpy(($29|0),($strfrmt|0),($32|0))|0;
  $$sum = (($31) + 2)|0;
  $33 = (($form) + ($$sum)|0);
  HEAP8[$33>>0] = 0;
  STACKTOP = sp;return ($p$4|0);
 }
 (_luaL_error($L,9800,$vararg_buffer1)|0);
 $29 = (($form) + 1|0);
 HEAP8[$form>>0] = 37;
 $30 = $p$4;
 $31 = (($30) - ($9))|0;
 $32 = (($31) + 1)|0;
 _memcpy(($29|0),($strfrmt|0),($32|0))|0;
 $$sum = (($31) + 2)|0;
 $33 = (($form) + ($$sum)|0);
 HEAP8[$33>>0] = 0;
 STACKTOP = sp;return ($p$4|0);
}
function _addlenmod($form,$lenmod) {
 $form = $form|0;
 $lenmod = $lenmod|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($form|0))|0);
 $1 = (_strlen(($lenmod|0))|0);
 $2 = (($0) + -1)|0;
 $3 = (($form) + ($2)|0);
 $4 = HEAP8[$3>>0]|0;
 (_strcpy(($3|0),($lenmod|0))|0);
 $5 = (($1) + ($0))|0;
 $6 = (($5) + -1)|0;
 $7 = (($form) + ($6)|0);
 HEAP8[$7>>0] = $4;
 $8 = (($form) + ($5)|0);
 HEAP8[$8>>0] = 0;
 STACKTOP = sp;return;
}
function _addquoted($L,$b,$arg) {
 $L = $L|0;
 $b = $b|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buff = 0, $isdigit = 0, $isdigittmp = 0, $l = 0;
 var $s$01 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer1 = sp;
 $l = sp + 4|0;
 $buff = sp + 8|0;
 $0 = (_luaL_checklstring($L,$arg,$l)|0);
 $1 = (($b) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($b) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if (!($5)) {
  (_luaL_prepbuffsize($b,1)|0);
 }
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$1>>2] = $7;
 $8 = HEAP32[$b>>2]|0;
 $9 = (($8) + ($6)|0);
 HEAP8[$9>>0] = 34;
 $10 = HEAP32[$l>>2]|0;
 $11 = (($10) + -1)|0;
 HEAP32[$l>>2] = $11;
 $12 = ($10|0)==(0);
 if (!($12)) {
  $s$01 = $0;
  while(1) {
   $13 = HEAP8[$s$01>>0]|0;
   if ((($13<<24>>24) == 10) | (($13<<24>>24) == 92) | (($13<<24>>24) == 34)) {
    $14 = HEAP32[$1>>2]|0;
    $15 = HEAP32[$3>>2]|0;
    $16 = ($14>>>0)<($15>>>0);
    if (!($16)) {
     (_luaL_prepbuffsize($b,1)|0);
    }
    $17 = HEAP32[$1>>2]|0;
    $18 = (($17) + 1)|0;
    HEAP32[$1>>2] = $18;
    $19 = HEAP32[$b>>2]|0;
    $20 = (($19) + ($17)|0);
    HEAP8[$20>>0] = 92;
    $21 = HEAP32[$1>>2]|0;
    $22 = HEAP32[$3>>2]|0;
    $23 = ($21>>>0)<($22>>>0);
    if (!($23)) {
     (_luaL_prepbuffsize($b,1)|0);
    }
    $24 = HEAP8[$s$01>>0]|0;
    $25 = HEAP32[$1>>2]|0;
    $26 = (($25) + 1)|0;
    HEAP32[$1>>2] = $26;
    $27 = HEAP32[$b>>2]|0;
    $28 = (($27) + ($25)|0);
    HEAP8[$28>>0] = $24;
   } else if ((($13<<24>>24) == 0)) {
    label = 12;
   } else {
    $29 = $13&255;
    $30 = (_iscntrl($29)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $37 = HEAP32[$1>>2]|0;
     $38 = HEAP32[$3>>2]|0;
     $39 = ($37>>>0)<($38>>>0);
     if (!($39)) {
      (_luaL_prepbuffsize($b,1)|0);
     }
     $40 = HEAP8[$s$01>>0]|0;
     $41 = HEAP32[$1>>2]|0;
     $42 = (($41) + 1)|0;
     HEAP32[$1>>2] = $42;
     $43 = HEAP32[$b>>2]|0;
     $44 = (($43) + ($41)|0);
     HEAP8[$44>>0] = $40;
    } else {
     label = 12;
    }
   }
   if ((label|0) == 12) {
    label = 0;
    $32 = (($s$01) + 1|0);
    $33 = HEAP8[$32>>0]|0;
    $34 = $33&255;
    $isdigittmp = (($34) + -48)|0;
    $isdigit = ($isdigittmp>>>0)<(10);
    $35 = HEAP8[$s$01>>0]|0;
    $36 = $35&255;
    if ($isdigit) {
     HEAP32[$vararg_buffer1>>2] = $36;
     (_sprintf($buff,9752,$vararg_buffer1)|0);
    } else {
     HEAP32[$vararg_buffer1>>2] = $36;
     (_sprintf($buff,9744,$vararg_buffer1)|0);
    }
    _luaL_addstring($b,$buff);
   }
   $45 = (($s$01) + 1|0);
   $46 = HEAP32[$l>>2]|0;
   $47 = (($46) + -1)|0;
   HEAP32[$l>>2] = $47;
   $48 = ($46|0)==(0);
   if ($48) {
    break;
   } else {
    $s$01 = $45;
   }
  }
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = HEAP32[$3>>2]|0;
 $51 = ($49>>>0)<($50>>>0);
 if ($51) {
  $52 = HEAP32[$1>>2]|0;
  $53 = (($52) + 1)|0;
  HEAP32[$1>>2] = $53;
  $54 = HEAP32[$b>>2]|0;
  $55 = (($54) + ($52)|0);
  HEAP8[$55>>0] = 34;
  STACKTOP = sp;return;
 }
 (_luaL_prepbuffsize($b,1)|0);
 $52 = HEAP32[$1>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$1>>2] = $53;
 $54 = HEAP32[$b>>2]|0;
 $55 = (($54) + ($52)|0);
 HEAP8[$55>>0] = 34;
 STACKTOP = sp;return;
}
function _writer($L,$b,$size,$B) {
 $L = $L|0;
 $b = $b|0;
 $size = $size|0;
 $B = $B|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_addlstring($B,$b,$size);
 STACKTOP = sp;return 0;
}
function _luaH_next($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$in = 0, $i$13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_findindex($L,$t,$key)|0);
 $1 = (($t) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($t) + 12|0);
 $i$0$in = $0;
 while(1) {
  $i$0 = (($i$0$in) + 1)|0;
  $4 = ($i$0|0)<($2|0);
  if (!($4)) {
   break;
  }
  $5 = HEAP32[$3>>2]|0;
  $6 = ((($5) + ($i$0<<4)|0) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $i$0$in = $i$0;
  } else {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $9 = (($i$0$in) + 2)|0;
  $10 = (+($9|0));
  HEAPF64[$key>>3] = $10;
  $11 = (($key) + 8|0);
  HEAP32[$11>>2] = 3;
  $12 = HEAP32[$3>>2]|0;
  $13 = (($12) + ($i$0<<4)|0);
  $14 = (($key) + 16|0);
  $15 = $13;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $14;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = ((($12) + ($i$0<<4)|0) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($key) + 24|0);
  HEAP32[$27>>2] = $26;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $28 = (($i$0) - ($2))|0;
 $29 = (($t) + 7|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = 1 << $31;
 $33 = ($28|0)<($32|0);
 if (!($33)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($t) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $i$13 = $28;
 while(1) {
  $41 = ((($35) + ($i$13<<5)|0) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)==(0);
  $39 = (($i$13) + 1)|0;
  if (!($43)) {
   break;
  }
  $36 = HEAP8[$29>>0]|0;
  $37 = $36&255;
  $38 = 1 << $37;
  $40 = ($39|0)<($38|0);
  if ($40) {
   $i$13 = $39;
  } else {
   $$0 = 0;
   label = 10;
   break;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $44 = ((($35) + ($i$13<<5)|0) + 16|0);
 $45 = $44;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($45) + 4)|0;
 $49 = $48;
 $50 = HEAP32[$49>>2]|0;
 $51 = $key;
 $52 = $51;
 HEAP32[$52>>2] = $47;
 $53 = (($51) + 4)|0;
 $54 = $53;
 HEAP32[$54>>2] = $50;
 $55 = ((($35) + ($i$13<<5)|0) + 24|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($key) + 8|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$34>>2]|0;
 $59 = (($58) + ($i$13<<5)|0);
 $60 = (($key) + 16|0);
 $61 = $59;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = $60;
 $68 = $67;
 HEAP32[$68>>2] = $63;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = $66;
 $71 = ((($58) + ($i$13<<5)|0) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($key) + 24|0);
 HEAP32[$73>>2] = $72;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _findindex($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (_arrayindex($key)|0);
 $4 = ($3|0)>(0);
 if ($4) {
  $5 = (($t) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($3|0)>($6|0);
  if (!($7)) {
   $8 = (($3) + -1)|0;
   $$0 = $8;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $9 = (_mainposition($t,$key)|0);
 $n$0 = $9;
 while(1) {
  $10 = (($n$0) + 16|0);
  $11 = (($n$0) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$0>>2]|0;
  $14 = ($12|0)==($13|0);
  if ($14) {
   $15 = (_luaV_equalobj_(0,$10,$key)|0);
   $16 = ($15|0)==(0);
   if (!($16)) {
    break;
   }
   $$pr = HEAP32[$11>>2]|0;
   $17 = $$pr;
  } else {
   $17 = $12;
  }
  $18 = ($17|0)==(11);
  if ($18) {
   $19 = HEAP32[$0>>2]|0;
   $20 = $19 & 64;
   $21 = ($20|0)==(0);
   if (!($21)) {
    $22 = HEAP32[$10>>2]|0;
    $23 = HEAP32[$key>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     break;
    }
   }
  }
  $34 = (($n$0) + 28|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)==(0|0);
  if ($36) {
   label = 14;
   break;
  } else {
   $n$0 = $35;
  }
 }
 if ((label|0) == 14) {
  _luaG_runerror($L,10024,$vararg_buffer);
  // unreachable;
 }
 $25 = (($t) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $n$0;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $30 = $29 >> 5;
 $31 = (($t) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + ($32))|0;
 $$0 = $33;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_resize($L,$t,$nasize,$nhsize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 $nhsize = $nhsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$03 = 0, $i$12 = 0, $i$12$in = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = (($t) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($1|0)<($nasize|0);
 if ($7) {
  _setarrayvector($L,$t,$nasize);
 }
 _setnodevector($L,$t,$nhsize);
 $8 = ($1|0)>($nasize|0);
 do {
  if ($8) {
   HEAP32[$0>>2] = $nasize;
   $9 = ($1|0)>($nasize|0);
   if ($9) {
    $10 = (($t) + 12|0);
    $i$03 = $nasize;
    while(1) {
     $11 = HEAP32[$10>>2]|0;
     $12 = ((($11) + ($i$03<<4)|0) + 8|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $15 = (($11) + ($i$03<<4)|0);
      $16 = (($i$03) + 1)|0;
      _luaH_setint($L,$t,$16,$15);
     }
     $17 = (($i$03) + 1)|0;
     $exitcond = ($17|0)==($1|0);
     if ($exitcond) {
      break;
     } else {
      $i$03 = $17;
     }
    }
   }
   $18 = (($nasize) + 1)|0;
   $19 = ($18>>>0)>(268435455);
   if ($19) {
    _luaM_toobig($L);
    // unreachable;
   } else {
    $20 = (($t) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $1 << 4;
    $23 = $nasize << 4;
    $24 = (_luaM_realloc_($L,$21,$22,$23)|0);
    HEAP32[$20>>2] = $24;
    break;
   }
  }
 } while(0);
 $25 = 1 << $4;
 $26 = ($25|0)>(0);
 if ($26) {
  $i$12$in = $25;
  while(1) {
   $i$12 = (($i$12$in) + -1)|0;
   $27 = ((($6) + ($i$12<<5)|0) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    $31 = (($6) + ($i$12<<5)|0);
    $32 = ((($6) + ($i$12<<5)|0) + 16|0);
    $33 = (_luaH_set($L,$t,$32)|0);
    $34 = $31;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = (($34) + 4)|0;
    $38 = $37;
    $39 = HEAP32[$38>>2]|0;
    $40 = $33;
    $41 = $40;
    HEAP32[$41>>2] = $36;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $39;
    $44 = HEAP32[$27>>2]|0;
    $45 = (($33) + 8|0);
    HEAP32[$45>>2] = $44;
   }
   $30 = ($i$12|0)>(0);
   if ($30) {
    $i$12$in = $i$12;
   } else {
    break;
   }
  }
 }
 $46 = ($6|0)==(9976|0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = $25 << 5;
 (_luaM_realloc_($L,$6,$47,0)|0);
 STACKTOP = sp;return;
}
function _setarrayvector($L,$t,$size) {
 $L = $L|0;
 $t = $t|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($size) + 1)|0;
 $1 = ($0>>>0)>(268435455);
 if ($1) {
  _luaM_toobig($L);
  // unreachable;
 }
 $2 = (($t) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($t) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 << 4;
 $7 = $size << 4;
 $8 = (_luaM_realloc_($L,$3,$6,$7)|0);
 HEAP32[$2>>2] = $8;
 $9 = HEAP32[$4>>2]|0;
 $10 = ($9|0)<($size|0);
 if (!($10)) {
  HEAP32[$4>>2] = $size;
  STACKTOP = sp;return;
 }
 $11 = HEAP32[$2>>2]|0;
 $i$01 = $9;
 while(1) {
  $12 = ((($11) + ($i$01<<4)|0) + 8|0);
  HEAP32[$12>>2] = 0;
  $13 = (($i$01) + 1)|0;
  $exitcond = ($13|0)==($size|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $13;
  }
 }
 HEAP32[$4>>2] = $size;
 STACKTOP = sp;return;
}
function _setnodevector($L,$t,$size) {
 $L = $L|0;
 $t = $t|0;
 $size = $size|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $lsize$0 = 0, $phitmp = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ($size|0)==(0);
 if ($0) {
  $1 = (($t) + 16|0);
  HEAP32[$1>>2] = 9976;
  $$0 = 0;$lsize$0 = 0;
 } else {
  $2 = (_luaO_ceillog2($size)|0);
  $3 = ($2|0)>(30);
  if ($3) {
   _luaG_runerror($L,10008,$vararg_buffer);
   // unreachable;
  }
  $4 = 1 << $2;
  $5 = (($4) + 1)|0;
  $6 = ($5>>>0)>(134217727);
  if ($6) {
   _luaM_toobig($L);
   // unreachable;
  }
  $7 = $4 << 5;
  $8 = (_luaM_realloc_($L,0,0,$7)|0);
  $9 = (($t) + 16|0);
  HEAP32[$9>>2] = $8;
  $10 = ($4|0)>(0);
  if ($10) {
   $i$01 = 0;
   while(1) {
    $11 = HEAP32[$9>>2]|0;
    $12 = ((($11) + ($i$01<<5)|0) + 28|0);
    HEAP32[$12>>2] = 0;
    $13 = ((($11) + ($i$01<<5)|0) + 24|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($11) + ($i$01<<5)|0) + 8|0);
    HEAP32[$14>>2] = 0;
    $15 = (($i$01) + 1)|0;
    $exitcond = ($15|0)==($4|0);
    if ($exitcond) {
     break;
    } else {
     $i$01 = $15;
    }
   }
  }
  $phitmp = $2&255;
  $$0 = $4;$lsize$0 = $phitmp;
 }
 $16 = (($t) + 7|0);
 HEAP8[$16>>0] = $lsize$0;
 $17 = (($t) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + ($$0<<5)|0);
 $20 = (($t) + 20|0);
 HEAP32[$20>>2] = $19;
 STACKTOP = sp;return;
}
function _luaH_setint($L,$t,$key,$value) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cell$0 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $k = sp;
 $0 = (_luaH_getint($t,$key)|0);
 $1 = ($0|0)==(7144|0);
 if ($1) {
  $2 = (+($key|0));
  HEAPF64[$k>>3] = $2;
  $3 = (($k) + 8|0);
  HEAP32[$3>>2] = 3;
  $4 = (_luaH_newkey($L,$t,$k)|0);
  $cell$0 = $4;
 } else {
  $cell$0 = $0;
 }
 $5 = $value;
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4)|0;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = $cell$0;
 $12 = $11;
 HEAP32[$12>>2] = $7;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $10;
 $15 = (($value) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($cell$0) + 8|0);
 HEAP32[$17>>2] = $16;
 STACKTOP = sp;return;
}
function _luaH_set($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_get($t,$key)|0);
 $1 = ($0|0)==(7144|0);
 if ($1) {
  $2 = (_luaH_newkey($L,$t,$key)|0);
  $$0 = $2;
 } else {
  $$0 = $0;
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaH_resizearray($L,$t,$nasize) {
 $L = $L|0;
 $t = $t|0;
 $nasize = $nasize|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9976|0);
 if ($2) {
  $7 = 0;
 } else {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 1 << $5;
  $7 = $6;
 }
 _luaH_resize($L,$t,$nasize,$7);
 STACKTOP = sp;return;
}
function _luaH_new($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaC_newobj($L,5,32,0,0)|0);
 $1 = (($0) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 6|0);
 HEAP8[$2>>0] = -1;
 $3 = (($0) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = (($0) + 28|0);
 HEAP32[$4>>2] = 0;
 _setnodevector($L,$0,0);
 STACKTOP = sp;return ($0|0);
}
function _luaH_free($L,$t) {
 $L = $L|0;
 $t = $t|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(9976|0);
 if (!($2)) {
  $3 = (($t) + 7|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = 32 << $5;
  (_luaM_realloc_($L,$1,$6,0)|0);
 }
 $7 = (($t) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($t) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 4;
 (_luaM_realloc_($L,$8,$11,0)|0);
 (_luaM_realloc_($L,$t,32,0)|0);
 STACKTOP = sp;return;
}
function _luaH_newkey($L,$t,$key) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mp$0 = 0, $or$cond = 0, $othern$0 = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 if ((($1|0) == 0)) {
  _luaG_runerror($L,9928,$vararg_buffer1);
  // unreachable;
 } else if ((($1|0) == 3)) {
  label = 3;
 }
 if ((label|0) == 3) {
  $2 = +HEAPF64[$key>>3];
  $3 = ($2 == $2) & (0.0 == 0.0);
  if (!($3)) {
   _luaG_runerror($L,9952,$vararg_buffer1);
   // unreachable;
  }
 }
 $4 = (_mainposition($t,$key)|0);
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = ($4|0)==(9976|0);
 $or$cond = $7 | $8;
 do {
  if ($or$cond) {
   $9 = (_getfreepos($t)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    _rehash($L,$t,$key);
    $11 = (_luaH_set($L,$t,$key)|0);
    $$0 = $11;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = (($4) + 16|0);
   $13 = (_mainposition($t,$12)|0);
   $14 = ($13|0)==($4|0);
   if ($14) {
    $19 = (($4) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($9) + 28|0);
    HEAP32[$21>>2] = $20;
    HEAP32[$19>>2] = $9;
    $mp$0 = $9;
    break;
   } else {
    $othern$0 = $13;
   }
   while(1) {
    $15 = (($othern$0) + 28|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)==($4|0);
    if ($17) {
     break;
    } else {
     $othern$0 = $16;
    }
   }
   HEAP32[$15>>2] = $9;
   ;HEAP32[$9+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$9+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$9+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$9+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$9+24>>2]=HEAP32[$4+24>>2]|0;HEAP32[$9+28>>2]=HEAP32[$4+28>>2]|0;
   $18 = (($4) + 28|0);
   HEAP32[$18>>2] = 0;
   HEAP32[$5>>2] = 0;
   $mp$0 = $4;
  } else {
   $mp$0 = $4;
  }
 } while(0);
 $22 = (($mp$0) + 16|0);
 $23 = $key;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $22;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = HEAP32[$0>>2]|0;
 $34 = (($mp$0) + 24|0);
 HEAP32[$34>>2] = $33;
 $35 = HEAP32[$0>>2]|0;
 $36 = $35 & 64;
 $37 = ($36|0)==(0);
 if (!($37)) {
  $38 = HEAP32[$key>>2]|0;
  $39 = (($38) + 5|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 & 3;
  $42 = ($41<<24>>24)==(0);
  if (!($42)) {
   $43 = (($t) + 5|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44 & 4;
   $46 = ($45<<24>>24)==(0);
   if (!($46)) {
    _luaC_barrierback_($L,$t);
   }
  }
 }
 $$0 = $mp$0;
 STACKTOP = sp;return ($$0|0);
}
function _mainposition($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $$c = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 switch ($2|0) {
 case 3:  {
  $3 = +HEAPF64[$key>>3];
  $4 = (_hashnum($t,$3)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 4:  {
  $27 = HEAP32[$key>>2]|0;
  $28 = (($27) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($t) + 7|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = 1 << $32;
  $34 = (($33) + -1)|0;
  $35 = $34 & $29;
  $36 = (($t) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($35<<5)|0);
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 20:  {
  $5 = HEAP32[$key>>2]|0;
  $6 = (($5) + 6|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $9 = (($5) + 16|0);
   $10 = (($5) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($5) + 8|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (_luaS_hash($9,$11,$13)|0);
   $$c = $14;
   HEAP32[$12>>2] = $$c;
   HEAP8[$6>>0] = 1;
  }
  $15 = HEAP32[$key>>2]|0;
  $16 = (($15) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($t) + 7|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = 1 << $20;
  $22 = (($21) + -1)|0;
  $23 = $22 & $17;
  $24 = (($t) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($23<<5)|0);
  $$0 = $26;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $39 = HEAP32[$key>>2]|0;
  $40 = (($t) + 7|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = 1 << $42;
  $44 = (($43) + -1)|0;
  $45 = $44 & $39;
  $46 = (($t) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($45<<5)|0);
  $$0 = $48;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 2:  {
  $49 = HEAP32[$key>>2]|0;
  $50 = $49;
  $51 = (($t) + 7|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = 1 << $53;
  $55 = (($54) + -1)|0;
  $56 = $55 | 1;
  $57 = (($50>>>0) % ($56>>>0))&-1;
  $58 = (($t) + 16|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($57<<5)|0);
  $$0 = $60;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 22:  {
  $61 = HEAP32[$key>>2]|0;
  $62 = $61;
  $63 = (($t) + 7|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = 1 << $65;
  $67 = (($66) + -1)|0;
  $68 = $67 | 1;
  $69 = (($62>>>0) % ($68>>>0))&-1;
  $70 = (($t) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + ($69<<5)|0);
  $$0 = $72;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $73 = HEAP32[$key>>2]|0;
  $74 = $73;
  $75 = (($t) + 7|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = 1 << $77;
  $79 = (($78) + -1)|0;
  $80 = $79 | 1;
  $81 = (($74>>>0) % ($80>>>0))&-1;
  $82 = (($t) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + ($81<<5)|0);
  $$0 = $84;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return 0|0;
}
function _getfreepos($t) {
 $t = $t|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 20|0);
 $1 = (($t) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 while(1) {
  $3 = HEAP32[$0>>2]|0;
  $4 = ($3>>>0)>($2>>>0);
  if (!($4)) {
   $$0 = 0;
   label = 4;
   break;
  }
  $5 = (($3) + -32|0);
  HEAP32[$0>>2] = $5;
  $6 = (($3) + -8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $$0 = $5;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _rehash($L,$t,$ek) {
 $L = $L|0;
 $t = $t|0;
 $ek = $ek|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nasize = 0, $nums = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $nasize = sp + 124|0;
 $nums = sp;
 dest=$nums+0|0; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (_numusearray($t,$nums)|0);
 HEAP32[$nasize>>2] = $0;
 $1 = (_numusehash($t,$nums,$nasize)|0);
 $2 = (_countint($ek,$nums)|0);
 $3 = HEAP32[$nasize>>2]|0;
 $4 = (($3) + ($2))|0;
 HEAP32[$nasize>>2] = $4;
 $5 = (_computesizes($nums,$nasize)|0);
 $6 = HEAP32[$nasize>>2]|0;
 $7 = (($0) + 1)|0;
 $8 = (($7) + ($1))|0;
 $9 = (($8) - ($5))|0;
 _luaH_resize($L,$t,$6,$9);
 STACKTOP = sp;return;
}
function _luaH_getint($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $n$0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + -1)|0;
 $1 = (($t) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($0>>>0)<($2>>>0);
 if ($3) {
  $4 = (($t) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($0<<4)|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (+($key|0));
 $8 = (_hashnum($t,$7)|0);
 $n$0 = $8;
 while(1) {
  $9 = (($n$0) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(3);
  if ($11) {
   $12 = (($n$0) + 16|0);
   $13 = +HEAPF64[$12>>3];
   $14 = $13 == $7;
   if ($14) {
    break;
   }
  }
  $15 = (($n$0) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = 7144;
   label = 8;
   break;
  } else {
   $n$0 = $16;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n$0;
 STACKTOP = sp;return ($$0|0);
}
function _hashnum($t,$n) {
 $t = $t|0;
 $n = +$n;
 var $$op = 0, $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i$1 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u$sroa$0 = sp;
 $0 = $n + 1.0;
 HEAPF64[$u$sroa$0>>3] = $0;
 $1 = HEAP32[$u$sroa$0>>2]|0;
 $2 = (($u$sroa$0) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + ($1))|0;
 $5 = ($4|0)<(0);
 if ($5) {
  $6 = (0 - ($4))|0;
  $7 = ($4|0)==($6|0);
  $$op = (0 - ($4))|0;
  $8 = $7 ? 0 : $$op;
  $i$1 = $8;
 } else {
  $i$1 = $4;
 }
 $9 = (($t) + 7|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = 1 << $11;
 $13 = (($12) + -1)|0;
 $14 = $13 | 1;
 $15 = (($i$1|0) % ($14|0))&-1;
 $16 = (($t) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + ($15<<5)|0);
 STACKTOP = sp;return ($18|0);
}
function _luaH_getstr($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $n$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($t) + 7|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = 1 << $4;
 $6 = (($5) + -1)|0;
 $7 = $6 & $1;
 $8 = (($t) + 16|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + ($7<<5)|0);
 $n$0 = $10;
 while(1) {
  $11 = (($n$0) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(68);
  if ($13) {
   $14 = (($n$0) + 16|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==($key|0);
   if ($16) {
    break;
   }
  }
  $17 = (($n$0) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$0 = 7144;
   label = 6;
   break;
  } else {
   $n$0 = $18;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_get($t,$key) {
 $t = $t|0;
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0;
 var $7 = 0, $8 = 0.0, $9 = 0, $n1$0 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u$sroa$0 = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 if ((($2|0) == 3)) {
  $5 = +HEAPF64[$key>>3];
  $6 = $5 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $6;
  $7 = HEAP32[$u$sroa$0>>2]|0;
  $8 = (+($7|0));
  $9 = $8 == $5;
  if ($9) {
   $10 = (_luaH_getint($t,$7)|0);
   $$0 = $10;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($2|0) == 4)) {
  $3 = HEAP32[$key>>2]|0;
  $4 = (_luaH_getstr($t,$3)|0);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 } else if ((($2|0) == 0)) {
  $$0 = 7144;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (_mainposition($t,$key)|0);
 $n1$0 = $11;
 while(1) {
  $12 = (($n1$0) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$0>>2]|0;
  $15 = ($13|0)==($14|0);
  if ($15) {
   $16 = (($n1$0) + 16|0);
   $17 = (_luaV_equalobj_(0,$16,$key)|0);
   $18 = ($17|0)==(0);
   if (!($18)) {
    break;
   }
  }
  $19 = (($n1$0) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$0 = 7144;
   label = 10;
   break;
  } else {
   $n1$0 = $20;
  }
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return ($$0|0);
 }
 $$0 = $n1$0;
 STACKTOP = sp;return ($$0|0);
}
function _luaH_getn($t) {
 $t = $t|0;
 var $$0 = 0, $$j$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$ = 0, $i$02 = 0, $j$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = (($1) + -1)|0;
  $4 = (($t) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5) + ($3<<4)|0) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = ($1>>>0)>(1);
   if (!($9)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = HEAP32[$4>>2]|0;
   $i$02 = 0;$j$01 = $1;
   while(1) {
    $11 = (($i$02) + ($j$01))|0;
    $12 = $11 >>> 1;
    $13 = (($12) + -1)|0;
    $14 = ((($10) + ($13<<4)|0) + 8|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    $$j$0 = $16 ? $12 : $j$01;
    $i$0$ = $16 ? $i$02 : $12;
    $17 = (($$j$0) - ($i$0$))|0;
    $18 = ($17>>>0)>(1);
    if ($18) {
     $i$02 = $i$0$;$j$01 = $$j$0;
    } else {
     $$0 = $i$0$;
     break;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $19 = (($t) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(9976|0);
 if ($21) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = (_unbound_search($t,$1)|0);
 $$0 = $22;
 STACKTOP = sp;return ($$0|0);
}
function _unbound_search($t,$j) {
 $t = $t|0;
 $j = $j|0;
 var $$$1 = 0, $$0 = 0, $$01 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$phi = 0, $i$1 = 0, $i$2$ = 0, $i$23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($j) + 1)|0;
 $$01 = $0;$i$0 = $j;
 while(1) {
  $1 = (_luaH_getint($t,$$01)|0);
  $2 = (($1) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   break;
  }
  $7 = $$01 << 1;
  $8 = ($7>>>0)>(2147483645);
  if ($8) {
   $i$1 = 1;
   label = 5;
   break;
  } else {
   $i$0$phi = $$01;$$01 = $7;$i$0 = $i$0$phi;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $9 = (_luaH_getint($t,$i$1)|0);
   $10 = (($9) + 8|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0);
   $13 = (($i$1) + 1)|0;
   if ($12) {
    break;
   } else {
    $i$1 = $13;
    label = 5;
   }
  }
  $14 = (($i$1) + -1)|0;
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($$01) - ($i$0))|0;
 $6 = ($5>>>0)>(1);
 if ($6) {
  $$12 = $$01;$i$23 = $i$0;
 } else {
  $$0 = $i$0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $15 = (($i$23) + ($$12))|0;
  $16 = $15 >>> 1;
  $17 = (_luaH_getint($t,$16)|0);
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0);
  $$$1 = $20 ? $16 : $$12;
  $i$2$ = $20 ? $i$23 : $16;
  $21 = (($$$1) - ($i$2$))|0;
  $22 = ($21>>>0)>(1);
  if ($22) {
   $$12 = $$$1;$i$23 = $i$2$;
  } else {
   $$0 = $i$2$;
   break;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _numusearray($t,$nums) {
 $t = $t|0;
 $nums = $nums|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ause$0$lcssa = 0, $ause$06 = 0, $i$07 = 0, $i$1$lcssa = 0, $i$11 = 0, $lc$0$ = 0, $lc$0$lcssa = 0, $lc$02 = 0, $lg$04 = 0, $lim$0$ph = 0, $not$ = 0, $smax = 0, $ttlg$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 28|0);
 $1 = (($t) + 12|0);
 $ause$06 = 0;$i$07 = 1;$lg$04 = 0;$ttlg$05 = 1;
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($ttlg$05|0)>($2|0);
  if ($3) {
   $4 = ($i$07|0)>($2|0);
   if ($4) {
    $ause$0$lcssa = $ause$06;
    label = 9;
    break;
   } else {
    $lim$0$ph = $2;
   }
  } else {
   $lim$0$ph = $ttlg$05;
  }
  $5 = ($i$07|0)>($lim$0$ph|0);
  if ($5) {
   $i$1$lcssa = $i$07;$lc$0$lcssa = 0;
  } else {
   $6 = HEAP32[$1>>2]|0;
   $7 = ($i$07|0)>($lim$0$ph|0);
   $smax = $7 ? $i$07 : $lim$0$ph;
   $i$11 = $i$07;$lc$02 = 0;
   while(1) {
    $8 = (($i$11) + -1)|0;
    $9 = ((($6) + ($8<<4)|0) + 8|0);
    $10 = HEAP32[$9>>2]|0;
    $not$ = ($10|0)!=(0);
    $11 = $not$&1;
    $lc$0$ = (($11) + ($lc$02))|0;
    $12 = (($i$11) + 1)|0;
    $13 = ($i$11|0)<($lim$0$ph|0);
    if ($13) {
     $i$11 = $12;$lc$02 = $lc$0$;
    } else {
     break;
    }
   }
   $14 = (($smax) + 1)|0;
   $i$1$lcssa = $14;$lc$0$lcssa = $lc$0$;
  }
  $15 = (($nums) + ($lg$04<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($lc$0$lcssa))|0;
  HEAP32[$15>>2] = $17;
  $18 = (($lc$0$lcssa) + ($ause$06))|0;
  $19 = (($lg$04) + 1)|0;
  $20 = $ttlg$05 << 1;
  $21 = ($19|0)<(31);
  if ($21) {
   $ause$06 = $18;$i$07 = $i$1$lcssa;$lg$04 = $19;$ttlg$05 = $20;
  } else {
   $ause$0$lcssa = $18;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($ause$0$lcssa|0);
 }
 return 0|0;
}
function _numusehash($t,$nums,$pnasize) {
 $t = $t|0;
 $nums = $nums|0;
 $pnasize = $pnasize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ause$0$ph = 0, $i$0 = 0, $i$0$ph = 0;
 var $totaluse$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t) + 7|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1&255;
 $3 = 1 << $2;
 $4 = (($t) + 16|0);
 $ause$0$ph = 0;$i$0$ph = $3;$totaluse$0$ph = 0;
 L1: while(1) {
  $i$0 = $i$0$ph;
  while(1) {
   $5 = (($i$0) + -1)|0;
   $6 = ($i$0|0)==(0);
   if ($6) {
    break L1;
   }
   $7 = HEAP32[$4>>2]|0;
   $8 = ((($7) + ($5<<5)|0) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if ($10) {
    $i$0 = $5;
   } else {
    break;
   }
  }
  $11 = ((($7) + ($5<<5)|0) + 16|0);
  $12 = (_countint($11,$nums)|0);
  $13 = (($12) + ($ause$0$ph))|0;
  $14 = (($totaluse$0$ph) + 1)|0;
  $ause$0$ph = $13;$i$0$ph = $5;$totaluse$0$ph = $14;
 }
 $15 = HEAP32[$pnasize>>2]|0;
 $16 = (($15) + ($ause$0$ph))|0;
 HEAP32[$pnasize>>2] = $16;
 STACKTOP = sp;return ($totaluse$0$ph|0);
}
function _countint($key,$nums) {
 $key = $key|0;
 $nums = $nums|0;
 var $$0 = 0, $$off = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_arrayindex($key)|0);
 $$off = (($0) + -1)|0;
 $1 = ($$off>>>0)<(1073741824);
 if (!($1)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (_luaO_ceillog2($0)|0);
 $3 = (($nums) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 HEAP32[$3>>2] = $5;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _computesizes($nums,$narray) {
 $nums = $nums|0;
 $narray = $narray|0;
 var $$na$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a$03 = 0, $a$1 = 0, $i$01 = 0, $n$05 = 0;
 var $n$1 = 0, $n$2 = 0, $na$04 = 0, $na$1 = 0, $na$2 = 0, $twotoi$0$n$0 = 0, $twotoi$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$narray>>2]|0;
 $1 = ($0|0)>(0);
 L1: do {
  if ($1) {
   $2 = HEAP32[$narray>>2]|0;
   $8 = 0;$a$03 = 0;$i$01 = 0;$n$05 = 0;$na$04 = 0;$twotoi$02 = 1;
   while(1) {
    $3 = (($nums) + ($i$01<<2)|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = ($4|0)>(0);
    if ($5) {
     $6 = (($4) + ($a$03))|0;
     $7 = ($6|0)>($8|0);
     $$na$0 = $7 ? $6 : $na$04;
     $twotoi$0$n$0 = $7 ? $twotoi$02 : $n$05;
     $a$1 = $6;$n$1 = $twotoi$0$n$0;$na$1 = $$na$0;
    } else {
     $a$1 = $a$03;$n$1 = $n$05;$na$1 = $na$04;
    }
    $9 = ($a$1|0)==($2|0);
    if ($9) {
     $n$2 = $n$1;$na$2 = $na$1;
     break L1;
    }
    $10 = (($i$01) + 1)|0;
    $11 = $twotoi$02 << 1;
    $12 = (($11|0) / 2)&-1;
    $13 = HEAP32[$narray>>2]|0;
    $14 = ($12|0)<($13|0);
    if ($14) {
     $8 = $12;$a$03 = $a$1;$i$01 = $10;$n$05 = $n$1;$na$04 = $na$1;$twotoi$02 = $11;
    } else {
     $n$2 = $n$1;$na$2 = $na$1;
     break;
    }
   }
  } else {
   $n$2 = 0;$na$2 = 0;
  }
 } while(0);
 HEAP32[$narray>>2] = $n$2;
 STACKTOP = sp;return ($na$2|0);
}
function _arrayindex($key) {
 $key = $key|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $u$sroa$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $u$sroa$0 = sp;
 $0 = (($key) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = +HEAPF64[$key>>3];
  $4 = $3 + 6755399441055744.0;
  HEAPF64[$u$sroa$0>>3] = $4;
  $5 = HEAP32[$u$sroa$0>>2]|0;
  $6 = (+($5|0));
  $7 = $6 == $3;
  if ($7) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _luaopen_table($L) {
 $L = $L|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_createtable($L,0,7);
 _luaL_setfuncs($L,10048,0);
 _lua_getfield($L,-1,10112);
 _lua_setglobal($L,10112);
 STACKTOP = sp;return 1;
}
function _tconcat($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $exitcond = 0, $i$0$lcssa2 = 0, $i$01 = 0, $lsep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $b = sp + 8|0;
 $lsep = sp;
 $0 = (_luaL_optlstring($L,2,10168,$lsep)|0);
 _luaL_checktype($L,1,5);
 $1 = (_luaL_optinteger($L,3,1)|0);
 $2 = (_lua_type($L,4)|0);
 $3 = ($2|0)<(1);
 if ($3) {
  $4 = (_luaL_len($L,1)|0);
  $7 = $4;
 } else {
  $5 = (_luaL_checkinteger($L,4)|0);
  $7 = $5;
 }
 _luaL_buffinit($L,$b);
 $6 = ($1|0)<($7|0);
 if ($6) {
  $i$01 = $1;
  while(1) {
   _addfield($L,$b,$i$01);
   $8 = HEAP32[$lsep>>2]|0;
   _luaL_addlstring($b,$0,$8);
   $9 = (($i$01) + 1)|0;
   $exitcond = ($9|0)==($7|0);
   if ($exitcond) {
    $i$0$lcssa2 = $7;
    break;
   } else {
    $i$01 = $9;
   }
  }
 } else {
  $10 = ($1|0)==($7|0);
  if ($10) {
   $i$0$lcssa2 = $1;
  } else {
   _luaL_pushresult($b);
   STACKTOP = sp;return 1;
  }
 }
 _addfield($L,$b,$i$0$lcssa2);
 _luaL_pushresult($b);
 STACKTOP = sp;return 1;
}
function _maxn($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max$0$ph2 = 0.0, $max$0$ph3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 _lua_pushnil($L);
 $0 = (_lua_next($L,1)|0);
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $max$0$ph2 = 0.0;
  } else {
   $max$0$ph3 = 0.0;
   while(1) {
    while(1) {
     _lua_settop($L,-2);
     $2 = (_lua_type($L,-1)|0);
     $3 = ($2|0)==(3);
     if ($3) {
      $4 = (+_lua_tonumberx($L,-1,0));
      $5 = $4 > $max$0$ph3;
      if ($5) {
       break;
      }
     }
     $6 = (_lua_next($L,1)|0);
     $7 = ($6|0)==(0);
     if ($7) {
      $max$0$ph2 = $max$0$ph3;
      break L1;
     }
    }
    $8 = (_lua_next($L,1)|0);
    $9 = ($8|0)==(0);
    if ($9) {
     $max$0$ph2 = $4;
     break;
    } else {
     $max$0$ph3 = $4;
    }
   }
  }
 } while(0);
 _lua_pushnumber($L,$max$0$ph2);
 STACKTOP = sp;return 1;
}
function _tinsert($L) {
 $L = $L|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $or$cond = 0, $pos$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 $1 = (($0) + 1)|0;
 $2 = (_lua_gettop($L)|0);
 if ((($2|0) == 2)) {
  $pos$0 = $1;
 } else if ((($2|0) == 3)) {
  label = 2;
 } else {
  $9 = (_luaL_error($L,10280,$vararg_buffer)|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 2) {
  $3 = (_luaL_checkinteger($L,2)|0);
  $4 = ($3|0)<(1);
  $5 = ($3|0)>($1|0);
  $or$cond = $4 | $5;
  if ($or$cond) {
   (_luaL_argerror($L,2,10216)|0);
  }
  $6 = ($0|0)<($3|0);
  if ($6) {
   $pos$0 = $3;
  } else {
   $i$01 = $1;
   while(1) {
    $7 = (($i$01) + -1)|0;
    _lua_rawgeti($L,1,$7);
    _lua_rawseti($L,1,$i$01);
    $8 = ($7|0)>($3|0);
    if ($8) {
     $i$01 = $7;
    } else {
     $pos$0 = $3;
     break;
    }
   }
  }
 }
 _lua_rawseti($L,1,$pos$0);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _pack($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_gettop($L)|0);
 _lua_createtable($L,$0,1);
 _lua_pushinteger($L,$0);
 _lua_setfield($L,-2,10272);
 $1 = ($0|0)>(0);
 if (!($1)) {
  STACKTOP = sp;return 1;
 }
 _lua_pushvalue($L,1);
 _lua_rawseti($L,-2,1);
 _lua_replace($L,1);
 $2 = ($0|0)>(1);
 if ($2) {
  $i$01 = $0;
 } else {
  STACKTOP = sp;return 1;
 }
 while(1) {
  _lua_rawseti($L,1,$i$01);
  $3 = (($i$01) + -1)|0;
  $4 = ($3|0)>(1);
  if ($4) {
   $i$01 = $3;
  } else {
   break;
  }
 }
 STACKTOP = sp;return 1;
}
function _unpack($L) {
 $L = $L|0;
 var $$0 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_optinteger($L,2,1)|0);
 $1 = (_lua_type($L,3)|0);
 $2 = ($1|0)<(1);
 if ($2) {
  $3 = (_luaL_len($L,1)|0);
  $6 = $3;
 } else {
  $4 = (_luaL_checkinteger($L,3)|0);
  $6 = $4;
 }
 $5 = ($0|0)>($6|0);
 if ($5) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($6) - ($0))|0;
 $8 = (($7) + 1)|0;
 $9 = ($7|0)<(0);
 if (!($9)) {
  $10 = (_lua_checkstack($L,$8)|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   _lua_rawgeti($L,1,$0);
   $13 = ($0|0)<($6|0);
   if ($13) {
    $$in = $0;
   } else {
    $$0 = $8;
    STACKTOP = sp;return ($$0|0);
   }
   while(1) {
    $14 = (($$in) + 1)|0;
    _lua_rawgeti($L,1,$14);
    $exitcond = ($14|0)==($6|0);
    if ($exitcond) {
     $$0 = $8;
     break;
    } else {
     $$in = $14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 }
 $12 = (_luaL_error($L,10240,$vararg_buffer)|0);
 $$0 = $12;
 STACKTOP = sp;return ($$0|0);
}
function _tremove($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $exitcond = 0, $or$cond = 0, $pos$0$lcssa = 0, $pos$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 $1 = (_luaL_optinteger($L,2,$0)|0);
 $2 = ($1|0)==($0|0);
 if (!($2)) {
  $3 = ($1|0)<(1);
  $4 = (($0) + 1)|0;
  $5 = ($1|0)>($4|0);
  $or$cond = $3 | $5;
  if ($or$cond) {
   (_luaL_argerror($L,1,10216)|0);
  }
 }
 _lua_rawgeti($L,1,$1);
 $6 = ($1|0)<($0|0);
 if ($6) {
  $pos$02 = $1;
 } else {
  $pos$0$lcssa = $1;
  _lua_pushnil($L);
  _lua_rawseti($L,1,$pos$0$lcssa);
  STACKTOP = sp;return 1;
 }
 while(1) {
  $7 = (($pos$02) + 1)|0;
  _lua_rawgeti($L,1,$7);
  _lua_rawseti($L,1,$pos$02);
  $exitcond = ($7|0)==($0|0);
  if ($exitcond) {
   $pos$0$lcssa = $0;
   break;
  } else {
   $pos$02 = $7;
  }
 }
 _lua_pushnil($L);
 _lua_rawseti($L,1,$pos$0$lcssa);
 STACKTOP = sp;return 1;
}
function _sort($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _luaL_checktype($L,1,5);
 $0 = (_luaL_len($L,1)|0);
 _luaL_checkstack($L,40,10168);
 $1 = (_lua_type($L,2)|0);
 $2 = ($1|0)<(1);
 if (!($2)) {
  _luaL_checktype($L,2,6);
 }
 _lua_settop($L,2);
 _auxsort($L,1,$0);
 STACKTOP = sp;return 0;
}
function _auxsort($L,$l,$u) {
 $L = $L|0;
 $l = $l|0;
 $u = $u|0;
 var $$$01 = 0, $$0$i$0 = 0, $$01$ = 0, $$018 = 0, $$09 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$0$$0 = 0, $i$0$lcssa = 0, $i$0$ph = 0, $j$0$ph = 0, $j$1$lcssa = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp;
 $0 = ($l|0)<($u|0);
 if ($0) {
  $$018 = $l;$$09 = $u;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  _lua_rawgeti($L,1,$$018);
  _lua_rawgeti($L,1,$$09);
  $1 = (_sort_comp($L,-1,-2)|0);
  $2 = ($1|0)==(0);
  if ($2) {
   _lua_settop($L,-3);
  } else {
   _set2($L,$$018,$$09);
  }
  $3 = (($$09) - ($$018))|0;
  $4 = ($3|0)==(1);
  if ($4) {
   label = 24;
   break;
  }
  $5 = (($$09) + ($$018))|0;
  $6 = (($5|0) / 2)&-1;
  _lua_rawgeti($L,1,$6);
  _lua_rawgeti($L,1,$$018);
  $7 = (_sort_comp($L,-2,-1)|0);
  $8 = ($7|0)==(0);
  do {
   if ($8) {
    _lua_settop($L,-2);
    _lua_rawgeti($L,1,$$09);
    $9 = (_sort_comp($L,-1,-2)|0);
    $10 = ($9|0)==(0);
    if ($10) {
     _lua_settop($L,-3);
     break;
    } else {
     _set2($L,$6,$$09);
     break;
    }
   } else {
    _set2($L,$6,$$018);
   }
  } while(0);
  $11 = ($3|0)==(2);
  if ($11) {
   label = 24;
   break;
  }
  _lua_rawgeti($L,1,$6);
  _lua_pushvalue($L,-1);
  $12 = (($$09) + -1)|0;
  _lua_rawgeti($L,1,$12);
  _set2($L,$6,$12);
  $i$0$ph = $$018;$j$0$ph = $12;
  while(1) {
   $13 = (($i$0$ph) + 1)|0;
   _lua_rawgeti($L,1,$13);
   $14 = (_sort_comp($L,-1,-2)|0);
   $15 = ($14|0)==(0);
   if ($15) {
    $$lcssa4 = $13;$i$0$lcssa = $i$0$ph;
   } else {
    $19 = $13;
    while(1) {
     $20 = ($19|0)<($$09|0);
     if (!($20)) {
      (_luaL_error($L,10176,$vararg_buffer1)|0);
     }
     _lua_settop($L,-2);
     $21 = (($19) + 1)|0;
     _lua_rawgeti($L,1,$21);
     $22 = (_sort_comp($L,-1,-2)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $$lcssa4 = $21;$i$0$lcssa = $19;
      break;
     } else {
      $19 = $21;
     }
    }
   }
   $16 = (($j$0$ph) + -1)|0;
   _lua_rawgeti($L,1,$16);
   $17 = (_sort_comp($L,-3,-1)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$lcssa = $16;$j$1$lcssa = $j$0$ph;
   } else {
    $24 = $16;
    while(1) {
     $25 = ($24|0)>($$018|0);
     if (!($25)) {
      (_luaL_error($L,10176,$vararg_buffer1)|0);
     }
     _lua_settop($L,-2);
     $26 = (($24) + -1)|0;
     _lua_rawgeti($L,1,$26);
     $27 = (_sort_comp($L,-3,-1)|0);
     $28 = ($27|0)==(0);
     if ($28) {
      $$lcssa = $26;$j$1$lcssa = $24;
      break;
     } else {
      $24 = $26;
     }
    }
   }
   $29 = ($j$1$lcssa|0)>($$lcssa4|0);
   if (!($29)) {
    break;
   }
   _set2($L,$$lcssa4,$$lcssa);
   $i$0$ph = $$lcssa4;$j$0$ph = $$lcssa;
  }
  _lua_settop($L,-4);
  _lua_rawgeti($L,1,$12);
  _lua_rawgeti($L,1,$$lcssa4);
  _set2($L,$12,$$lcssa4);
  $30 = (($$lcssa4) - ($$018))|0;
  $31 = (($$09) - ($$lcssa4))|0;
  $32 = ($30|0)<($31|0);
  $33 = (($i$0$lcssa) + 2)|0;
  $$$01 = $32 ? $33 : $$018;
  $$0$i$0 = $32 ? $$09 : $i$0$lcssa;
  $i$0$$0 = $32 ? $i$0$lcssa : $$09;
  $$01$ = $32 ? $$018 : $33;
  _auxsort($L,$$01$,$i$0$$0);
  $34 = ($$$01|0)<($$0$i$0|0);
  if ($34) {
   $$018 = $$$01;$$09 = $$0$i$0;
  } else {
   label = 24;
   break;
  }
 }
 if ((label|0) == 24) {
  STACKTOP = sp;return;
 }
}
function _sort_comp($L,$a,$b) {
 $L = $L|0;
 $a = $a|0;
 $b = $b|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_lua_type($L,2)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = (_lua_compare($L,$a,$b,1)|0);
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 } else {
  _lua_pushvalue($L,2);
  $2 = (($a) + -1)|0;
  _lua_pushvalue($L,$2);
  $3 = (($b) + -2)|0;
  _lua_pushvalue($L,$3);
  _lua_callk($L,2,1,0,0);
  $4 = (_lua_toboolean($L,-1)|0);
  _lua_settop($L,-2);
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _set2($L,$i,$j) {
 $L = $L|0;
 $i = $i|0;
 $j = $j|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _lua_rawseti($L,1,$i);
 _lua_rawseti($L,1,$j);
 STACKTOP = sp;return;
}
function _addfield($L,$b,$i) {
 $L = $L|0;
 $b = $b|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _lua_rawgeti($L,1,$i);
 $0 = (_lua_isstring($L,-1)|0);
 $1 = ($0|0)==(0);
 if (!($1)) {
  _luaL_addvalue($b);
  STACKTOP = sp;return;
 }
 $2 = (_lua_type($L,-1)|0);
 $3 = (_lua_typename($L,$2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $i;
 (_luaL_error($L,10320,$vararg_buffer)|0);
 _luaL_addvalue($b);
 STACKTOP = sp;return;
}
function _luaT_init($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 12|0);
 $i$01 = 0;
 while(1) {
  $1 = (10536 + ($i$01<<2)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = (_luaS_new($L,$2)|0);
  $4 = HEAP32[$0>>2]|0;
  $5 = ((($4) + ($i$01<<2)|0) + 184|0);
  HEAP32[$5>>2] = $3;
  $6 = HEAP32[$0>>2]|0;
  $7 = ((($6) + ($i$01<<2)|0) + 184|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 5|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 | 32;
  $13 = $12&255;
  HEAP8[$9>>0] = $13;
  $14 = (($i$01) + 1)|0;
  $exitcond = ($14|0)==(17);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $14;
  }
 }
 STACKTOP = sp;return;
}
function _luaT_gettm($events,$event,$ename) {
 $events = $events|0;
 $event = $event|0;
 $ename = $ename|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaH_getstr($events,$ename)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = 1 << $event;
 $5 = (($events) + 6|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 | $4;
 $9 = $8&255;
 HEAP8[$5>>0] = $9;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _luaT_gettmbyobj($L,$o,$event) {
 $L = $L|0;
 $o = $o|0;
 $event = $event|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $mt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($o) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 if ((($2|0) == 7)) {
  $6 = HEAP32[$o>>2]|0;
  $7 = (($6) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $mt$0 = $8;
 } else if ((($2|0) == 5)) {
  $3 = HEAP32[$o>>2]|0;
  $4 = (($3) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $mt$0 = $5;
 } else {
  $9 = (($L) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($10) + ($2<<2)|0) + 252|0);
  $12 = HEAP32[$11>>2]|0;
  $mt$0 = $12;
 }
 $13 = ($mt$0|0)==(0|0);
 if ($13) {
  $19 = 7144;
  STACKTOP = sp;return ($19|0);
 }
 $14 = (($L) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($15) + ($event<<2)|0) + 184|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_luaH_getstr($mt$0,$17)|0);
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function _luaU_undump($L,$Z,$buff,$name) {
 $L = $L|0;
 $Z = $Z|0;
 $buff = $buff|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $S = 0, $cl$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $S = sp;
 $0 = HEAP8[$name>>0]|0;
 if ((($0<<24>>24) == 27)) {
  $3 = (($S) + 12|0);
  HEAP32[$3>>2] = 10760;
 } else if ((($0<<24>>24) == 61) | (($0<<24>>24) == 64)) {
  $1 = (($name) + 1|0);
  $2 = (($S) + 12|0);
  HEAP32[$2>>2] = $1;
 } else {
  $4 = (($S) + 12|0);
  HEAP32[$4>>2] = $name;
 }
 HEAP32[$S>>2] = $L;
 $5 = (($S) + 4|0);
 HEAP32[$5>>2] = $Z;
 $6 = (($S) + 8|0);
 HEAP32[$6>>2] = $buff;
 _LoadHeader($S);
 $7 = (_luaF_newLclosure($L,1)|0);
 $8 = (($L) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = $7;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = 70;
 $11 = HEAP32[$8>>2]|0;
 $12 = (($11) + 16|0);
 HEAP32[$8>>2] = $12;
 $13 = (($L) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14;
 $16 = $12;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)<(16);
 if ($18) {
  _luaD_growstack($L,0);
 }
 $19 = (_luaF_newproto($L)|0);
 $20 = (($7) + 12|0);
 HEAP32[$20>>2] = $19;
 _LoadFunction($S,$19);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 if ($24) {
  $cl$0 = $7;
  STACKTOP = sp;return ($cl$0|0);
 }
 $25 = (_luaF_newLclosure($L,$23)|0);
 $26 = (($25) + 12|0);
 HEAP32[$26>>2] = $21;
 $27 = HEAP32[$8>>2]|0;
 $28 = (($27) + -16|0);
 HEAP32[$28>>2] = $25;
 $29 = (($27) + -8|0);
 HEAP32[$29>>2] = 70;
 $cl$0 = $25;
 STACKTOP = sp;return ($cl$0|0);
}
function _LoadHeader($S) {
 $S = $S|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $h = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $h = sp + 18|0;
 $s = sp;
 _luaU_header($h);
 $0 = HEAP8[$h>>0]|0;
 HEAP8[$s>>0] = $0;
 $1 = (($s) + 1|0);
 _LoadBlock($S,$1,17);
 $2 = (_memcmp($h,$s,18)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (_memcmp($h,$s,4)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  _error($S,10848);
  // unreachable;
 }
 $6 = (_memcmp($h,$s,6)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  _error($S,10856);
  // unreachable;
 }
 $8 = (_memcmp($h,$s,12)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  _error($S,10832);
  // unreachable;
 } else {
  _error($S,10880);
  // unreachable;
 }
}
function _LoadFunction($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_LoadInt($S)|0);
 $1 = (($f) + 64|0);
 HEAP32[$1>>2] = $0;
 $2 = (_LoadInt($S)|0);
 $3 = (($f) + 68|0);
 HEAP32[$3>>2] = $2;
 $4 = (_LoadChar($S)|0);
 $5 = $4&255;
 $6 = (($f) + 76|0);
 HEAP8[$6>>0] = $5;
 $7 = (_LoadChar($S)|0);
 $8 = $7&255;
 $9 = (($f) + 77|0);
 HEAP8[$9>>0] = $8;
 $10 = (_LoadChar($S)|0);
 $11 = $10&255;
 $12 = (($f) + 78|0);
 HEAP8[$12>>0] = $11;
 _LoadCode($S,$f);
 _LoadConstants($S,$f);
 _LoadUpvalues($S,$f);
 _LoadDebug($S,$f);
 STACKTOP = sp;return;
}
function _luaU_header($h) {
 $h = $h|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$h>>0]=1635077147&255;HEAP8[$h+1>>0]=(1635077147>>8)&255;HEAP8[$h+2>>0]=(1635077147>>16)&255;HEAP8[$h+3>>0]=1635077147>>24;
 $0 = (($h) + 4|0);
 $1 = (($h) + 5|0);
 HEAP8[$0>>0] = 82;
 $2 = (($h) + 6|0);
 HEAP8[$1>>0] = 0;
 $3 = (($h) + 7|0);
 HEAP8[$2>>0] = 1;
 $4 = (($h) + 8|0);
 HEAP8[$3>>0] = 4;
 $5 = (($h) + 9|0);
 HEAP8[$4>>0] = 4;
 $6 = (($h) + 10|0);
 HEAP8[$5>>0] = 4;
 $7 = (($h) + 11|0);
 HEAP8[$6>>0] = 8;
 $8 = (($h) + 12|0);
 HEAP8[$7>>0] = 0;
 ;HEAP8[$8+0>>0]=HEAP8[10776+0>>0]|0;HEAP8[$8+1>>0]=HEAP8[10776+1>>0]|0;HEAP8[$8+2>>0]=HEAP8[10776+2>>0]|0;HEAP8[$8+3>>0]=HEAP8[10776+3>>0]|0;HEAP8[$8+4>>0]=HEAP8[10776+4>>0]|0;HEAP8[$8+5>>0]=HEAP8[10776+5>>0]|0;
 STACKTOP = sp;return;
}
function _LoadInt($S) {
 $S = $S|0;
 var $0 = 0, $1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 _LoadBlock($S,$x,4);
 $0 = HEAP32[$x>>2]|0;
 $1 = ($0|0)<(0);
 if ($1) {
  _error($S,10832);
  // unreachable;
 } else {
  STACKTOP = sp;return ($0|0);
 }
 return 0|0;
}
function _LoadChar($S) {
 $S = $S|0;
 var $0 = 0, $1 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 _LoadBlock($S,$x,1);
 $0 = HEAP8[$x>>0]|0;
 $1 = $0 << 24 >> 24;
 STACKTOP = sp;return ($1|0);
}
function _LoadCode($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_LoadInt($S)|0);
 $1 = (($0) + 1)|0;
 $2 = ($1>>>0)>(1073741823);
 $3 = HEAP32[$S>>2]|0;
 if ($2) {
  _luaM_toobig($3);
  // unreachable;
 } else {
  $4 = $0 << 2;
  $5 = (_luaM_realloc_($3,0,0,$4)|0);
  $6 = (($f) + 12|0);
  HEAP32[$6>>2] = $5;
  $7 = (($f) + 48|0);
  HEAP32[$7>>2] = $0;
  $8 = HEAP32[$6>>2]|0;
  _LoadBlock($S,$8,$4);
  STACKTOP = sp;return;
 }
}
function _LoadConstants($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond12 = 0, $exitcond13 = 0, $exitcond14 = 0, $i$09 = 0, $i$16 = 0, $i$22 = 0, $i$31 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_LoadInt($S)|0);
 $1 = (($0) + 1)|0;
 $2 = ($1>>>0)>(268435455);
 $3 = HEAP32[$S>>2]|0;
 if ($2) {
  _luaM_toobig($3);
  // unreachable;
 }
 $4 = $0 << 4;
 $5 = (_luaM_realloc_($3,0,0,$4)|0);
 $6 = (($f) + 8|0);
 HEAP32[$6>>2] = $5;
 $7 = (($f) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)>(0);
 if ($8) {
  $9 = HEAP32[$6>>2]|0;
  $i$09 = 0;
  while(1) {
   $11 = ((($9) + ($i$09<<4)|0) + 8|0);
   HEAP32[$11>>2] = 0;
   $12 = (($i$09) + 1)|0;
   $exitcond14 = ($12|0)==($0|0);
   if ($exitcond14) {
    break;
   } else {
    $i$09 = $12;
   }
  }
  $10 = ($0|0)>(0);
  if ($10) {
   $i$16 = 0;
   while(1) {
    $13 = HEAP32[$6>>2]|0;
    $14 = (($13) + ($i$16<<4)|0);
    $15 = (_LoadChar($S)|0);
    if ((($15|0) == 0)) {
     $16 = ((($13) + ($i$16<<4)|0) + 8|0);
     HEAP32[$16>>2] = 0;
    } else if ((($15|0) == 3)) {
     $19 = (+_LoadNumber($S));
     HEAPF64[$14>>3] = $19;
     $20 = ((($13) + ($i$16<<4)|0) + 8|0);
     HEAP32[$20>>2] = 3;
    } else if ((($15|0) == 1)) {
     $17 = (_LoadChar($S)|0);
     HEAP32[$14>>2] = $17;
     $18 = ((($13) + ($i$16<<4)|0) + 8|0);
     HEAP32[$18>>2] = 1;
    } else if ((($15|0) == 4)) {
     $21 = (_LoadString($S)|0);
     HEAP32[$14>>2] = $21;
     $22 = (($21) + 4|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23&255;
     $25 = $24 | 64;
     $26 = ((($13) + ($i$16<<4)|0) + 8|0);
     HEAP32[$26>>2] = $25;
    }
    $27 = (($i$16) + 1)|0;
    $exitcond13 = ($27|0)==($0|0);
    if ($exitcond13) {
     break;
    } else {
     $i$16 = $27;
    }
   }
  }
 }
 $28 = (_LoadInt($S)|0);
 $29 = (($28) + 1)|0;
 $30 = ($29>>>0)>(1073741823);
 $31 = HEAP32[$S>>2]|0;
 if ($30) {
  _luaM_toobig($31);
  // unreachable;
 }
 $32 = $28 << 2;
 $33 = (_luaM_realloc_($31,0,0,$32)|0);
 $34 = (($f) + 16|0);
 HEAP32[$34>>2] = $33;
 $35 = (($f) + 56|0);
 HEAP32[$35>>2] = $28;
 $36 = ($28|0)>(0);
 if ($36) {
  $i$22 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $38 = HEAP32[$34>>2]|0;
  $39 = (($38) + ($i$22<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = (($i$22) + 1)|0;
  $exitcond12 = ($40|0)==($28|0);
  if ($exitcond12) {
   break;
  } else {
   $i$22 = $40;
  }
 }
 $37 = ($28|0)>(0);
 if ($37) {
  $i$31 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $41 = HEAP32[$S>>2]|0;
  $42 = (_luaF_newproto($41)|0);
  $43 = HEAP32[$34>>2]|0;
  $44 = (($43) + ($i$31<<2)|0);
  HEAP32[$44>>2] = $42;
  $45 = HEAP32[$34>>2]|0;
  $46 = (($45) + ($i$31<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  _LoadFunction($S,$47);
  $48 = (($i$31) + 1)|0;
  $exitcond = ($48|0)==($28|0);
  if ($exitcond) {
   break;
  } else {
   $i$31 = $48;
  }
 }
 STACKTOP = sp;return;
}
function _LoadUpvalues($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $exitcond = 0, $exitcond5 = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_LoadInt($S)|0);
 $1 = (($0) + 1)|0;
 $2 = ($1>>>0)>(536870911);
 $3 = HEAP32[$S>>2]|0;
 if ($2) {
  _luaM_toobig($3);
  // unreachable;
 }
 $4 = $0 << 3;
 $5 = (_luaM_realloc_($3,0,0,$4)|0);
 $6 = (($f) + 28|0);
 HEAP32[$6>>2] = $5;
 $7 = (($f) + 40|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)>(0);
 if ($8) {
  $i$02 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $10 = HEAP32[$6>>2]|0;
  $11 = (($10) + ($i$02<<3)|0);
  HEAP32[$11>>2] = 0;
  $12 = (($i$02) + 1)|0;
  $exitcond5 = ($12|0)==($0|0);
  if ($exitcond5) {
   break;
  } else {
   $i$02 = $12;
  }
 }
 $9 = ($0|0)>(0);
 if ($9) {
  $i$11 = 0;
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $13 = (_LoadChar($S)|0);
  $14 = $13&255;
  $15 = HEAP32[$6>>2]|0;
  $16 = ((($15) + ($i$11<<3)|0) + 4|0);
  HEAP8[$16>>0] = $14;
  $17 = (_LoadChar($S)|0);
  $18 = $17&255;
  $19 = HEAP32[$6>>2]|0;
  $20 = ((($19) + ($i$11<<3)|0) + 5|0);
  HEAP8[$20>>0] = $18;
  $21 = (($i$11) + 1)|0;
  $exitcond = ($21|0)==($0|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $21;
  }
 }
 STACKTOP = sp;return;
}
function _LoadDebug($S,$f) {
 $S = $S|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $exitcond8 = 0, $exitcond9 = 0, $i$05 = 0, $i$12 = 0, $i$21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_LoadString($S)|0);
 $1 = (($f) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = (_LoadInt($S)|0);
 $3 = (($2) + 1)|0;
 $4 = ($3>>>0)>(1073741823);
 $5 = HEAP32[$S>>2]|0;
 if ($4) {
  _luaM_toobig($5);
  // unreachable;
 }
 $6 = $2 << 2;
 $7 = (_luaM_realloc_($5,0,0,$6)|0);
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $7;
 $9 = (($f) + 52|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[$8>>2]|0;
 _LoadBlock($S,$10,$6);
 $11 = (_LoadInt($S)|0);
 $12 = (($11) + 1)|0;
 $13 = ($12>>>0)>(357913941);
 $14 = HEAP32[$S>>2]|0;
 if ($13) {
  _luaM_toobig($14);
  // unreachable;
 }
 $15 = ($11*12)|0;
 $16 = (_luaM_realloc_($14,0,0,$15)|0);
 $17 = (($f) + 24|0);
 HEAP32[$17>>2] = $16;
 $18 = (($f) + 60|0);
 HEAP32[$18>>2] = $11;
 $19 = ($11|0)>(0);
 if ($19) {
  $i$05 = 0;
  while(1) {
   $21 = HEAP32[$17>>2]|0;
   $22 = (($21) + (($i$05*12)|0)|0);
   HEAP32[$22>>2] = 0;
   $23 = (($i$05) + 1)|0;
   $exitcond9 = ($23|0)==($11|0);
   if ($exitcond9) {
    break;
   } else {
    $i$05 = $23;
   }
  }
  $20 = ($11|0)>(0);
  if ($20) {
   $i$12 = 0;
   while(1) {
    $24 = (_LoadString($S)|0);
    $25 = HEAP32[$17>>2]|0;
    $26 = (($25) + (($i$12*12)|0)|0);
    HEAP32[$26>>2] = $24;
    $27 = (_LoadInt($S)|0);
    $28 = HEAP32[$17>>2]|0;
    $29 = ((($28) + (($i$12*12)|0)|0) + 4|0);
    HEAP32[$29>>2] = $27;
    $30 = (_LoadInt($S)|0);
    $31 = HEAP32[$17>>2]|0;
    $32 = ((($31) + (($i$12*12)|0)|0) + 8|0);
    HEAP32[$32>>2] = $30;
    $33 = (($i$12) + 1)|0;
    $exitcond8 = ($33|0)==($11|0);
    if ($exitcond8) {
     break;
    } else {
     $i$12 = $33;
    }
   }
  }
 }
 $34 = (_LoadInt($S)|0);
 $35 = ($34|0)>(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = (($f) + 28|0);
 $i$21 = 0;
 while(1) {
  $37 = (_LoadString($S)|0);
  $38 = HEAP32[$36>>2]|0;
  $39 = (($38) + ($i$21<<3)|0);
  HEAP32[$39>>2] = $37;
  $40 = (($i$21) + 1)|0;
  $exitcond = ($40|0)==($34|0);
  if ($exitcond) {
   break;
  } else {
   $i$21 = $40;
  }
 }
 STACKTOP = sp;return;
}
function _LoadString($S) {
 $S = $S|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $size = sp;
 _LoadBlock($S,$size,4);
 $0 = HEAP32[$size>>2]|0;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP32[$S>>2]|0;
 $3 = (($S) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_luaZ_openspace($2,$4,$0)|0);
 $6 = HEAP32[$size>>2]|0;
 _LoadBlock($S,$5,$6);
 $7 = HEAP32[$S>>2]|0;
 $8 = HEAP32[$size>>2]|0;
 $9 = (($8) + -1)|0;
 $10 = (_luaS_newlstr($7,$5,$9)|0);
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _LoadBlock($S,$b,$size) {
 $S = $S|0;
 $b = $b|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($S) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_luaZ_read($1,$b,$size)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 } else {
  _error($S,10784);
  // unreachable;
 }
}
function _error($S,$why) {
 $S = $S|0;
 $why = $why|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$S>>2]|0;
 $1 = (($S) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $why;
 (_luaO_pushfstring($0,10800,$vararg_buffer)|0);
 $3 = HEAP32[$S>>2]|0;
 _luaD_throw($3,3);
 // unreachable;
}
function _LoadNumber($S) {
 $S = $S|0;
 var $0 = 0.0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $x = sp;
 _LoadBlock($S,$x,8);
 $0 = +HEAPF64[$x>>3];
 STACKTOP = sp;return (+$0);
}
function _luaV_tonumber($obj,$n) {
 $obj = $obj|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $num = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $num = sp;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $$0 = $obj;
 } else {
  $3 = $1 & 15;
  $4 = ($3|0)==(4);
  if ($4) {
   $5 = HEAP32[$obj>>2]|0;
   $6 = (($5) + 16|0);
   $7 = (($5) + 12|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (_luaO_str2d($6,$8,$num)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $$0 = 0;
   } else {
    $11 = +HEAPF64[$num>>3];
    HEAPF64[$n>>3] = $11;
    $12 = (($n) + 8|0);
    HEAP32[$12>>2] = 3;
    $$0 = $n;
   }
  } else {
   $$0 = 0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _luaV_tostring($L,$obj) {
 $L = $L|0;
 $obj = $obj|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $s = sp + 8|0;
 $0 = (($obj) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = +HEAPF64[$obj>>3];
 HEAPF64[tempDoublePtr>>3]=$3;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $4 = (_sprintf($s,10896,$vararg_buffer)|0);
 $5 = (_luaS_newlstr($L,$s,$4)|0);
 HEAP32[$obj>>2] = $5;
 $6 = (($5) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 | 64;
 HEAP32[$0>>2] = $9;
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_gettable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$06 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $loop$05 = 0, $tm$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($L) + 12|0);
 $$06 = $t;$loop$05 = 0;
 while(1) {
  $3 = (($$06) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(69);
  if ($5) {
   $6 = HEAP32[$$06>>2]|0;
   $7 = (_luaH_get($6,$key)|0);
   $8 = (($7) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    label = 8;
    break;
   }
   $11 = (($6) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 8;
    break;
   }
   $14 = (($12) + 6|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 1;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    label = 8;
    break;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 184|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_luaT_gettm($12,0,$20)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 8;
    break;
   } else {
    $tm$0 = $21;
   }
  } else {
   $35 = (_luaT_gettmbyobj($L,$$06,0)|0);
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    label = 10;
    break;
   } else {
    $tm$0 = $35;
   }
  }
  $39 = (($tm$0) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $40 & 15;
  $42 = ($41|0)==(6);
  $1 = (($loop$05) + 1)|0;
  if ($42) {
   label = 12;
   break;
  }
  $2 = ($1|0)<(100);
  if ($2) {
   $$06 = $tm$0;$loop$05 = $1;
  } else {
   label = 13;
   break;
  }
 }
 if ((label|0) == 8) {
  $23 = $7;
  $24 = $23;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($23) + 4)|0;
  $27 = $26;
  $28 = HEAP32[$27>>2]|0;
  $29 = $val;
  $30 = $29;
  HEAP32[$30>>2] = $25;
  $31 = (($29) + 4)|0;
  $32 = $31;
  HEAP32[$32>>2] = $28;
  $33 = HEAP32[$8>>2]|0;
  $34 = (($val) + 8|0);
  HEAP32[$34>>2] = $33;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  _luaG_typeerror($L,$$06,10904);
  // unreachable;
 }
 else if ((label|0) == 12) {
  _callTM($L,$tm$0,$$06,$key,$val,1);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 13) {
  _luaG_runerror($L,10912,$vararg_buffer);
  // unreachable;
 }
}
function _callTM($L,$f,$p1,$p2,$p3,$hasres) {
 $L = $L|0;
 $f = $f|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $p3 = $p3|0;
 $hasres = $hasres|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $p3;
 $3 = $1;
 $4 = (($2) - ($3))|0;
 $5 = (($L) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 16|0);
 HEAP32[$5>>2] = $7;
 $8 = $f;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($8) + 4)|0;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $6;
 $15 = $14;
 HEAP32[$15>>2] = $10;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = $13;
 $18 = (($f) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($6) + 8|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$5>>2]|0;
 $22 = (($21) + 16|0);
 HEAP32[$5>>2] = $22;
 $23 = $p1;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $21;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = (($p1) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($21) + 8|0);
 HEAP32[$35>>2] = $34;
 $36 = HEAP32[$5>>2]|0;
 $37 = (($36) + 16|0);
 HEAP32[$5>>2] = $37;
 $38 = $p2;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = $36;
 $45 = $44;
 HEAP32[$45>>2] = $40;
 $46 = (($44) + 4)|0;
 $47 = $46;
 HEAP32[$47>>2] = $43;
 $48 = (($p2) + 8|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (($36) + 8|0);
 HEAP32[$50>>2] = $49;
 $51 = ($hasres|0)==(0);
 $52 = HEAP32[$5>>2]|0;
 if ($51) {
  $53 = (($52) + 16|0);
  HEAP32[$5>>2] = $53;
  $54 = $p3;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $52;
  $61 = $60;
  HEAP32[$61>>2] = $56;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $59;
  $64 = (($p3) + 8|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = (($52) + 8|0);
  HEAP32[$66>>2] = $65;
  $67 = HEAP32[$5>>2]|0;
  $68 = (($hasres) + -4)|0;
  $69 = (($67) + ($68<<4)|0);
  $70 = (($L) + 16|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 18|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = $74 & 1;
  _luaD_call($L,$69,$hasres,$75);
  STACKTOP = sp;return;
 } else {
  $76 = (($hasres) + -4)|0;
  $77 = (($52) + ($76<<4)|0);
  $78 = (($L) + 16|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + 18|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 & 1;
  _luaD_call($L,$77,$hasres,$83);
  $84 = HEAP32[$0>>2]|0;
  $85 = (($84) + ($4)|0);
  $86 = HEAP32[$5>>2]|0;
  $87 = (($86) + -16|0);
  HEAP32[$5>>2] = $87;
  $88 = $87;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($88) + 4)|0;
  $92 = $91;
  $93 = HEAP32[$92>>2]|0;
  $94 = $85;
  $95 = $94;
  HEAP32[$95>>2] = $90;
  $96 = (($94) + 4)|0;
  $97 = $96;
  HEAP32[$97>>2] = $93;
  $98 = (($86) + -8|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum = (($4) + 8)|0;
  $100 = (($84) + ($$sum)|0);
  HEAP32[$100>>2] = $99;
  STACKTOP = sp;return;
 }
}
function _luaV_settable($L,$t,$key,$val) {
 $L = $L|0;
 $t = $t|0;
 $key = $key|0;
 $val = $val|0;
 var $$011 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $loop$010 = 0, $oldval$0 = 0, $tm$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($L) + 12|0);
 $$011 = $t;$loop$010 = 0;
 while(1) {
  $3 = (($$011) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(69);
  if ($5) {
   $6 = HEAP32[$$011>>2]|0;
   $7 = (_luaH_get($6,$key)|0);
   $8 = (($7) + 8|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $oldval$0 = $7;
    break;
   }
   $11 = (($6) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    label = 8;
    break;
   }
   $14 = (($12) + 6|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15 & 2;
   $17 = ($16<<24>>24)==(0);
   if (!($17)) {
    label = 8;
    break;
   }
   $18 = HEAP32[$0>>2]|0;
   $19 = (($18) + 188|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (_luaT_gettm($12,1,$20)|0);
   $22 = ($21|0)==(0|0);
   if ($22) {
    label = 8;
    break;
   } else {
    $tm$0 = $21;
   }
  } else {
   $51 = (_luaT_gettmbyobj($L,$$011,1)|0);
   $52 = (($51) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    label = 15;
    break;
   } else {
    $tm$0 = $51;
   }
  }
  $55 = (($tm$0) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $56 & 15;
  $58 = ($57|0)==(6);
  $1 = (($loop$010) + 1)|0;
  if ($58) {
   label = 17;
   break;
  }
  $2 = ($1|0)<(100);
  if ($2) {
   $$011 = $tm$0;$loop$010 = $1;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 8) {
  $23 = ($7|0)==(7144|0);
  if ($23) {
   $24 = (_luaH_newkey($L,$6,$key)|0);
   $oldval$0 = $24;
  } else {
   $oldval$0 = $7;
  }
 }
 else if ((label|0) == 15) {
  _luaG_typeerror($L,$$011,10904);
  // unreachable;
 }
 else if ((label|0) == 17) {
  _callTM($L,$tm$0,$$011,$key,$val,0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 18) {
  _luaG_runerror($L,10936,$vararg_buffer);
  // unreachable;
 }
 $25 = $val;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $oldval$0;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 $35 = (($val) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($oldval$0) + 8|0);
 HEAP32[$37>>2] = $36;
 $38 = (($6) + 6|0);
 HEAP8[$38>>0] = 0;
 $39 = HEAP32[$35>>2]|0;
 $40 = $39 & 64;
 $41 = ($40|0)==(0);
 if ($41) {
  STACKTOP = sp;return;
 }
 $42 = HEAP32[$val>>2]|0;
 $43 = (($42) + 5|0);
 $44 = HEAP8[$43>>0]|0;
 $45 = $44 & 3;
 $46 = ($45<<24>>24)==(0);
 if ($46) {
  STACKTOP = sp;return;
 }
 $47 = (($6) + 5|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48 & 4;
 $50 = ($49<<24>>24)==(0);
 if ($50) {
  STACKTOP = sp;return;
 }
 _luaC_barrierback_($L,$6);
 STACKTOP = sp;return;
}
function _luaV_lessthan($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $$lobit = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = (($r) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = +HEAPF64[$l>>3];
   $7 = +HEAPF64[$r>>3];
   $8 = $6 < $7;
   $9 = $8&1;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = $10 & 15;
 $12 = ($11|0)==(4);
 if ($12) {
  $13 = (($r) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 15;
  $16 = ($15|0)==(4);
  if ($16) {
   $17 = HEAP32[$l>>2]|0;
   $18 = HEAP32[$r>>2]|0;
   $19 = (_l_strcmp($17,$18)|0);
   $$lobit = $19 >>> 31;
   $$0 = $$lobit;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $20 = (_call_orderTM($L,$l,$r,13)|0);
 $21 = ($20|0)<(0);
 if ($21) {
  _luaG_ordererror($L,$l,$r);
  // unreachable;
 } else {
  $$0 = $20;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _l_strcmp($ls,$rs) {
 $ls = $ls|0;
 $rs = $rs|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $l$01 = 0, $ll$02 = 0, $lr$04 = 0, $r$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($ls) + 16|0);
 $1 = (($rs) + 16|0);
 $2 = (_strcoll($0,$1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (($rs) + 12|0);
 $5 = (($ls) + 12|0);
 $6 = HEAP32[$4>>2]|0;
 $7 = HEAP32[$5>>2]|0;
 $l$01 = $0;$ll$02 = $7;$lr$04 = $6;$r$03 = $1;
 while(1) {
  $8 = (_strlen(($l$01|0))|0);
  $9 = ($8|0)==($lr$04|0);
  $10 = ($8|0)==($ll$02|0);
  if ($9) {
   label = 4;
   break;
  }
  if ($10) {
   $$0 = -1;
   label = 7;
   break;
  }
  $13 = (($8) + 1)|0;
  $14 = (($l$01) + ($13)|0);
  $15 = (($ll$02) - ($13))|0;
  $16 = (($r$03) + ($13)|0);
  $17 = (($lr$04) - ($13))|0;
  $18 = (_strcoll($14,$16)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $l$01 = $14;$ll$02 = $15;$lr$04 = $17;$r$03 = $16;
  } else {
   $$0 = $18;
   label = 7;
   break;
  }
 }
 if ((label|0) == 4) {
  $11 = $10&1;
  $12 = $11 ^ 1;
  $$0 = $12;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _call_orderTM($L,$p1,$p2,$event) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_call_binTM($L,$p1,$p2,$1,$event)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $11 = 0;
 } else {
  $8 = ($6|0)==(1);
  if ($8) {
   $9 = HEAP32[$4>>2]|0;
   $phitmp = ($9|0)!=(0);
   $11 = $phitmp;
  } else {
   $11 = 1;
  }
 }
 $10 = $11&1;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_lessequal($L,$l,$r) {
 $L = $L|0;
 $l = $l|0;
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($l) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(3);
 if ($2) {
  $3 = (($r) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(3);
  if ($5) {
   $6 = +HEAPF64[$l>>3];
   $7 = +HEAPF64[$r>>3];
   $8 = $6 <= $7;
   $9 = $8&1;
   $$0 = $9;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = $10 & 15;
 $12 = ($11|0)==(4);
 if ($12) {
  $13 = (($r) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 15;
  $16 = ($15|0)==(4);
  if ($16) {
   $17 = HEAP32[$l>>2]|0;
   $18 = HEAP32[$r>>2]|0;
   $19 = (_l_strcmp($17,$18)|0);
   $20 = ($19|0)<(1);
   $21 = $20&1;
   $$0 = $21;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $22 = (_call_orderTM($L,$l,$r,14)|0);
 $23 = ($22|0)>(-1);
 if ($23) {
  $$0 = $22;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = (_call_orderTM($L,$r,$l,13)|0);
 $25 = ($24|0)<(0);
 if ($25) {
  _luaG_ordererror($L,$l,$r);
  // unreachable;
 }
 $26 = ($24|0)==(0);
 $27 = $26&1;
 $$0 = $27;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_equalobj_($L,$t1,$t2) {
 $L = $L|0;
 $t1 = $t1|0;
 $t2 = $t2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($t1) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 63;
 switch ($2|0) {
 case 0:  {
  $$0 = 1;
  break;
 }
 case 1:  {
  $7 = HEAP32[$t1>>2]|0;
  $8 = HEAP32[$t2>>2]|0;
  $9 = ($7|0)==($8|0);
  $10 = $9&1;
  $$0 = $10;
  break;
 }
 case 2:  {
  $11 = HEAP32[$t1>>2]|0;
  $12 = HEAP32[$t2>>2]|0;
  $13 = ($11|0)==($12|0);
  $14 = $13&1;
  $$0 = $14;
  break;
 }
 case 4:  {
  $19 = HEAP32[$t1>>2]|0;
  $20 = HEAP32[$t2>>2]|0;
  $21 = ($19|0)==($20|0);
  $22 = $21&1;
  $$0 = $22;
  break;
 }
 case 22:  {
  $15 = HEAP32[$t1>>2]|0;
  $16 = HEAP32[$t2>>2]|0;
  $17 = ($15|0)==($16|0);
  $18 = $17&1;
  $$0 = $18;
  break;
 }
 case 7:  {
  $26 = HEAP32[$t1>>2]|0;
  $27 = HEAP32[$t2>>2]|0;
  $28 = ($26|0)==($27|0);
  if ($28) {
   $$0 = 1;
  } else {
   $29 = ($L|0)==(0|0);
   if ($29) {
    $$0 = 0;
   } else {
    $30 = (($26) + 8|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($27) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (_get_equalTM($L,$31,$33)|0);
    $tm$0 = $34;
    label = 15;
   }
  }
  break;
 }
 case 20:  {
  $23 = HEAP32[$t1>>2]|0;
  $24 = HEAP32[$t2>>2]|0;
  $25 = (_luaS_eqlngstr($23,$24)|0);
  $$0 = $25;
  break;
 }
 case 5:  {
  $35 = HEAP32[$t1>>2]|0;
  $36 = HEAP32[$t2>>2]|0;
  $37 = ($35|0)==($36|0);
  if ($37) {
   $$0 = 1;
  } else {
   $38 = ($L|0)==(0|0);
   if ($38) {
    $$0 = 0;
   } else {
    $39 = (($35) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($36) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (_get_equalTM($L,$40,$42)|0);
    $tm$0 = $43;
    label = 15;
   }
  }
  break;
 }
 case 3:  {
  $3 = +HEAPF64[$t1>>3];
  $4 = +HEAPF64[$t2>>3];
  $5 = $3 == $4;
  $6 = $5&1;
  $$0 = $6;
  break;
 }
 default: {
  $44 = HEAP32[$t1>>2]|0;
  $45 = HEAP32[$t2>>2]|0;
  $46 = ($44|0)==($45|0);
  $47 = $46&1;
  $$0 = $47;
 }
 }
 if ((label|0) == 15) {
  $48 = ($tm$0|0)==(0|0);
  if ($48) {
   $$0 = 0;
  } else {
   $49 = (($L) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   _callTM($L,$tm$0,$t1,$t2,$50,1);
   $51 = HEAP32[$49>>2]|0;
   $52 = (($51) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)==(0);
   if ($54) {
    $58 = 0;
   } else {
    $55 = ($53|0)==(1);
    if ($55) {
     $56 = HEAP32[$51>>2]|0;
     $phitmp = ($56|0)!=(0);
     $58 = $phitmp;
    } else {
     $58 = 1;
    }
   }
   $57 = $58&1;
   $$0 = $57;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _get_equalTM($L,$mt1,$mt2) {
 $L = $L|0;
 $mt1 = $mt1|0;
 $mt2 = $mt2|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mt1|0)==(0|0);
 do {
  if ($0) {
   $$0 = 0;
  } else {
   $1 = (($mt1) + 6|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = $2 & 32;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $5 = (($L) + 12|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (($6) + 204|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (_luaT_gettm($mt1,5,$8)|0);
    $10 = ($9|0)==(0|0);
    if ($10) {
     $$0 = 0;
    } else {
     $11 = ($mt1|0)==($mt2|0);
     if ($11) {
      $$0 = $9;
     } else {
      $12 = ($mt2|0)==(0|0);
      if ($12) {
       $$0 = 0;
      } else {
       $13 = (($mt2) + 6|0);
       $14 = HEAP8[$13>>0]|0;
       $15 = $14 & 32;
       $16 = ($15<<24>>24)==(0);
       if ($16) {
        $17 = (($L) + 12|0);
        $18 = HEAP32[$17>>2]|0;
        $19 = (($18) + 204|0);
        $20 = HEAP32[$19>>2]|0;
        $21 = (_luaT_gettm($mt2,5,$20)|0);
        $22 = ($21|0)==(0|0);
        if ($22) {
         $$0 = 0;
        } else {
         $23 = (($9) + 8|0);
         $24 = HEAP32[$23>>2]|0;
         $25 = (($21) + 8|0);
         $26 = HEAP32[$25>>2]|0;
         $27 = ($24|0)==($26|0);
         if ($27) {
          $28 = (_luaV_equalobj_(0,$9,$21)|0);
          $29 = ($28|0)==(0);
          if (!($29)) {
           $$0 = $9;
           break;
          }
         }
         $$0 = 0;
        }
       } else {
        $$0 = 0;
       }
      }
     }
    }
   } else {
    $$0 = 0;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _luaV_concat($L,$total) {
 $L = $L|0;
 $total = $total|0;
 var $$0 = 0, $$neg = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $i$0$lcssa = 0, $i$04 = 0, $i$1 = 0, $n$0 = 0, $or$cond = 0, $tl$0$lcssa = 0, $tl$05 = 0, $tl$1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = (($L) + 8|0);
 $1 = (($L) + 12|0);
 $$0 = $total;
 L1: while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = (($2) + -32|0);
  $4 = (($2) + -24|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 15;
  $7 = ($6|0)==(4);
  $8 = ($5|0)==(3);
  $or$cond = $7 | $8;
  do {
   if ($or$cond) {
    $9 = (($2) + -16|0);
    $10 = (($2) + -8|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 15;
    $13 = ($12|0)==(4);
    if (!($13)) {
     $14 = (_luaV_tostring($L,$9)|0);
     $15 = ($14|0)==(0);
     if ($15) {
      label = 5;
      break;
     }
    }
    $19 = HEAP32[$9>>2]|0;
    $20 = (($19) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($21|0)==(0);
    $23 = HEAP32[$4>>2]|0;
    $24 = $23 & 15;
    $25 = ($24|0)==(4);
    if ($22) {
     if ($25) {
      $n$0 = 2;
      break;
     }
     (_luaV_tostring($L,$3)|0);
     $n$0 = 2;
     break;
    }
    if ($25) {
     $26 = HEAP32[$3>>2]|0;
     $27 = (($26) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(0);
     if ($29) {
      $30 = $9;
      $31 = $30;
      $32 = HEAP32[$31>>2]|0;
      $33 = (($30) + 4)|0;
      $34 = $33;
      $35 = HEAP32[$34>>2]|0;
      $36 = $3;
      $37 = $36;
      HEAP32[$37>>2] = $32;
      $38 = (($36) + 4)|0;
      $39 = $38;
      HEAP32[$39>>2] = $35;
      $40 = HEAP32[$10>>2]|0;
      HEAP32[$4>>2] = $40;
      $n$0 = 2;
      break;
     }
    }
    $41 = HEAP32[$9>>2]|0;
    $42 = (($41) + 12|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($$0|0)>(1);
    L16: do {
     if ($44) {
      $i$04 = 1;$tl$05 = $43;
      while(1) {
       $$sum = $i$04 ^ -1;
       $45 = (($2) + ($$sum<<4)|0);
       $46 = ((($2) + ($$sum<<4)|0) + 8|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = $47 & 15;
       $49 = ($48|0)==(4);
       if (!($49)) {
        $50 = (_luaV_tostring($L,$45)|0);
        $51 = ($50|0)==(0);
        if ($51) {
         $i$0$lcssa = $i$04;$tl$0$lcssa = $tl$05;
         break L16;
        }
       }
       $52 = HEAP32[$45>>2]|0;
       $53 = (($52) + 12|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (-3 - ($tl$05))|0;
       $56 = ($54>>>0)<($55>>>0);
       if (!($56)) {
        label = 17;
        break L1;
       }
       $57 = (($54) + ($tl$05))|0;
       $58 = (($i$04) + 1)|0;
       $59 = ($58|0)<($$0|0);
       if ($59) {
        $i$04 = $58;$tl$05 = $57;
       } else {
        $i$0$lcssa = $58;$tl$0$lcssa = $57;
        break;
       }
      }
     } else {
      $i$0$lcssa = 1;$tl$0$lcssa = $43;
     }
    } while(0);
    $60 = HEAP32[$1>>2]|0;
    $61 = (($60) + 144|0);
    $62 = (_luaZ_openspace($L,$61,$tl$0$lcssa)|0);
    $i$1 = $i$0$lcssa;$tl$1 = 0;
    while(1) {
     $63 = (0 - ($i$1))|0;
     $64 = (($2) + ($63<<4)|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) + 12|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (($62) + ($tl$1)|0);
     $69 = (($65) + 16|0);
     _memcpy(($68|0),($69|0),($67|0))|0;
     $70 = (($67) + ($tl$1))|0;
     $71 = (($i$1) + -1)|0;
     $72 = ($71|0)>(0);
     if ($72) {
      $i$1 = $71;$tl$1 = $70;
     } else {
      break;
     }
    }
    $73 = (0 - ($i$0$lcssa))|0;
    $74 = (($2) + ($73<<4)|0);
    $75 = (_luaS_newlstr($L,$62,$70)|0);
    HEAP32[$74>>2] = $75;
    $76 = (($75) + 4|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 | 64;
    $80 = ((($2) + ($73<<4)|0) + 8|0);
    HEAP32[$80>>2] = $79;
    $n$0 = $i$0$lcssa;
   } else {
    label = 5;
   }
  } while(0);
  if ((label|0) == 5) {
   label = 0;
   $16 = (($2) + -16|0);
   $17 = (_call_binTM($L,$3,$16,$3,15)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    label = 6;
    break;
   } else {
    $n$0 = 2;
   }
  }
  $$neg = (($$0) + 1)|0;
  $81 = (($$neg) - ($n$0))|0;
  $82 = HEAP32[$0>>2]|0;
  $83 = (1 - ($n$0))|0;
  $84 = (($82) + ($83<<4)|0);
  HEAP32[$0>>2] = $84;
  $85 = ($81|0)>(1);
  if ($85) {
   $$0 = $81;
  } else {
   label = 23;
   break;
  }
 }
 if ((label|0) == 6) {
  _luaG_concaterror($L,$3,$16);
  // unreachable;
 }
 else if ((label|0) == 17) {
  _luaG_runerror($L,10960,$vararg_buffer);
  // unreachable;
 }
 else if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _call_binTM($L,$p1,$p2,$res,$event) {
 $L = $L|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 $res = $res|0;
 $event = $event|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_luaT_gettmbyobj($L,$p1,$event)|0);
 $1 = (($0) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = (_luaT_gettmbyobj($L,$p2,$event)|0);
  $tm$0 = $4;
 } else {
  $tm$0 = $0;
 }
 $5 = (($tm$0) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _callTM($L,$tm$0,$p1,$p2,$res,1);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _luaV_objlen($L,$ra,$rb) {
 $L = $L|0;
 $ra = $ra|0;
 $rb = $rb|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tm$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($rb) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 15;
 do {
  if ((($2|0) == 5)) {
   $3 = HEAP32[$rb>>2]|0;
   $4 = (($3) + 8|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($5|0)==(0|0);
   if (!($6)) {
    $7 = (($5) + 6|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 & 16;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $11 = (($L) + 12|0);
     $12 = HEAP32[$11>>2]|0;
     $13 = (($12) + 200|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (_luaT_gettm($5,4,$14)|0);
     $16 = ($15|0)==(0|0);
     if (!($16)) {
      $tm$0 = $15;
      break;
     }
    }
   }
   $17 = (_luaH_getn($3)|0);
   $18 = (+($17|0));
   HEAPF64[$ra>>3] = $18;
   $19 = (($ra) + 8|0);
   HEAP32[$19>>2] = 3;
   STACKTOP = sp;return;
  } else if ((($2|0) == 4)) {
   $20 = HEAP32[$rb>>2]|0;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (+($22>>>0));
   HEAPF64[$ra>>3] = $23;
   $24 = (($ra) + 8|0);
   HEAP32[$24>>2] = 3;
   STACKTOP = sp;return;
  } else {
   $25 = (_luaT_gettmbyobj($L,$rb,4)|0);
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    _luaG_typeerror($L,$rb,10984);
    // unreachable;
   } else {
    $tm$0 = $25;
   }
  }
 } while(0);
 _callTM($L,$tm$0,$rb,$rb,$ra,1);
 STACKTOP = sp;return;
}
function _luaV_arith($L,$ra,$rb,$rc,$op) {
 $L = $L|0;
 $ra = $ra|0;
 $rb = $rb|0;
 $rc = $rc|0;
 $op = $op|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $tempb = 0, $tempc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tempb = sp + 16|0;
 $tempc = sp;
 $0 = (_luaV_tonumber($rb,$tempb)|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = (_luaV_tonumber($rc,$tempc)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = (($op) + -6)|0;
   $5 = +HEAPF64[$0>>3];
   $6 = +HEAPF64[$2>>3];
   $7 = (+_luaO_arith($4,$5,$6));
   HEAPF64[$ra>>3] = $7;
   $8 = (($ra) + 8|0);
   HEAP32[$8>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $9 = (_call_binTM($L,$rb,$rc,$ra,$op)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  _luaG_aritherror($L,$rb,$rc);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function _luaV_finishOp($L) {
 $L = $L|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $res$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 63;
 switch ($8|0) {
 case 12: case 7: case 6: case 21: case 19: case 18: case 17: case 16: case 15: case 14: case 13:  {
  $9 = (($L) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + -16|0);
  HEAP32[$9>>2] = $11;
  $12 = $7 >>> 6;
  $13 = $12 & 255;
  $14 = (($3) + ($13<<4)|0);
  $15 = $11;
  $16 = $15;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($15) + 4)|0;
  $19 = $18;
  $20 = HEAP32[$19>>2]|0;
  $21 = $14;
  $22 = $21;
  HEAP32[$22>>2] = $17;
  $23 = (($21) + 4)|0;
  $24 = $23;
  HEAP32[$24>>2] = $20;
  $25 = (($10) + -8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($3) + ($13<<4)|0) + 8|0);
  HEAP32[$27>>2] = $26;
  STACKTOP = sp;return;
  break;
 }
 case 34:  {
  $100 = (($1) + 4|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($L) + 8|0);
  HEAP32[$102>>2] = $101;
  STACKTOP = sp;return;
  break;
 }
 case 29:  {
  $103 = $7 & 8372224;
  $104 = ($103|0)==(0);
  if ($104) {
   STACKTOP = sp;return;
  }
  $105 = (($1) + 4|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($L) + 8|0);
  HEAP32[$107>>2] = $106;
  STACKTOP = sp;return;
  break;
 }
 case 22:  {
  $54 = (($L) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -16|0);
  $57 = $7 >>> 23;
  $58 = (($55) + -32|0);
  $59 = (($3) + ($57<<4)|0);
  $60 = $58;
  $61 = $59;
  $62 = (($60) - ($61))|0;
  $63 = (($55) + -48|0);
  $64 = $56;
  $65 = $64;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($64) + 4)|0;
  $68 = $67;
  $69 = HEAP32[$68>>2]|0;
  $70 = $63;
  $71 = $70;
  HEAP32[$71>>2] = $66;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = $69;
  $74 = (($55) + -8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($55) + -40|0);
  HEAP32[$76>>2] = $75;
  $77 = ($62|0)>(16);
  if ($77) {
   $78 = $62 >> 4;
   HEAP32[$54>>2] = $58;
   _luaV_concat($L,$78);
  }
  $79 = HEAP32[$54>>2]|0;
  $80 = (($79) + -16|0);
  $81 = HEAP32[$2>>2]|0;
  $82 = $7 >>> 6;
  $83 = $82 & 255;
  $84 = (($81) + ($83<<4)|0);
  $85 = $80;
  $86 = $85;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($85) + 4)|0;
  $89 = $88;
  $90 = HEAP32[$89>>2]|0;
  $91 = $84;
  $92 = $91;
  HEAP32[$92>>2] = $87;
  $93 = (($91) + 4)|0;
  $94 = $93;
  HEAP32[$94>>2] = $90;
  $95 = (($79) + -8|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($81) + ($83<<4)|0) + 8|0);
  HEAP32[$97>>2] = $96;
  $98 = (($1) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$54>>2] = $99;
  STACKTOP = sp;return;
  break;
 }
 case 24: case 25: case 26:  {
  $28 = (($L) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + -8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $38 = 1;
  } else {
   $33 = ($31|0)==(1);
   if ($33) {
    $34 = (($29) + -16|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)==(0);
    $38 = $36;
   } else {
    $38 = 0;
   }
  }
  $37 = $38&1;
  $39 = $37 ^ 1;
  $40 = HEAP32[$28>>2]|0;
  $41 = (($40) + -16|0);
  HEAP32[$28>>2] = $41;
  $42 = ($8|0)==(26);
  if ($42) {
   $43 = $7 >>> 23;
   $44 = (($3) + ($43<<4)|0);
   $45 = (_luaT_gettmbyobj($L,$44,14)|0);
   $46 = (($45) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0);
   $$ = $48 ? $37 : $39;
   $res$0 = $$;
  } else {
   $res$0 = $39;
  }
  $49 = $7 >>> 6;
  $50 = $49 & 255;
  $51 = ($res$0|0)==($50|0);
  if ($51) {
   STACKTOP = sp;return;
  }
  $52 = HEAP32[$4>>2]|0;
  $53 = (($52) + 4|0);
  HEAP32[$4>>2] = $53;
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _luaV_execute($L) {
 $L = $L|0;
 var $$c22 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum24 = 0, $$sum25 = 0, $$sum28 = 0, $$sum3 = 0, $$sum31 = 0, $$sum33 = 0, $$sum36 = 0;
 var $$sum40 = 0, $$sum44 = 0, $$sum45 = 0, $$sum46 = 0, $$sum47 = 0, $$sum48 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0.0, $394 = 0.0, $395 = 0.0;
 var $396 = 0.0, $397 = 0.0, $398 = 0.0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0, $423 = 0.0, $424 = 0.0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0.0, $75 = 0, $750 = 0.0, $751 = 0.0, $752 = 0, $753 = 0.0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0.0, $782 = 0.0, $783 = 0.0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $97 = 0, $98 = 0, $99 = 0, $aux$079 = 0, $b$0 = 0, $b85$0 = 0, $base$0 = 0, $base$1 = 0, $base$2 = 0;
 var $base$3 = 0, $c83$0 = 0, $ci$0 = 0, $exitcond = 0, $i$0 = 0, $j$051 = 0, $last$053 = 0, $n$0 = 0, $n$152 = 0, $pstep$0 = 0, $ra$0 = 0, $ra$1 = 0, $ra$2 = 0, $storemerge$in = 0, $storemerge38$in = 0, $storemerge42$in = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer3 = sp;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 40|0);
 $3 = (($L) + 12|0);
 $4 = (($L) + 8|0);
 $5 = (($L) + 8|0);
 $6 = (($L) + 12|0);
 $7 = (($L) + 8|0);
 $8 = (($L) + 8|0);
 $9 = (($L) + 8|0);
 $10 = (($L) + 8|0);
 $11 = (($L) + 8|0);
 $12 = (($L) + 8|0);
 $13 = (($L) + 12|0);
 $14 = (($L) + 8|0);
 $15 = (($L) + 24|0);
 $16 = (($L) + 8|0);
 $17 = (($L) + 48|0);
 $18 = (($L) + 8|0);
 $19 = (($L) + 8|0);
 $20 = (($L) + 8|0);
 $ci$0 = $1;
 L1: while(1) {
  $21 = HEAP32[$ci$0>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($ci$0) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($ci$0) + 28|0);
  $30 = (($22) + 16|0);
  $31 = (($22) + 16|0);
  $32 = (($22) + 16|0);
  $33 = (($22) + 16|0);
  $34 = (($ci$0) + 4|0);
  $35 = (($ci$0) + 4|0);
  $36 = (($ci$0) + 4|0);
  $37 = (($ci$0) + 4|0);
  $38 = (($ci$0) + 4|0);
  $39 = (($ci$0) + 4|0);
  $40 = (($22) + 16|0);
  $41 = (($ci$0) + 4|0);
  $base$0 = $28;
  L3: while(1) {
   $42 = HEAP32[$29>>2]|0;
   $43 = (($42) + 4|0);
   HEAP32[$29>>2] = $43;
   $44 = HEAP32[$42>>2]|0;
   $45 = HEAP8[$2>>0]|0;
   $46 = $45 & 12;
   $47 = ($46<<24>>24)==(0);
   do {
    if ($47) {
     $base$1 = $base$0;
    } else {
     $48 = HEAP32[$17>>2]|0;
     $49 = (($48) + -1)|0;
     HEAP32[$17>>2] = $49;
     $50 = ($49|0)==(0);
     if (!($50)) {
      $51 = HEAP8[$2>>0]|0;
      $52 = $51 & 4;
      $53 = ($52<<24>>24)==(0);
      if ($53) {
       $base$1 = $base$0;
       break;
      }
     }
     _traceexec($L);
     $54 = HEAP32[$27>>2]|0;
     $base$1 = $54;
    }
   } while(0);
   $55 = $44 >>> 6;
   $56 = $55 & 255;
   $57 = (($base$1) + ($56<<4)|0);
   $58 = $44 & 63;
   do {
    switch ($58|0) {
    case 5:  {
     $118 = $44 >>> 23;
     $119 = (($30) + ($118<<2)|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $122;
     $124 = $123;
     $125 = HEAP32[$124>>2]|0;
     $126 = (($123) + 4)|0;
     $127 = $126;
     $128 = HEAP32[$127>>2]|0;
     $129 = $57;
     $130 = $129;
     HEAP32[$130>>2] = $125;
     $131 = (($129) + 4)|0;
     $132 = $131;
     HEAP32[$132>>2] = $128;
     $133 = (($122) + 8|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$135>>2] = $134;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 6:  {
     $136 = $44 >>> 23;
     $137 = (($31) + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = (($138) + 8|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $44 >>> 14;
     $142 = $141 & 256;
     $143 = ($142|0)==(0);
     if ($143) {
      $146 = $141 & 511;
      $147 = (($base$1) + ($146<<4)|0);
      $148 = $147;
     } else {
      $144 = $141 & 255;
      $145 = (($26) + ($144<<4)|0);
      $148 = $145;
     }
     _luaV_gettable($L,$140,$148,$57);
     $149 = HEAP32[$27>>2]|0;
     $base$0 = $149;
     continue L3;
     break;
    }
    case 2:  {
     $89 = HEAP32[$29>>2]|0;
     $90 = (($89) + 4|0);
     HEAP32[$29>>2] = $90;
     $91 = HEAP32[$89>>2]|0;
     $92 = $91 >>> 6;
     $93 = (($26) + ($92<<4)|0);
     $94 = $93;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = $57;
     $101 = $100;
     HEAP32[$101>>2] = $96;
     $102 = (($100) + 4)|0;
     $103 = $102;
     HEAP32[$103>>2] = $99;
     $104 = ((($26) + ($92<<4)|0) + 8|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$106>>2] = $105;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 3:  {
     $107 = $44 >>> 23;
     HEAP32[$57>>2] = $107;
     $108 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$108>>2] = 1;
     $109 = $44 & 8372224;
     $110 = ($109|0)==(0);
     if ($110) {
      $base$0 = $base$1;
      continue L3;
     }
     $111 = HEAP32[$29>>2]|0;
     $112 = (($111) + 4|0);
     HEAP32[$29>>2] = $112;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 7:  {
     $150 = $44 >>> 23;
     $151 = (($base$1) + ($150<<4)|0);
     $152 = $44 >>> 14;
     $153 = $152 & 256;
     $154 = ($153|0)==(0);
     if ($154) {
      $157 = $152 & 511;
      $158 = (($base$1) + ($157<<4)|0);
      $159 = $158;
     } else {
      $155 = $152 & 255;
      $156 = (($26) + ($155<<4)|0);
      $159 = $156;
     }
     _luaV_gettable($L,$151,$159,$57);
     $160 = HEAP32[$27>>2]|0;
     $base$0 = $160;
     continue L3;
     break;
    }
    case 8:  {
     $161 = (($32) + ($56<<2)|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = (($162) + 8|0);
     $164 = HEAP32[$163>>2]|0;
     $165 = $44 >>> 23;
     $166 = $165 & 256;
     $167 = ($166|0)==(0);
     if ($167) {
      $170 = (($base$1) + ($165<<4)|0);
      $178 = $170;
     } else {
      $168 = $165 & 255;
      $169 = (($26) + ($168<<4)|0);
      $178 = $169;
     }
     $171 = $44 >>> 14;
     $172 = $171 & 256;
     $173 = ($172|0)==(0);
     if ($173) {
      $176 = $171 & 511;
      $177 = (($base$1) + ($176<<4)|0);
      $179 = $177;
     } else {
      $174 = $171 & 255;
      $175 = (($26) + ($174<<4)|0);
      $179 = $175;
     }
     _luaV_settable($L,$164,$178,$179);
     $180 = HEAP32[$27>>2]|0;
     $base$0 = $180;
     continue L3;
     break;
    }
    case 1:  {
     $74 = $44 >>> 14;
     $75 = (($26) + ($74<<4)|0);
     $76 = $75;
     $77 = $76;
     $78 = HEAP32[$77>>2]|0;
     $79 = (($76) + 4)|0;
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = $57;
     $83 = $82;
     HEAP32[$83>>2] = $78;
     $84 = (($82) + 4)|0;
     $85 = $84;
     HEAP32[$85>>2] = $81;
     $86 = ((($26) + ($74<<4)|0) + 8|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$88>>2] = $87;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 11:  {
     $227 = $44 >>> 23;
     $228 = $44 >>> 14;
     $229 = $228 & 511;
     $230 = (_luaH_new($L)|0);
     HEAP32[$57>>2] = $230;
     $231 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$231>>2] = 69;
     $232 = $229 | $227;
     $233 = ($232|0)==(0);
     if (!($233)) {
      $234 = (_luaO_fb2int($227)|0);
      $235 = (_luaO_fb2int($229)|0);
      _luaH_resize($L,$230,$234,$235);
     }
     $236 = HEAP32[$3>>2]|0;
     $237 = (($236) + 12|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($238|0)>(0);
     if ($239) {
      $$sum48 = (($56) + 1)|0;
      $240 = (($base$1) + ($$sum48<<4)|0);
      HEAP32[$4>>2] = $240;
      _luaC_step($L);
      $241 = HEAP32[$34>>2]|0;
      HEAP32[$4>>2] = $241;
     }
     $242 = HEAP32[$27>>2]|0;
     $base$0 = $242;
     continue L3;
     break;
    }
    case 9:  {
     $181 = $44 >>> 23;
     $182 = (($33) + ($181<<2)|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (($183) + 8|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = $57;
     $187 = $186;
     $188 = HEAP32[$187>>2]|0;
     $189 = (($186) + 4)|0;
     $190 = $189;
     $191 = HEAP32[$190>>2]|0;
     $192 = $185;
     $193 = $192;
     HEAP32[$193>>2] = $188;
     $194 = (($192) + 4)|0;
     $195 = $194;
     HEAP32[$195>>2] = $191;
     $196 = ((($base$1) + ($56<<4)|0) + 8|0);
     $197 = HEAP32[$196>>2]|0;
     $198 = (($185) + 8|0);
     HEAP32[$198>>2] = $197;
     $199 = HEAP32[$196>>2]|0;
     $200 = $199 & 64;
     $201 = ($200|0)==(0);
     if ($201) {
      $base$0 = $base$1;
      continue L3;
     }
     $202 = HEAP32[$57>>2]|0;
     $203 = (($202) + 5|0);
     $204 = HEAP8[$203>>0]|0;
     $205 = $204 & 3;
     $206 = ($205<<24>>24)==(0);
     if ($206) {
      $base$0 = $base$1;
      continue L3;
     }
     $207 = (($183) + 5|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208 & 4;
     $210 = ($209<<24>>24)==(0);
     if ($210) {
      $base$0 = $base$1;
      continue L3;
     }
     _luaC_barrier_($L,$183,$202);
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 12:  {
     $243 = $44 >>> 23;
     $244 = (($base$1) + ($243<<4)|0);
     $$sum47 = (($56) + 1)|0;
     $245 = (($base$1) + ($$sum47<<4)|0);
     $246 = $244;
     $247 = $246;
     $248 = HEAP32[$247>>2]|0;
     $249 = (($246) + 4)|0;
     $250 = $249;
     $251 = HEAP32[$250>>2]|0;
     $252 = $245;
     $253 = $252;
     HEAP32[$253>>2] = $248;
     $254 = (($252) + 4)|0;
     $255 = $254;
     HEAP32[$255>>2] = $251;
     $256 = ((($base$1) + ($243<<4)|0) + 8|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ((($base$1) + ($$sum47<<4)|0) + 8|0);
     HEAP32[$258>>2] = $257;
     $259 = $44 >>> 14;
     $260 = $259 & 256;
     $261 = ($260|0)==(0);
     if ($261) {
      $264 = $259 & 511;
      $265 = (($base$1) + ($264<<4)|0);
      $266 = $265;
     } else {
      $262 = $259 & 255;
      $263 = (($26) + ($262<<4)|0);
      $266 = $263;
     }
     _luaV_gettable($L,$244,$266,$57);
     $267 = HEAP32[$27>>2]|0;
     $base$0 = $267;
     continue L3;
     break;
    }
    case 10:  {
     $211 = $44 >>> 23;
     $212 = $211 & 256;
     $213 = ($212|0)==(0);
     if ($213) {
      $216 = (($base$1) + ($211<<4)|0);
      $224 = $216;
     } else {
      $214 = $211 & 255;
      $215 = (($26) + ($214<<4)|0);
      $224 = $215;
     }
     $217 = $44 >>> 14;
     $218 = $217 & 256;
     $219 = ($218|0)==(0);
     if ($219) {
      $222 = $217 & 511;
      $223 = (($base$1) + ($222<<4)|0);
      $225 = $223;
     } else {
      $220 = $217 & 255;
      $221 = (($26) + ($220<<4)|0);
      $225 = $221;
     }
     _luaV_settable($L,$57,$224,$225);
     $226 = HEAP32[$27>>2]|0;
     $base$0 = $226;
     continue L3;
     break;
    }
    case 0:  {
     $59 = $44 >>> 23;
     $60 = (($base$1) + ($59<<4)|0);
     $61 = $60;
     $62 = $61;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($61) + 4)|0;
     $65 = $64;
     $66 = HEAP32[$65>>2]|0;
     $67 = $57;
     $68 = $67;
     HEAP32[$68>>2] = $63;
     $69 = (($67) + 4)|0;
     $70 = $69;
     HEAP32[$70>>2] = $66;
     $71 = ((($base$1) + ($59<<4)|0) + 8|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$73>>2] = $72;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 4:  {
     $113 = $44 >>> 23;
     $b$0 = $113;$ra$0 = $57;
     while(1) {
      $114 = (($ra$0) + 16|0);
      $115 = (($ra$0) + 8|0);
      HEAP32[$115>>2] = 0;
      $116 = (($b$0) + -1)|0;
      $117 = ($b$0|0)==(0);
      if ($117) {
       $base$0 = $base$1;
       continue L3;
      } else {
       $b$0 = $116;$ra$0 = $114;
      }
     }
     break;
    }
    case 13:  {
     $268 = $44 >>> 23;
     $269 = $268 & 256;
     $270 = ($269|0)==(0);
     if ($270) {
      $273 = (($base$1) + ($268<<4)|0);
      $282 = $273;
     } else {
      $271 = $268 & 255;
      $272 = (($26) + ($271<<4)|0);
      $282 = $272;
     }
     $274 = $44 >>> 14;
     $275 = $274 & 256;
     $276 = ($275|0)==(0);
     if ($276) {
      $279 = $274 & 511;
      $280 = (($base$1) + ($279<<4)|0);
      $286 = $280;
     } else {
      $277 = $274 & 255;
      $278 = (($26) + ($277<<4)|0);
      $286 = $278;
     }
     $281 = (($282) + 8|0);
     $283 = HEAP32[$281>>2]|0;
     $284 = ($283|0)==(3);
     if ($284) {
      $285 = (($286) + 8|0);
      $287 = HEAP32[$285>>2]|0;
      $288 = ($287|0)==(3);
      if ($288) {
       $289 = +HEAPF64[$282>>3];
       $290 = +HEAPF64[$286>>3];
       $291 = $289 + $290;
       HEAPF64[$57>>3] = $291;
       $292 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$292>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$282,$286,6);
     $293 = HEAP32[$27>>2]|0;
     $base$0 = $293;
     continue L3;
     break;
    }
    case 14:  {
     $294 = $44 >>> 23;
     $295 = $294 & 256;
     $296 = ($295|0)==(0);
     if ($296) {
      $299 = (($base$1) + ($294<<4)|0);
      $308 = $299;
     } else {
      $297 = $294 & 255;
      $298 = (($26) + ($297<<4)|0);
      $308 = $298;
     }
     $300 = $44 >>> 14;
     $301 = $300 & 256;
     $302 = ($301|0)==(0);
     if ($302) {
      $305 = $300 & 511;
      $306 = (($base$1) + ($305<<4)|0);
      $312 = $306;
     } else {
      $303 = $300 & 255;
      $304 = (($26) + ($303<<4)|0);
      $312 = $304;
     }
     $307 = (($308) + 8|0);
     $309 = HEAP32[$307>>2]|0;
     $310 = ($309|0)==(3);
     if ($310) {
      $311 = (($312) + 8|0);
      $313 = HEAP32[$311>>2]|0;
      $314 = ($313|0)==(3);
      if ($314) {
       $315 = +HEAPF64[$308>>3];
       $316 = +HEAPF64[$312>>3];
       $317 = $315 - $316;
       HEAPF64[$57>>3] = $317;
       $318 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$318>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$308,$312,7);
     $319 = HEAP32[$27>>2]|0;
     $base$0 = $319;
     continue L3;
     break;
    }
    case 15:  {
     $320 = $44 >>> 23;
     $321 = $320 & 256;
     $322 = ($321|0)==(0);
     if ($322) {
      $325 = (($base$1) + ($320<<4)|0);
      $334 = $325;
     } else {
      $323 = $320 & 255;
      $324 = (($26) + ($323<<4)|0);
      $334 = $324;
     }
     $326 = $44 >>> 14;
     $327 = $326 & 256;
     $328 = ($327|0)==(0);
     if ($328) {
      $331 = $326 & 511;
      $332 = (($base$1) + ($331<<4)|0);
      $338 = $332;
     } else {
      $329 = $326 & 255;
      $330 = (($26) + ($329<<4)|0);
      $338 = $330;
     }
     $333 = (($334) + 8|0);
     $335 = HEAP32[$333>>2]|0;
     $336 = ($335|0)==(3);
     if ($336) {
      $337 = (($338) + 8|0);
      $339 = HEAP32[$337>>2]|0;
      $340 = ($339|0)==(3);
      if ($340) {
       $341 = +HEAPF64[$334>>3];
       $342 = +HEAPF64[$338>>3];
       $343 = $341 * $342;
       HEAPF64[$57>>3] = $343;
       $344 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$344>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$334,$338,8);
     $345 = HEAP32[$27>>2]|0;
     $base$0 = $345;
     continue L3;
     break;
    }
    case 16:  {
     $346 = $44 >>> 23;
     $347 = $346 & 256;
     $348 = ($347|0)==(0);
     if ($348) {
      $351 = (($base$1) + ($346<<4)|0);
      $360 = $351;
     } else {
      $349 = $346 & 255;
      $350 = (($26) + ($349<<4)|0);
      $360 = $350;
     }
     $352 = $44 >>> 14;
     $353 = $352 & 256;
     $354 = ($353|0)==(0);
     if ($354) {
      $357 = $352 & 511;
      $358 = (($base$1) + ($357<<4)|0);
      $364 = $358;
     } else {
      $355 = $352 & 255;
      $356 = (($26) + ($355<<4)|0);
      $364 = $356;
     }
     $359 = (($360) + 8|0);
     $361 = HEAP32[$359>>2]|0;
     $362 = ($361|0)==(3);
     if ($362) {
      $363 = (($364) + 8|0);
      $365 = HEAP32[$363>>2]|0;
      $366 = ($365|0)==(3);
      if ($366) {
       $367 = +HEAPF64[$360>>3];
       $368 = +HEAPF64[$364>>3];
       $369 = $367 / $368;
       HEAPF64[$57>>3] = $369;
       $370 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$370>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$360,$364,9);
     $371 = HEAP32[$27>>2]|0;
     $base$0 = $371;
     continue L3;
     break;
    }
    case 17:  {
     $372 = $44 >>> 23;
     $373 = $372 & 256;
     $374 = ($373|0)==(0);
     if ($374) {
      $377 = (($base$1) + ($372<<4)|0);
      $386 = $377;
     } else {
      $375 = $372 & 255;
      $376 = (($26) + ($375<<4)|0);
      $386 = $376;
     }
     $378 = $44 >>> 14;
     $379 = $378 & 256;
     $380 = ($379|0)==(0);
     if ($380) {
      $383 = $378 & 511;
      $384 = (($base$1) + ($383<<4)|0);
      $390 = $384;
     } else {
      $381 = $378 & 255;
      $382 = (($26) + ($381<<4)|0);
      $390 = $382;
     }
     $385 = (($386) + 8|0);
     $387 = HEAP32[$385>>2]|0;
     $388 = ($387|0)==(3);
     if ($388) {
      $389 = (($390) + 8|0);
      $391 = HEAP32[$389>>2]|0;
      $392 = ($391|0)==(3);
      if ($392) {
       $393 = +HEAPF64[$386>>3];
       $394 = +HEAPF64[$390>>3];
       $395 = $393 / $394;
       $396 = (+Math_floor((+$395)));
       $397 = $394 * $396;
       $398 = $393 - $397;
       HEAPF64[$57>>3] = $398;
       $399 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$399>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$386,$390,10);
     $400 = HEAP32[$27>>2]|0;
     $base$0 = $400;
     continue L3;
     break;
    }
    case 18:  {
     $401 = $44 >>> 23;
     $402 = $401 & 256;
     $403 = ($402|0)==(0);
     if ($403) {
      $406 = (($base$1) + ($401<<4)|0);
      $415 = $406;
     } else {
      $404 = $401 & 255;
      $405 = (($26) + ($404<<4)|0);
      $415 = $405;
     }
     $407 = $44 >>> 14;
     $408 = $407 & 256;
     $409 = ($408|0)==(0);
     if ($409) {
      $412 = $407 & 511;
      $413 = (($base$1) + ($412<<4)|0);
      $419 = $413;
     } else {
      $410 = $407 & 255;
      $411 = (($26) + ($410<<4)|0);
      $419 = $411;
     }
     $414 = (($415) + 8|0);
     $416 = HEAP32[$414>>2]|0;
     $417 = ($416|0)==(3);
     if ($417) {
      $418 = (($419) + 8|0);
      $420 = HEAP32[$418>>2]|0;
      $421 = ($420|0)==(3);
      if ($421) {
       $422 = +HEAPF64[$415>>3];
       $423 = +HEAPF64[$419>>3];
       $424 = (+Math_pow((+$422),(+$423)));
       HEAPF64[$57>>3] = $424;
       $425 = ((($base$1) + ($56<<4)|0) + 8|0);
       HEAP32[$425>>2] = 3;
       $base$0 = $base$1;
       continue L3;
      }
     }
     _luaV_arith($L,$57,$415,$419,11);
     $426 = HEAP32[$27>>2]|0;
     $base$0 = $426;
     continue L3;
     break;
    }
    case 20:  {
     $436 = $44 >>> 23;
     $437 = ((($base$1) + ($436<<4)|0) + 8|0);
     $438 = HEAP32[$437>>2]|0;
     $439 = ($438|0)==(0);
     if ($439) {
      $445 = 1;
     } else {
      $440 = ($438|0)==(1);
      if ($440) {
       $441 = (($base$1) + ($436<<4)|0);
       $442 = HEAP32[$441>>2]|0;
       $443 = ($442|0)==(0);
       $445 = $443;
      } else {
       $445 = 0;
      }
     }
     $444 = $445&1;
     HEAP32[$57>>2] = $444;
     $446 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$446>>2] = 1;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 21:  {
     $447 = $44 >>> 23;
     $448 = (($base$1) + ($447<<4)|0);
     _luaV_objlen($L,$57,$448);
     $449 = HEAP32[$27>>2]|0;
     $base$0 = $449;
     continue L3;
     break;
    }
    case 19:  {
     $427 = $44 >>> 23;
     $428 = (($base$1) + ($427<<4)|0);
     $429 = ((($base$1) + ($427<<4)|0) + 8|0);
     $430 = HEAP32[$429>>2]|0;
     $431 = ($430|0)==(3);
     if ($431) {
      $432 = +HEAPF64[$428>>3];
      $433 = -$432;
      HEAPF64[$57>>3] = $433;
      $434 = ((($base$1) + ($56<<4)|0) + 8|0);
      HEAP32[$434>>2] = 3;
      $base$0 = $base$1;
      continue L3;
     } else {
      _luaV_arith($L,$57,$428,$428,12);
      $435 = HEAP32[$27>>2]|0;
      $base$0 = $435;
      continue L3;
     }
     break;
    }
    case 23:  {
     $482 = ($56|0)==(0);
     if (!($482)) {
      $483 = HEAP32[$27>>2]|0;
      $$sum44 = (($56) + -1)|0;
      $484 = (($483) + ($$sum44<<4)|0);
      _luaF_close($L,$484);
     }
     $485 = $44 >>> 14;
     $486 = (($485) + -131071)|0;
     $487 = HEAP32[$29>>2]|0;
     $488 = (($487) + ($486<<2)|0);
     HEAP32[$29>>2] = $488;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 24:  {
     $489 = $44 >>> 23;
     $490 = $489 & 256;
     $491 = ($490|0)==(0);
     if ($491) {
      $494 = (($base$1) + ($489<<4)|0);
      $503 = $494;
     } else {
      $492 = $489 & 255;
      $493 = (($26) + ($492<<4)|0);
      $503 = $493;
     }
     $495 = $44 >>> 14;
     $496 = $495 & 256;
     $497 = ($496|0)==(0);
     if ($497) {
      $500 = $495 & 511;
      $501 = (($base$1) + ($500<<4)|0);
      $506 = $501;
     } else {
      $498 = $495 & 255;
      $499 = (($26) + ($498<<4)|0);
      $506 = $499;
     }
     $502 = (($503) + 8|0);
     $504 = HEAP32[$502>>2]|0;
     $505 = (($506) + 8|0);
     $507 = HEAP32[$505>>2]|0;
     $508 = ($504|0)==($507|0);
     if ($508) {
      $509 = (_luaV_equalobj_($L,$503,$506)|0);
      $510 = ($509|0)!=(0);
      $512 = $510;
     } else {
      $512 = 0;
     }
     $511 = $512&1;
     $513 = ($511|0)==($56|0);
     $514 = HEAP32[$29>>2]|0;
     if ($513) {
      $516 = HEAP32[$514>>2]|0;
      $517 = $516 >>> 6;
      $518 = $517 & 255;
      $519 = ($518|0)==(0);
      if (!($519)) {
       $520 = HEAP32[$27>>2]|0;
       $$sum40 = (($518) + -1)|0;
       $521 = (($520) + ($$sum40<<4)|0);
       _luaF_close($L,$521);
      }
      $522 = $516 >>> 14;
      $523 = (($522) + -131070)|0;
      $524 = HEAP32[$29>>2]|0;
      $525 = (($524) + ($523<<2)|0);
      $storemerge42$in = $525;
     } else {
      $515 = (($514) + 4|0);
      $storemerge42$in = $515;
     }
     HEAP32[$29>>2] = $storemerge42$in;
     $526 = HEAP32[$27>>2]|0;
     $base$0 = $526;
     continue L3;
     break;
    }
    case 22:  {
     $450 = $44 >>> 23;
     $451 = $44 >>> 14;
     $452 = $451 & 511;
     $$sum45 = (($452) + 1)|0;
     $453 = (($base$1) + ($$sum45<<4)|0);
     HEAP32[$5>>2] = $453;
     $454 = (1 - ($450))|0;
     $455 = (($454) + ($452))|0;
     _luaV_concat($L,$455);
     $456 = HEAP32[$27>>2]|0;
     $457 = (($456) + ($56<<4)|0);
     $458 = (($456) + ($450<<4)|0);
     $459 = $458;
     $460 = $459;
     $461 = HEAP32[$460>>2]|0;
     $462 = (($459) + 4)|0;
     $463 = $462;
     $464 = HEAP32[$463>>2]|0;
     $465 = $457;
     $466 = $465;
     HEAP32[$466>>2] = $461;
     $467 = (($465) + 4)|0;
     $468 = $467;
     HEAP32[$468>>2] = $464;
     $469 = ((($456) + ($450<<4)|0) + 8|0);
     $470 = HEAP32[$469>>2]|0;
     $471 = ((($456) + ($56<<4)|0) + 8|0);
     HEAP32[$471>>2] = $470;
     $472 = HEAP32[$6>>2]|0;
     $473 = (($472) + 12|0);
     $474 = HEAP32[$473>>2]|0;
     $475 = ($474|0)>(0);
     if ($475) {
      $476 = ($56>>>0)<($450>>>0);
      if ($476) {
       $478 = $458;
      } else {
       $$sum46 = (($56) + 1)|0;
       $477 = (($456) + ($$sum46<<4)|0);
       $478 = $477;
      }
      HEAP32[$5>>2] = $478;
      _luaC_step($L);
      $479 = HEAP32[$35>>2]|0;
      HEAP32[$5>>2] = $479;
     }
     $480 = HEAP32[$27>>2]|0;
     $481 = HEAP32[$36>>2]|0;
     HEAP32[$5>>2] = $481;
     $base$0 = $480;
     continue L3;
     break;
    }
    case 25:  {
     $527 = $44 >>> 23;
     $528 = $527 & 256;
     $529 = ($528|0)==(0);
     if ($529) {
      $532 = (($base$1) + ($527<<4)|0);
      $540 = $532;
     } else {
      $530 = $527 & 255;
      $531 = (($26) + ($530<<4)|0);
      $540 = $531;
     }
     $533 = $44 >>> 14;
     $534 = $533 & 256;
     $535 = ($534|0)==(0);
     if ($535) {
      $538 = $533 & 511;
      $539 = (($base$1) + ($538<<4)|0);
      $541 = $539;
     } else {
      $536 = $533 & 255;
      $537 = (($26) + ($536<<4)|0);
      $541 = $537;
     }
     $542 = (_luaV_lessthan($L,$540,$541)|0);
     $543 = ($542|0)==($56|0);
     $544 = HEAP32[$29>>2]|0;
     if ($543) {
      $546 = HEAP32[$544>>2]|0;
      $547 = $546 >>> 6;
      $548 = $547 & 255;
      $549 = ($548|0)==(0);
      if (!($549)) {
       $550 = HEAP32[$27>>2]|0;
       $$sum36 = (($548) + -1)|0;
       $551 = (($550) + ($$sum36<<4)|0);
       _luaF_close($L,$551);
      }
      $552 = $546 >>> 14;
      $553 = (($552) + -131070)|0;
      $554 = HEAP32[$29>>2]|0;
      $555 = (($554) + ($553<<2)|0);
      $storemerge38$in = $555;
     } else {
      $545 = (($544) + 4|0);
      $storemerge38$in = $545;
     }
     HEAP32[$29>>2] = $storemerge38$in;
     $556 = HEAP32[$27>>2]|0;
     $base$0 = $556;
     continue L3;
     break;
    }
    case 26:  {
     $557 = $44 >>> 23;
     $558 = $557 & 256;
     $559 = ($558|0)==(0);
     if ($559) {
      $562 = (($base$1) + ($557<<4)|0);
      $570 = $562;
     } else {
      $560 = $557 & 255;
      $561 = (($26) + ($560<<4)|0);
      $570 = $561;
     }
     $563 = $44 >>> 14;
     $564 = $563 & 256;
     $565 = ($564|0)==(0);
     if ($565) {
      $568 = $563 & 511;
      $569 = (($base$1) + ($568<<4)|0);
      $571 = $569;
     } else {
      $566 = $563 & 255;
      $567 = (($26) + ($566<<4)|0);
      $571 = $567;
     }
     $572 = (_luaV_lessequal($L,$570,$571)|0);
     $573 = ($572|0)==($56|0);
     $574 = HEAP32[$29>>2]|0;
     if ($573) {
      $576 = HEAP32[$574>>2]|0;
      $577 = $576 >>> 6;
      $578 = $577 & 255;
      $579 = ($578|0)==(0);
      if (!($579)) {
       $580 = HEAP32[$27>>2]|0;
       $$sum33 = (($578) + -1)|0;
       $581 = (($580) + ($$sum33<<4)|0);
       _luaF_close($L,$581);
      }
      $582 = $576 >>> 14;
      $583 = (($582) + -131070)|0;
      $584 = HEAP32[$29>>2]|0;
      $585 = (($584) + ($583<<2)|0);
      $storemerge$in = $585;
     } else {
      $575 = (($574) + 4|0);
      $storemerge$in = $575;
     }
     HEAP32[$29>>2] = $storemerge$in;
     $586 = HEAP32[$27>>2]|0;
     $base$0 = $586;
     continue L3;
     break;
    }
    case 27:  {
     $587 = $44 & 8372224;
     $588 = ($587|0)==(0);
     $589 = ((($base$1) + ($56<<4)|0) + 8|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($590|0)==(0);
     if ($588) {
      if (!($591)) {
       $595 = ($590|0)==(1);
       if ($595) {
        $596 = HEAP32[$57>>2]|0;
        $597 = ($596|0)==(0);
        if (!($597)) {
         label = 172;
        }
       } else {
        label = 172;
       }
      }
     } else {
      if ($591) {
       label = 172;
      } else {
       $592 = ($590|0)==(1);
       if ($592) {
        $593 = HEAP32[$57>>2]|0;
        $594 = ($593|0)==(0);
        if ($594) {
         label = 172;
        }
       }
      }
     }
     if ((label|0) == 172) {
      label = 0;
      $598 = HEAP32[$29>>2]|0;
      $599 = (($598) + 4|0);
      HEAP32[$29>>2] = $599;
      $base$0 = $base$1;
      continue L3;
     }
     $600 = HEAP32[$29>>2]|0;
     $601 = HEAP32[$600>>2]|0;
     $602 = $601 >>> 6;
     $603 = $602 & 255;
     $604 = ($603|0)==(0);
     if (!($604)) {
      $605 = HEAP32[$27>>2]|0;
      $$sum31 = (($603) + -1)|0;
      $606 = (($605) + ($$sum31<<4)|0);
      _luaF_close($L,$606);
     }
     $607 = $601 >>> 14;
     $608 = (($607) + -131070)|0;
     $609 = HEAP32[$29>>2]|0;
     $610 = (($609) + ($608<<2)|0);
     HEAP32[$29>>2] = $610;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 28:  {
     $611 = $44 >>> 23;
     $612 = (($base$1) + ($611<<4)|0);
     $613 = $44 & 8372224;
     $614 = ($613|0)==(0);
     $615 = ((($base$1) + ($611<<4)|0) + 8|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = ($616|0)==(0);
     if ($614) {
      if (!($617)) {
       $621 = ($616|0)==(1);
       if ($621) {
        $622 = HEAP32[$612>>2]|0;
        $623 = ($622|0)==(0);
        if (!($623)) {
         label = 183;
        }
       } else {
        label = 183;
       }
      }
     } else {
      if ($617) {
       label = 183;
      } else {
       $618 = ($616|0)==(1);
       if ($618) {
        $619 = HEAP32[$612>>2]|0;
        $620 = ($619|0)==(0);
        if ($620) {
         label = 183;
        }
       }
      }
     }
     if ((label|0) == 183) {
      label = 0;
      $624 = HEAP32[$29>>2]|0;
      $625 = (($624) + 4|0);
      HEAP32[$29>>2] = $625;
      $base$0 = $base$1;
      continue L3;
     }
     $626 = $612;
     $627 = $626;
     $628 = HEAP32[$627>>2]|0;
     $629 = (($626) + 4)|0;
     $630 = $629;
     $631 = HEAP32[$630>>2]|0;
     $632 = $57;
     $633 = $632;
     HEAP32[$633>>2] = $628;
     $634 = (($632) + 4)|0;
     $635 = $634;
     HEAP32[$635>>2] = $631;
     $636 = HEAP32[$615>>2]|0;
     $637 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$637>>2] = $636;
     $638 = HEAP32[$29>>2]|0;
     $639 = HEAP32[$638>>2]|0;
     $640 = $639 >>> 6;
     $641 = $640 & 255;
     $642 = ($641|0)==(0);
     if (!($642)) {
      $643 = HEAP32[$27>>2]|0;
      $$sum28 = (($641) + -1)|0;
      $644 = (($643) + ($$sum28<<4)|0);
      _luaF_close($L,$644);
     }
     $645 = $639 >>> 14;
     $646 = (($645) + -131070)|0;
     $647 = HEAP32[$29>>2]|0;
     $648 = (($647) + ($646<<2)|0);
     HEAP32[$29>>2] = $648;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 30:  {
     $666 = $44 >>> 23;
     $667 = ($666|0)==(0);
     if (!($667)) {
      $$sum24 = (($56) + ($666))|0;
      $668 = (($base$1) + ($$sum24<<4)|0);
      HEAP32[$9>>2] = $668;
     }
     $669 = (_luaD_precall($L,$57,-1)|0);
     $670 = ($669|0)==(0);
     if ($670) {
      label = 198;
      break L3;
     }
     $671 = HEAP32[$27>>2]|0;
     $base$0 = $671;
     continue L3;
     break;
    }
    case 29:  {
     $649 = $44 >>> 23;
     $650 = $44 >>> 14;
     $651 = $650 & 511;
     $652 = (($651) + -1)|0;
     $653 = ($649|0)==(0);
     if (!($653)) {
      $$sum25 = (($56) + ($649))|0;
      $654 = (($base$1) + ($$sum25<<4)|0);
      HEAP32[$8>>2] = $654;
     }
     $655 = (_luaD_precall($L,$57,$652)|0);
     $656 = ($655|0)==(0);
     if ($656) {
      label = 193;
      break L3;
     }
     $657 = ($651|0)==(0);
     if (!($657)) {
      $658 = HEAP32[$37>>2]|0;
      HEAP32[$7>>2] = $658;
     }
     $659 = HEAP32[$27>>2]|0;
     $base$0 = $659;
     continue L3;
     break;
    }
    case 31:  {
     label = 203;
     break L3;
     break;
    }
    case 33:  {
     $$sum13 = (($56) + 1)|0;
     $764 = (($base$1) + ($$sum13<<4)|0);
     $$sum14 = (($56) + 2)|0;
     $765 = (($base$1) + ($$sum14<<4)|0);
     $766 = ((($base$1) + ($56<<4)|0) + 8|0);
     $767 = HEAP32[$766>>2]|0;
     $768 = ($767|0)==(3);
     if (!($768)) {
      $769 = (_luaV_tonumber($57,$57)|0);
      $770 = ($769|0)==(0|0);
      if ($770) {
       label = 217;
       break L1;
      }
     }
     $771 = ((($base$1) + ($$sum13<<4)|0) + 8|0);
     $772 = HEAP32[$771>>2]|0;
     $773 = ($772|0)==(3);
     if (!($773)) {
      $774 = (_luaV_tonumber($764,$764)|0);
      $775 = ($774|0)==(0|0);
      if ($775) {
       label = 220;
       break L1;
      }
     }
     $776 = ((($base$1) + ($$sum14<<4)|0) + 8|0);
     $777 = HEAP32[$776>>2]|0;
     $778 = ($777|0)==(3);
     if ($778) {
      $pstep$0 = $765;
     } else {
      $779 = (_luaV_tonumber($765,$765)|0);
      $780 = ($779|0)==(0|0);
      if ($780) {
       label = 223;
       break L1;
      } else {
       $pstep$0 = $779;
      }
     }
     $781 = +HEAPF64[$57>>3];
     $782 = +HEAPF64[$pstep$0>>3];
     $783 = $781 - $782;
     HEAPF64[$57>>3] = $783;
     HEAP32[$766>>2] = 3;
     $784 = $44 >>> 14;
     $785 = (($784) + -131071)|0;
     $786 = HEAP32[$29>>2]|0;
     $787 = (($786) + ($785<<2)|0);
     HEAP32[$29>>2] = $787;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 32:  {
     $$sum16 = (($56) + 2)|0;
     $748 = (($base$1) + ($$sum16<<4)|0);
     $749 = +HEAPF64[$748>>3];
     $750 = +HEAPF64[$57>>3];
     $751 = $749 + $750;
     $$sum17 = (($56) + 1)|0;
     $752 = (($base$1) + ($$sum17<<4)|0);
     $753 = +HEAPF64[$752>>3];
     $754 = $749 > 0.0;
     if ($754) {
      $755 = !($751 <= $753);
      if ($755) {
       $base$0 = $base$1;
       continue L3;
      }
     } else {
      $756 = !($753 <= $751);
      if ($756) {
       $base$0 = $base$1;
       continue L3;
      }
     }
     $757 = $44 >>> 14;
     $758 = (($757) + -131071)|0;
     $759 = HEAP32[$29>>2]|0;
     $760 = (($759) + ($758<<2)|0);
     HEAP32[$29>>2] = $760;
     HEAPF64[$57>>3] = $751;
     $761 = ((($base$1) + ($56<<4)|0) + 8|0);
     HEAP32[$761>>2] = 3;
     $$sum19 = (($56) + 3)|0;
     $762 = (($base$1) + ($$sum19<<4)|0);
     HEAPF64[$762>>3] = $751;
     $763 = ((($base$1) + ($$sum19<<4)|0) + 8|0);
     HEAP32[$763>>2] = 3;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 35:  {
     $base$2 = $base$1;$i$0 = $44;$ra$1 = $57;
     break;
    }
    case 34:  {
     $$sum6 = (($56) + 3)|0;
     $788 = (($base$1) + ($$sum6<<4)|0);
     $$sum7 = (($56) + 2)|0;
     $789 = (($base$1) + ($$sum7<<4)|0);
     $$sum8 = (($56) + 5)|0;
     $790 = (($base$1) + ($$sum8<<4)|0);
     $791 = $789;
     $792 = $791;
     $793 = HEAP32[$792>>2]|0;
     $794 = (($791) + 4)|0;
     $795 = $794;
     $796 = HEAP32[$795>>2]|0;
     $797 = $790;
     $798 = $797;
     HEAP32[$798>>2] = $793;
     $799 = (($797) + 4)|0;
     $800 = $799;
     HEAP32[$800>>2] = $796;
     $801 = ((($base$1) + ($$sum7<<4)|0) + 8|0);
     $802 = HEAP32[$801>>2]|0;
     $803 = ((($base$1) + ($$sum8<<4)|0) + 8|0);
     HEAP32[$803>>2] = $802;
     $$sum9 = (($56) + 1)|0;
     $804 = (($base$1) + ($$sum9<<4)|0);
     $$sum10 = (($56) + 4)|0;
     $805 = (($base$1) + ($$sum10<<4)|0);
     $806 = $804;
     $807 = $806;
     $808 = HEAP32[$807>>2]|0;
     $809 = (($806) + 4)|0;
     $810 = $809;
     $811 = HEAP32[$810>>2]|0;
     $812 = $805;
     $813 = $812;
     HEAP32[$813>>2] = $808;
     $814 = (($812) + 4)|0;
     $815 = $814;
     HEAP32[$815>>2] = $811;
     $816 = ((($base$1) + ($$sum9<<4)|0) + 8|0);
     $817 = HEAP32[$816>>2]|0;
     $818 = ((($base$1) + ($$sum10<<4)|0) + 8|0);
     HEAP32[$818>>2] = $817;
     $819 = $57;
     $820 = $819;
     $821 = HEAP32[$820>>2]|0;
     $822 = (($819) + 4)|0;
     $823 = $822;
     $824 = HEAP32[$823>>2]|0;
     $825 = $788;
     $826 = $825;
     HEAP32[$826>>2] = $821;
     $827 = (($825) + 4)|0;
     $828 = $827;
     HEAP32[$828>>2] = $824;
     $829 = ((($base$1) + ($56<<4)|0) + 8|0);
     $830 = HEAP32[$829>>2]|0;
     $831 = ((($base$1) + ($$sum6<<4)|0) + 8|0);
     HEAP32[$831>>2] = $830;
     $$sum11 = (($56) + 6)|0;
     $832 = (($base$1) + ($$sum11<<4)|0);
     HEAP32[$10>>2] = $832;
     $833 = $44 >>> 14;
     $834 = $833 & 511;
     _luaD_call($L,$788,$834,1);
     $835 = HEAP32[$27>>2]|0;
     $836 = HEAP32[$38>>2]|0;
     HEAP32[$10>>2] = $836;
     $837 = HEAP32[$29>>2]|0;
     $838 = (($837) + 4|0);
     HEAP32[$29>>2] = $838;
     $839 = HEAP32[$837>>2]|0;
     $840 = $839 >>> 6;
     $841 = $840 & 255;
     $842 = (($835) + ($841<<4)|0);
     $base$2 = $835;$i$0 = $839;$ra$1 = $842;
     break;
    }
    case 36:  {
     $863 = $44 >>> 23;
     $864 = $44 >>> 14;
     $865 = $864 & 511;
     $866 = ($863|0)==(0);
     if ($866) {
      $867 = HEAP32[$11>>2]|0;
      $868 = $867;
      $869 = $57;
      $870 = (($868) - ($869))|0;
      $871 = $870 >> 4;
      $872 = (($871) + -1)|0;
      $n$0 = $872;
     } else {
      $n$0 = $863;
     }
     $873 = ($865|0)==(0);
     if ($873) {
      $874 = HEAP32[$29>>2]|0;
      $875 = (($874) + 4|0);
      HEAP32[$29>>2] = $875;
      $876 = HEAP32[$874>>2]|0;
      $877 = $876 >>> 6;
      $c83$0 = $877;
     } else {
      $c83$0 = $865;
     }
     $878 = HEAP32[$57>>2]|0;
     $879 = ($c83$0*50)|0;
     $880 = (($n$0) + -50)|0;
     $881 = (($880) + ($879))|0;
     $882 = (($878) + 28|0);
     $883 = HEAP32[$882>>2]|0;
     $884 = ($881|0)>($883|0);
     if ($884) {
      _luaH_resizearray($L,$878,$881);
     }
     $885 = ($n$0|0)>(0);
     if ($885) {
      $886 = (($878) + 5|0);
      $last$053 = $881;$n$152 = $n$0;
      while(1) {
       $$sum3 = (($n$152) + ($56))|0;
       $887 = (($base$1) + ($$sum3<<4)|0);
       $888 = (($last$053) + -1)|0;
       _luaH_setint($L,$878,$last$053,$887);
       $889 = ((($base$1) + ($$sum3<<4)|0) + 8|0);
       $890 = HEAP32[$889>>2]|0;
       $891 = $890 & 64;
       $892 = ($891|0)==(0);
       if (!($892)) {
        $893 = HEAP32[$887>>2]|0;
        $894 = (($893) + 5|0);
        $895 = HEAP8[$894>>0]|0;
        $896 = $895 & 3;
        $897 = ($896<<24>>24)==(0);
        if (!($897)) {
         $898 = HEAP8[$886>>0]|0;
         $899 = $898 & 4;
         $900 = ($899<<24>>24)==(0);
         if (!($900)) {
          _luaC_barrierback_($L,$878);
         }
        }
       }
       $901 = (($n$152) + -1)|0;
       $902 = ($901|0)>(0);
       if ($902) {
        $last$053 = $888;$n$152 = $901;
       } else {
        break;
       }
      }
     }
     $903 = HEAP32[$39>>2]|0;
     HEAP32[$12>>2] = $903;
     $base$0 = $base$1;
     continue L3;
     break;
    }
    case 37:  {
     $904 = $44 >>> 14;
     $905 = HEAP32[$23>>2]|0;
     $906 = (($905) + 16|0);
     $907 = HEAP32[$906>>2]|0;
     $908 = (($907) + ($904<<2)|0);
     $909 = HEAP32[$908>>2]|0;
     $910 = (_getcached($909,$40,$base$1)|0);
     $911 = ($910|0)==(0|0);
     if ($911) {
      _pushclosure($L,$909,$40,$base$1,$57);
     } else {
      HEAP32[$57>>2] = $910;
      $912 = ((($base$1) + ($56<<4)|0) + 8|0);
      HEAP32[$912>>2] = 70;
     }
     $913 = HEAP32[$13>>2]|0;
     $914 = (($913) + 12|0);
     $915 = HEAP32[$914>>2]|0;
     $916 = ($915|0)>(0);
     if ($916) {
      $$sum2 = (($56) + 1)|0;
      $917 = (($base$1) + ($$sum2<<4)|0);
      HEAP32[$14>>2] = $917;
      _luaC_step($L);
      $918 = HEAP32[$41>>2]|0;
      HEAP32[$14>>2] = $918;
     }
     $919 = HEAP32[$27>>2]|0;
     $base$0 = $919;
     continue L3;
     break;
    }
    case 38:  {
     $920 = $44 >>> 23;
     $921 = (($920) + -1)|0;
     $922 = HEAP32[$ci$0>>2]|0;
     $923 = $base$1;
     $924 = $922;
     $925 = (($923) - ($924))|0;
     $926 = $925 >> 4;
     $927 = HEAP32[$23>>2]|0;
     $928 = (($927) + 76|0);
     $929 = HEAP8[$928>>0]|0;
     $930 = $929&255;
     $931 = (($926) - ($930))|0;
     $932 = (($931) + -1)|0;
     $933 = ($920|0)==(0);
     if ($933) {
      $934 = HEAP32[$15>>2]|0;
      $935 = HEAP32[$16>>2]|0;
      $936 = $934;
      $937 = $935;
      $938 = (($936) - ($937))|0;
      $939 = $938 >> 4;
      $940 = ($939|0)>($932|0);
      if (!($940)) {
       _luaD_growstack($L,$932);
      }
      $941 = HEAP32[$27>>2]|0;
      $942 = (($941) + ($56<<4)|0);
      $$sum1 = (($932) + ($56))|0;
      $943 = (($941) + ($$sum1<<4)|0);
      HEAP32[$16>>2] = $943;
      $b85$0 = $932;$base$3 = $941;$ra$2 = $942;
     } else {
      $b85$0 = $921;$base$3 = $base$1;$ra$2 = $57;
     }
     $944 = ($b85$0|0)>(0);
     if (!($944)) {
      $base$0 = $base$3;
      continue L3;
     }
     $945 = (1 - ($931))|0;
     $j$051 = 0;
     while(1) {
      $946 = ($j$051|0)<($932|0);
      if ($946) {
       $$sum = (($j$051) + ($945))|0;
       $947 = (($base$3) + ($$sum<<4)|0);
       $948 = (($ra$2) + ($j$051<<4)|0);
       $949 = $947;
       $950 = $949;
       $951 = HEAP32[$950>>2]|0;
       $952 = (($949) + 4)|0;
       $953 = $952;
       $954 = HEAP32[$953>>2]|0;
       $955 = $948;
       $956 = $955;
       HEAP32[$956>>2] = $951;
       $957 = (($955) + 4)|0;
       $958 = $957;
       HEAP32[$958>>2] = $954;
       $959 = ((($base$3) + ($$sum<<4)|0) + 8|0);
       $960 = HEAP32[$959>>2]|0;
       $961 = ((($ra$2) + ($j$051<<4)|0) + 8|0);
       HEAP32[$961>>2] = $960;
      } else {
       $962 = ((($ra$2) + ($j$051<<4)|0) + 8|0);
       HEAP32[$962>>2] = 0;
      }
      $963 = (($j$051) + 1)|0;
      $exitcond = ($963|0)==($b85$0|0);
      if ($exitcond) {
       $base$0 = $base$3;
       continue L3;
      } else {
       $j$051 = $963;
      }
     }
     break;
    }
    default: {
     $base$0 = $base$1;
     continue L3;
    }
    }
   } while(0);
   $843 = (($ra$1) + 24|0);
   $844 = HEAP32[$843>>2]|0;
   $845 = ($844|0)==(0);
   if ($845) {
    $base$0 = $base$2;
    continue;
   }
   $846 = (($ra$1) + 16|0);
   $847 = $846;
   $848 = $847;
   $849 = HEAP32[$848>>2]|0;
   $850 = (($847) + 4)|0;
   $851 = $850;
   $852 = HEAP32[$851>>2]|0;
   $853 = $ra$1;
   $854 = $853;
   HEAP32[$854>>2] = $849;
   $855 = (($853) + 4)|0;
   $856 = $855;
   HEAP32[$856>>2] = $852;
   $857 = HEAP32[$843>>2]|0;
   $858 = (($ra$1) + 8|0);
   HEAP32[$858>>2] = $857;
   $859 = $i$0 >>> 14;
   $860 = (($859) + -131071)|0;
   $861 = HEAP32[$29>>2]|0;
   $862 = (($861) + ($860<<2)|0);
   HEAP32[$29>>2] = $862;
   $base$0 = $base$2;
  }
  if ((label|0) == 193) {
   label = 0;
   $660 = HEAP32[$0>>2]|0;
   $661 = (($660) + 18|0);
   $662 = HEAP8[$661>>0]|0;
   $663 = $662&255;
   $664 = $663 | 4;
   $665 = $664&255;
   HEAP8[$661>>0] = $665;
   $ci$0 = $660;
   continue;
  }
  else if ((label|0) == 198) {
   label = 0;
   $672 = HEAP32[$0>>2]|0;
   $673 = (($672) + 8|0);
   $674 = HEAP32[$673>>2]|0;
   $675 = HEAP32[$672>>2]|0;
   $676 = HEAP32[$674>>2]|0;
   $677 = (($672) + 24|0);
   $678 = HEAP32[$677>>2]|0;
   $679 = HEAP32[$675>>2]|0;
   $680 = (($679) + 12|0);
   $681 = HEAP32[$680>>2]|0;
   $682 = (($681) + 76|0);
   $683 = HEAP8[$682>>0]|0;
   $684 = $683&255;
   $685 = (($678) + ($684<<4)|0);
   $686 = HEAP32[$23>>2]|0;
   $687 = (($686) + 56|0);
   $688 = HEAP32[$687>>2]|0;
   $689 = ($688|0)>(0);
   if ($689) {
    $690 = (($674) + 24|0);
    $691 = HEAP32[$690>>2]|0;
    _luaF_close($L,$691);
   }
   $692 = ($675>>>0)<($685>>>0);
   if ($692) {
    $694 = $675;$aux$079 = 0;
    while(1) {
     $693 = (($676) + ($aux$079<<4)|0);
     $695 = $694;
     $696 = $695;
     $697 = HEAP32[$696>>2]|0;
     $698 = (($695) + 4)|0;
     $699 = $698;
     $700 = HEAP32[$699>>2]|0;
     $701 = $693;
     $702 = $701;
     HEAP32[$702>>2] = $697;
     $703 = (($701) + 4)|0;
     $704 = $703;
     HEAP32[$704>>2] = $700;
     $705 = ((($675) + ($aux$079<<4)|0) + 8|0);
     $706 = HEAP32[$705>>2]|0;
     $707 = ((($676) + ($aux$079<<4)|0) + 8|0);
     HEAP32[$707>>2] = $706;
     $708 = (($aux$079) + 1)|0;
     $709 = (($675) + ($708<<4)|0);
     $710 = ($709>>>0)<($685>>>0);
     if ($710) {
      $694 = $709;$aux$079 = $708;
     } else {
      break;
     }
    }
   }
   $711 = HEAP32[$677>>2]|0;
   $712 = $711;
   $713 = $675;
   $714 = (($712) - ($713))|0;
   $715 = $714 >> 4;
   $716 = (($676) + ($715<<4)|0);
   $717 = (($674) + 24|0);
   $$c22 = $716;
   HEAP32[$717>>2] = $$c22;
   $718 = HEAP32[$18>>2]|0;
   $719 = $718;
   $720 = (($719) - ($713))|0;
   $721 = $720 >> 4;
   $722 = (($676) + ($721<<4)|0);
   HEAP32[$18>>2] = $722;
   $723 = (($674) + 4|0);
   HEAP32[$723>>2] = $722;
   $724 = (($672) + 28|0);
   $725 = HEAP32[$724>>2]|0;
   $726 = (($674) + 28|0);
   HEAP32[$726>>2] = $725;
   $727 = (($674) + 18|0);
   $728 = HEAP8[$727>>0]|0;
   $729 = $728&255;
   $730 = $729 | 64;
   $731 = $730&255;
   HEAP8[$727>>0] = $731;
   HEAP32[$0>>2] = $674;
   $ci$0 = $674;
   continue;
  }
  else if ((label|0) == 203) {
   label = 0;
   $732 = $44 >>> 23;
   $733 = ($732|0)==(0);
   if (!($733)) {
    $$sum20 = (($732) + -1)|0;
    $$sum21 = (($$sum20) + ($56))|0;
    $734 = (($base$1) + ($$sum21<<4)|0);
    HEAP32[$20>>2] = $734;
   }
   $735 = HEAP32[$23>>2]|0;
   $736 = (($735) + 56|0);
   $737 = HEAP32[$736>>2]|0;
   $738 = ($737|0)>(0);
   if ($738) {
    _luaF_close($L,$base$1);
   }
   $739 = (_luaD_poscall($L,$57)|0);
   $740 = (($ci$0) + 18|0);
   $741 = HEAP8[$740>>0]|0;
   $742 = $741 & 4;
   $743 = ($742<<24>>24)==(0);
   if ($743) {
    label = 208;
    break;
   }
   $744 = HEAP32[$0>>2]|0;
   $745 = ($739|0)==(0);
   if ($745) {
    $ci$0 = $744;
    continue;
   }
   $746 = (($744) + 4|0);
   $747 = HEAP32[$746>>2]|0;
   HEAP32[$19>>2] = $747;
   $ci$0 = $744;
   continue;
  }
 }
 if ((label|0) == 208) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 217) {
  _luaG_runerror($L,11000,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 220) {
  _luaG_runerror($L,11040,$vararg_buffer3);
  // unreachable;
 }
 else if ((label|0) == 223) {
  _luaG_runerror($L,11072,$vararg_buffer3);
  // unreachable;
 }
}
function _traceexec($L) {
 $L = $L|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($L) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($L) + 40|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = $4 & 8;
 $6 = ($5|0)==(0);
 if ($6) {
  $74 = 0;
 } else {
  $7 = (($L) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0);
  if ($9) {
   $10 = (($L) + 44|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($L) + 48|0);
   HEAP32[$12>>2] = $11;
   $74 = 1;
  } else {
   $74 = 0;
  }
 }
 $13 = (($1) + 18|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 & 128;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = $15 & 127;
  $19 = $18&255;
  HEAP8[$13>>0] = $19;
  STACKTOP = sp;return;
 }
 if ($74) {
  _luaD_hook($L,3,-1);
 }
 $20 = $4 & 4;
 $21 = ($20|0)==(0);
 do {
  if (!($21)) {
   $22 = HEAP32[$1>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 12|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($1) + 28|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($25) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $27;
   $31 = $29;
   $32 = (($30) - ($31))|0;
   $33 = $32 >> 2;
   $34 = (($33) + -1)|0;
   $35 = (($25) + 20|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   if ($37) {
    $55 = 0;
   } else {
    $38 = (($36) + ($34<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $55 = $39;
   }
   $40 = ($34|0)==(0);
   if (!($40)) {
    $41 = HEAP32[$26>>2]|0;
    $42 = (($L) + 20|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41>>>0)>($43>>>0);
    if ($44) {
     $45 = HEAP32[$35>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      $57 = 0;
     } else {
      $47 = HEAP32[$28>>2]|0;
      $48 = $43;
      $49 = $47;
      $50 = (($48) - ($49))|0;
      $51 = $50 >> 2;
      $52 = (($51) + -1)|0;
      $53 = (($45) + ($52<<2)|0);
      $54 = HEAP32[$53>>2]|0;
      $57 = $54;
     }
     $56 = ($55|0)==($57|0);
     if ($56) {
      break;
     }
    }
   }
   _luaD_hook($L,2,$55);
  }
 } while(0);
 $58 = (($1) + 28|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($L) + 20|0);
 HEAP32[$60>>2] = $59;
 $61 = (($L) + 6|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(1);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 if (!($74)) {
  $65 = HEAP32[$58>>2]|0;
  $66 = (($65) + -4|0);
  HEAP32[$58>>2] = $66;
  $67 = HEAP8[$13>>0]|0;
  $68 = $67&255;
  $69 = $68 | 128;
  $70 = $69&255;
  HEAP8[$13>>0] = $70;
  $71 = (($L) + 8|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + -16|0);
  HEAP32[$1>>2] = $73;
  _luaD_throw($L,1);
  // unreachable;
 }
 $64 = (($L) + 48|0);
 HEAP32[$64>>2] = 1;
 $65 = HEAP32[$58>>2]|0;
 $66 = (($65) + -4|0);
 HEAP32[$58>>2] = $66;
 $67 = HEAP8[$13>>0]|0;
 $68 = $67&255;
 $69 = $68 | 128;
 $70 = $69&255;
 HEAP8[$13>>0] = $70;
 $71 = (($L) + 8|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($72) + -16|0);
 HEAP32[$1>>2] = $73;
 _luaD_throw($L,1);
 // unreachable;
}
function _getcached($p,$encup,$base) {
 $p = $p|0;
 $encup = $encup|0;
 $base = $base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($p) + 40|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($p) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4|0)>(0);
 if (!($7)) {
  $$0 = $1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($1) + 16|0);
 $i$01 = 0;
 while(1) {
  $11 = ((($6) + ($i$01<<3)|0) + 4|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(0);
  $14 = ((($6) + ($i$01<<3)|0) + 5|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  if ($13) {
   $18 = (($encup) + ($16<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $27 = $21;
  } else {
   $17 = (($base) + ($16<<4)|0);
   $27 = $17;
  }
  $22 = (($8) + ($i$01<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)==($27|0);
  $9 = (($i$01) + 1)|0;
  if (!($26)) {
   $$0 = 0;
   label = 9;
   break;
  }
  $10 = ($9|0)<($4|0);
  if ($10) {
   $i$01 = $9;
  } else {
   $$0 = $1;
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _pushclosure($L,$p,$encup,$base,$ra) {
 $L = $L|0;
 $p = $p|0;
 $encup = $encup|0;
 $base = $base|0;
 $ra = $ra|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_luaF_newLclosure($L,$1)|0);
 $5 = (($4) + 12|0);
 HEAP32[$5>>2] = $p;
 HEAP32[$ra>>2] = $4;
 $6 = (($ra) + 8|0);
 HEAP32[$6>>2] = 70;
 $7 = ($1|0)>(0);
 if ($7) {
  $8 = (($4) + 16|0);
  $9 = (($4) + 16|0);
  $i$01 = 0;
  while(1) {
   $10 = ((($3) + ($i$01<<3)|0) + 4|0);
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   $13 = ((($3) + ($i$01<<3)|0) + 5|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $14&255;
   if ($12) {
    $19 = (($encup) + ($15<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($8) + ($i$01<<2)|0);
    HEAP32[$21>>2] = $20;
   } else {
    $16 = (($base) + ($15<<4)|0);
    $17 = (_luaF_findupval($L,$16)|0);
    $18 = (($9) + ($i$01<<2)|0);
    HEAP32[$18>>2] = $17;
   }
   $22 = (($i$01) + 1)|0;
   $exitcond = ($22|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $i$01 = $22;
   }
  }
 }
 $23 = (($p) + 5|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24 & 4;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $27 = (($p) + 32|0);
  HEAP32[$27>>2] = $4;
  STACKTOP = sp;return;
 }
 _luaC_barrierproto_($L,$p,$4);
 $27 = (($p) + 32|0);
 HEAP32[$27>>2] = $4;
 STACKTOP = sp;return;
}
function _luaZ_fill($z) {
 $z = $z|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $size = sp;
 $0 = (($z) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($z) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($z) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_iiii[$3 & 31]($1,$5,$size)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = HEAP32[$size>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = (($8) + -1)|0;
 HEAP32[$z>>2] = $10;
 $11 = (($z) + 4|0);
 $12 = (($6) + 1|0);
 HEAP32[$11>>2] = $12;
 $13 = HEAP8[$6>>0]|0;
 $14 = $13&255;
 $$0 = $14;
 STACKTOP = sp;return ($$0|0);
}
function _luaZ_init($L,$z,$reader,$data) {
 $L = $L|0;
 $z = $z|0;
 $reader = $reader|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($z) + 16|0);
 HEAP32[$0>>2] = $L;
 $1 = (($z) + 8|0);
 HEAP32[$1>>2] = $reader;
 $2 = (($z) + 12|0);
 HEAP32[$2>>2] = $data;
 HEAP32[$z>>2] = 0;
 $3 = (($z) + 4|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function _luaZ_read($z,$b,$n) {
 $z = $z|0;
 $b = $b|0;
 $n = $n|0;
 var $$$01 = 0, $$0 = 0, $$014 = 0, $$023 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (($z) + 4|0);
 $2 = (($z) + 4|0);
 $$014 = $n;$$023 = $b;
 while(1) {
  $3 = HEAP32[$z>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $5 = (_luaZ_fill($z)|0);
   $6 = ($5|0)==(-1);
   if ($6) {
    $$0 = $$014;
    label = 7;
    break;
   }
   $7 = HEAP32[$z>>2]|0;
   $8 = (($7) + 1)|0;
   HEAP32[$z>>2] = $8;
   $9 = HEAP32[$1>>2]|0;
   $10 = (($9) + -1|0);
   HEAP32[$1>>2] = $10;
  }
  $11 = HEAP32[$z>>2]|0;
  $12 = ($$014>>>0)>($11>>>0);
  $$$01 = $12 ? $11 : $$014;
  $13 = HEAP32[$2>>2]|0;
  _memcpy(($$023|0),($13|0),($$$01|0))|0;
  $14 = HEAP32[$z>>2]|0;
  $15 = (($14) - ($$$01))|0;
  HEAP32[$z>>2] = $15;
  $16 = HEAP32[$2>>2]|0;
  $17 = (($16) + ($$$01)|0);
  HEAP32[$2>>2] = $17;
  $18 = (($$023) + ($$$01)|0);
  $19 = (($$014) - ($$$01))|0;
  $20 = ($$014|0)==($$$01|0);
  if ($20) {
   $$0 = 0;
   label = 7;
   break;
  } else {
   $$014 = $19;$$023 = $18;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _luaZ_openspace($L,$buff,$n) {
 $L = $L|0;
 $buff = $buff|0;
 $n = $n|0;
 var $$n = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($buff) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1>>>0)<($n>>>0);
 if (!($2)) {
  $8 = HEAP32[$buff>>2]|0;
  STACKTOP = sp;return ($8|0);
 }
 $3 = ($n>>>0)<(32);
 $$n = $3 ? 32 : $n;
 $4 = (($$n) + 1)|0;
 $5 = ($4>>>0)>(4294967293);
 if ($5) {
  _luaM_toobig($L);
  // unreachable;
 }
 $6 = HEAP32[$buff>>2]|0;
 $7 = (_luaM_realloc_($L,$6,$1,$$n)|0);
 HEAP32[$buff>>2] = $7;
 HEAP32[$0>>2] = $$n;
 $8 = HEAP32[$buff>>2]|0;
 STACKTOP = sp;return ($8|0);
}
function _isalnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isalpha($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $isdigittmp = (($c) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  $3 = $isdigit;
 } else {
  $3 = 1;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function _isalpha($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c | 32;
 $1 = (($0) + -97)|0;
 $2 = ($1>>>0)<(26);
 $3 = $2&1;
 STACKTOP = sp;return ($3|0);
}
function _iscntrl($c) {
 $c = $c|0;
 var $$ = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c>>>0)<(32);
 $1 = ($c|0)==(127);
 $$ = $0 | $1;
 $2 = $$&1;
 STACKTOP = sp;return ($2|0);
}
function _isgraph($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -33)|0;
 $1 = ($0>>>0)<(94);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _islower($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -97)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _ispunct($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isgraph($c)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_isalnum($c)|0);
  $3 = ($2|0)==(0);
  $5 = $3;
 }
 $4 = $5&1;
 STACKTOP = sp;return ($4|0);
}
function _toupper($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_islower($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c & 95;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function _strcoll($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($l,$r)|0);
 STACKTOP = sp;return ($0|0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function ___memrchr($m,$c,$n) {
 $m = $m|0;
 $c = $c|0;
 $n = $n|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c&255;
 $$01 = $n;
 while(1) {
  $1 = (($$01) + -1)|0;
  $2 = ($$01|0)==(0);
  if ($2) {
   $$0 = 0;
   label = 4;
   break;
  }
  $3 = (($m) + ($1)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==($0<<24>>24);
  if ($5) {
   $$0 = $3;
   label = 4;
   break;
  } else {
   $$01 = $1;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $8 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $9 = $8;
    $10 = $9 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $8;
     break L5;
    } else {
     $$026 = $8;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$025 = 0, $$03$lcssa = 0, $$034 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $2 = (($c) + 1|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = ($3<<24>>24)==(0);
  if (!($4)) {
   ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
   $$025 = $c;$13 = $0;
   while(1) {
    $12 = $13&255;
    $14 = $12 & 31;
    $15 = 1 << $14;
    $16 = $12 >>> 5;
    $17 = (($byteset) + ($16<<2)|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 | $15;
    HEAP32[$17>>2] = $19;
    $20 = (($$025) + 1|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     break;
    } else {
     $$025 = $20;$13 = $21;
    }
   }
   $10 = HEAP8[$s>>0]|0;
   $11 = ($10<<24>>24)==(0);
   L7: do {
    if ($11) {
     $$03$lcssa = $s;
    } else {
     $$034 = $s;$27 = $10;
     while(1) {
      $26 = $27&255;
      $28 = $26 >>> 5;
      $29 = (($byteset) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $26 & 31;
      $32 = 1 << $31;
      $33 = $30 & $32;
      $34 = ($33|0)==(0);
      $24 = (($$034) + 1|0);
      if (!($34)) {
       $$03$lcssa = $$034;
       break L7;
      }
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$03$lcssa = $24;
       break;
      } else {
       $$034 = $24;$27 = $23;
      }
     }
    }
   } while(0);
   $35 = $$03$lcssa;
   $36 = $s;
   $37 = (($35) - ($36))|0;
   $$0 = $37;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $5 = $0 << 24 >> 24;
 $6 = (___strchrnul($s,$5)|0);
 $7 = $6;
 $8 = $s;
 $9 = (($7) - ($8))|0;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _strpbrk($s,$b) {
 $s = $s|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcspn($s,$b)|0);
 $1 = (($s) + ($0)|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 $4 = $3 ? $1 : 0;
 STACKTOP = sp;return ($4|0);
}
function _strrchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (___memrchr($s,$c,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _strspn($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$026 = 0, $$03 = 0, $$1$lcssa = 0, $$14 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $byteset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $byteset = sp;
 ;HEAP32[$byteset+0>>2]=0|0;HEAP32[$byteset+4>>2]=0|0;HEAP32[$byteset+8>>2]=0|0;HEAP32[$byteset+12>>2]=0|0;HEAP32[$byteset+16>>2]=0|0;HEAP32[$byteset+20>>2]=0|0;HEAP32[$byteset+24>>2]=0|0;HEAP32[$byteset+28>>2]=0|0;
 $0 = HEAP8[$c>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($c) + 1|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$03 = $s;
  while(1) {
   $5 = HEAP8[$$03>>0]|0;
   $6 = ($5<<24>>24)==($0<<24>>24);
   $7 = (($$03) + 1|0);
   if ($6) {
    $$03 = $7;
   } else {
    break;
   }
  }
  $8 = $$03;
  $9 = $s;
  $10 = (($8) - ($9))|0;
  $$0 = $10;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$026 = $c;$14 = $0;
 }
 while(1) {
  $13 = $14&255;
  $15 = $13 & 31;
  $16 = 1 << $15;
  $17 = $13 >>> 5;
  $18 = (($byteset) + ($17<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 | $16;
  HEAP32[$18>>2] = $20;
  $21 = (($$026) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   break;
  } else {
   $$026 = $21;$14 = $22;
  }
 }
 $11 = HEAP8[$s>>0]|0;
 $12 = ($11<<24>>24)==(0);
 L12: do {
  if ($12) {
   $$1$lcssa = $s;
  } else {
   $$14 = $s;$28 = $11;
   while(1) {
    $27 = $28&255;
    $29 = $27 >>> 5;
    $30 = (($byteset) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $27 & 31;
    $33 = 1 << $32;
    $34 = $31 & $33;
    $35 = ($34|0)==(0);
    $25 = (($$14) + 1|0);
    if ($35) {
     $$1$lcssa = $$14;
     break L12;
    }
    $24 = HEAP8[$25>>0]|0;
    $26 = ($24<<24>>24)==(0);
    if ($26) {
     $$1$lcssa = $25;
     break;
    } else {
     $$14 = $25;$28 = $24;
    }
   }
  }
 } while(0);
 $36 = $$1$lcssa;
 $37 = $s;
 $38 = (($36) - ($37))|0;
 $$0 = $38;
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i16 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i15 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i11 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i14 = 0, $$mem$0$us$i = 0, $$pr$i = 0, $$pr$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i10 = 0, $ip$0$ph78$i = 0, $ip$0$ph78146$i = 0;
 var $ip$0$ph81$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph58$i = 0, $ip$1$ph61$i = 0, $jp$0$ph22$ph72$i = 0, $jp$0$ph2266$i = 0, $jp$0$ph82$i = 0, $jp$1$ph11$ph52$i = 0, $jp$1$ph1146$i = 0, $jp$1$ph62$i = 0, $k$030$i = 0, $k$117$i = 0, $k$2$us$i = 0, $k$37$i = 0, $k$37$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$039$i = 0, $mem$0$us$i = 0;
 var $notlhs$i = 0, $notrhs$us$i = 0, $or$cond$i = 0, $or$cond$i12 = 0, $or$cond3$us$i = 0, $p$0$ph$ph70$i = 0, $p$0$ph$ph70150$i = 0, $p$0$ph$ph73$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph50$i = 0, $p$1$ph$ph53$i = 0, $p$3155$i = 0, $shift$i = 0, $z$0$i = 0, $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$270 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$31 = $270;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$31 = 0;
    break;
   } else {
    $$01$i = $26;$270 = $27;$hw$0$in2$i = $29;
   }
  }
  $32 = ($31<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $32 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i15 = $66;$$lcssa$i14 = 0;
  } else {
   $$02$i11 = $66;$hw$03$i10 = $92;
   while(1) {
    $94 = $hw$03$i10 << 8;
    $95 = (($$02$i11) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i12 = $99 | $100;
    if ($or$cond$i12) {
     $$0$lcssa$i15 = $95;$$lcssa$i14 = $99;
     break;
    } else {
     $$02$i11 = $95;$hw$03$i10 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i15) + -3|0);
  $$$i16 = $$lcssa$i14 ? 0 : $101;
  $$0 = $$$i16;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$039$i = 0;
 while(1) {
  $102 = (($3) + ($l$039$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 79;
   break;
  }
  $105 = $106&255;
  $107 = $105 & 31;
  $108 = 1 << $107;
  $109 = $105 >>> 5;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$039$i) + 1)|0;
  $114 = (($shift$i) + ($105<<2)|0);
  HEAP32[$114>>2] = $113;
  $115 = (($n) + ($113)|0);
  $116 = HEAP8[$115>>0]|0;
  $117 = ($116<<24>>24)==(0);
  if ($117) {
   break;
  } else {
   $106 = $116;$l$039$i = $113;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 $118 = ($113>>>0)>(1);
 L49: do {
  if ($118) {
   $271 = 1;$ip$0$ph81$i = -1;$jp$0$ph82$i = 0;
   L50: while(1) {
    $272 = $271;$jp$0$ph22$ph72$i = $jp$0$ph82$i;$p$0$ph$ph73$i = 1;
    while(1) {
     $273 = $272;$jp$0$ph2266$i = $jp$0$ph22$ph72$i;
     L54: while(1) {
      $120 = $273;$k$030$i = 1;
      while(1) {
       $125 = (($k$030$i) + ($ip$0$ph81$i))|0;
       $126 = (($n) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = (($n) + ($120)|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = ($127<<24>>24)==($129<<24>>24);
       if (!($130)) {
        break L54;
       }
       $131 = ($k$030$i|0)==($p$0$ph$ph73$i|0);
       $123 = (($k$030$i) + 1)|0;
       if ($131) {
        break;
       }
       $122 = (($123) + ($jp$0$ph2266$i))|0;
       $124 = ($122>>>0)<($113>>>0);
       if ($124) {
        $120 = $122;$k$030$i = $123;
       } else {
        $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
        break L50;
       }
      }
      $132 = (($jp$0$ph2266$i) + ($p$0$ph$ph73$i))|0;
      $133 = (($132) + 1)|0;
      $134 = ($133>>>0)<($113>>>0);
      if ($134) {
       $273 = $133;$jp$0$ph2266$i = $132;
      } else {
       $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $p$0$ph$ph73$i;
       break L50;
      }
     }
     $135 = ($127&255)>($129&255);
     $136 = (($120) - ($ip$0$ph81$i))|0;
     if (!($135)) {
      break;
     }
     $119 = (($120) + 1)|0;
     $121 = ($119>>>0)<($113>>>0);
     if ($121) {
      $272 = $119;$jp$0$ph22$ph72$i = $120;$p$0$ph$ph73$i = $136;
     } else {
      $ip$0$ph78$i = $ip$0$ph81$i;$p$0$ph$ph70$i = $136;
      break L50;
     }
    }
    $137 = (($jp$0$ph2266$i) + 1)|0;
    $138 = (($jp$0$ph2266$i) + 2)|0;
    $139 = ($138>>>0)<($113>>>0);
    if ($139) {
     $271 = $138;$ip$0$ph81$i = $jp$0$ph2266$i;$jp$0$ph82$i = $137;
    } else {
     $ip$0$ph78$i = $jp$0$ph2266$i;$p$0$ph$ph70$i = 1;
     break;
    }
   }
   $274 = 1;$ip$1$ph61$i = -1;$jp$1$ph62$i = 0;
   while(1) {
    $276 = $274;$jp$1$ph11$ph52$i = $jp$1$ph62$i;$p$1$ph$ph53$i = 1;
    while(1) {
     $275 = $276;$jp$1$ph1146$i = $jp$1$ph11$ph52$i;
     L69: while(1) {
      $147 = $275;$k$117$i = 1;
      while(1) {
       $143 = (($k$117$i) + ($ip$1$ph61$i))|0;
       $144 = (($n) + ($143)|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = (($n) + ($147)|0);
       $148 = HEAP8[$146>>0]|0;
       $149 = ($145<<24>>24)==($148<<24>>24);
       if (!($149)) {
        break L69;
       }
       $150 = ($k$117$i|0)==($p$1$ph$ph53$i|0);
       $141 = (($k$117$i) + 1)|0;
       if ($150) {
        break;
       }
       $140 = (($141) + ($jp$1$ph1146$i))|0;
       $142 = ($140>>>0)<($113>>>0);
       if ($142) {
        $147 = $140;$k$117$i = $141;
       } else {
        $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
        break L49;
       }
      }
      $151 = (($jp$1$ph1146$i) + ($p$1$ph$ph53$i))|0;
      $152 = (($151) + 1)|0;
      $153 = ($152>>>0)<($113>>>0);
      if ($153) {
       $275 = $152;$jp$1$ph1146$i = $151;
      } else {
       $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $p$1$ph$ph53$i;
       break L49;
      }
     }
     $154 = ($145&255)<($148&255);
     $155 = (($147) - ($ip$1$ph61$i))|0;
     if (!($154)) {
      break;
     }
     $156 = (($147) + 1)|0;
     $157 = ($156>>>0)<($113>>>0);
     if ($157) {
      $276 = $156;$jp$1$ph11$ph52$i = $147;$p$1$ph$ph53$i = $155;
     } else {
      $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $ip$1$ph61$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = $155;
      break L49;
     }
    }
    $158 = (($jp$1$ph1146$i) + 1)|0;
    $159 = (($jp$1$ph1146$i) + 2)|0;
    $160 = ($159>>>0)<($113>>>0);
    if ($160) {
     $274 = $159;$ip$1$ph61$i = $jp$1$ph1146$i;$jp$1$ph62$i = $158;
    } else {
     $ip$0$ph78146$i = $ip$0$ph78$i;$ip$1$ph58$i = $jp$1$ph1146$i;$p$0$ph$ph70150$i = $p$0$ph$ph70$i;$p$1$ph$ph50$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph78146$i = -1;$ip$1$ph58$i = -1;$p$0$ph$ph70150$i = 1;$p$1$ph$ph50$i = 1;
  }
 } while(0);
 $161 = (($ip$1$ph58$i) + 1)|0;
 $162 = (($ip$0$ph78146$i) + 1)|0;
 $163 = ($161>>>0)>($162>>>0);
 $p$1$p$0$i = $163 ? $p$1$ph$ph50$i : $p$0$ph$ph70150$i;
 $ip$1$ip$0$i = $163 ? $ip$1$ph58$i : $ip$0$ph78146$i;
 $164 = (($n) + ($p$1$p$0$i)|0);
 $165 = (($ip$1$ip$0$i) + 1)|0;
 $166 = (_memcmp($n,$164,$165)|0);
 $167 = ($166|0)==(0);
 if ($167) {
  $173 = (($113) - ($p$1$p$0$i))|0;
  $174 = $113 | 63;
  $notlhs$i = ($113|0)==($p$1$p$0$i|0);
  if ($notlhs$i) {
   $228 = $174;$p$3155$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $176 = $z$0$us$i;
    $177 = $$02$us$i;
    $178 = (($176) - ($177))|0;
    $179 = ($178>>>0)<($113>>>0);
    do {
     if ($179) {
      $180 = (_memchr($z$0$us$i,0,$174)|0);
      $181 = ($180|0)==(0|0);
      if ($181) {
       $185 = (($z$0$us$i) + ($174)|0);
       $z$1$us$i = $185;
       break;
      } else {
       $182 = $180;
       $183 = (($182) - ($177))|0;
       $184 = ($183>>>0)<($113>>>0);
       if ($184) {
        $$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $180;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $186 = (($$02$us$i) + ($l$039$i)|0);
    $187 = HEAP8[$186>>0]|0;
    $188 = $187&255;
    $189 = $188 >>> 5;
    $190 = (($byteset$i) + ($189<<2)|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = $188 & 31;
    $193 = 1 << $192;
    $194 = $193 & $191;
    $195 = ($194|0)==(0);
    if ($195) {
     $223 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $223;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $196 = (($shift$i) + ($188<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = (($113) - ($197))|0;
    $199 = ($113|0)==($197|0);
    if (!($199)) {
     $notrhs$us$i = ($mem$0$us$i|0)!=(0);
     $200 = ($198>>>0)<($p$1$p$0$i>>>0);
     $or$cond3$us$i = $notrhs$us$i & $200;
     $k$2$us$i = $or$cond3$us$i ? $173 : $198;
     $201 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $201;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $202 = ($165>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $202 ? $165 : $mem$0$us$i;
    $203 = (($n) + ($$mem$0$us$i)|0);
    $204 = HEAP8[$203>>0]|0;
    $205 = ($204<<24>>24)==(0);
    L97: do {
     if ($205) {
      $k$4$us$i = $165;
     } else {
      $$pr$us$i = $204;$k$37$us$i = $$mem$0$us$i;
      while(1) {
       $210 = (($$02$us$i) + ($k$37$us$i)|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($$pr$us$i<<24>>24)==($211<<24>>24);
       $207 = (($k$37$us$i) + 1)|0;
       if (!($212)) {
        break;
       }
       $206 = (($n) + ($207)|0);
       $208 = HEAP8[$206>>0]|0;
       $209 = ($208<<24>>24)==(0);
       if ($209) {
        $k$4$us$i = $165;
        break L97;
       } else {
        $$pr$us$i = $208;$k$37$us$i = $207;
       }
      }
      $213 = (($k$37$us$i) - ($ip$1$ip$0$i))|0;
      $214 = (($$02$us$i) + ($213)|0);
      $$02$us$i = $214;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $215 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($215)) {
      $$0 = $$02$us$i;
      label = 79;
      break L83;
     }
     $216 = (($k$4$us$i) + -1)|0;
     $217 = (($n) + ($216)|0);
     $218 = HEAP8[$217>>0]|0;
     $219 = (($$02$us$i) + ($216)|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ($218<<24>>24)==($220<<24>>24);
     if ($221) {
      $k$4$us$i = $216;
     } else {
      break;
     }
    }
    $222 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $222;$mem$0$us$i = $173;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $168 = (($113) - ($ip$1$ip$0$i))|0;
  $169 = (($168) + -1)|0;
  $170 = ($ip$1$ip$0$i>>>0)>($169>>>0);
  $ip$1$ip$0$$i = $170 ? $ip$1$ip$0$i : $169;
  $171 = (($ip$1$ip$0$$i) + 1)|0;
  $172 = $113 | 63;
  $228 = $172;$p$3155$i = $171;
 }
 $175 = (($n) + ($165)|0);
 $$02$i = $3;$z$0$i = $3;
 L110: while(1) {
  $224 = $z$0$i;
  $225 = $$02$i;
  $226 = (($224) - ($225))|0;
  $227 = ($226>>>0)<($113>>>0);
  do {
   if ($227) {
    $229 = (_memchr($z$0$i,0,$228)|0);
    $230 = ($229|0)==(0|0);
    if ($230) {
     $234 = (($z$0$i) + ($228)|0);
     $z$1$i = $234;
     break;
    } else {
     $231 = $229;
     $232 = (($231) - ($225))|0;
     $233 = ($232>>>0)<($113>>>0);
     if ($233) {
      $$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $229;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $235 = (($$02$i) + ($l$039$i)|0);
  $236 = HEAP8[$235>>0]|0;
  $237 = $236&255;
  $238 = $237 >>> 5;
  $239 = (($byteset$i) + ($238<<2)|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $237 & 31;
  $242 = 1 << $241;
  $243 = $242 & $240;
  $244 = ($243|0)==(0);
  if ($244) {
   $250 = (($$02$i) + ($113)|0);
   $$02$i = $250;$z$0$i = $z$1$i;
   continue;
  }
  $245 = (($shift$i) + ($237<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($113|0)==($246|0);
  if (!($247)) {
   $248 = (($113) - ($246))|0;
   $249 = (($$02$i) + ($248)|0);
   $$02$i = $249;$z$0$i = $z$1$i;
   continue;
  }
  $251 = HEAP8[$175>>0]|0;
  $252 = ($251<<24>>24)==(0);
  L124: do {
   if ($252) {
    $k$4$i = $165;
   } else {
    $$pr$i = $251;$k$37$i = $165;
    while(1) {
     $257 = (($$02$i) + ($k$37$i)|0);
     $258 = HEAP8[$257>>0]|0;
     $259 = ($$pr$i<<24>>24)==($258<<24>>24);
     $254 = (($k$37$i) + 1)|0;
     if (!($259)) {
      break;
     }
     $253 = (($n) + ($254)|0);
     $255 = HEAP8[$253>>0]|0;
     $256 = ($255<<24>>24)==(0);
     if ($256) {
      $k$4$i = $165;
      break L124;
     } else {
      $$pr$i = $255;$k$37$i = $254;
     }
    }
    $260 = (($k$37$i) - ($ip$1$ip$0$i))|0;
    $261 = (($$02$i) + ($260)|0);
    $$02$i = $261;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $262 = ($k$4$i|0)==(0);
   if ($262) {
    $$0 = $$02$i;
    label = 79;
    break L110;
   }
   $263 = (($k$4$i) + -1)|0;
   $264 = (($n) + ($263)|0);
   $265 = HEAP8[$264>>0]|0;
   $266 = (($$02$i) + ($263)|0);
   $267 = HEAP8[$266>>0]|0;
   $268 = ($265<<24>>24)==($267<<24>>24);
   if ($268) {
    $k$4$i = $263;
   } else {
    break;
   }
  }
  $269 = (($$02$i) + ($p$3155$i)|0);
  $$02$i = $269;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[11104>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((11104 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((11104 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[11104>>2] = $22;
     } else {
      $23 = HEAP32[((11104 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((11104 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((11104 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((11104 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[11104>>2] = $74;
      } else {
       $75 = HEAP32[((11104 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((11104 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((11104 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((11104 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[11104>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[11104>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((11104 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((11104 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((11104 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((11104 + 8|0))>>2] = $81;
     HEAP32[((11104 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((11104 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((11104 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((11104 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((11104 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((11104 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((11104 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((11104 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((11104 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((11104 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((11104 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((11104 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((11104 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((11104 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[11104>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[11104>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((11104 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((11104 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((11104 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((11104 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((11104 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((11104 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((11104 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((11104 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((11104 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((11104 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((11104 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((11104 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((11104 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((11104 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((11104 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((11104 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((11104 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((11104 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[11104>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[11104>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((11104 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((11104 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((11104 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((11104 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((11104 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((11104 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((11104 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((11104 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((11104 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((11104 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((11104 + 20|0))>>2] = $516;
   HEAP32[((11104 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((11104 + 8|0))>>2] = 0;
   HEAP32[((11104 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((11104 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((11104 + 12|0))>>2] = $530;
  $531 = HEAP32[((11104 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((11104 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[11576>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((11576 + 8|0))>>2] = $540;
    HEAP32[((11576 + 4|0))>>2] = $540;
    HEAP32[((11576 + 12|0))>>2] = -1;
    HEAP32[((11576 + 16|0))>>2] = -1;
    HEAP32[((11576 + 20|0))>>2] = 0;
    HEAP32[((11104 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[11576>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((11576 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((11104 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((11104 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((11104 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((11104 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((11104 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((11104 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((11576 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((11104 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((11104 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((11576 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((11104 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((11104 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((11104 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((11104 + 432|0))>>2] = $633;
  $634 = HEAP32[((11104 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((11104 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((11104 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((11104 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((11104 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((11104 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((11104 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((11104 + 460|0))>>2] = 0;
    $641 = HEAP32[11576>>2]|0;
    HEAP32[((11104 + 36|0))>>2] = $641;
    HEAP32[((11104 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((11104 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((11104 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((11104 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((11104 + 24|0))>>2] = $654;
    HEAP32[((11104 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((11576 + 16|0))>>2]|0;
    HEAP32[((11104 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((11104 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((11104 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((11104 + 24|0))>>2] = $684;
       HEAP32[((11104 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((11576 + 16|0))>>2]|0;
       HEAP32[((11104 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((11104 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((11104 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((11104 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((11104 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((11104 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((11104 + 12|0))>>2] = $732;
        HEAP32[((11104 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((11104 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((11104 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((11104 + 8|0))>>2] = $738;
         HEAP32[((11104 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((11104 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((11104 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[11104>>2]|0;
            $765 = $764 & $763;
            HEAP32[11104>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((11104 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((11104 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((11104 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((11104 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((11104 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((11104 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((11104 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((11104 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((11104 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((11104 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((11104 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[11104>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[11104>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((11104 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((11104 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((11104 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((11104 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((11104 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((11104 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((11104 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((11104 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((11104 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((11104 + 24|0))>>2] = $958;
    HEAP32[((11104 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((11576 + 16|0))>>2]|0;
    HEAP32[((11104 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((11104 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((11104 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((11104 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((11104 + 448|0))+12>>2]|0;
    HEAP32[((11104 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((11104 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((11104 + 460|0))>>2] = 0;
    HEAP32[((11104 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((11104 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[11104>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[11104>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((11104 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((11104 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((11104 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((11104 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((11104 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((11104 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((11104 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((11104 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((11104 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((11104 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((11104 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((11104 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((11104 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((11104 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((11104 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((11104 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[11104>>2]|0;
     $36 = $35 & $34;
     HEAP32[11104>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((11104 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((11104 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((11104 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((11104 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((11104 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((11104 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((11104 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((11104 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((11104 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((11104 + 12|0))>>2] = $122;
   HEAP32[((11104 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((11104 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((11104 + 20|0))>>2] = 0;
   HEAP32[((11104 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((11104 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((11104 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((11104 + 8|0))>>2] = $130;
   HEAP32[((11104 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((11104 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((11104 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[11104>>2]|0;
     $154 = $153 & $152;
     HEAP32[11104>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((11104 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((11104 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((11104 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((11104 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((11104 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((11104 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((11104 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((11104 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((11104 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((11104 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((11104 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((11104 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((11104 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[11104>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[11104>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((11104 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((11104 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((11104 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((11104 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((11104 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((11104 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((11104 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((11104 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((11104 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((11104 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((11104 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((11104 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((11104 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((11576 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((11104 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((11104 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((11104 + 24|0))>>2] = $38;
  HEAP32[((11104 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((11104 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((11104 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((11104 + 8|0))>>2] = $storemerge21;
  HEAP32[((11104 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((11104 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[11104>>2]|0;
    $90 = $89 & $88;
    HEAP32[11104>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((11104 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((11104 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((11104 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((11104 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((11104 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((11104 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((11104 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((11104 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((11104 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((11104 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((11104 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[11104>>2]|0;
     $32 = $31 & $30;
     HEAP32[11104>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((11104 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((11104 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((11104 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((11104 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((11104 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((11104 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((11104 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((11104 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((11104 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((11104 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((11104 + 12|0))>>2] = $117;
   HEAP32[((11104 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((11104 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((11104 + 20|0))>>2] = 0;
   HEAP32[((11104 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((11104 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((11104 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((11104 + 8|0))>>2] = $125;
   HEAP32[((11104 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((11104 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[11104>>2]|0;
     $148 = $147 & $146;
     HEAP32[11104>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((11104 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((11104 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((11104 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((11104 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((11104 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((11104 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((11104 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((11104 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((11104 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((11104 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[11104>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[11104>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((11104 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((11104 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((11104 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((11104 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((11104 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((11104 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((11104 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((11104 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isupper($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -65)|0;
 $1 = ($0>>>0)<(26);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _tolower($c) {
 $c = $c|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isupper($c)|0);
 $1 = ($0|0)==(0);
 $2 = $c | 32;
 $$0 = $1 ? $c : $2;
 STACKTOP = sp;return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (11600 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (11616 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $75 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $75 = $74;
    }
    $76 = ($75|0)==(40);
    if ($76) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L107: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $153 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $153 = $152;
          }
          $154 = ($153|0)==(48);
          if (!($154)) {
           $168 = 0;$171 = 0;$211 = $155;$213 = $156;$c$2$i = $153;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L107;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $168 = 0;$171 = 0;$211 = 0;$213 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L120: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L120;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $171;$713 = $168;$714 = $171;$715 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L120;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $169 = ($168|0)<(0);
        $170 = ($168|0)==(0);
        $172 = ($171>>>0)<(8);
        $173 = $170 & $172;
        $174 = $169 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($168|0)<(0);
          $178 = ($168|0)==(0);
          $179 = ($171>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($171|0),($168|0),1,0)|0);
        $191 = tempRet0;
        $712 = $211;$713 = $213;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $168 = $715;$171 = $714;$211 = $712;$213 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $212 = $210 ? $171 : $211;
      $214 = $210 ? $168 : $213;
      $215 = ($168|0)<(0);
      $216 = ($168|0)==(0);
      $217 = ($171>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $171;$222 = $168;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($212|0),($214|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L209: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L209;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L223: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L223;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$385 = $722;$386 = $724;$388 = $723;$389 = $725;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$385 = $716;$386 = 0;$388 = $717;$389 = 0;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $387 = $384 ? $386 : $385;
     $390 = $384 ? $389 : $388;
     $$388$i = $$3$lcssa$i;$405 = $387;$406 = $390;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $419 = $407;$422 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $419 = $405;$422 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $419 = $405;$422 = $406;
      }
     } else {
      $419 = $405;$422 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($419|0)==($421|0);
    $423 = ($422|0)==($424|0);
    $425 = $420 & $423;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($422|0)>($439|0);
    $441 = ($422|0)==($439|0);
    $442 = ($419>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($422|0)<($451|0);
    $453 = ($422|0)==($451|0);
    $454 = ($419>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($419|0);
      $470 = ($419|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($419|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($419|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($419))|0;
        $482 = (11632 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($419, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($419) + -10)|0;
       $495 = (11632 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($419|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $419;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($419|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (11632 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $419;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $419;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L321: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L321;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L352: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $626 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (11624 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $593 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $594 = ($593|0)<(2);
        if ($594) {
         $i$025$i = $593;
        } else {
         $i$1$i = $593;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L352;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($626|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $626;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($626) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $626;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $644 = (($687) - ($emin$0$ph))|0;
    $711 = ($644|0)<($bits$0$ph|0);
    if ($711) {
     $645 = ($644|0)<(0);
     $$$i22 = $645 ? 0 : $644;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($644|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 if ((($9|0) == 43) | (($9|0) == 45)) {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $9;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _srand($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($s) + -1)|0;
 $1 = 11664;
 $2 = $1;
 HEAP32[$2>>2] = $0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _rand() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 11664;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($0) + 4)|0;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (___muldi3(($2|0),($5|0),1284865837,1481765933)|0);
 $7 = tempRet0;
 $8 = (_i64Add(($6|0),($7|0),1,0)|0);
 $9 = tempRet0;
 $10 = 11664;
 $11 = $10;
 HEAP32[$11>>2] = $8;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $9;
 $14 = (_bitshift64Lshr(($8|0),($9|0),33)|0);
 $15 = tempRet0;
 STACKTOP = sp;return ($14|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 31]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 31]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $7 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $7 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $8 = $7;
 $9 = $6;
 $10 = (($8) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 31]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 31]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 31]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i103$i = 0, $$0$lcssa$i127$i = 0, $$0$lcssa$i142$i = 0, $$0$lcssa$i37 = 0, $$0$lcssa$i38$i = 0, $$0$lcssa$i43 = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i45$i = 0, $$0$lcssa$i48$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i55$i = 0, $$0$lcssa$i59 = 0, $$0$lcssa$i62$i = 0;
 var $$0$lcssa$i66 = 0, $$0$lcssa$i68$i = 0, $$0$lcssa$i75$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i96$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i101$i = 0, $$01$i125$i = 0, $$01$i140$i = 0, $$01$i35 = 0, $$01$i36$i = 0, $$01$i43$i = 0, $$01$i50 = 0, $$01$i53$i = 0, $$01$i57 = 0, $$01$i60$i = 0, $$01$i64 = 0, $$01$i66$i = 0;
 var $$01$i73$i = 0, $$01$i74 = 0, $$01$i94$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i85$i = 0, $$012$i = 0, $$013$i = 0, $$03$i40 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i79$i = 0, $$07$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i112$i = 0, $$114$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i110$i = 0;
 var $$12$i119$i = 0, $$12$i134$i = 0, $$12$i87$i = 0, $$13 = 0, $$14 = 0, $$15 = 0, $$17 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us159$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$210$$23$i = 0, $$210$$25$i = 0, $$210$i = 0, $$22$i = 0.0, $$23$i = 0, $$25$i = 0;
 var $$3$i = 0.0, $$31$i = 0, $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$412175$i = 0, $$5193$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us322$i = 0, $$a$3$us323$i = 0, $$a$3324$i = 0, $$a$3325$i = 0, $$fl$4 = 0, $$lcssa300$i = 0, $$lcssa92 = 0, $$mask$i = 0, $$mask$i30 = 0, $$mask1$i = 0, $$mask1$i29 = 0;
 var $$neg151$i = 0, $$neg152$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr146$i = 0, $$pre = 0, $$pre$i = 0, $$pre290 = 0, $$pre292 = 0, $$pre319$i = 0, $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0.0, $1037 = 0.0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1045$phi = 0, $1046 = 0, $1046$phi = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0.0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0.0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0;
 var $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0.0, $526 = 0.0, $527 = 0.0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0.0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0.0;
 var $586 = 0.0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0.0, $726 = 0.0, $727 = 0, $728 = 0.0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $a$0 = 0;
 var $a$1 = 0, $a$1$lcssa$i = 0, $a$1263$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3249$i = 0, $a$3249$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0;
 var $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0;
 var $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0255$i = 0, $carry3$0243$i = 0, $carry3$0243$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0254$i = 0, $d$0256$i = 0, $d$1242$i = 0, $d$1242$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4183$i = 0, $d$5174$i = 0, $d$6192$i = 0, $e$0238$i = 0, $e$1$i = 0;
 var $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1200$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0100 = 0, $fl$0104 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0166 = 0;
 var $i$0168 = 0, $i$0237$i = 0, $i$03$i = 0, $i$03$i22 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1230$i = 0, $i$2217$i = 0, $i$289 = 0, $i$3209$i = 0, $i$388 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i24 = 0, $isdigit11 = 0, $isdigit2$i = 0, $isdigit2$i21 = 0, $isdigit9 = 0, $isdigittmp = 0, $isdigittmp$i = 0;
 var $isdigittmp$i23 = 0, $isdigittmp1$i = 0, $isdigittmp1$i20 = 0, $isdigittmp10 = 0, $isdigittmp8 = 0, $j$0$i = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1210$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1167 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0;
 var $mb = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i100$i = 0, $or$cond$i35$i = 0, $or$cond$i42$i = 0, $or$cond$i49 = 0, $or$cond$i52$i = 0, $or$cond$i56 = 0, $or$cond$i59$i = 0, $or$cond$i63 = 0, $or$cond$i71 = 0, $or$cond$i72$i = 0, $or$cond$i73 = 0, $or$cond$i93$i = 0, $or$cond28$i = 0, $or$cond28173$i = 0, $or$cond29$i = 0, $or$cond4$i = 0;
 var $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1165$i = 0;
 var $round$0164$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us158$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us160$i = 0, $s1$0$i = 0, $s7$0180$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0169$i = 0, $s9$0$i = 0, $s9$1188$i = 0, $s9$2$i = 0, $sext = 0;
 var $sext84 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge12 = 0, $storemerge7103 = 0, $storemerge798 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0169 = 0, $ws$1175 = 0, $y$03$i = 0;
 var $y$03$i$i = 0, $y$03$i109$i = 0, $y$03$i118$i = 0, $y$03$i133$i = 0, $y$03$i86$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1$lcssa$i = 0, $z$1262$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3248$i = 0, $z$3248$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 836|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824|0;
 $pad$i = sp + 568|0;
 $buf = sp + 528|0;
 $wc = sp;
 $mb = sp + 520|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 288|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1045 = 0;$1046 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 344;
   break;
  } else {
   $1047 = $21;$25 = $22;
  }
  while(1) {
   if ((($1047<<24>>24) == 0)) {
    $$lcssa92 = $25;$z$0$lcssa = $25;
    break;
   } else if ((($1047<<24>>24) == 37)) {
    $27 = $25;$z$093 = $25;
    label = 9;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1047 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa92 = $27;$z$0$lcssa = $z$093;
      break L12;
     }
     $30 = (($z$093) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$093 = $30;
      label = 9;
     } else {
      $$lcssa92 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1046$phi = $1046;$1045$phi = $1045;$22 = $$lcssa92;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1046 = $1046$phi;$1045 = $1045$phi;
   continue;
  }
  $38 = (($$lcssa92) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa92) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa92) + 3|0);
    $$pre290 = HEAP8[$44>>0]|0;
    $46 = $$pre290;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0104 = 0;$storemerge7103 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $64 = $55;$fl$0100 = $fl$0104;$storemerge798 = $storemerge7103;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0104;
     $59 = (($storemerge7103) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0104 = $58;$storemerge7103 = $59;
     } else {
      $64 = $60;$fl$0100 = $58;$storemerge798 = $59;
      break;
     }
    }
   } else {
    $64 = $46;$fl$0100 = 0;$storemerge798 = $storemerge;
   }
  } while(0);
  $65 = ($64<<24>>24)==(42);
  do {
   if ($65) {
    $66 = (($storemerge798) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp10 = (($68) + -48)|0;
    $isdigit11 = ($isdigittmp10>>>0)<(10);
    if ($isdigit11) {
     $69 = (($storemerge798) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp10<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge798) + 3|0);
      $l10n$2 = 1;$storemerge12 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0100;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge12 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0100 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge12;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge12;$fl$1 = $fl$0100;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $64 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge798;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 362;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge798;$fl$1 = $fl$0100;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i20 = (($125) + -48)|0;
     $isdigit2$i21 = ($isdigittmp1$i20>>>0)<(10);
     if ($isdigit2$i21) {
      $128 = $125;$131 = $102;$i$03$i22 = 0;
     } else {
      $1048 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i22*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i23 = (($133) + -48)|0;
      $isdigit$i24 = ($isdigittmp$i23>>>0)<(10);
      if ($isdigit$i24) {
       $128 = $133;$131 = $130;$i$03$i22 = $129;
      } else {
       $1048 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp8 = (($107) + -48)|0;
    $isdigit9 = ($isdigittmp8>>>0)<(10);
    if ($isdigit9) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp8<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1048 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 362;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1048 = $105;$p$0 = $124;
    } else {
     $1048 = $105;$p$0 = 0;
    }
   } else {
    $1048 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1048;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 362;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((11672 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 362;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1049 = $1045;$1050 = $1046;
     label = 63;
    }
   } else {
    if ($147) {
     $148 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$148>>2] = $142;
     $149 = (($nl_arg) + ($argpos$0<<3)|0);
     $150 = $149;
     $151 = $150;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($150) + 4)|0;
     $154 = $153;
     $155 = HEAP32[$154>>2]|0;
     $156 = $152;
     $1049 = $155;$1050 = $156;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 362;
     break L1;
    }
    $157 = ($141&255)>(20);
    if ($157) {
     $199 = $134;$207 = $1046;$228 = $1045;
    } else {
     do {
      switch ($142|0) {
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $181 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $182 = $181&255;
       $183 = $182 << 24 >> 24;
       $184 = ($183|0)<(0);
       $185 = $184 << 31 >> 31;
       $sext = $181 << 24;
       $186 = $sext >> 24;
       $187 = $186;
       $1051 = $187;$1052 = $185;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $163 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $164 = $163;
       $1051 = $164;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$194 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $194;$195 = HEAP32[tempDoublePtr>>2]|0;
       $196 = HEAP32[tempDoublePtr+4>>2]|0;
       $197 = $195;
       $1049 = $196;$1050 = $197;
       label = 63;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $188 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i30 = $188 & 255;
       $189 = $$mask$i30;
       $1051 = $189;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $165 = $arglist_current14;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = (($165) + 4)|0;
       $169 = $168;
       $170 = HEAP32[$169>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $171 = $167;
       $1051 = $171;$1052 = $170;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $172 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $173 = $172&65535;
       $174 = $173 << 16 >> 16;
       $175 = ($174|0)<(0);
       $176 = $175 << 31 >> 31;
       $sext84 = $172 << 16;
       $177 = $sext84 >> 16;
       $178 = $177;
       $1051 = $178;$1052 = $176;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $158 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $1051 = $158;$1052 = $1045;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$190 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $190;$191 = HEAP32[tempDoublePtr>>2]|0;
       $192 = HEAP32[tempDoublePtr+4>>2]|0;
       $193 = $191;
       $1051 = $193;$1052 = $192;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $159 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $160 = ($159|0)<(0);
       $161 = $160 << 31 >> 31;
       $162 = $159;
       $1051 = $162;$1052 = $161;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $179 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i29 = $179 & 65535;
       $180 = $$mask1$i29;
       $1051 = $180;$1052 = 0;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1051 = $1046;$1052 = $1045;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1051 = $1050;$1052 = $1049;
    label = 64;
   } else {
    $1045 = $1049;$1046 = $1050;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre292 = HEAP8[$135>>0]|0;
   $199 = $$pre292;$207 = $1051;$228 = $1052;
  }
  $198 = $199 << 24 >> 24;
  $200 = ($st$0|0)==(0);
  if ($200) {
   $t$0 = $198;
  } else {
   $201 = $198 & 15;
   $202 = ($201|0)==(3);
   $203 = $198 & -33;
   $$ = $202 ? $203 : $198;
   $t$0 = $$;
  }
  $204 = $fl$1 & 8192;
  $205 = ($204|0)==(0);
  $206 = $fl$1 & -65537;
  $fl$1$ = $205 ? $fl$1 : $206;
  L92: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0|0) {
    case 0:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$207>>2] = $cnt$1;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $216 = ($cnt$1|0)<(0);
     $217 = $216 << 31 >> 31;
     $218 = $207;
     $219 = $218;
     HEAP32[$219>>2] = $cnt$1;
     $220 = (($218) + 4)|0;
     $221 = $220;
     HEAP32[$221>>2] = $217;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $208 = ($cnt$1|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = $207;
     $211 = $210;
     HEAP32[$211>>2] = $cnt$1;
     $212 = (($210) + 4)|0;
     $213 = $212;
     HEAP32[$213>>2] = $209;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $214 = $cnt$1&65535;
     HEAP16[$207>>1] = $214;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $215 = $cnt$1&255;
     HEAP8[$207>>0] = $215;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 111:  {
    $249 = $207;
    $250 = ($249|0)==(0);
    $251 = ($228|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i43 = $2;
    } else {
     $$03$i40 = $2;$254 = $249;$258 = $228;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = (($$03$i40) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i43 = $257;
       break;
      } else {
       $$03$i40 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 12136;
     label = 94;
    } else {
     $$13 = $252 ? 12136 : ((12136 + 5|0));
     $266 = $252&1;
     $$14 = $266 ^ 1;
     $307 = $207;$310 = $228;$a$0 = $$0$lcssa$i43;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$14;$prefix$1 = $$13;
     label = 94;
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 77;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     $1057 = $207;$1058 = $207;$i$0166 = 0;
     label = 110;
    } else {
     $1055 = $207;$1056 = $207;$p$4296 = $p$0;
     label = 104;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $368 = $207;
    HEAP32[tempDoublePtr>>2] = $368;HEAP32[tempDoublePtr+4>>2] = $228;$369 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $370 = ($228|0)<(0);
    if ($370) {
     $371 = -$369;
     $$07$i = $371;$pl$0$i = 1;$prefix$0$i = 12160;
    } else {
     $372 = $fl$1$ & 2048;
     $373 = ($372|0)==(0);
     if ($373) {
      $374 = $fl$1$ & 1;
      $375 = ($374|0)==(0);
      $$$i = $375 ? ((12160 + 1|0)) : ((12160 + 6|0));
      $$07$i = $369;$pl$0$i = $374;$prefix$0$i = $$$i;
     } else {
      $$07$i = $369;$pl$0$i = 1;$prefix$0$i = ((12160 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$376 = HEAP32[tempDoublePtr>>2]|0;
    $377 = HEAP32[tempDoublePtr+4>>2]|0;
    $378 = $377 & 2146435072;
    $379 = ($378>>>0)<(2146435072);
    $380 = ($378|0)==(2146435072);
    $381 = (0)<(0);
    $382 = $380 & $381;
    $383 = $379 | $382;
    if (!($383)) {
     $384 = $t$0 & 32;
     $385 = ($384|0)!=(0);
     $386 = $385 ? 12184 : 12192;
     $387 = ($$07$i != $$07$i) | (0.0 != 0.0);
     if ($387) {
      $388 = $385 ? 12200 : 12208;
      $pl$1$i = 0;$s1$0$i = $388;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $386;
     }
     $389 = (($pl$1$i) + 3)|0;
     $390 = $fl$1$ & 8192;
     $391 = ($390|0)==(0);
     $392 = ($389|0)<($w$1|0);
     $or$cond$i35$i = $391 & $392;
     if ($or$cond$i35$i) {
      $393 = (($w$1) - ($389))|0;
      $394 = ($393>>>0)>(256);
      $395 = $394 ? 256 : $393;
      _memset(($pad$i|0),32,($395|0))|0;
      $396 = ($393>>>0)>(255);
      if ($396) {
       $$01$i36$i = $393;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $397 = (($$01$i36$i) + -256)|0;
        $398 = ($397>>>0)>(255);
        if ($398) {
         $$01$i36$i = $397;
        } else {
         $$0$lcssa$i38$i = $397;
         break;
        }
       }
      } else {
       $$0$lcssa$i38$i = $393;
      }
      (___fwritex($pad$i,$$0$lcssa$i38$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $399 = $fl$1$ & 73728;
     $400 = ($399|0)==(8192);
     $or$cond$i42$i = $400 & $392;
     if ($or$cond$i42$i) {
      $401 = (($w$1) - ($389))|0;
      $402 = ($401>>>0)>(256);
      $403 = $402 ? 256 : $401;
      _memset(($pad$i|0),32,($403|0))|0;
      $404 = ($401>>>0)>(255);
      if ($404) {
       $$01$i43$i = $401;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $405 = (($$01$i43$i) + -256)|0;
        $406 = ($405>>>0)>(255);
        if ($406) {
         $$01$i43$i = $405;
        } else {
         $$0$lcssa$i45$i = $405;
         break;
        }
       }
      } else {
       $$0$lcssa$i45$i = $401;
      }
      (___fwritex($pad$i,$$0$lcssa$i45$i,$f)|0);
     }
     $w$$i = $392 ? $w$1 : $389;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $407 = (+_frexpl($$07$i,$e2$i));
    $408 = $407 * 2.0;
    $409 = $408 != 0.0;
    if ($409) {
     $410 = HEAP32[$e2$i>>2]|0;
     $411 = (($410) + -1)|0;
     HEAP32[$e2$i>>2] = $411;
    }
    $412 = $t$0 | 32;
    $413 = ($412|0)==(97);
    if ($413) {
     $414 = $t$0 & 32;
     $415 = ($414|0)==(0);
     $416 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $415 ? $prefix$0$i : $416;
     $417 = $pl$0$i | 2;
     $418 = ($p$0>>>0)>(11);
     $419 = (12 - ($p$0))|0;
     $re$0$i = $418 ? 0 : $419;
     $420 = ($re$0$i|0)==(0);
     do {
      if ($420) {
       $$1$i = $408;
      } else {
       $re$1165$i = $re$0$i;$round$0164$i = 8.0;
       while(1) {
        $421 = (($re$1165$i) + -1)|0;
        $422 = $round$0164$i * 16.0;
        $423 = ($421|0)==(0);
        if ($423) {
         break;
        } else {
         $re$1165$i = $421;$round$0164$i = $422;
        }
       }
       $424 = HEAP8[$prefix$0$$i>>0]|0;
       $425 = ($424<<24>>24)==(45);
       if ($425) {
        $426 = -$408;
        $427 = $426 - $422;
        $428 = $422 + $427;
        $429 = -$428;
        $$1$i = $429;
        break;
       } else {
        $430 = $408 + $422;
        $431 = $430 - $422;
        $$1$i = $431;
        break;
       }
      }
     } while(0);
     $432 = HEAP32[$e2$i>>2]|0;
     $433 = ($432|0)<(0);
     $434 = (0 - ($432))|0;
     $435 = $433 ? $434 : $432;
     $436 = ($435|0)<(0);
     if ($436) {
      $437 = ($435|0)<(0);
      $438 = $437 << 31 >> 31;
      $$05$i$i = $6;$439 = $435;$440 = $438;
      while(1) {
       $441 = (___uremdi3(($439|0),($440|0),10,0)|0);
       $442 = tempRet0;
       $443 = $441 | 48;
       $444 = $443&255;
       $445 = (($$05$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (___udivdi3(($439|0),($440|0),10,0)|0);
       $447 = tempRet0;
       $448 = ($440>>>0)>(9);
       $449 = ($440|0)==(9);
       $450 = ($439>>>0)>(4294967295);
       $451 = $449 & $450;
       $452 = $448 | $451;
       if ($452) {
        $$05$i$i = $445;$439 = $446;$440 = $447;
       } else {
        break;
       }
      }
      $$0$lcssa$i48$i = $445;$$01$lcssa$off0$i$i = $446;
     } else {
      $$0$lcssa$i48$i = $6;$$01$lcssa$off0$i$i = $435;
     }
     $453 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($453) {
      $$1$lcssa$i$i = $$0$lcssa$i48$i;
     } else {
      $$12$i$i = $$0$lcssa$i48$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $454 = (($y$03$i$i>>>0) % 10)&-1;
       $455 = $454 | 48;
       $456 = $455&255;
       $457 = (($$12$i$i) + -1|0);
       HEAP8[$457>>0] = $456;
       $458 = (($y$03$i$i>>>0) / 10)&-1;
       $459 = ($y$03$i$i>>>0)<(10);
       if ($459) {
        $$1$lcssa$i$i = $457;
        break;
       } else {
        $$12$i$i = $457;$y$03$i$i = $458;
       }
      }
     }
     $460 = ($$1$lcssa$i$i|0)==($6|0);
     if ($460) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $461 = HEAP32[$e2$i>>2]|0;
     $462 = $461 >> 31;
     $463 = $462 & 2;
     $464 = (($463) + 43)|0;
     $465 = $464&255;
     $466 = (($estr$0$i) + -1|0);
     HEAP8[$466>>0] = $465;
     $467 = (($t$0) + 15)|0;
     $468 = $467&255;
     $469 = (($estr$0$i) + -2|0);
     HEAP8[$469>>0] = $468;
     $470 = ($p$0|0)>(0);
     $471 = $fl$1$ & 8;
     $472 = ($471|0)==(0);
     if ($470) {
      if ($472) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $473 = (~~(($$2$us$us$i)));
        $474 = (12216 + ($473)|0);
        $475 = HEAP8[$474>>0]|0;
        $476 = $475&255;
        $477 = $476 | $414;
        $478 = $477&255;
        $479 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $478;
        $480 = (+($473|0));
        $481 = $$2$us$us$i - $480;
        $482 = $481 * 16.0;
        $483 = $479;
        $484 = (($483) - ($0))|0;
        $485 = ($484|0)==(1);
        if ($485) {
         $486 = (($s$0$us$us$i) + 2|0);
         HEAP8[$479>>0] = 46;
         $s$1$us$us$i = $486;
        } else {
         $s$1$us$us$i = $479;
        }
        $487 = $482 != 0.0;
        if ($487) {
         $$2$us$us$i = $482;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $488 = (~~(($$2$us$i)));
        $489 = (12216 + ($488)|0);
        $490 = HEAP8[$489>>0]|0;
        $491 = $490&255;
        $492 = $491 | $414;
        $493 = $492&255;
        $494 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $493;
        $495 = (+($488|0));
        $496 = $$2$us$i - $495;
        $497 = $496 * 16.0;
        $498 = $494;
        $499 = (($498) - ($0))|0;
        $500 = ($499|0)==(1);
        if ($500) {
         $501 = (($s$0$us$i) + 2|0);
         HEAP8[$494>>0] = 46;
         $s$1$us$i = $501;
        } else {
         $s$1$us$i = $494;
        }
        $502 = $497 != 0.0;
        if ($502) {
         $$2$us$i = $497;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($472) {
       $$2$us159$i = $$1$i;$s$0$us158$i = $buf$i;
       while(1) {
        $503 = (~~(($$2$us159$i)));
        $504 = (12216 + ($503)|0);
        $505 = HEAP8[$504>>0]|0;
        $506 = $505&255;
        $507 = $506 | $414;
        $508 = $507&255;
        $509 = (($s$0$us158$i) + 1|0);
        HEAP8[$s$0$us158$i>>0] = $508;
        $510 = (+($503|0));
        $511 = $$2$us159$i - $510;
        $512 = $511 * 16.0;
        $513 = $509;
        $514 = (($513) - ($0))|0;
        $515 = ($514|0)==(1);
        $516 = $512 != 0.0;
        $or$cond$i71 = $515 & $516;
        if ($or$cond$i71) {
         $517 = (($s$0$us158$i) + 2|0);
         HEAP8[$509>>0] = 46;
         $s$1$us160$i = $517;
        } else {
         $s$1$us160$i = $509;
        }
        if ($516) {
         $$2$us159$i = $512;$s$0$us158$i = $s$1$us160$i;
        } else {
         $s$1$lcssa$i = $s$1$us160$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $518 = (~~(($$2$i)));
        $519 = (12216 + ($518)|0);
        $520 = HEAP8[$519>>0]|0;
        $521 = $520&255;
        $522 = $521 | $414;
        $523 = $522&255;
        $524 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $523;
        $525 = (+($518|0));
        $526 = $$2$i - $525;
        $527 = $526 * 16.0;
        $528 = $524;
        $529 = (($528) - ($0))|0;
        $530 = ($529|0)==(1);
        if ($530) {
         $531 = (($s$0$i) + 2|0);
         HEAP8[$524>>0] = 46;
         $s$1$i = $531;
        } else {
         $s$1$i = $524;
        }
        $532 = $527 != 0.0;
        if ($532) {
         $$2$i = $527;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $533 = ($p$0|0)==(0);
     $$pre319$i = $s$1$lcssa$i;
     do {
      if ($533) {
       label = 173;
      } else {
       $534 = (($10) + ($$pre319$i))|0;
       $535 = ($534|0)<($p$0|0);
       if (!($535)) {
        label = 173;
        break;
       }
       $536 = $469;
       $537 = (($11) + ($p$0))|0;
       $538 = (($537) - ($536))|0;
       $l$0$i = $538;
      }
     } while(0);
     if ((label|0) == 173) {
      label = 0;
      $539 = $469;
      $540 = (($9) - ($539))|0;
      $541 = (($540) + ($$pre319$i))|0;
      $l$0$i = $541;
     }
     $542 = (($l$0$i) + ($417))|0;
     $543 = $fl$1$ & 73728;
     $544 = ($543|0)==(0);
     $545 = ($542|0)<($w$1|0);
     $or$cond$i52$i = $544 & $545;
     if ($or$cond$i52$i) {
      $546 = (($w$1) - ($542))|0;
      $547 = ($546>>>0)>(256);
      $548 = $547 ? 256 : $546;
      _memset(($pad$i|0),32,($548|0))|0;
      $549 = ($546>>>0)>(255);
      if ($549) {
       $$01$i53$i = $546;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $550 = (($$01$i53$i) + -256)|0;
        $551 = ($550>>>0)>(255);
        if ($551) {
         $$01$i53$i = $550;
        } else {
         $$0$lcssa$i55$i = $550;
         break;
        }
       }
      } else {
       $$0$lcssa$i55$i = $546;
      }
      (___fwritex($pad$i,$$0$lcssa$i55$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$417,$f)|0);
     $552 = ($543|0)==(65536);
     $or$cond$i59$i = $552 & $545;
     if ($or$cond$i59$i) {
      $553 = (($w$1) - ($542))|0;
      $554 = ($553>>>0)>(256);
      $555 = $554 ? 256 : $553;
      _memset(($pad$i|0),48,($555|0))|0;
      $556 = ($553>>>0)>(255);
      if ($556) {
       $$01$i60$i = $553;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $557 = (($$01$i60$i) + -256)|0;
        $558 = ($557>>>0)>(255);
        if ($558) {
         $$01$i60$i = $557;
        } else {
         $$0$lcssa$i62$i = $557;
         break;
        }
       }
      } else {
       $$0$lcssa$i62$i = $553;
      }
      (___fwritex($pad$i,$$0$lcssa$i62$i,$f)|0);
     }
     $559 = (($$pre319$i) - ($0))|0;
     (___fwritex($buf$i,$559,$f)|0);
     $560 = $469;
     $561 = (($8) - ($560))|0;
     $562 = (($l$0$i) - ($561))|0;
     $563 = (($562) - ($559))|0;
     $564 = ($563|0)>(0);
     if ($564) {
      $565 = ($563>>>0)>(256);
      $566 = $565 ? 256 : $563;
      _memset(($pad$i|0),48,($566|0))|0;
      $567 = ($563>>>0)>(255);
      if ($567) {
       $$01$i66$i = $563;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $568 = (($$01$i66$i) + -256)|0;
        $569 = ($568>>>0)>(255);
        if ($569) {
         $$01$i66$i = $568;
        } else {
         $$0$lcssa$i68$i = $568;
         break;
        }
       }
      } else {
       $$0$lcssa$i68$i = $563;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     (___fwritex($469,$561,$f)|0);
     $570 = ($543|0)==(8192);
     $or$cond$i72$i = $570 & $545;
     if ($or$cond$i72$i) {
      $571 = (($w$1) - ($542))|0;
      $572 = ($571>>>0)>(256);
      $573 = $572 ? 256 : $571;
      _memset(($pad$i|0),32,($573|0))|0;
      $574 = ($571>>>0)>(255);
      if ($574) {
       $$01$i73$i = $571;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $575 = (($$01$i73$i) + -256)|0;
        $576 = ($575>>>0)>(255);
        if ($576) {
         $$01$i73$i = $575;
        } else {
         $$0$lcssa$i75$i = $575;
         break;
        }
       }
      } else {
       $$0$lcssa$i75$i = $571;
      }
      (___fwritex($pad$i,$$0$lcssa$i75$i,$f)|0);
     }
     $w$18$i = $545 ? $w$1 : $542;
     $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $577 = ($p$0|0)<(0);
    $$p$i = $577 ? 6 : $p$0;
    if ($409) {
     $578 = $408 * 268435456.0;
     $579 = HEAP32[$e2$i>>2]|0;
     $580 = (($579) + -28)|0;
     HEAP32[$e2$i>>2] = $580;
     $$3$i = $578;$581 = $580;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $408;$581 = $$pre$i;
    }
    $582 = ($581|0)<(0);
    $$31$i = $582 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$31$i;
    while(1) {
     $583 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $583;
     $584 = (($z$0$i) + 4|0);
     $585 = (+($583>>>0));
     $586 = $$4$i - $585;
     $587 = $586 * 1.0E+9;
     $588 = $587 != 0.0;
     if ($588) {
      $$4$i = $587;$z$0$i = $584;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $589 = ($$pr$i|0)>(0);
    if ($589) {
     $590 = $$pr$i;$a$1263$i = $$31$i;$z$1262$i = $584;
     while(1) {
      $591 = ($590|0)>(29);
      $592 = $591 ? 29 : $590;
      $d$0254$i = (($z$1262$i) + -4|0);
      $593 = ($d$0254$i>>>0)<($a$1263$i>>>0);
      do {
       if ($593) {
        $a$2$ph$i = $a$1263$i;
       } else {
        $carry$0255$i = 0;$d$0256$i = $d$0254$i;
        while(1) {
         $594 = HEAP32[$d$0256$i>>2]|0;
         $595 = (_bitshift64Shl(($594|0),0,($592|0))|0);
         $596 = tempRet0;
         $597 = (_i64Add(($595|0),($596|0),($carry$0255$i|0),0)|0);
         $598 = tempRet0;
         $599 = (___uremdi3(($597|0),($598|0),1000000000,0)|0);
         $600 = tempRet0;
         HEAP32[$d$0256$i>>2] = $599;
         $601 = (___udivdi3(($597|0),($598|0),1000000000,0)|0);
         $602 = tempRet0;
         $d$0$i = (($d$0256$i) + -4|0);
         $603 = ($d$0$i>>>0)<($a$1263$i>>>0);
         if ($603) {
          break;
         } else {
          $carry$0255$i = $601;$d$0256$i = $d$0$i;
         }
        }
        $604 = ($601|0)==(0);
        if ($604) {
         $a$2$ph$i = $a$1263$i;
         break;
        }
        $605 = (($a$1263$i) + -4|0);
        HEAP32[$605>>2] = $601;
        $a$2$ph$i = $605;
       }
      } while(0);
      $z$2$i = $z$1262$i;
      while(1) {
       $606 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($606)) {
        break;
       }
       $607 = (($z$2$i) + -4|0);
       $608 = HEAP32[$607>>2]|0;
       $609 = ($608|0)==(0);
       if ($609) {
        $z$2$i = $607;
       } else {
        break;
       }
      }
      $610 = HEAP32[$e2$i>>2]|0;
      $611 = (($610) - ($592))|0;
      HEAP32[$e2$i>>2] = $611;
      $612 = ($611|0)>(0);
      if ($612) {
       $590 = $611;$a$1263$i = $a$2$ph$i;$z$1262$i = $z$2$i;
      } else {
       $$pr146$i = $611;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr146$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $584;
    }
    $613 = ($$pr146$i|0)<(0);
    L244: do {
     if ($613) {
      $614 = (($$p$i) + 25)|0;
      $615 = (($614|0) / 9)&-1;
      $616 = (($615) + 1)|0;
      $617 = ($412|0)==(102);
      if ($617) {
       $618 = $$31$i;
       $619 = (($$31$i) + ($616<<2)|0);
       $621 = $$pr146$i;$a$3249$us$i = $a$1$lcssa$i;$z$3248$us$i = $z$1$lcssa$i;
       while(1) {
        $620 = (0 - ($621))|0;
        $622 = ($620|0)>(9);
        $$20$us$i = $622 ? 9 : $620;
        $623 = ($a$3249$us$i>>>0)<($z$3248$us$i>>>0);
        do {
         if ($623) {
          $648 = 1 << $$20$us$i;
          $642 = (($648) + -1)|0;
          $645 = 1000000000 >>> $$20$us$i;
          $carry3$0243$us$i = 0;$d$1242$us$i = $a$3249$us$i;
          while(1) {
           $640 = HEAP32[$d$1242$us$i>>2]|0;
           $641 = $640 & $642;
           $643 = $640 >>> $$20$us$i;
           $644 = (($643) + ($carry3$0243$us$i))|0;
           HEAP32[$d$1242$us$i>>2] = $644;
           $630 = Math_imul($641, $645)|0;
           $646 = (($d$1242$us$i) + 4|0);
           $647 = ($646>>>0)<($z$3248$us$i>>>0);
           if ($647) {
            $carry3$0243$us$i = $630;$d$1242$us$i = $646;
           } else {
            break;
           }
          }
          $627 = HEAP32[$a$3249$us$i>>2]|0;
          $628 = ($627|0)==(0);
          $629 = (($a$3249$us$i) + 4|0);
          $$a$3$us$i = $628 ? $629 : $a$3249$us$i;
          $631 = ($630|0)==(0);
          if ($631) {
           $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $z$3248$us$i;
           break;
          }
          $632 = (($z$3248$us$i) + 4|0);
          HEAP32[$z$3248$us$i>>2] = $630;
          $$a$3$us323$i = $$a$3$us$i;$z$4$us$i = $632;
         } else {
          $624 = HEAP32[$a$3249$us$i>>2]|0;
          $625 = ($624|0)==(0);
          $626 = (($a$3249$us$i) + 4|0);
          $$a$3$us322$i = $625 ? $626 : $a$3249$us$i;
          $$a$3$us323$i = $$a$3$us322$i;$z$4$us$i = $z$3248$us$i;
         }
        } while(0);
        $633 = $z$4$us$i;
        $634 = (($633) - ($618))|0;
        $635 = $634 >> 2;
        $636 = ($635|0)>($616|0);
        $$z$4$us$i = $636 ? $619 : $z$4$us$i;
        $637 = HEAP32[$e2$i>>2]|0;
        $638 = (($637) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $638;
        $639 = ($638|0)<(0);
        if ($639) {
         $621 = $638;$a$3249$us$i = $$a$3$us323$i;$z$3248$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us323$i;$z$3$lcssa$i = $$z$4$us$i;
         break L244;
        }
       }
      } else {
       $650 = $$pr146$i;$a$3249$i = $a$1$lcssa$i;$z$3248$i = $z$1$lcssa$i;
      }
      while(1) {
       $649 = (0 - ($650))|0;
       $651 = ($649|0)>(9);
       $$20$i = $651 ? 9 : $649;
       $652 = ($a$3249$i>>>0)<($z$3248$i>>>0);
       do {
        if ($652) {
         $656 = 1 << $$20$i;
         $657 = (($656) + -1)|0;
         $658 = 1000000000 >>> $$20$i;
         $carry3$0243$i = 0;$d$1242$i = $a$3249$i;
         while(1) {
          $659 = HEAP32[$d$1242$i>>2]|0;
          $660 = $659 & $657;
          $661 = $659 >>> $$20$i;
          $662 = (($661) + ($carry3$0243$i))|0;
          HEAP32[$d$1242$i>>2] = $662;
          $663 = Math_imul($660, $658)|0;
          $664 = (($d$1242$i) + 4|0);
          $665 = ($664>>>0)<($z$3248$i>>>0);
          if ($665) {
           $carry3$0243$i = $663;$d$1242$i = $664;
          } else {
           break;
          }
         }
         $666 = HEAP32[$a$3249$i>>2]|0;
         $667 = ($666|0)==(0);
         $668 = (($a$3249$i) + 4|0);
         $$a$3$i = $667 ? $668 : $a$3249$i;
         $669 = ($663|0)==(0);
         if ($669) {
          $$a$3325$i = $$a$3$i;$z$4$i = $z$3248$i;
          break;
         }
         $670 = (($z$3248$i) + 4|0);
         HEAP32[$z$3248$i>>2] = $663;
         $$a$3325$i = $$a$3$i;$z$4$i = $670;
        } else {
         $653 = HEAP32[$a$3249$i>>2]|0;
         $654 = ($653|0)==(0);
         $655 = (($a$3249$i) + 4|0);
         $$a$3324$i = $654 ? $655 : $a$3249$i;
         $$a$3325$i = $$a$3324$i;$z$4$i = $z$3248$i;
        }
       } while(0);
       $671 = $z$4$i;
       $672 = $$a$3325$i;
       $673 = (($671) - ($672))|0;
       $674 = $673 >> 2;
       $675 = ($674|0)>($616|0);
       if ($675) {
        $676 = (($$a$3325$i) + ($616<<2)|0);
        $z$5$i = $676;
       } else {
        $z$5$i = $z$4$i;
       }
       $677 = HEAP32[$e2$i>>2]|0;
       $678 = (($677) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $678;
       $679 = ($678|0)<(0);
       if ($679) {
        $650 = $678;$a$3249$i = $$a$3325$i;$z$3248$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3325$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $680 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $681 = $$31$i;
    do {
     if ($680) {
      $682 = $a$3$lcssa$i;
      $683 = (($681) - ($682))|0;
      $684 = $683 >> 2;
      $685 = ($684*9)|0;
      $686 = HEAP32[$a$3$lcssa$i>>2]|0;
      $687 = ($686>>>0)<(10);
      if ($687) {
       $e$1$i = $685;
       break;
      } else {
       $e$0238$i = $685;$i$0237$i = 10;
      }
      while(1) {
       $688 = ($i$0237$i*10)|0;
       $689 = (($e$0238$i) + 1)|0;
       $690 = ($686>>>0)<($688>>>0);
       if ($690) {
        $e$1$i = $689;
        break;
       } else {
        $e$0238$i = $689;$i$0237$i = $688;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $691 = ($412|0)!=(102);
    $692 = $691 ? $e$1$i : 0;
    $693 = (($$p$i) - ($692))|0;
    $694 = ($412|0)==(103);
    $695 = ($$p$i|0)!=(0);
    $$21$i = $694 & $695;
    $$neg151$i = $$21$i << 31 >> 31;
    $696 = (($693) + ($$neg151$i))|0;
    $697 = $z$3$lcssa$i;
    $698 = (($697) - ($681))|0;
    $699 = $698 >> 2;
    $700 = ($699*9)|0;
    $701 = (($700) + -9)|0;
    $702 = ($696|0)<($701|0);
    if ($702) {
     $703 = (($696) + 9216)|0;
     $704 = (($703|0) / 9)&-1;
     $$sum$i = (($704) + -1023)|0;
     $705 = (($$31$i) + ($$sum$i<<2)|0);
     $706 = (($703|0) % 9)&-1;
     $j$0229$i = (($706) + 1)|0;
     $707 = ($j$0229$i|0)<(9);
     if ($707) {
      $i$1230$i = 10;$j$0231$i = $j$0229$i;
      while(1) {
       $708 = ($i$1230$i*10)|0;
       $j$0$i = (($j$0231$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $708;
        break;
       } else {
        $i$1230$i = $708;$j$0231$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $709 = HEAP32[$705>>2]|0;
     $710 = (($709>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $711 = ($710|0)==(0);
     if ($711) {
      $$sum15$i = (($704) + -1022)|0;
      $712 = (($$31$i) + ($$sum15$i<<2)|0);
      $713 = ($712|0)==($z$3$lcssa$i|0);
      if ($713) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
      } else {
       label = 233;
      }
     } else {
      label = 233;
     }
     do {
      if ((label|0) == 233) {
       label = 0;
       $714 = (($709>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $715 = $714 & 1;
       $716 = ($715|0)==(0);
       $$22$i = $716 ? 9007199254740992.0 : 9007199254740994.0;
       $717 = (($i$1$lcssa$i|0) / 2)&-1;
       $718 = ($710>>>0)<($717>>>0);
       do {
        if ($718) {
         $small$0$i = 0.5;
        } else {
         $719 = ($710|0)==($717|0);
         if ($719) {
          $$sum16$i = (($704) + -1022)|0;
          $720 = (($$31$i) + ($$sum16$i<<2)|0);
          $721 = ($720|0)==($z$3$lcssa$i|0);
          if ($721) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $722 = ($pl$0$i|0)==(0);
       do {
        if ($722) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $723 = HEAP8[$prefix$0$i>>0]|0;
         $724 = ($723<<24>>24)==(45);
         if (!($724)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $725 = $$22$i * -1.0;
         $726 = $small$0$i * -1.0;
         $round6$1$i = $725;$small$1$i = $726;
        }
       } while(0);
       $727 = (($709) - ($710))|0;
       HEAP32[$705>>2] = $727;
       $728 = $round6$1$i + $small$1$i;
       $729 = $728 != $round6$1$i;
       if (!($729)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $705;$e$3$i = $e$1$i;
        break;
       }
       $730 = (($727) + ($i$1$lcssa$i))|0;
       HEAP32[$705>>2] = $730;
       $731 = ($730>>>0)>(999999999);
       if ($731) {
        $a$5223$i = $a$3$lcssa$i;$d$2222$i = $705;
        while(1) {
         $732 = (($d$2222$i) + -4|0);
         HEAP32[$d$2222$i>>2] = 0;
         $733 = ($732>>>0)<($a$5223$i>>>0);
         if ($733) {
          $734 = (($a$5223$i) + -4|0);
          HEAP32[$734>>2] = 0;
          $a$6$i = $734;
         } else {
          $a$6$i = $a$5223$i;
         }
         $735 = HEAP32[$732>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$732>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $a$5223$i = $a$6$i;$d$2222$i = $732;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $732;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $705;
       }
       $738 = $a$5$lcssa$i;
       $739 = (($681) - ($738))|0;
       $740 = $739 >> 2;
       $741 = ($740*9)|0;
       $742 = HEAP32[$a$5$lcssa$i>>2]|0;
       $743 = ($742>>>0)<(10);
       if ($743) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $741;
        break;
       } else {
        $e$2218$i = $741;$i$2217$i = 10;
       }
       while(1) {
        $744 = ($i$2217$i*10)|0;
        $745 = (($e$2218$i) + 1)|0;
        $746 = ($742>>>0)<($744>>>0);
        if ($746) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $745;
         break;
        } else {
         $e$2218$i = $745;$i$2217$i = $744;
        }
       }
      }
     } while(0);
     $747 = (($d$3$i) + 4|0);
     $748 = ($z$3$lcssa$i>>>0)>($747>>>0);
     $$z$3$i = $748 ? $747 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $749 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $750 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($750)) {
      $$lcssa300$i = 0;
      break;
     }
     $751 = (($z$6$i) + -4|0);
     $752 = HEAP32[$751>>2]|0;
     $753 = ($752|0)==(0);
     if ($753) {
      $z$6$i = $751;
     } else {
      $$lcssa300$i = 1;
      break;
     }
    }
    do {
     if ($694) {
      $754 = ($$p$i|0)==(0);
      $755 = $754&1;
      $$$p$i = (($755) + ($$p$i))|0;
      $756 = ($$$p$i|0)>($e$4$ph$i|0);
      $757 = ($e$4$ph$i|0)>(-5);
      $or$cond4$i = $756 & $757;
      if ($or$cond4$i) {
       $758 = (($t$0) + -1)|0;
       $$neg152$i = (($$$p$i) + -1)|0;
       $759 = (($$neg152$i) - ($e$4$ph$i))|0;
       $$013$i = $758;$$210$i = $759;
      } else {
       $760 = (($t$0) + -2)|0;
       $761 = (($$$p$i) + -1)|0;
       $$013$i = $760;$$210$i = $761;
      }
      $762 = $fl$1$ & 8;
      $763 = ($762|0)==(0);
      if (!($763)) {
       $$114$i = $$013$i;$$311$i = $$210$i;
       break;
      }
      do {
       if ($$lcssa300$i) {
        $764 = (($z$6$i) + -4|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($765|0)==(0);
        if ($766) {
         $j$2$i = 9;
         break;
        }
        $767 = (($765>>>0) % 10)&-1;
        $768 = ($767|0)==(0);
        if ($768) {
         $i$3209$i = 10;$j$1210$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $769 = ($i$3209$i*10)|0;
         $770 = (($j$1210$i) + 1)|0;
         $771 = (($765>>>0) % ($769>>>0))&-1;
         $772 = ($771|0)==(0);
         if ($772) {
          $i$3209$i = $769;$j$1210$i = $770;
         } else {
          $j$2$i = $770;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $773 = $$013$i | 32;
      $774 = ($773|0)==(102);
      $775 = $z$6$i;
      $776 = (($775) - ($681))|0;
      $777 = $776 >> 2;
      $778 = ($777*9)|0;
      $779 = (($778) + -9)|0;
      if ($774) {
       $780 = (($779) - ($j$2$i))|0;
       $781 = ($780|0)<(0);
       $$23$i = $781 ? 0 : $780;
       $782 = ($$210$i|0)<($$23$i|0);
       $$210$$23$i = $782 ? $$210$i : $$23$i;
       $$114$i = $$013$i;$$311$i = $$210$$23$i;
       break;
      } else {
       $783 = (($779) + ($e$4$ph$i))|0;
       $784 = (($783) - ($j$2$i))|0;
       $785 = ($784|0)<(0);
       $$25$i = $785 ? 0 : $784;
       $786 = ($$210$i|0)<($$25$i|0);
       $$210$$25$i = $786 ? $$210$i : $$25$i;
       $$114$i = $$013$i;$$311$i = $$210$$25$i;
       break;
      }
     } else {
      $$114$i = $t$0;$$311$i = $$p$i;
     }
    } while(0);
    $787 = ($$311$i|0)!=(0);
    if ($787) {
     $791 = 1;
    } else {
     $788 = $fl$1$ & 8;
     $789 = ($788|0)!=(0);
     $791 = $789;
    }
    $790 = $791&1;
    $792 = $$114$i | 32;
    $793 = ($792|0)==(102);
    if ($793) {
     $794 = ($e$4$ph$i|0)>(0);
     $795 = $794 ? $e$4$ph$i : 0;
     $$pn$i = $795;$estr$2$i = 0;
    } else {
     $796 = ($e$4$ph$i|0)<(0);
     $797 = $796 ? $749 : $e$4$ph$i;
     $798 = ($797|0)<(0);
     if ($798) {
      $799 = ($797|0)<(0);
      $800 = $799 << 31 >> 31;
      $$05$i79$i = $6;$801 = $797;$802 = $800;
      while(1) {
       $803 = (___uremdi3(($801|0),($802|0),10,0)|0);
       $804 = tempRet0;
       $805 = $803 | 48;
       $806 = $805&255;
       $807 = (($$05$i79$i) + -1|0);
       HEAP8[$807>>0] = $806;
       $808 = (___udivdi3(($801|0),($802|0),10,0)|0);
       $809 = tempRet0;
       $810 = ($802>>>0)>(9);
       $811 = ($802|0)==(9);
       $812 = ($801>>>0)>(4294967295);
       $813 = $811 & $812;
       $814 = $810 | $813;
       if ($814) {
        $$05$i79$i = $807;$801 = $808;$802 = $809;
       } else {
        break;
       }
      }
      $$0$lcssa$i84$i = $807;$$01$lcssa$off0$i85$i = $808;
     } else {
      $$0$lcssa$i84$i = $6;$$01$lcssa$off0$i85$i = $797;
     }
     $815 = ($$01$lcssa$off0$i85$i|0)==(0);
     if ($815) {
      $estr$1$ph$i = $$0$lcssa$i84$i;
     } else {
      $$12$i87$i = $$0$lcssa$i84$i;$y$03$i86$i = $$01$lcssa$off0$i85$i;
      while(1) {
       $816 = (($y$03$i86$i>>>0) % 10)&-1;
       $817 = $816 | 48;
       $818 = $817&255;
       $819 = (($$12$i87$i) + -1|0);
       HEAP8[$819>>0] = $818;
       $820 = (($y$03$i86$i>>>0) / 10)&-1;
       $821 = ($y$03$i86$i>>>0)<(10);
       if ($821) {
        $estr$1$ph$i = $819;
        break;
       } else {
        $$12$i87$i = $819;$y$03$i86$i = $820;
       }
      }
     }
     $822 = $estr$1$ph$i;
     $823 = (($8) - ($822))|0;
     $824 = ($823|0)<(2);
     if ($824) {
      $estr$1200$i = $estr$1$ph$i;
      while(1) {
       $825 = (($estr$1200$i) + -1|0);
       HEAP8[$825>>0] = 48;
       $826 = $825;
       $827 = (($8) - ($826))|0;
       $828 = ($827|0)<(2);
       if ($828) {
        $estr$1200$i = $825;
       } else {
        $estr$1$lcssa$i = $825;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $829 = $e$4$ph$i >> 31;
     $830 = $829 & 2;
     $831 = (($830) + 43)|0;
     $832 = $831&255;
     $833 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$833>>0] = $832;
     $834 = $$114$i&255;
     $835 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$835>>0] = $834;
     $836 = $835;
     $837 = (($8) - ($836))|0;
     $$pn$i = $837;$estr$2$i = $835;
    }
    $838 = (($pl$0$i) + 1)|0;
    $839 = (($838) + ($$311$i))|0;
    $l$1$i = (($839) + ($790))|0;
    $840 = (($l$1$i) + ($$pn$i))|0;
    $841 = $fl$1$ & 73728;
    $842 = ($841|0)==(0);
    $843 = ($840|0)<($w$1|0);
    $or$cond$i93$i = $842 & $843;
    if ($or$cond$i93$i) {
     $844 = (($w$1) - ($840))|0;
     $845 = ($844>>>0)>(256);
     $846 = $845 ? 256 : $844;
     _memset(($pad$i|0),32,($846|0))|0;
     $847 = ($844>>>0)>(255);
     if ($847) {
      $$01$i94$i = $844;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $848 = (($$01$i94$i) + -256)|0;
       $849 = ($848>>>0)>(255);
       if ($849) {
        $$01$i94$i = $848;
       } else {
        $$0$lcssa$i96$i = $848;
        break;
       }
      }
     } else {
      $$0$lcssa$i96$i = $844;
     }
     (___fwritex($pad$i,$$0$lcssa$i96$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $850 = ($841|0)==(65536);
    $or$cond$i100$i = $850 & $843;
    if ($or$cond$i100$i) {
     $851 = (($w$1) - ($840))|0;
     $852 = ($851>>>0)>(256);
     $853 = $852 ? 256 : $851;
     _memset(($pad$i|0),48,($853|0))|0;
     $854 = ($851>>>0)>(255);
     if ($854) {
      $$01$i101$i = $851;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $855 = (($$01$i101$i) + -256)|0;
       $856 = ($855>>>0)>(255);
       if ($856) {
        $$01$i101$i = $855;
       } else {
        $$0$lcssa$i103$i = $855;
        break;
       }
      }
     } else {
      $$0$lcssa$i103$i = $851;
     }
     (___fwritex($pad$i,$$0$lcssa$i103$i,$f)|0);
    }
    do {
     if ($793) {
      $857 = ($a$8$ph$i>>>0)>($$31$i>>>0);
      $r$0$a$8$i = $857 ? $$31$i : $a$8$ph$i;
      $d$4183$i = $r$0$a$8$i;
      while(1) {
       $858 = HEAP32[$d$4183$i>>2]|0;
       $859 = ($858|0)==(0);
       if ($859) {
        $$1$lcssa$i112$i = $13;
       } else {
        $$12$i110$i = $13;$y$03$i109$i = $858;
        while(1) {
         $860 = (($y$03$i109$i>>>0) % 10)&-1;
         $861 = $860 | 48;
         $862 = $861&255;
         $863 = (($$12$i110$i) + -1|0);
         HEAP8[$863>>0] = $862;
         $864 = (($y$03$i109$i>>>0) / 10)&-1;
         $865 = ($y$03$i109$i>>>0)<(10);
         if ($865) {
          $$1$lcssa$i112$i = $863;
          break;
         } else {
          $$12$i110$i = $863;$y$03$i109$i = $864;
         }
        }
       }
       $866 = ($d$4183$i|0)==($r$0$a$8$i|0);
       do {
        if ($866) {
         $870 = ($$1$lcssa$i112$i|0)==($13|0);
         if (!($870)) {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $867 = ($$1$lcssa$i112$i>>>0)>($buf$i>>>0);
         if ($867) {
          $s7$0180$i = $$1$lcssa$i112$i;
         } else {
          $s7$1$i = $$1$lcssa$i112$i;
          break;
         }
         while(1) {
          $868 = (($s7$0180$i) + -1|0);
          HEAP8[$868>>0] = 48;
          $869 = ($868>>>0)>($buf$i>>>0);
          if ($869) {
           $s7$0180$i = $868;
          } else {
           $s7$1$i = $868;
           break;
          }
         }
        }
       } while(0);
       $871 = $s7$1$i;
       $872 = (($14) - ($871))|0;
       (___fwritex($s7$1$i,$872,$f)|0);
       $873 = (($d$4183$i) + 4|0);
       $874 = ($873>>>0)>($$31$i>>>0);
       if ($874) {
        break;
       } else {
        $d$4183$i = $873;
       }
      }
      if (!($787)) {
       $875 = $fl$1$ & 8;
       $876 = ($875|0)==(0);
       if ($876) {
        break;
       }
      }
      (___fwritex(12232,1,$f)|0);
      $877 = ($873>>>0)<($z$6$i>>>0);
      $878 = ($$311$i|0)>(0);
      $or$cond28173$i = $877 & $878;
      if ($or$cond28173$i) {
       $$412175$i = $$311$i;$d$5174$i = $873;
       while(1) {
        $879 = HEAP32[$d$5174$i>>2]|0;
        $880 = ($879|0)==(0);
        if ($880) {
         $s8$0169$i = $13;
         label = 300;
        } else {
         $$12$i119$i = $13;$y$03$i118$i = $879;
         while(1) {
          $881 = (($y$03$i118$i>>>0) % 10)&-1;
          $882 = $881 | 48;
          $883 = $882&255;
          $884 = (($$12$i119$i) + -1|0);
          HEAP8[$884>>0] = $883;
          $885 = (($y$03$i118$i>>>0) / 10)&-1;
          $886 = ($y$03$i118$i>>>0)<(10);
          if ($886) {
           break;
          } else {
           $$12$i119$i = $884;$y$03$i118$i = $885;
          }
         }
         $887 = ($884>>>0)>($buf$i>>>0);
         if ($887) {
          $s8$0169$i = $884;
          label = 300;
         } else {
          $s8$0$lcssa$i = $884;
         }
        }
        if ((label|0) == 300) {
         while(1) {
          label = 0;
          $888 = (($s8$0169$i) + -1|0);
          HEAP8[$888>>0] = 48;
          $889 = ($888>>>0)>($buf$i>>>0);
          if ($889) {
           $s8$0169$i = $888;
           label = 300;
          } else {
           $s8$0$lcssa$i = $888;
           break;
          }
         }
        }
        $890 = ($$412175$i|0)>(9);
        $891 = $890 ? 9 : $$412175$i;
        (___fwritex($s8$0$lcssa$i,$891,$f)|0);
        $892 = (($d$5174$i) + 4|0);
        $893 = (($$412175$i) + -9)|0;
        $894 = ($892>>>0)<($z$6$i>>>0);
        $895 = ($893|0)>(0);
        $or$cond28$i = $894 & $895;
        if ($or$cond28$i) {
         $$412175$i = $893;$d$5174$i = $892;
        } else {
         $$412$lcssa$i = $893;
         break;
        }
       }
      } else {
       $$412$lcssa$i = $$311$i;
      }
      $896 = ($$412$lcssa$i|0)>(0);
      if (!($896)) {
       break;
      }
      $897 = ($$412$lcssa$i>>>0)>(256);
      $898 = $897 ? 256 : $$412$lcssa$i;
      _memset(($pad$i|0),48,($898|0))|0;
      $899 = ($$412$lcssa$i>>>0)>(255);
      if ($899) {
       $$01$i125$i = $$412$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $900 = (($$01$i125$i) + -256)|0;
        $901 = ($900>>>0)>(255);
        if ($901) {
         $$01$i125$i = $900;
        } else {
         $$0$lcssa$i127$i = $900;
         break;
        }
       }
      } else {
       $$0$lcssa$i127$i = $$412$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i127$i,$f)|0);
     } else {
      $902 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa300$i ? $z$6$i : $902;
      $903 = ($$311$i|0)>(-1);
      do {
       if ($903) {
        $904 = $fl$1$ & 8;
        $$not$i = ($904|0)!=(0);
        $$5193$i = $$311$i;$d$6192$i = $a$8$ph$i;
        while(1) {
         $905 = HEAP32[$d$6192$i>>2]|0;
         $906 = ($905|0)==(0);
         if ($906) {
          label = 311;
         } else {
          $$12$i134$i = $13;$y$03$i133$i = $905;
          while(1) {
           $907 = (($y$03$i133$i>>>0) % 10)&-1;
           $908 = $907 | 48;
           $909 = $908&255;
           $910 = (($$12$i134$i) + -1|0);
           HEAP8[$910>>0] = $909;
           $911 = (($y$03$i133$i>>>0) / 10)&-1;
           $912 = ($y$03$i133$i>>>0)<(10);
           if ($912) {
            break;
           } else {
            $$12$i134$i = $910;$y$03$i133$i = $911;
           }
          }
          $913 = ($910|0)==($13|0);
          if ($913) {
           label = 311;
          } else {
           $s9$0$i = $910;
          }
         }
         if ((label|0) == 311) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $914 = ($d$6192$i|0)==($a$8$ph$i|0);
         do {
          if ($914) {
           $918 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $919 = ($$5193$i|0)>(0);
           $brmerge$i = $919 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $918;
            break;
           }
           (___fwritex(12232,1,$f)|0);
           $s9$2$i = $918;
          } else {
           $915 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($915) {
            $s9$1188$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $916 = (($s9$1188$i) + -1|0);
            HEAP8[$916>>0] = 48;
            $917 = ($916>>>0)>($buf$i>>>0);
            if ($917) {
             $s9$1188$i = $916;
            } else {
             $s9$2$i = $916;
             break;
            }
           }
          }
         } while(0);
         $920 = $s9$2$i;
         $921 = (($14) - ($920))|0;
         $922 = ($921|0)<($$5193$i|0);
         $$$5$i = $922 ? $921 : $$5193$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $923 = (($$5193$i) - ($921))|0;
         $924 = (($d$6192$i) + 4|0);
         $925 = ($924>>>0)<($z$6$$i>>>0);
         $926 = ($923|0)>(-1);
         $or$cond29$i = $925 & $926;
         if ($or$cond29$i) {
          $$5193$i = $923;$d$6192$i = $924;
         } else {
          break;
         }
        }
        $927 = ($923|0)>(0);
        if (!($927)) {
         break;
        }
        $928 = ($923>>>0)>(256);
        $929 = $928 ? 256 : $923;
        _memset(($pad$i|0),48,($929|0))|0;
        $930 = ($923>>>0)>(255);
        if ($930) {
         $$01$i140$i = $923;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $931 = (($$01$i140$i) + -256)|0;
          $932 = ($931>>>0)>(255);
          if ($932) {
           $$01$i140$i = $931;
          } else {
           $$0$lcssa$i142$i = $931;
           break;
          }
         }
        } else {
         $$0$lcssa$i142$i = $923;
        }
        (___fwritex($pad$i,$$0$lcssa$i142$i,$f)|0);
       }
      } while(0);
      $933 = $estr$2$i;
      $934 = (($8) - ($933))|0;
      (___fwritex($estr$2$i,$934,$f)|0);
     }
    } while(0);
    $935 = ($841|0)==(8192);
    $or$cond$i$i = $935 & $843;
    if ($or$cond$i$i) {
     $936 = (($w$1) - ($840))|0;
     $937 = ($936>>>0)>(256);
     $938 = $937 ? 256 : $936;
     _memset(($pad$i|0),32,($938|0))|0;
     $939 = ($936>>>0)>(255);
     if ($939) {
      $$01$i$i = $936;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $940 = (($$01$i$i) + -256)|0;
       $941 = ($940>>>0)>(255);
       if ($941) {
        $$01$i$i = $940;
       } else {
        $$0$lcssa$i$i = $940;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $936;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$30$i = $843 ? $w$1 : $840;
    $1045 = $228;$1046 = $207;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$30$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 99:  {
    $319 = $207;
    $320 = $319&255;
    HEAP8[$4>>0] = $320;
    $1053 = $228;$1054 = $207;$a$2 = $4;$fl$6 = $206;$p$5 = 1;$pl$2 = 0;$prefix$2 = 12136;$z$2 = $2;
    break;
   }
   case 112:  {
    $222 = ($p$0>>>0)>(8);
    $223 = $222 ? $p$0 : 8;
    $224 = $fl$1$ | 8;
    $fl$3 = $224;$p$1 = $223;$t$1 = 120;
    label = 77;
    break;
   }
   case 109:  {
    $321 = (___errno_location()|0);
    $322 = HEAP32[$321>>2]|0;
    $323 = (_strerror(($322|0))|0);
    $a$1 = $323;
    label = 99;
    break;
   }
   case 115:  {
    $324 = ($207|0)==(0|0);
    $$17 = $324 ? 12152 : $207;
    $a$1 = $$17;
    label = 99;
    break;
   }
   case 117:  {
    $276 = $207;$278 = $228;$pl$0 = 0;$prefix$0 = 12136;
    label = 89;
    break;
   }
   case 67:  {
    $331 = $207;
    HEAP32[$wc>>2] = $331;
    HEAP32[$5>>2] = 0;
    $1055 = $wc;$1056 = $wc;$p$4296 = -1;
    label = 104;
    break;
   }
   case 105: case 100:  {
    $267 = $207;
    $268 = ($228|0)<(0);
    if ($268) {
     $269 = (_i64Subtract(0,0,($267|0),($228|0))|0);
     $270 = tempRet0;
     $271 = $269;
     $276 = $271;$278 = $270;$pl$0 = 1;$prefix$0 = 12136;
     label = 89;
     break L92;
    }
    $272 = $fl$1$ & 2048;
    $273 = ($272|0)==(0);
    if ($273) {
     $274 = $fl$1$ & 1;
     $275 = ($274|0)==(0);
     $$15 = $275 ? 12136 : ((12136 + 2|0));
     $276 = $207;$278 = $228;$pl$0 = $274;$prefix$0 = $$15;
     label = 89;
    } else {
     $276 = $207;$278 = $228;$pl$0 = 1;$prefix$0 = ((12136 + 1|0));
     label = 89;
    }
    break;
   }
   default: {
    $1053 = $228;$1054 = $207;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 12136;$z$2 = $2;
   }
   }
  } while(0);
  L445: do {
   if ((label|0) == 77) {
    label = 0;
    $225 = $207;
    $226 = $t$1 & 32;
    $227 = ($225|0)==(0);
    $229 = ($228|0)==(0);
    $230 = $227 & $229;
    if ($230) {
     $307 = $207;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 12136;
     label = 94;
    } else {
     $$012$i = $2;$232 = $225;$239 = $228;
     while(1) {
      $231 = $232 & 15;
      $233 = (12216 + ($231)|0);
      $234 = HEAP8[$233>>0]|0;
      $235 = $234&255;
      $236 = $235 | $226;
      $237 = $236&255;
      $238 = (($$012$i) + -1|0);
      HEAP8[$238>>0] = $237;
      $240 = (_bitshift64Lshr(($232|0),($239|0),4)|0);
      $241 = tempRet0;
      $242 = ($240|0)==(0);
      $243 = ($241|0)==(0);
      $244 = $242 & $243;
      if ($244) {
       break;
      } else {
       $$012$i = $238;$232 = $240;$239 = $241;
      }
     }
     $245 = $fl$3 & 8;
     $246 = ($245|0)==(0);
     if ($246) {
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 12136;
      label = 94;
     } else {
      $247 = $t$1 >> 4;
      $248 = (12136 + ($247)|0);
      $307 = $207;$310 = $228;$a$0 = $238;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $248;
      label = 94;
     }
    }
   }
   else if ((label|0) == 89) {
    label = 0;
    $277 = $276;
    $279 = ($278>>>0)>(0);
    $280 = ($278|0)==(0);
    $281 = ($277>>>0)>(4294967295);
    $282 = $280 & $281;
    $283 = $279 | $282;
    if ($283) {
     $$05$i = $2;$284 = $277;$285 = $278;
     while(1) {
      $286 = (___uremdi3(($284|0),($285|0),10,0)|0);
      $287 = tempRet0;
      $288 = $286 | 48;
      $289 = $288&255;
      $290 = (($$05$i) + -1|0);
      HEAP8[$290>>0] = $289;
      $291 = (___udivdi3(($284|0),($285|0),10,0)|0);
      $292 = tempRet0;
      $293 = ($285>>>0)>(9);
      $294 = ($285|0)==(9);
      $295 = ($284>>>0)>(4294967295);
      $296 = $294 & $295;
      $297 = $293 | $296;
      if ($297) {
       $$05$i = $290;$284 = $291;$285 = $292;
      } else {
       break;
      }
     }
     $$0$lcssa$i45 = $290;$$01$lcssa$off0$i = $291;
    } else {
     $$0$lcssa$i45 = $2;$$01$lcssa$off0$i = $277;
    }
    $298 = ($$01$lcssa$off0$i|0)==(0);
    if ($298) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 94;
    } else {
     $$12$i = $$0$lcssa$i45;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $299 = (($y$03$i>>>0) % 10)&-1;
      $300 = $299 | 48;
      $301 = $300&255;
      $302 = (($$12$i) + -1|0);
      HEAP8[$302>>0] = $301;
      $303 = (($y$03$i>>>0) / 10)&-1;
      $304 = ($y$03$i>>>0)<(10);
      if ($304) {
       $307 = $276;$310 = $278;$a$0 = $302;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 94;
       break;
      } else {
       $$12$i = $302;$y$03$i = $303;
      }
     }
    }
   }
   else if ((label|0) == 99) {
    label = 0;
    $325 = (_memchr($a$1,0,$p$0)|0);
    $326 = ($325|0)==(0|0);
    if ($326) {
     $327 = (($a$1) + ($p$0)|0);
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 12136;$z$2 = $327;
     break;
    } else {
     $328 = $325;
     $329 = $a$1;
     $330 = (($328) - ($329))|0;
     $1053 = $228;$1054 = $207;$a$2 = $a$1;$fl$6 = $206;$p$5 = $330;$pl$2 = 0;$prefix$2 = 12136;$z$2 = $325;
     break;
    }
   }
   else if ((label|0) == 104) {
    label = 0;
    $i$0168 = 0;$l$1167 = 0;$ws$0169 = $1055;
    while(1) {
     $336 = HEAP32[$ws$0169>>2]|0;
     $337 = ($336|0)==(0);
     if ($337) {
      $i$0$lcssa = $i$0168;$l$1$lcssa = $l$1167;
      break;
     }
     $338 = (_wctomb($mb,$336)|0);
     $339 = ($338|0)>(-1);
     if (!($339)) {
      $$0 = -1;
      label = 362;
      break L1;
     }
     $340 = (($p$4296) - ($i$0168))|0;
     $341 = ($338>>>0)>($340>>>0);
     $334 = (($338) + ($i$0168))|0;
     if ($341) {
      $1057 = $1055;$1058 = $1056;$i$0166 = $i$0168;
      label = 110;
      break L445;
     }
     $333 = (($ws$0169) + 4|0);
     $335 = ($334>>>0)<($p$4296>>>0);
     if ($335) {
      $i$0168 = $334;$l$1167 = $338;$ws$0169 = $333;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $338;
      break;
     }
    }
    $342 = ($l$1$lcssa|0)<(0);
    if ($342) {
     $$0 = -1;
     label = 362;
     break L1;
    } else {
     $1057 = $1055;$1058 = $1056;$i$0166 = $i$0$lcssa;
     label = 110;
    }
   }
  } while(0);
  if ((label|0) == 94) {
   label = 0;
   $305 = ($p$2|0)>(-1);
   $306 = $fl$4 & -65537;
   $$fl$4 = $305 ? $306 : $fl$4;
   $308 = $307;
   $309 = ($308|0)==(0);
   $311 = ($310|0)==(0);
   $312 = $309 & $311;
   $313 = ($p$2|0)==(0);
   $or$cond = $312 & $313;
   if ($or$cond) {
    $1053 = $310;$1054 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $314 = $a$0;
    $315 = (($3) - ($314))|0;
    $316 = $312&1;
    $317 = (($316) + ($315))|0;
    $318 = ($p$2|0)>($317|0);
    $p$2$ = $318 ? $p$2 : $317;
    $1053 = $310;$1054 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 110) {
   label = 0;
   $343 = $fl$1$ & 73728;
   $344 = ($343|0)==(0);
   $345 = ($i$0166|0)<($w$1|0);
   $or$cond$i56 = $344 & $345;
   if ($or$cond$i56) {
    $346 = (($w$1) - ($i$0166))|0;
    $347 = ($346>>>0)>(256);
    $348 = $347 ? 256 : $346;
    _memset(($pad$i|0),32,($348|0))|0;
    $349 = ($346>>>0)>(255);
    if ($349) {
     $$01$i57 = $346;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $350 = (($$01$i57) + -256)|0;
      $351 = ($350>>>0)>(255);
      if ($351) {
       $$01$i57 = $350;
      } else {
       $$0$lcssa$i59 = $350;
       break;
      }
     }
    } else {
     $$0$lcssa$i59 = $346;
    }
    (___fwritex($pad$i,$$0$lcssa$i59,$f)|0);
   }
   $352 = ($i$0166|0)==(0);
   L479: do {
    if (!($352)) {
     $i$1174 = 0;$ws$1175 = $1057;
     while(1) {
      $353 = HEAP32[$ws$1175>>2]|0;
      $354 = ($353|0)==(0);
      if ($354) {
       break L479;
      }
      $355 = (_wctomb($mb,$353)|0);
      $356 = (($355) + ($i$1174))|0;
      $357 = ($356|0)>($i$0166|0);
      if ($357) {
       break L479;
      }
      $358 = (($ws$1175) + 4|0);
      (___fwritex($mb,$355,$f)|0);
      $359 = ($356>>>0)<($i$0166>>>0);
      if ($359) {
       $i$1174 = $356;$ws$1175 = $358;
      } else {
       break;
      }
     }
    }
   } while(0);
   $360 = ($343|0)==(8192);
   $or$cond$i63 = $360 & $345;
   if ($or$cond$i63) {
    $361 = (($w$1) - ($i$0166))|0;
    $362 = ($361>>>0)>(256);
    $363 = $362 ? 256 : $361;
    _memset(($pad$i|0),32,($363|0))|0;
    $364 = ($361>>>0)>(255);
    if ($364) {
     $$01$i64 = $361;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $365 = (($$01$i64) + -256)|0;
      $366 = ($365>>>0)>(255);
      if ($366) {
       $$01$i64 = $365;
      } else {
       $$0$lcssa$i66 = $365;
       break;
      }
     }
    } else {
     $$0$lcssa$i66 = $361;
    }
    (___fwritex($pad$i,$$0$lcssa$i66,$f)|0);
   }
   $367 = $345 ? $w$1 : $i$0166;
   $1045 = $228;$1046 = $1058;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $367;$l10n$0 = $l10n$3;
   continue;
  }
  $942 = $z$2;
  $943 = $a$2;
  $944 = (($942) - ($943))|0;
  $945 = ($p$5|0)<($944|0);
  $$p$5 = $945 ? $944 : $p$5;
  $946 = (($pl$2) + ($$p$5))|0;
  $947 = ($w$1|0)<($946|0);
  $w$2 = $947 ? $946 : $w$1;
  $948 = $fl$6 & 73728;
  $949 = ($948|0)==(0);
  $950 = ($946|0)<($w$2|0);
  $or$cond$i73 = $949 & $950;
  if ($or$cond$i73) {
   $951 = (($w$2) - ($946))|0;
   $952 = ($951>>>0)>(256);
   $953 = $952 ? 256 : $951;
   _memset(($pad$i|0),32,($953|0))|0;
   $954 = ($951>>>0)>(255);
   if ($954) {
    $$01$i74 = $951;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $955 = (($$01$i74) + -256)|0;
     $956 = ($955>>>0)>(255);
     if ($956) {
      $$01$i74 = $955;
     } else {
      $$0$lcssa$i76 = $955;
      break;
     }
    }
   } else {
    $$0$lcssa$i76 = $951;
   }
   (___fwritex($pad$i,$$0$lcssa$i76,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $957 = ($948|0)==(65536);
  $or$cond$i49 = $957 & $950;
  if ($or$cond$i49) {
   $958 = (($w$2) - ($946))|0;
   $959 = ($958>>>0)>(256);
   $960 = $959 ? 256 : $958;
   _memset(($pad$i|0),48,($960|0))|0;
   $961 = ($958>>>0)>(255);
   if ($961) {
    $$01$i50 = $958;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $962 = (($$01$i50) + -256)|0;
     $963 = ($962>>>0)>(255);
     if ($963) {
      $$01$i50 = $962;
     } else {
      $$0$lcssa$i52 = $962;
      break;
     }
    }
   } else {
    $$0$lcssa$i52 = $958;
   }
   (___fwritex($pad$i,$$0$lcssa$i52,$f)|0);
  }
  $964 = ($944|0)<($$p$5|0);
  if ($964) {
   $965 = (($$p$5) - ($944))|0;
   $966 = ($965>>>0)>(256);
   $967 = $966 ? 256 : $965;
   _memset(($pad$i|0),48,($967|0))|0;
   $968 = ($965>>>0)>(255);
   if ($968) {
    $$01$i35 = $965;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $969 = (($$01$i35) + -256)|0;
     $970 = ($969>>>0)>(255);
     if ($970) {
      $$01$i35 = $969;
     } else {
      $$0$lcssa$i37 = $969;
      break;
     }
    }
   } else {
    $$0$lcssa$i37 = $965;
   }
   (___fwritex($pad$i,$$0$lcssa$i37,$f)|0);
  }
  (___fwritex($a$2,$944,$f)|0);
  $971 = ($948|0)==(8192);
  $or$cond$i = $971 & $950;
  if (!($or$cond$i)) {
   $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $972 = (($w$2) - ($946))|0;
  $973 = ($972>>>0)>(256);
  $974 = $973 ? 256 : $972;
  _memset(($pad$i|0),32,($974|0))|0;
  $975 = ($972>>>0)>(255);
  if ($975) {
   $$01$i = $972;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $976 = (($$01$i) + -256)|0;
    $977 = ($976>>>0)>(255);
    if ($977) {
     $$01$i = $976;
    } else {
     $$0$lcssa$i = $976;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $972;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1045 = $1053;$1046 = $1054;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 344) {
  $978 = ($f|0)==(0|0);
  if (!($978)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $979 = ($l10n$0|0)==(0);
  if ($979) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$289 = 1;
  }
  while(1) {
   $980 = (($nl_type) + ($i$289<<2)|0);
   $981 = HEAP32[$980>>2]|0;
   $982 = ($981|0)==(0);
   if ($982) {
    $i$388 = $i$289;
    break;
   }
   $983 = (($nl_arg) + ($i$289<<3)|0);
   $984 = ($981>>>0)>(20);
   L531: do {
    if (!($984)) {
     do {
      switch ($981|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $985 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$983>>2] = $985;
       break L531;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $986 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $987 = ($986|0)<(0);
       $988 = $987 << 31 >> 31;
       $989 = $983;
       $990 = $989;
       HEAP32[$990>>2] = $986;
       $991 = (($989) + 4)|0;
       $992 = $991;
       HEAP32[$992>>2] = $988;
       break L531;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $993 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $994 = $983;
       $995 = $994;
       HEAP32[$995>>2] = $993;
       $996 = (($994) + 4)|0;
       $997 = $996;
       HEAP32[$997>>2] = 0;
       break L531;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $998 = $arglist_current44;
       $999 = $998;
       $1000 = HEAP32[$999>>2]|0;
       $1001 = (($998) + 4)|0;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1004 = $983;
       $1005 = $1004;
       HEAP32[$1005>>2] = $1000;
       $1006 = (($1004) + 4)|0;
       $1007 = $1006;
       HEAP32[$1007>>2] = $1003;
       break L531;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1008 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1009 = $1008&65535;
       $1010 = $1009 << 16 >> 16;
       $1011 = ($1010|0)<(0);
       $1012 = $1011 << 31 >> 31;
       $1013 = $983;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       $1015 = (($1013) + 4)|0;
       $1016 = $1015;
       HEAP32[$1016>>2] = $1012;
       break L531;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1017 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1017 & 65535;
       $1018 = $983;
       $1019 = $1018;
       HEAP32[$1019>>2] = $$mask1$i;
       $1020 = (($1018) + 4)|0;
       $1021 = $1020;
       HEAP32[$1021>>2] = 0;
       break L531;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1022 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1023 = $1022&255;
       $1024 = $1023 << 24 >> 24;
       $1025 = ($1024|0)<(0);
       $1026 = $1025 << 31 >> 31;
       $1027 = $983;
       $1028 = $1027;
       HEAP32[$1028>>2] = $1024;
       $1029 = (($1027) + 4)|0;
       $1030 = $1029;
       HEAP32[$1030>>2] = $1026;
       break L531;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1031 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1031 & 255;
       $1032 = $983;
       $1033 = $1032;
       HEAP32[$1033>>2] = $$mask$i;
       $1034 = (($1032) + 4)|0;
       $1035 = $1034;
       HEAP32[$1035>>2] = 0;
       break L531;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1036 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$983>>3] = $1036;
       break L531;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1037 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$983>>3] = $1037;
       break L531;
       break;
      }
      default: {
       break L531;
      }
      }
     } while(0);
    }
   } while(0);
   $1038 = (($i$289) + 1)|0;
   $1039 = ($1038|0)<(10);
   if ($1039) {
    $i$289 = $1038;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1042 = (($nl_type) + ($i$388<<2)|0);
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = ($1043|0)==(0);
   $1040 = (($i$388) + 1)|0;
   if (!($1044)) {
    $$0 = -1;
    label = 362;
    break;
   }
   $1041 = ($1040|0)<(10);
   if ($1041) {
    $i$388 = $1040;
   } else {
    $$0 = 1;
    label = 362;
    break;
   }
  }
  if ((label|0) == 362) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 362) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=12240+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = (($l$04) + 1|0);
    $6 = (($r$05) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 20) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        return 0;
      }
      i = i+1|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&255](a1|0)|0;
    }
  

    function jsCall_ii_0(a1) {
      a1=a1|0;
      return jsCall(0,a1|0)|0;
    }

  

    function jsCall_ii_1(a1) {
      a1=a1|0;
      return jsCall(1,a1|0)|0;
    }

  

    function jsCall_ii_2(a1) {
      a1=a1|0;
      return jsCall(2,a1|0)|0;
    }

  

    function jsCall_ii_3(a1) {
      a1=a1|0;
      return jsCall(3,a1|0)|0;
    }

  

    function jsCall_ii_4(a1) {
      a1=a1|0;
      return jsCall(4,a1|0)|0;
    }

  

    function jsCall_ii_5(a1) {
      a1=a1|0;
      return jsCall(5,a1|0)|0;
    }

  

    function jsCall_ii_6(a1) {
      a1=a1|0;
      return jsCall(6,a1|0)|0;
    }

  

    function jsCall_ii_7(a1) {
      a1=a1|0;
      return jsCall(7,a1|0)|0;
    }

  

    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&31](a1|0,a2|0,a3|0)|0;
    }
  

    function jsCall_iiii_0(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(0,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_1(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(1,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_2(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(2,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_3(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(3,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_4(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(4,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_5(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(5,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_6(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(6,a1|0,a2|0,a3|0)|0;
    }

  

    function jsCall_iiii_7(a1,a2,a3) {
      a1=a1|0; a2=a2|0; a3=a3|0;
      return jsCall(7,a1|0,a2|0,a3|0)|0;
    }

  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&31](a1|0,a2|0);
    }
  

    function jsCall_vii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(0,a1|0,a2|0);
    }

  

    function jsCall_vii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(1,a1|0,a2|0);
    }

  

    function jsCall_vii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(2,a1|0,a2|0);
    }

  

    function jsCall_vii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(3,a1|0,a2|0);
    }

  

    function jsCall_vii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(4,a1|0,a2|0);
    }

  

    function jsCall_vii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(5,a1|0,a2|0);
    }

  

    function jsCall_vii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(6,a1|0,a2|0);
    }

  

    function jsCall_vii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      jsCall(7,a1|0,a2|0);
    }

  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&31](a1|0,a2|0)|0;
    }
  

    function jsCall_iii_0(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(0,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_1(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(1,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_2(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(2,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_3(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(3,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_4(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(4,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_5(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(5,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_6(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(6,a1|0,a2|0)|0;
    }

  

    function jsCall_iii_7(a1,a2) {
      a1=a1|0; a2=a2|0;
      return jsCall(7,a1|0,a2|0)|0;
    }

  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function jsCall_iiiii_0(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(0,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_1(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(1,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_2(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(2,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_3(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(3,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_4(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(4,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_5(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(5,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_6(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(6,a1|0,a2|0,a3|0,a4|0)|0;
    }

  

    function jsCall_iiiii_7(a1,a2,a3,a4) {
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return jsCall(7,a1|0,a2|0,a3|0,a4|0)|0;
    }

  
function b0(p0) { p0 = p0|0; abort(0);return 0; }
  function b1(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(1);return 0; }
  function b2(p0,p1) { p0 = p0|0;p1 = p1|0; abort(2); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; abort(3);return 0; }
  function b4(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(4);return 0; }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_ii = [b0,b0,jsCall_ii_0,b0,jsCall_ii_1,b0,jsCall_ii_2,b0,jsCall_ii_3,b0,jsCall_ii_4,b0,jsCall_ii_5,b0,jsCall_ii_6,b0,jsCall_ii_7,b0,_luaB_assert,_luaB_collectgarbage,_luaB_dofile,_luaB_error,_luaB_getmetatable,_luaB_ipairs,_luaB_loadfile,_luaB_load,_luaB_next,_luaB_pairs,_luaB_pcall
  ,_luaB_print,_luaB_rawequal,_luaB_rawlen,_luaB_rawget,_luaB_rawset,_luaB_select,_luaB_setmetatable,_luaB_tonumber,_luaB_tostring,_luaB_type,_luaB_xpcall,_b_arshift,_b_and,_b_not,_b_or,_b_xor,_b_test,_b_extract,_b_lrot,_b_lshift,_b_replace,_b_rrot,_b_rshift,_luaB_cocreate,_luaB_coresume,_luaB_corunning,_luaB_costatus,_luaB_cowrap,_luaB_yield,_db_debug
  ,_db_getuservalue,_db_gethook,_db_getinfo,_db_getlocal,_db_getregistry,_db_getmetatable,_db_getupvalue,_db_upvaluejoin,_db_upvalueid,_db_setuservalue,_db_sethook,_db_setlocal,_db_setmetatable,_db_setupvalue,_db_traceback,_math_abs,_math_acos,_math_asin,_math_atan2,_math_atan,_math_ceil,_math_cosh,_math_cos,_math_deg,_math_exp,_math_floor,_math_fmod,_math_frexp,_math_ldexp,_math_log10
  ,_math_log,_math_max,_math_min,_math_modf,_math_pow,_math_rad,_math_random,_math_randomseed,_math_sinh,_math_sin,_math_sqrt,_math_tanh,_math_tan,_ll_loadlib,_ll_searchpath,_ll_seeall,_ll_module,_ll_require,_os_clock,_os_date,_os_difftime,_os_execute,_os_exit,_os_getenv,_os_remove,_os_rename,_os_setlocale,_os_time,_os_tmpname,_str_byte
  ,_str_char,_str_dump,_str_find,_str_format,_gmatch,_str_gsub,_str_len,_str_lower,_str_match,_str_rep,_str_reverse,_str_sub,_str_upper,_tconcat,_maxn,_tinsert,_pack,_unpack,_tremove,_sort,_panic,_dofilecont,_ipairsaux,_pcallcont,_luaB_auxwrap,_luaopen_base,_luaopen_package,_luaopen_coroutine,_luaopen_table,_luaopen_os
  ,_luaopen_string,_luaopen_bit32,_luaopen_math,_luaopen_debug,_gctm,_searcher_preload,_searcher_Lua,_searcher_C,_searcher_Croot,_gmatch_aux,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_iiii = [b1,b1,jsCall_iiii_0,b1,jsCall_iiii_1,b1,jsCall_iiii_2,b1,jsCall_iiii_3,b1,jsCall_iiii_4,b1,jsCall_iiii_5,b1,jsCall_iiii_6,b1,jsCall_iiii_7,b1,_sn_write,_getF,_getS,_generic_reader,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vii = [b2,b2,jsCall_vii_0,b2,jsCall_vii_1,b2,jsCall_vii_2,b2,jsCall_vii_3,b2,jsCall_vii_4,b2,jsCall_vii_5,b2,jsCall_vii_6,b2,jsCall_vii_7,b2,_growstack,_f_call,_hookf,_resume,_unroll,_f_parser,_dothecall,_f_luaopen,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_iii = [b3,b3,jsCall_iii_0,b3,jsCall_iii_1,b3,jsCall_iii_2,b3,jsCall_iii_3,b3,jsCall_iii_4,b3,jsCall_iii_5,b3,jsCall_iii_6,b3,jsCall_iii_7,b3,_lua_newstate,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_iiiii = [b4,b4,jsCall_iiiii_0,b4,jsCall_iiiii_1,b4,jsCall_iiiii_2,b4,jsCall_iiiii_3,b4,jsCall_iiiii_4,b4,jsCall_iiiii_5,b4,jsCall_iiiii_6,b4,jsCall_iiiii_7,b4,_l_alloc,_writer,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];

    return { _luaL_checkstack: _luaL_checkstack, _lua_setglobal: _lua_setglobal, _strlen: _strlen, _lua_gethook: _lua_gethook, _lua_pushlightuserdata: _lua_pushlightuserdata, _bitshift64Lshr: _bitshift64Lshr, _lua_copy: _lua_copy, _lua_createtable: _lua_createtable, _luaL_optinteger: _luaL_optinteger, _lua_arith: _lua_arith, _lua_pushnil: _lua_pushnil, _lua_setmetatable: _lua_setmetatable, _lua_pushthread: _lua_pushthread, _luaL_optlstring: _luaL_optlstring, _memcpy: _memcpy, _luaL_pushmodule: _luaL_pushmodule, _luaL_pushresultsize: _luaL_pushresultsize, _lua_upvalueid: _lua_upvalueid, _lua_close: _lua_close, _lua_setupvalue: _lua_setupvalue, _luaL_ref: _luaL_ref, _lua_gethookmask: _lua_gethookmask, _lua_xmove: _lua_xmove, _lua_load: _lua_load, _lua_pcallk: _lua_pcallk, _lua_touserdata: _lua_touserdata, _lua_getglobal: _lua_getglobal, _luaL_prepbuffsize: _luaL_prepbuffsize, _lua_rawget: _lua_rawget, _free: _free, _lua_pushcclosure: _lua_pushcclosure, _lua_pushstring: _lua_pushstring, _lua_upvaluejoin: _lua_upvaluejoin, _lua_isuserdata: _lua_isuserdata, _luaL_loadbufferx: _luaL_loadbufferx, _lua_resume: _lua_resume, _lua_iscfunction: _lua_iscfunction, _luaL_newstate: _luaL_newstate, _luaL_execresult: _luaL_execresult, _lua_remove: _lua_remove, _luaL_checkoption: _luaL_checkoption, _lua_rawlen: _lua_rawlen, _lua_len: _lua_len, _luaL_openlib: _luaL_openlib, _lua_pushvfstring: _lua_pushvfstring, _lua_isnumber: _lua_isnumber, _luaL_checklstring: _luaL_checklstring, _lua_isstring: _lua_isstring, _lua_pushlstring: _lua_pushlstring, _lua_setuservalue: _lua_setuservalue, _luaL_len: _luaL_len, _lua_callk: _lua_callk, _luaL_checkany: _luaL_checkany, _luaL_addstring: _luaL_addstring, _lua_pushfstring: _lua_pushfstring, _lua_insert: _lua_insert, _lua_tolstring: _lua_tolstring, _lua_rawset: _lua_rawset, _luaL_traceback: _luaL_traceback, _lua_getupvalue: _lua_getupvalue, _lua_checkstack: _lua_checkstack, _lua_pushnumber: _lua_pushnumber, _strcpy: _strcpy, _luaL_pushresult: _luaL_pushresult, _lua_topointer: _lua_topointer, _lua_error: _lua_error, _lua_gettable: _lua_gettable, _lua_compare: _lua_compare, _luaL_checkinteger: _luaL_checkinteger, _lua_getstack: _lua_getstack, _lua_gettop: _lua_gettop, _lua_getlocal: _lua_getlocal, _lua_gc: _lua_gc, _lua_newuserdata: _lua_newuserdata, _luaL_checkunsigned: _luaL_checkunsigned, _lua_settable: _lua_settable, _luaL_addlstring: _luaL_addlstring, _luaL_fileresult: _luaL_fileresult, _lua_toboolean: _lua_toboolean, _lua_setallocf: _lua_setallocf, _memset: _memset, _luaL_checktype: _luaL_checktype, _lua_tointegerx: _lua_tointegerx, _lua_gethookcount: _lua_gethookcount, _lua_version: _lua_version, _lua_tounsignedx: _lua_tounsignedx, _luaL_openlibs: _luaL_openlibs, _lua_setlocal: _lua_setlocal, _luaL_optunsigned: _luaL_optunsigned, _lua_tothread: _lua_tothread, _i64Subtract: _i64Subtract, _lua_rawgetp: _lua_rawgetp, _luaL_testudata: _luaL_testudata, _lua_newstate: _lua_newstate, _lua_pushvalue: _lua_pushvalue, _lua_getctx: _lua_getctx, _lua_tocfunction: _lua_tocfunction, _lua_newthread: _lua_newthread, _lua_typename: _lua_typename, _luaL_argerror: _luaL_argerror, _lua_absindex: _lua_absindex, _lua_rawgeti: _lua_rawgeti, _testSetjmp: _testSetjmp, _lua_sethook: _lua_sethook, _luaL_callmeta: _luaL_callmeta, _luaL_buffinit: _luaL_buffinit, _luaL_loadfilex: _luaL_loadfilex, _malloc: _malloc, _lua_rawequal: _lua_rawequal, _lua_yieldk: _lua_yieldk, _lua_type: _lua_type, _lua_getfield: _lua_getfield, _luaL_checkversion_: _luaL_checkversion_, _luaL_buffinitsize: _luaL_buffinitsize, _luaL_checknumber: _luaL_checknumber, _luaL_newmetatable: _luaL_newmetatable, _lua_getmetatable: _lua_getmetatable, _lua_pushunsigned: _lua_pushunsigned, _luaL_requiref: _luaL_requiref, _luaL_gsub: _luaL_gsub, _luaL_addvalue: _luaL_addvalue, _bitshift64Shl: _bitshift64Shl, _luaL_tolstring: _luaL_tolstring, _lua_atpanic: _lua_atpanic, _luaL_getmetafield: _luaL_getmetafield, _lua_getinfo: _lua_getinfo, _luaL_setmetatable: _luaL_setmetatable, _lua_settop: _lua_settop, _lua_pushboolean: _lua_pushboolean, _lua_setfield: _lua_setfield, _lua_replace: _lua_replace, _luaL_setfuncs: _luaL_setfuncs, _lua_next: _lua_next, _lua_concat: _lua_concat, _luaL_checkudata: _luaL_checkudata, _realloc: _realloc, _i64Add: _i64Add, _luaL_getsubtable: _luaL_getsubtable, _lua_getuservalue: _lua_getuservalue, _lua_rawseti: _lua_rawseti, _saveSetjmp: _saveSetjmp, _luaL_optnumber: _luaL_optnumber, _lua_pushinteger: _lua_pushinteger, _lua_getallocf: _lua_getallocf, _lua_dump: _lua_dump, _lua_status: _lua_status, _lua_tonumberx: _lua_tonumberx, _luaL_where: _luaL_where, _lua_rawsetp: _lua_rawsetp, _luaL_error: _luaL_error, _luaL_loadstring: _luaL_loadstring, _luaL_unref: _luaL_unref, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_vii: dynCall_vii, dynCall_iii: dynCall_iii, dynCall_iiiii: dynCall_iiiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "min": Math_min, "jsCall": jsCall, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_iii": invoke_iii, "invoke_iiiii": invoke_iiiii, "_fabs": _fabs, "_strftime": _strftime, "_sin": _sin, "_exp": _exp, "_llvm_pow_f64": _llvm_pow_f64, "_send": _send, "_cosh": _cosh, "_fread": _fread, "_fmod": _fmod, "_atan2": _atan2, "_fmodl": _fmodl, "_difftime": _difftime, "_freopen": _freopen, "_rmdir": _rmdir, "_feof": _feof, "_fputc": _fputc, "_asin": _asin, "_atan": _atan, "_floor": _floor, "_longjmp": _longjmp, "_system": _system, "_fflush": _fflush, "_remove": _remove, "__addDays": __addDays, "_modf": _modf, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "__reallyNegative": __reallyNegative, "_localtime_r": _localtime_r, "_tzset": _tzset, "_open": _open, "_sbrk": _sbrk, "_acos": _acos, "_localtime": _localtime, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sinh": _sinh, "_unlink": _unlink, "_time": _time, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_clock": _clock, "__arraySum": __arraySum, "_fgets": _fgets, "_putchar": _putchar, "_gmtime": _gmtime, "_cos": _cos, "_tanh": _tanh, "_pread": _pread, "_localeconv": _localeconv, "_getenv": _getenv, "_fclose": _fclose, "_log": _log, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "___errno_location": ___errno_location, "_fgetc": _fgetc, "_recv": _recv, "___buildEnvironment": ___buildEnvironment, "_tan": _tan, "_copysign": _copysign, "_gmtime_r": _gmtime_r, "_mkport": _mkport, "__exit": __exit, "_read": _read, "_copysignl": _copysignl, "_abort": _abort, "_fwrite": _fwrite, "_tmpnam": _tmpnam, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "_ceil": _ceil, "__formatString": __formatString, "_log10": _log10, "_sqrt": _sqrt, "_fopen": _fopen, "_exit": _exit, "_rename": _rename, "_mktime": _mktime, "___setErrNo": ___setErrNo, "_setlocale": _setlocale, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
  var _luaL_checkstack = Module["_luaL_checkstack"] = asm["_luaL_checkstack"];
var _lua_setglobal = Module["_lua_setglobal"] = asm["_lua_setglobal"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _lua_gethook = Module["_lua_gethook"] = asm["_lua_gethook"];
var _lua_pushlightuserdata = Module["_lua_pushlightuserdata"] = asm["_lua_pushlightuserdata"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _lua_copy = Module["_lua_copy"] = asm["_lua_copy"];
var _lua_createtable = Module["_lua_createtable"] = asm["_lua_createtable"];
var _luaL_optinteger = Module["_luaL_optinteger"] = asm["_luaL_optinteger"];
var _lua_arith = Module["_lua_arith"] = asm["_lua_arith"];
var _lua_pushnil = Module["_lua_pushnil"] = asm["_lua_pushnil"];
var _lua_setmetatable = Module["_lua_setmetatable"] = asm["_lua_setmetatable"];
var _lua_pushthread = Module["_lua_pushthread"] = asm["_lua_pushthread"];
var _luaL_optlstring = Module["_luaL_optlstring"] = asm["_luaL_optlstring"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _luaL_pushmodule = Module["_luaL_pushmodule"] = asm["_luaL_pushmodule"];
var _luaL_pushresultsize = Module["_luaL_pushresultsize"] = asm["_luaL_pushresultsize"];
var _lua_upvalueid = Module["_lua_upvalueid"] = asm["_lua_upvalueid"];
var _lua_close = Module["_lua_close"] = asm["_lua_close"];
var _lua_setupvalue = Module["_lua_setupvalue"] = asm["_lua_setupvalue"];
var _luaL_ref = Module["_luaL_ref"] = asm["_luaL_ref"];
var _lua_gethookmask = Module["_lua_gethookmask"] = asm["_lua_gethookmask"];
var _lua_xmove = Module["_lua_xmove"] = asm["_lua_xmove"];
var _lua_load = Module["_lua_load"] = asm["_lua_load"];
var _lua_pcallk = Module["_lua_pcallk"] = asm["_lua_pcallk"];
var _lua_touserdata = Module["_lua_touserdata"] = asm["_lua_touserdata"];
var _lua_getglobal = Module["_lua_getglobal"] = asm["_lua_getglobal"];
var _luaL_prepbuffsize = Module["_luaL_prepbuffsize"] = asm["_luaL_prepbuffsize"];
var _lua_rawget = Module["_lua_rawget"] = asm["_lua_rawget"];
var _free = Module["_free"] = asm["_free"];
var _lua_pushcclosure = Module["_lua_pushcclosure"] = asm["_lua_pushcclosure"];
var _lua_pushstring = Module["_lua_pushstring"] = asm["_lua_pushstring"];
var _lua_upvaluejoin = Module["_lua_upvaluejoin"] = asm["_lua_upvaluejoin"];
var _lua_isuserdata = Module["_lua_isuserdata"] = asm["_lua_isuserdata"];
var _luaL_loadbufferx = Module["_luaL_loadbufferx"] = asm["_luaL_loadbufferx"];
var _lua_resume = Module["_lua_resume"] = asm["_lua_resume"];
var _lua_iscfunction = Module["_lua_iscfunction"] = asm["_lua_iscfunction"];
var _luaL_newstate = Module["_luaL_newstate"] = asm["_luaL_newstate"];
var _luaL_execresult = Module["_luaL_execresult"] = asm["_luaL_execresult"];
var _lua_remove = Module["_lua_remove"] = asm["_lua_remove"];
var _luaL_checkoption = Module["_luaL_checkoption"] = asm["_luaL_checkoption"];
var _lua_rawlen = Module["_lua_rawlen"] = asm["_lua_rawlen"];
var _lua_len = Module["_lua_len"] = asm["_lua_len"];
var _luaL_openlib = Module["_luaL_openlib"] = asm["_luaL_openlib"];
var _lua_pushvfstring = Module["_lua_pushvfstring"] = asm["_lua_pushvfstring"];
var _lua_isnumber = Module["_lua_isnumber"] = asm["_lua_isnumber"];
var _luaL_checklstring = Module["_luaL_checklstring"] = asm["_luaL_checklstring"];
var _lua_isstring = Module["_lua_isstring"] = asm["_lua_isstring"];
var _lua_pushlstring = Module["_lua_pushlstring"] = asm["_lua_pushlstring"];
var _lua_setuservalue = Module["_lua_setuservalue"] = asm["_lua_setuservalue"];
var _luaL_len = Module["_luaL_len"] = asm["_luaL_len"];
var _lua_callk = Module["_lua_callk"] = asm["_lua_callk"];
var _luaL_checkany = Module["_luaL_checkany"] = asm["_luaL_checkany"];
var _luaL_addstring = Module["_luaL_addstring"] = asm["_luaL_addstring"];
var _lua_pushfstring = Module["_lua_pushfstring"] = asm["_lua_pushfstring"];
var _lua_insert = Module["_lua_insert"] = asm["_lua_insert"];
var _lua_tolstring = Module["_lua_tolstring"] = asm["_lua_tolstring"];
var _lua_rawset = Module["_lua_rawset"] = asm["_lua_rawset"];
var _luaL_traceback = Module["_luaL_traceback"] = asm["_luaL_traceback"];
var _lua_getupvalue = Module["_lua_getupvalue"] = asm["_lua_getupvalue"];
var _lua_checkstack = Module["_lua_checkstack"] = asm["_lua_checkstack"];
var _lua_pushnumber = Module["_lua_pushnumber"] = asm["_lua_pushnumber"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _luaL_pushresult = Module["_luaL_pushresult"] = asm["_luaL_pushresult"];
var _lua_topointer = Module["_lua_topointer"] = asm["_lua_topointer"];
var _lua_error = Module["_lua_error"] = asm["_lua_error"];
var _lua_gettable = Module["_lua_gettable"] = asm["_lua_gettable"];
var _lua_compare = Module["_lua_compare"] = asm["_lua_compare"];
var _luaL_checkinteger = Module["_luaL_checkinteger"] = asm["_luaL_checkinteger"];
var _lua_getstack = Module["_lua_getstack"] = asm["_lua_getstack"];
var _lua_gettop = Module["_lua_gettop"] = asm["_lua_gettop"];
var _lua_getlocal = Module["_lua_getlocal"] = asm["_lua_getlocal"];
var _lua_gc = Module["_lua_gc"] = asm["_lua_gc"];
var _lua_newuserdata = Module["_lua_newuserdata"] = asm["_lua_newuserdata"];
var _luaL_checkunsigned = Module["_luaL_checkunsigned"] = asm["_luaL_checkunsigned"];
var _lua_settable = Module["_lua_settable"] = asm["_lua_settable"];
var _luaL_addlstring = Module["_luaL_addlstring"] = asm["_luaL_addlstring"];
var _luaL_fileresult = Module["_luaL_fileresult"] = asm["_luaL_fileresult"];
var _lua_toboolean = Module["_lua_toboolean"] = asm["_lua_toboolean"];
var _lua_setallocf = Module["_lua_setallocf"] = asm["_lua_setallocf"];
var _memset = Module["_memset"] = asm["_memset"];
var _luaL_checktype = Module["_luaL_checktype"] = asm["_luaL_checktype"];
var _lua_tointegerx = Module["_lua_tointegerx"] = asm["_lua_tointegerx"];
var _lua_gethookcount = Module["_lua_gethookcount"] = asm["_lua_gethookcount"];
var _lua_version = Module["_lua_version"] = asm["_lua_version"];
var _lua_tounsignedx = Module["_lua_tounsignedx"] = asm["_lua_tounsignedx"];
var _luaL_openlibs = Module["_luaL_openlibs"] = asm["_luaL_openlibs"];
var _lua_setlocal = Module["_lua_setlocal"] = asm["_lua_setlocal"];
var _luaL_optunsigned = Module["_luaL_optunsigned"] = asm["_luaL_optunsigned"];
var _lua_tothread = Module["_lua_tothread"] = asm["_lua_tothread"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _lua_rawgetp = Module["_lua_rawgetp"] = asm["_lua_rawgetp"];
var _luaL_testudata = Module["_luaL_testudata"] = asm["_luaL_testudata"];
var _lua_newstate = Module["_lua_newstate"] = asm["_lua_newstate"];
var _lua_pushvalue = Module["_lua_pushvalue"] = asm["_lua_pushvalue"];
var _lua_getctx = Module["_lua_getctx"] = asm["_lua_getctx"];
var _lua_tocfunction = Module["_lua_tocfunction"] = asm["_lua_tocfunction"];
var _lua_newthread = Module["_lua_newthread"] = asm["_lua_newthread"];
var _lua_typename = Module["_lua_typename"] = asm["_lua_typename"];
var _luaL_argerror = Module["_luaL_argerror"] = asm["_luaL_argerror"];
var _lua_absindex = Module["_lua_absindex"] = asm["_lua_absindex"];
var _lua_rawgeti = Module["_lua_rawgeti"] = asm["_lua_rawgeti"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _lua_sethook = Module["_lua_sethook"] = asm["_lua_sethook"];
var _luaL_callmeta = Module["_luaL_callmeta"] = asm["_luaL_callmeta"];
var _luaL_buffinit = Module["_luaL_buffinit"] = asm["_luaL_buffinit"];
var _luaL_loadfilex = Module["_luaL_loadfilex"] = asm["_luaL_loadfilex"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _lua_rawequal = Module["_lua_rawequal"] = asm["_lua_rawequal"];
var _lua_yieldk = Module["_lua_yieldk"] = asm["_lua_yieldk"];
var _lua_type = Module["_lua_type"] = asm["_lua_type"];
var _lua_getfield = Module["_lua_getfield"] = asm["_lua_getfield"];
var _luaL_checkversion_ = Module["_luaL_checkversion_"] = asm["_luaL_checkversion_"];
var _luaL_buffinitsize = Module["_luaL_buffinitsize"] = asm["_luaL_buffinitsize"];
var _luaL_checknumber = Module["_luaL_checknumber"] = asm["_luaL_checknumber"];
var _luaL_newmetatable = Module["_luaL_newmetatable"] = asm["_luaL_newmetatable"];
var _lua_getmetatable = Module["_lua_getmetatable"] = asm["_lua_getmetatable"];
var _lua_pushunsigned = Module["_lua_pushunsigned"] = asm["_lua_pushunsigned"];
var _luaL_requiref = Module["_luaL_requiref"] = asm["_luaL_requiref"];
var _luaL_gsub = Module["_luaL_gsub"] = asm["_luaL_gsub"];
var _luaL_addvalue = Module["_luaL_addvalue"] = asm["_luaL_addvalue"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _luaL_tolstring = Module["_luaL_tolstring"] = asm["_luaL_tolstring"];
var _lua_atpanic = Module["_lua_atpanic"] = asm["_lua_atpanic"];
var _luaL_getmetafield = Module["_luaL_getmetafield"] = asm["_luaL_getmetafield"];
var _lua_getinfo = Module["_lua_getinfo"] = asm["_lua_getinfo"];
var _luaL_setmetatable = Module["_luaL_setmetatable"] = asm["_luaL_setmetatable"];
var _lua_settop = Module["_lua_settop"] = asm["_lua_settop"];
var _lua_pushboolean = Module["_lua_pushboolean"] = asm["_lua_pushboolean"];
var _lua_setfield = Module["_lua_setfield"] = asm["_lua_setfield"];
var _lua_replace = Module["_lua_replace"] = asm["_lua_replace"];
var _luaL_setfuncs = Module["_luaL_setfuncs"] = asm["_luaL_setfuncs"];
var _lua_next = Module["_lua_next"] = asm["_lua_next"];
var _lua_concat = Module["_lua_concat"] = asm["_lua_concat"];
var _luaL_checkudata = Module["_luaL_checkudata"] = asm["_luaL_checkudata"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _luaL_getsubtable = Module["_luaL_getsubtable"] = asm["_luaL_getsubtable"];
var _lua_getuservalue = Module["_lua_getuservalue"] = asm["_lua_getuservalue"];
var _lua_rawseti = Module["_lua_rawseti"] = asm["_lua_rawseti"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _luaL_optnumber = Module["_luaL_optnumber"] = asm["_luaL_optnumber"];
var _lua_pushinteger = Module["_lua_pushinteger"] = asm["_lua_pushinteger"];
var _lua_getallocf = Module["_lua_getallocf"] = asm["_lua_getallocf"];
var _lua_dump = Module["_lua_dump"] = asm["_lua_dump"];
var _lua_status = Module["_lua_status"] = asm["_lua_status"];
var _lua_tonumberx = Module["_lua_tonumberx"] = asm["_lua_tonumberx"];
var _luaL_where = Module["_luaL_where"] = asm["_luaL_where"];
var _lua_rawsetp = Module["_lua_rawsetp"] = asm["_lua_rawsetp"];
var _luaL_error = Module["_luaL_error"] = asm["_luaL_error"];
var _luaL_loadstring = Module["_luaL_loadstring"] = asm["_luaL_loadstring"];
var _luaL_unref = Module["_luaL_unref"] = asm["_luaL_unref"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = false;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



!(function(exports, global, emscripten){
/* Utility functions */
var slice = [].slice;
var apply = (function(){}).apply;

// applying arguments to new isn't easy with js.....
function new_(a, b, c, d, e, f, g, h, i) {
	switch (arguments.length) {
		case 0: return new this();
		case 1: return new this(a);
		case 2: return new this(a, b);
		case 3: return new this(a, b, c);
		case 4: return new this(a, b, c, d);
		case 5: return new this(a, b, c, d, e);
		case 6: return new this(a, b, c, d, e, f);
		case 7: return new this(a, b, c, d, e, f, g);
		case 8: return new this(a, b, c, d, e, f, g, h);
		case 9: return new this(a, b, c, d, e, f, g, h, i);
		default:
			// Attempt the theorectically equivalent way
			// Native objects often detect this and throw;
			// luckily there aren't many native objects that take >9 arguments; so this case is rare
			var obj = Object.create(this.prototype);
			var ret = this.apply(obj, arguments);
			return (typeof ret === 'object' && ret !== null)?ret:obj;
	}
}

/* */
var Lua = exports.Lua = {
	defines: {
		REGISTRYINDEX: /*FIRSTPSEUDOIDX*/ ( - /*LUAI_MAXSTACK*/1000000 - 1000 ),
		RIDX_GLOBALS: 2,
		RIDX_MAINTHREAD: 1,
		MULTRET: -1,
		NOREF: -2,
		GC: {
			STOP: 0,
			RESTART: 1,
			COLLECT: 2,
			COUNT: 3,
			COUNTB: 4,
			STEP: 5,
			SETPAUSE: 6,
			SETSTEPMUL: 7,
			SETMAJORINC: 8,
			ISRUNNING: 9,
			GEN: 10,
			INC: 11,
		},
		T: {
			NONE: -1,
			NIL: 0,
			BOOLEAN: 1,
			LIGHTUSERDATA: 2,
			NUMBER: 3,
			STRING: 4,
			TABLE: 5,
			FUNCTION: 6,
			USERDATA: 7,
			THREAD: 8,
		},
	},
	lib: {
		// absindex
		// arith
		// atpanic
		// callk
		checkstack:        emscripten.cwrap('lua_checkstack',        null,     ["number", "number"]),
		// close
		// compare
		// concat
		// copy
		createtable:       emscripten.cwrap('lua_createtable',       null,     ["number", "number", "number"]),
		// dump
		error:             emscripten.cwrap('lua_error',             "number", ["number"]),
		gc:                emscripten.cwrap('lua_gc',                "number", ["number", "number", "number"]),
		// getallocf
		// getctx
		getfield:          emscripten.cwrap('lua_getfield',          null,     ["number", "number", "string"]),
		getglobal:         emscripten.cwrap('lua_getglobal',         null,     ["number", "string"]),
		// gethook
		// gethookcount
		// gethookmask
		// getinfo
		// getlocal
		// getmetatable
		// getstack
		gettable:          emscripten.cwrap('lua_gettable',          null,     ["number", "number"]),
		gettop:            emscripten.cwrap('lua_gettop',            "number", ["number"]),
		// getupvalue
		// getuservalue
		// insert
		// iscfunction
		// isnumber
		// isstring
		// isuserdata
		// len
		// load
		// newstate
		// newthread
		newuserdata:       emscripten.cwrap('lua_newuserdata',       "number", ["number", "number"]),
		// next
		pcallk:            emscripten.cwrap('lua_pcallk',            "number", ["number", "number", "number", "number", "number", "number"]),
		pushboolean:       emscripten.cwrap('lua_pushboolean',       null,     ["number", "number"]),
		pushcclosure:      emscripten.cwrap('lua_pushcclosure',      null,     ["number", "number", "number"]),
		// pushfstring
		// pushinteger
		pushlightuserdata: emscripten.cwrap('lua_pushlightuserdata', null,     ["number", "number"]),
		pushlstring:       emscripten.cwrap('lua_pushlstring',       null,     ["number", "array", "number"]),
		pushnil:           emscripten.cwrap('lua_pushnil',           null,     ["number"]),
		pushnumber:        emscripten.cwrap('lua_pushnumber',        null,     ["number", "number"]),
		// pushstring
		// pushthread
		// pushunsigned
		pushvalue:         emscripten.cwrap('lua_pushvalue',         null,     ["number", "number"]),
		// pushvfstring
		// rawequal
		// rawget
		rawgeti:           emscripten.cwrap('lua_rawgeti',           null,     ["number", "number", "number"]),
		// rawgetp
		// rawlen
		// rawset
		// rawseti
		// rawsetp
		remove:            emscripten.cwrap('lua_remove',            null,     ["number", "number"]),
		// replace
		// resume
		// setallocf
		setfield:          emscripten.cwrap('lua_setfield',          null,     ["number", "number", "string"]),
		setglobal:         emscripten.cwrap('lua_setglobal',         null,     ["number", "string"]),
		// sethook
		// setlocal
		setmetatable:      emscripten.cwrap('lua_setmetatable',      null,     ["number", "number"]),
		settable:          emscripten.cwrap('lua_settable',          null,     ["number", "number"]),
		settop:            emscripten.cwrap('lua_settop',            null,     ["number", "number"]),
		// setupvalue
		// setuservalue
		// status
		toboolean:         emscripten.cwrap('lua_toboolean',         "number", ["number", "number"]),
		// tocfunction
		// tointegerx
		tolstring:         emscripten.cwrap('lua_tolstring',         "number", ["number", "number", "number"]),
		tonumberx:         emscripten.cwrap('lua_tonumberx',         "number", ["number", "number", "number"]),
		// topointer
		tothread:          emscripten.cwrap('lua_tothread',          "number", ["number", "number"]),
		// tounsignedx
		touserdata:        emscripten.cwrap('lua_touserdata',        "number", ["number", "number"]),
		type:              emscripten.cwrap('lua_type',              "number", ["number", "number"]),
		typename:          emscripten.cwrap('lua_typename',          "string", ["number", "number"]),
		// upvalueid
		// upvaluejoin
		// version
		// xmove
		// yieldk
	},
	auxlib:{
		// addlstring
		// addstring
		// addvalue
		// argerror
		// buffinit
		// buffinitsize
		// callmeta
		// checkany
		// checkinteger
		// checklstring
		// checknumber
		// checkoption
		// checkstack
		// checktype
		checkudata:        emscripten.cwrap('luaL_checkudata',       "number", ["number", "number", "string"]),
		// checkunsigned
		// error
		// execresult
		// fileresult
		// getmetafield
		// getsubtable
		// gsub
		// len
		loadbufferx:       emscripten.cwrap('luaL_loadbufferx',      "number", ["number", "array", "number", "string", "string"]),
		// loadfilex
		// loadstring
		newmetatable:      emscripten.cwrap('luaL_newmetatable',     "number", ["number", "string"]),
		newstate:          emscripten.cwrap('luaL_newstate',         "number", []),
		openlibs:          emscripten.cwrap('luaL_openlibs',         null,     ["number"]),
		// optinteger
		// optlstring
		// optnumber
		// optunsigned
		// prepbuffsize
		// pushresult
		// pushresultsize
		ref:               emscripten.cwrap('luaL_ref',              "number", ["number", "number"]),
		// requiref
		// setfuncs
		setmetatable:      emscripten.cwrap('luaL_setmetatable',     null,     ["number", "string"]),
		testudata:         emscripten.cwrap('luaL_testudata',        "number", ["number", "number", "string"]),
		tolstring:         emscripten.cwrap('luaL_tolstring',        "number", ["number", "number", "number"]),
		traceback:         emscripten.cwrap('luaL_traceback',        null,     ["number", "number", "string", "number"]),
		unref:             emscripten.cwrap('luaL_unref',            "number", ["number", "number", "number"]),
		// where
	},
	refs: [],
	refs_i: 0,
};

Lua.Error = function (L, error_index) {
	this.message = L.tostring(error_index);
	// Get lua stack trace
	L.traceback(L._L, this.message, 1);
	this.lua_stack = L.raw_tostring(-1);
	L.pop(1);
};
Lua.Error.prototype = new Error();
Lua.Error.prototype.name = "Lua.Error";

Lua.cfuncs = {
	__gc: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		delete Lua.refs[id];
		return 0;
	}),
	__index: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var k = L.lua_to_js(2);
		try {
			var res = ob[k];
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	__newindex: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var k = L.lua_to_js(2);
		if (L.isnil(3)) {
			try {
				delete ob[k];
			} catch (e) {
				L.push(e);
				L.error();
				throw "Unreachable";
			}
		} else {
			var v = L.lua_to_js(3);
			try {
				ob[k]=v;
			} catch (e) {
				L.push(e);
				L.error();
				throw "Unreachable";
			}
		}
		return 0;
	}),
	__call: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var top = L.gettop();
		var thisarg = top>=2?L.lua_to_js(2):null;
		var args = [];
		for (var i=3; i<=top; i++) {
			args.push(L.lua_to_js(i));
		}
		try {
			var res = apply.call(ob, thisarg, args);
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	__len: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		L.push(ob.length);
		return 1;
	}),
	__tostring: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		L.pushstring(ob===null?"null":ob.toString());
		return 1;
	}),
	"new": emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		var box = L.checkudata(1, "_PROXY_MT");
		var id = emscripten.getValue(box, "double");
		var ob = Lua.refs[id];
		var top = L.gettop();
		var args = [];
		for (var i=2; i<=top;i++) {
			args.push(L.lua_to_js(i));
		}
		try {
			var res = new_.apply(ob,args);
		} catch (e) {
			L.push(e);
			L.error();
			throw "Unreachable";
		}
		L.push(res);
		return 1;
	}),
	// "delete": emscripten.Runtime.addFunction(function(L){
	// 	L = new Lua.State(L);
	// 	var box = L.checkudata(1, "_PROXY_MT");
	// 	var id = emscripten.getValue(box, "double");
	// 	var ob = Lua.refs[id];
	// 	var k = L.lua_to_js(2);
	// 	L.pushboolean(delete ob[k]);
	// 	return 1;
	// }),
	// Our error handler
	traceback: emscripten.Runtime.addFunction(function(L){
		L = new Lua.State(L);
		L.pushjs(new Lua.Error(L, 1));
		return 1;
	}),
};

// Either wraps existing state; or makes a new one
Lua.State = function (_L) {
	if (_L) {
		this._L = _L;
	} else {
		this._L = Lua.auxlib.newstate();

		this.gc(Lua.defines.GC.STOP, 0);

		this.openlibs();

		// Construct Proxy metatable
		this.newmetatable("_PROXY_MT");
		this.pushcclosure(Lua.cfuncs.__gc, 0);
		this.setfield(-2, "__gc");
		this.pushcclosure(Lua.cfuncs.__index, 0);
		this.setfield(-2, "__index");
		this.pushcclosure(Lua.cfuncs.__newindex, 0);
		this.setfield(-2, "__newindex");
		this.pushcclosure(Lua.cfuncs.__call, 0);
		this.setfield(-2, "__call");
		this.pushcclosure(Lua.cfuncs.__len, 0);
		this.setfield(-2, "__len");
		this.pushcclosure(Lua.cfuncs.__tostring, 0);
		this.setfield(-2, "__tostring");
		this.pop(1);

		// Set up weakly valued table for holding userdata
		// This level of indirection ensures equal js objects are equal
		this.createtable(0, 0);
		this.createtable(0, 1);
		this.pushstring("v");
		this.setfield(-2, "__mode");
		Lua.lib.setmetatable(this._L, -2);
		this.setfield(Lua.defines.REGISTRYINDEX, "wrapped");

		// Create 'js' library
		this.createtable(0, 3);
		this.pushcclosure(Lua.cfuncs["new"], 0);
		this.setfield(-2, "new");
		this.push(null);
		this.setfield(-2, "null");
		this.push(global);
		this.setfield(-2, "global");
		this.setglobal("js");

		this.gc(Lua.defines.GC.RESTART, 0);
	}
};
// Add all C functions as methods on a Lua_State object.
// Auxiliary library takes precedence
(function() {
	function wrap(func) {
		return function() {
			var args = slice.call(arguments, 0);
			args.splice(0, 0, this._L);
			return func.apply(null, args);
		};
	}
	for (var i in Lua.lib) {
		Lua.State.prototype[i] = wrap(Lua.lib[i]);
	}
	for (var j in Lua.auxlib) {
		Lua.State.prototype[j] = wrap(Lua.auxlib[j]);
	}
})();
// Add functions that are normally macros
Lua.State.prototype.pop = function(n) {
	this.settop(-n-1);
};
Lua.State.prototype.isnil = function(n) {
	return this.type(n) === 0;
};
Lua.State.prototype.isnoneornil = function(n) {
	return this.type(n) <= 0;
};
Lua.State.prototype.getmetatable = function(n) {
	this.getfield(Lua.defines.REGISTRYINDEX, n);
};
Lua.State.prototype.pcall = function(n,r,f) {
	return this.pcallk(n, r, f, 0, null);
};
Lua.State.prototype.tonumber = function(n) {
	return this.tonumberx(n, null);
};

// Debugging
Lua.State.prototype.printStack = function() {
	for(var j=1;j<=this.gettop();j++){
		var t = this.type(j);
		console.log(j, this.typename(t), (function(t){switch(t){
			case Lua.defines.T.NUMBER:
				return this.tonumber(j);
			case Lua.defines.T.STRING:
				return this.raw_tostring(j);
			case Lua.defines.T.USERDATA:
				return this.touserdata(j);
			default:
				return;
		}}).call(this, t));
	}
};
// Add handy wrappers to make for idiomatic js
Lua.State.prototype.pushstring = function (str) {
	var chars = emscripten.intArrayFromString(str, true);
	this.pushlstring(chars, chars.length);
};
Lua.State.prototype.raw_tostring = function(i) {
	var l = emscripten.allocate(4, "i32", emscripten.ALLOC_STACK);
	var p = Lua.lib.tolstring(this._L, i || -1, l);
	if (p === 0 /* NULL */) return null;
	return emscripten.Pointer_stringify(p, emscripten.getValue(l, "i32"));
};
// This version calls __tostring metamethod
Lua.State.prototype.tostring = function(i) {
	var l = emscripten.allocate(4, "i32", emscripten.ALLOC_STACK);
	var p = this.tolstring(i || -1, l);
	return emscripten.Pointer_stringify(p, emscripten.getValue(l, "i32"));
};
Lua.State.prototype.lua_to_js = function(i) {
	switch(this.type(i)) {
		case -1: // LUA_TNONE
		case 0: // LUA_TNIL
			return void 0;
		case 1: // LUA_TBOOLEAN
			return this.toboolean(i)!==0;
		case 2: // LUA_TLIGHTUSERDATA
			return this.touserdata(i);
		case 3: // LUA_TNUMBER
			return this.tonumberx(i);
		case 4: // LUA_TSTRING
			return this.raw_tostring(i);
		case 7: // LUA_TUSERDATA
			var box = this.testudata(i, "_PROXY_MT");
			if (box !== /* NULL */ 0) {
				var id = emscripten.getValue(box, "double");
				return Lua.refs[id];
			}
			/* fall through */
		default: // LUA_TTABLE, LUA_TFUNCTION, LUA_TTHREAD
			return new Lua.Proxy(this, i);
	}
};
Lua.State.prototype.pushjs = function(ob) {
	var i = Lua.refs.indexOf(ob);
	if (i !== -1) {
		this.getfield(Lua.defines.REGISTRYINDEX, "wrapped");
		this.pushnumber(i);
		this.gettable(-2);
		if (!this.isnil(-1)) {
			this.remove(this.gettop()-2+1); // Remove "wrapped" from the stack; remove can't take a psuedo index
			return;
		} else {
			// Object has been removed from weak table, but hasn't been collected yet.
			this.pop(2);
		}
	}
	i = Lua.refs_i++;
	Lua.refs[i] = ob;
	var box = this.newuserdata(8);
	emscripten.setValue(box, i, "double");
	this.setmetatable("_PROXY_MT");
	// Save in lua table
	this.getfield(Lua.defines.REGISTRYINDEX, "wrapped");
	this.pushnumber(i);
	this.pushvalue(-3);
	this.settable(-3);
	this.pop(1); // pop "wrapped"
};
// Get main lua_State of given thread
var getmain = function(L) {
	L.rawgeti(Lua.defines.REGISTRYINDEX, Lua.defines.RIDX_MAINTHREAD);
	var _L = L.tothread(-1);
	L.pop(1);
	return _L;
}
Lua.State.prototype.push = function(ob) {
	switch (typeof ob) {
		case "boolean":
			return this.pushboolean(ob?1:0);
		case "number":
			return this.pushnumber(ob);
		case "string":
			return this.pushstring(ob);
		case "undefined":
			return this.pushnil();
		default:
			if (typeof ob === "function" && ob.L instanceof Lua.State && ob.L._L === getmain(this)) { // Is Lua.Proxy object for this state
				return ob.push();
			}
			return this.pushjs(ob);
	}
};
Lua.State.prototype.load = function(code, name, mode) {
	var chars = emscripten.intArrayFromString(code, true);
	if (this.loadbufferx(chars, chars.length, name, mode) !== 0) {
		throw new Lua.Error(this, -1);
	}
	var r = new Lua.Proxy(this, -1);
	this.pop(1);
	return r;
};
Lua.State.prototype.execute = function(code) {
	var proxy = this.load(code);
	var args = slice.call(arguments, 1);
	return proxy.invoke(args);
};

Lua.Proxy = function (L, i) {
	// We want the proxy to be callable as a normal JS function
	// This means we have to attach other methods to the function manually
	// and return only the first return result
	function self() {
		var args = slice.call(arguments, 0);
		args.splice(0, 0, this);
		return self.invoke(args, 1)[0];
	}

	// Use the main stack for calling
	var _L = getmain(L);
	self.L = (L._L == _L)?L:new Lua.State(_L);

	// Push the given index (luaL_ref pops it)
	L.pushvalue(i);
	self.ref = L.ref(Lua.defines.REGISTRYINDEX);

	// Add methods
	self.invoke   = Lua.Proxy.invoke;
	self.push     = Lua.Proxy.push;
	self.free     = Lua.Proxy.free;
	self.toString = Lua.Proxy.toString;
	self.get      = Lua.Proxy.get;
	self.set      = Lua.Proxy.set;

	return self;
};
Lua.Proxy.push = function() {
	this.L.rawgeti(Lua.defines.REGISTRYINDEX, this.ref);
};
Lua.Proxy.free = function() {
	this.L.unref(Lua.defines.REGISTRYINDEX, this.ref);
	this.ref = Lua.defines.NOREF;
};
Lua.Proxy.invoke = function(args, n_results) {
	if (this.L.checkstack(1+1+arguments.length)===0) throw "Out of stack space";
	if ((n_results === void 0) || (n_results === null)) {
		n_results = Lua.defines.MULTRET;
	}
	var pre = this.L.gettop();
	this.L.pushcclosure(Lua.cfuncs.traceback, 0);
	this.push();
	for (var i=0; i<args.length; i++) {
		this.L.push(args[i]);
	}
	if (this.L.pcall(args.length, n_results, pre+1) !== 0) {
		var err = this.L.lua_to_js(-1);
		this.L.settop(pre);
		throw err;
	}
	var top = this.L.gettop();
	var results=[];
	for (var j=pre+2; j<=top; j++) {
		results.push(this.L.lua_to_js(j));
	}
	this.L.settop(pre);
	return results;
};
Lua.Proxy.toString = function() {
	this.push();
	var s = this.L.tostring(-1);
	this.L.pop(2);
	return s;
};
Lua.Proxy.get = function(key) {
	this.push();
	this.L.push(key);
	this.L.gettable(-2);
	var res = this.L.lua_to_js(-1);
	this.L.pop(2); // Pop table + result
	return res;
};
Lua.Proxy.set = function(key, value) {
	this.push();
	this.L.push(key);
	this.L.push(value);
	this.L.settable(-3);
	var res = this.L.lua_to_js(-1);
	this.L.pop(2); // Pop table + result
	return res;
};

Lua.init = function() {
	// Create arbitraily "primary" lua state
	var L = exports.L = new Lua.State();
	L.execute("dofile'js.lua'");
	if (typeof window === 'object') {
		// Run script tags on page
		var onload = window.onload;
		window.onload = function() {
			if (onload) onload();
			Lua.executeScripts(L);
		};
	}
};
Lua.executeScripts = function(L) {
	Array.prototype.forEach.call(document.querySelectorAll('script[type=\"text\/lua\"]'), function(tag) {
		L.execute(tag.innerHTML);
	});
};
if (!emscripten.noInitialRun) Lua.init();

return Lua;
})(this, this, Module);

