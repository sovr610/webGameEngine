--local _ENV=setmetatable({},{__index=function(t,k) return _ENV[k] or window[k] end})

local function http_request(url, options, cb)
	local xhr = js.new(window.XMLHttpRequest)
	options = options or {}
	xhr:open(options.method or (options.body and "POST" or "GET"), url, cb ~= nil)
	for k,v in pairs(options.headers or {}) do
		xhr:setRequestHeader(k,v)
	end
	if cb then
		xhr.onreadystatechange = function()
			window.most_recent = xhr
			if xhr.readyState == 4 then
				xhr.onreadystatechange.free()
				xhr.onreadystatechange = nil
				return cb(xhr.responseText, xhr.status, xhr)
			end
		end
	end
	xhr:send(options.body)
	return xhr
end

local function co_http_request(u,o)
	local co = coroutine.running()
	return coroutine.yield(http_request(u,o,function(...)coroutine.resume(co,...)end))
end

local function co_sleep(n)
	local co = coroutine.running()
	return coroutine.yield(window:setTimeout(function(...)coroutine.resume(co,...)end,n*1000))
end

coroutine.resume(coroutine.create(function()
	print("STARTING")
	for i=1,400 do
		co_sleep(0.005)
	end
	print("DONE!")
end))