local st = require "util.stanza";
local xml_parse = require "dom_xml".parse

local WebSocket = assert(window.WebSocket, "WebSocket not found");

local stream_mt = setmetatable({}, { __index = verse.stream_mt });
stream_mt.__index = stream_mt;

local xmlns_stream = "http://etherx.jabber.org/streams";
local xmlns_framing = "urn:ietf:params:xml:ns:xmpp-framing";

function verse.new_websocket(logger, url)
	-- Support relative websockets
	if not url:match("^wss?://") then
		if url:sub(1,2) == "//" then
			url = window.location.protocol .. url
		elseif url:sub(1,1) == "/" then
			url = window.location.origin .. url
		else
			url = window.location.href:gsub("[^/]*$", "") .. url
		end
		url = url:gsub("^http","ws")
	end
	local stream = {
		conn = nil;
		websocket_url = url;
	};
	local self = verse.new(logger, stream);
	return setmetatable(self, stream_mt);
end

function stream_mt:connect()
	local stream = self;
	local websocket = js.new(WebSocket, self.websocket_url, "xmpp");
	self.conn = websocket;
	function websocket:onopen()
		stream:event("connected");
	end
	function websocket:onclose()
		stream:event("disconnected");
	end
	function websocket:onmessage(event)
		stream:event("incoming-raw", event.data);
	end
	self:hook("incoming-raw", function(data)
		local stanza = xml_parse(data);
		if stanza.attr.xmlns == xmlns_stream then
			return stream:event("stream-"..stanza.name, stanza);
		elseif stanza.attr.xmlns == "jabber:client" then
			return stream:event("stanza", stanza);
		else
			return stream:event("stream/"..stanza.attr.xmlns, stanza);
		end
	end)
end

function stream_mt:send(data)
	self:event("outgoing", data);
	if data.attr.xmlns == nil then
		data.attr.xmlns = "jabber:client"
	end
	data = tostring(data);
	self:event("outgoing-raw", data);
	self.conn:send(data);
end

function stream_mt:reopen()
	self:send(st.stanza("open", {
		xmlns = xmlns_framing;
		to = self.host;
		version = "1.0";
	}));
end

function stream_mt:close()
	self:send(st.stanza("close", {
		xmlns = xmlns_framing;
	}));
	self.conn:close();
	self.conn = nil;
end
