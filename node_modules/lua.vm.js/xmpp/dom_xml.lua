local st = require "stanza"

local function to_stanza(doc)
	local attr = { }
	for i, a in js.ipairs(doc.attributes) do
		attr[a.name] = a.value
	end
	attr.xmlns = doc.namespaceURI
	local stanza = st.stanza(doc.localName, attr)
	for i, child in js.ipairs(doc.childNodes) do
		if child.nodeType == 1 then
			stanza:add_direct_child(to_stanza(child))
		elseif child.nodeType == 3 then
			stanza:add_direct_child(child.textContent)
		end
	end
	return stanza
end


local DOMParser = window.DOMParser

-- Error checking DOMParser is ridiculous
-- When the xml is invalid, it returns a valid document, with a 'parsererror' child
-- It should have namespace "http://www.mozilla.org/newlayout/xml/parsererror.xml"
-- ... but most browsers have it incorrect; so find out what this browser does, and check against it in future
local error_ns = js.new(DOMParser)
	:parseFromString(">>>>> THIS IS INVALID XML", "application/xml").documentElement
	:getElementsByTagName("parsererror")[0].namespaceURI

local function parse(str)
	local parser = js.new(DOMParser)
	local doc = parser:parseFromString(str, "application/xml").documentElement
	-- Check for parsing errors
	local parsererror = doc:getElementsByTagName("parsererror")[0]
	if parsererror and parsererror.namespaceURI == error_ns then
		error(parsererror.textContent)
	end
	return to_stanza(doc)
end

return {
	to_stanza = to_stanza ;
	parse = parse ;
}
